/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/ontimize-report.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector } from '@angular/core';
import { MatDialog } from '@angular/material';
import { DialogService } from 'ontimize-web-ngx';
import { ReportOnDemandComponent } from '../components/report-on-demand/report-on-demand/report-on-demand.component';
import { Utils } from '../util/utils';
import * as i0 from "@angular/core";
var OntimizeReportService = /** @class */ (function () {
    function OntimizeReportService(injector) {
        this.injector = injector;
        this.dialogService = this.injector.get(DialogService);
        this.dialog = this.injector.get(MatDialog);
    }
    /**
     * @param {?} table
     * @return {?}
     */
    OntimizeReportService.prototype.openReportOnDemand = /**
     * @param {?} table
     * @return {?}
     */
    function (table) {
        Utils.openModalVisor(this.dialog, ReportOnDemandComponent, table);
    };
    OntimizeReportService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */
    OntimizeReportService.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    /** @nocollapse */ OntimizeReportService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function OntimizeReportService_Factory() { return new OntimizeReportService(i0.ɵɵinject(i0.INJECTOR)); }, token: OntimizeReportService, providedIn: "root" });
    return OntimizeReportService;
}());
export { OntimizeReportService };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    OntimizeReportService.prototype.dialogService;
    /**
     * @type {?}
     * @protected
     */
    OntimizeReportService.prototype.dialog;
    /**
     * @type {?}
     * @private
     */
    OntimizeReportService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib250aW1pemUtcmVwb3J0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9vbnRpbWl6ZS13ZWItbmd4LXJlcG9ydC8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9vbnRpbWl6ZS1yZXBvcnQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsYUFBYSxFQUFtQyxNQUFNLGtCQUFrQixDQUFDO0FBQ2xGLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDRFQUE0RSxDQUFDO0FBQ3JILE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBR3RDO0lBS0UsK0JBQ1UsUUFBa0I7UUFBbEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUUxQixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFnQixhQUFhLENBQUMsQ0FBQztRQUNyRSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFZLFNBQVMsQ0FBQyxDQUFDO0lBQ3hELENBQUM7Ozs7O0lBRUQsa0RBQWtCOzs7O0lBQWxCLFVBQW1CLEtBQXNCO1FBQ3ZDLEtBQUssQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSx1QkFBdUIsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNwRSxDQUFDOztnQkFkRixVQUFVLFNBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFOzs7O2dCQVBiLFFBQVE7OztnQ0FBN0I7Q0F1QkMsQUFoQkQsSUFnQkM7U0FmWSxxQkFBcUI7Ozs7OztJQUNoQyw4Q0FBdUM7Ozs7O0lBQ3ZDLHVDQUE0Qjs7Ozs7SUFHMUIseUNBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1hdERpYWxvZyB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsJztcbmltcG9ydCB7IERpYWxvZ1NlcnZpY2UsIElSZXBvcnRTZXJ2aWNlLCBPVGFibGVDb21wb25lbnQgfSBmcm9tICdvbnRpbWl6ZS13ZWItbmd4JztcbmltcG9ydCB7IFJlcG9ydE9uRGVtYW5kQ29tcG9uZW50IH0gZnJvbSAnLi4vY29tcG9uZW50cy9yZXBvcnQtb24tZGVtYW5kL3JlcG9ydC1vbi1kZW1hbmQvcmVwb3J0LW9uLWRlbWFuZC5jb21wb25lbnQnO1xuaW1wb3J0IHsgVXRpbHMgfSBmcm9tICcuLi91dGlsL3V0aWxzJztcblxuXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIE9udGltaXplUmVwb3J0U2VydmljZSBpbXBsZW1lbnRzIElSZXBvcnRTZXJ2aWNlIHtcbiAgcHJvdGVjdGVkIGRpYWxvZ1NlcnZpY2U6IERpYWxvZ1NlcnZpY2U7XG4gIHByb3RlY3RlZCBkaWFsb2c6IE1hdERpYWxvZztcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvclxuICApIHtcbiAgICB0aGlzLmRpYWxvZ1NlcnZpY2UgPSB0aGlzLmluamVjdG9yLmdldDxEaWFsb2dTZXJ2aWNlPihEaWFsb2dTZXJ2aWNlKTtcbiAgICB0aGlzLmRpYWxvZyA9IHRoaXMuaW5qZWN0b3IuZ2V0PE1hdERpYWxvZz4oTWF0RGlhbG9nKTtcbiAgfVxuXG4gIG9wZW5SZXBvcnRPbkRlbWFuZCh0YWJsZTogT1RhYmxlQ29tcG9uZW50KSB7XG4gICAgVXRpbHMub3Blbk1vZGFsVmlzb3IodGhpcy5kaWFsb2csIFJlcG9ydE9uRGVtYW5kQ29tcG9uZW50LCB0YWJsZSk7XG4gIH1cblxufVxuIl19