/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/o-report-store.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Injector } from "@angular/core";
import { MatDialog } from "@angular/material";
import { DialogService } from "ontimize-web-ngx";
import { OReportViewerComponent } from "../components/report/o-report-viewer/o-report-viewer.component";
import { Utils } from "../util/utils";
import { OReportService } from "./o-report.service";
var OReportStoreService = /** @class */ (function () {
    function OReportStoreService(injector) {
        this.injector = injector;
        this.dialogService = this.injector.get(DialogService);
        this.dialog = this.injector.get(MatDialog);
        this.reportService = this.injector.get(OReportService);
    }
    /**
     * @param {?} reportId
     * @param {?} parametersValues
     * @param {?} filter
     * @return {?}
     */
    OReportStoreService.prototype.openFillReport = /**
     * @param {?} reportId
     * @param {?} parametersValues
     * @param {?} filter
     * @return {?}
     */
    function (reportId, parametersValues, filter) {
        var _this = this;
        this.reportService.configureService(this.reportService.getDefaultServiceConfiguration());
        this.reportService.configureAdapter();
        /** @type {?} */
        var kv = { 'UUID': reportId };
        this.reportService.query(kv, null, 'getReport', {}).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            var e_1, _a;
            if (res && res.data.length && res.code === 0) {
                /** @type {?} */
                var parameters = res.data[0].PARAMETERS;
                /** @type {?} */
                var name_1 = res.data[0].NAME;
                /** @type {?} */
                var av = [];
                if (parameters.length > 0) {
                    av = [reportId];
                    /** @type {?} */
                    var values = Object.values(parametersValues);
                    try {
                        for (var values_1 = tslib_1.__values(values), values_1_1 = values_1.next(); !values_1_1.done; values_1_1 = values_1.next()) {
                            var value = values_1_1.value;
                            av.push(value);
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (values_1_1 && !values_1_1.done && (_a = values_1.return)) _a.call(values_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
                else {
                    av = [reportId];
                }
                /** @type {?} */
                var data = { 'params': av, 'filter': filter, 'name': name_1 };
                Utils.openModalVisor(_this.dialog, OReportViewerComponent, data);
            }
        }), (/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            if (_this.dialogService) {
                _this.dialogService.error('ERROR', 'SERVER_ERROR_MESSAGE');
            }
            console.log(err);
        }));
    };
    OReportStoreService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    OReportStoreService.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    return OReportStoreService;
}());
export { OReportStoreService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    OReportStoreService.prototype.reportService;
    /**
     * @type {?}
     * @protected
     */
    OReportStoreService.prototype.dialogService;
    /**
     * @type {?}
     * @protected
     */
    OReportStoreService.prototype.dialog;
    /**
     * @type {?}
     * @private
     */
    OReportStoreService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1yZXBvcnQtc3RvcmUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL29udGltaXplLXdlYi1uZ3gtcmVwb3J0LyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL28tcmVwb3J0LXN0b3JlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxnRUFBZ0UsQ0FBQztBQUN4RyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUVwRDtJQUtFLDZCQUNVLFFBQWtCO1FBQWxCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFFMUIsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBZ0IsYUFBYSxDQUFDLENBQUM7UUFDckUsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBWSxTQUFTLENBQUMsQ0FBQztRQUN0RCxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFpQixjQUFjLENBQUMsQ0FBQztJQUN6RSxDQUFDOzs7Ozs7O0lBRUQsNENBQWM7Ozs7OztJQUFkLFVBQWUsUUFBZ0IsRUFBRSxnQkFBd0IsRUFBRSxNQUFjO1FBQXpFLGlCQWlDQztRQWhDQyxJQUFJLENBQUMsYUFBYSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsOEJBQThCLEVBQUUsQ0FBQyxDQUFDO1FBQ3pGLElBQUksQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQzs7WUFDbEMsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRTtRQUM3QixJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxFQUFFLENBQUMsQ0FBQyxTQUFTOzs7O1FBQzNELFVBQUEsR0FBRzs7WUFDRCxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxHQUFHLENBQUMsSUFBSSxLQUFLLENBQUMsRUFBRTs7b0JBQ3hDLFVBQVUsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVU7O29CQUNuQyxNQUFJLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJOztvQkFDdkIsRUFBRSxHQUFHLEVBQUU7Z0JBQ1gsSUFBSSxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtvQkFDekIsRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7O3dCQUNaLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDOzt3QkFDNUMsS0FBa0IsSUFBQSxXQUFBLGlCQUFBLE1BQU0sQ0FBQSw4QkFBQSxrREFBRTs0QkFBckIsSUFBSSxLQUFLLG1CQUFBOzRCQUNaLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7eUJBQ2hCOzs7Ozs7Ozs7aUJBQ0Y7cUJBQU07b0JBQ0wsRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7aUJBQ2pCOztvQkFDSyxJQUFJLEdBQUcsRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQUksRUFBRTtnQkFDN0QsS0FBSyxDQUFDLGNBQWMsQ0FBQyxLQUFJLENBQUMsTUFBTSxFQUFFLHNCQUFzQixFQUFFLElBQUksQ0FBQyxDQUFBO2FBRWhFO1FBQ0gsQ0FBQzs7OztRQUNELFVBQUEsR0FBRztZQUNELElBQUksS0FBSSxDQUFDLGFBQWEsRUFBRTtnQkFDdEIsS0FBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUM5QixzQkFBc0IsQ0FBQyxDQUFDO2FBQzNCO1lBQ0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNuQixDQUFDLEVBQ0YsQ0FBQztJQUVKLENBQUM7O2dCQTlDRixVQUFVOzs7O2dCQVBVLFFBQVE7O0lBc0Q3QiwwQkFBQztDQUFBLEFBL0NELElBK0NDO1NBOUNZLG1CQUFtQjs7Ozs7O0lBQzlCLDRDQUFzQzs7Ozs7SUFDdEMsNENBQXVDOzs7OztJQUN2QyxxQ0FBMkI7Ozs7O0lBRXpCLHVDQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdG9yIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IE1hdERpYWxvZyB9IGZyb20gXCJAYW5ndWxhci9tYXRlcmlhbFwiO1xuaW1wb3J0IHsgRGlhbG9nU2VydmljZSB9IGZyb20gXCJvbnRpbWl6ZS13ZWItbmd4XCI7XG5pbXBvcnQgeyBPUmVwb3J0Vmlld2VyQ29tcG9uZW50IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvcmVwb3J0L28tcmVwb3J0LXZpZXdlci9vLXJlcG9ydC12aWV3ZXIuY29tcG9uZW50XCI7XG5pbXBvcnQgeyBVdGlscyB9IGZyb20gXCIuLi91dGlsL3V0aWxzXCI7XG5pbXBvcnQgeyBPUmVwb3J0U2VydmljZSB9IGZyb20gXCIuL28tcmVwb3J0LnNlcnZpY2VcIjtcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE9SZXBvcnRTdG9yZVNlcnZpY2Uge1xuICBwcml2YXRlIHJlcG9ydFNlcnZpY2U6IE9SZXBvcnRTZXJ2aWNlO1xuICBwcm90ZWN0ZWQgZGlhbG9nU2VydmljZTogRGlhbG9nU2VydmljZTtcbiAgcHJvdGVjdGVkIGRpYWxvZzogTWF0RGlhbG9nXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yXG4gICkge1xuICAgIHRoaXMuZGlhbG9nU2VydmljZSA9IHRoaXMuaW5qZWN0b3IuZ2V0PERpYWxvZ1NlcnZpY2U+KERpYWxvZ1NlcnZpY2UpO1xuICAgIHRoaXMuZGlhbG9nID0gdGhpcy5pbmplY3Rvci5nZXQ8TWF0RGlhbG9nPihNYXREaWFsb2cpO1xuICAgIHRoaXMucmVwb3J0U2VydmljZSA9IHRoaXMuaW5qZWN0b3IuZ2V0PE9SZXBvcnRTZXJ2aWNlPihPUmVwb3J0U2VydmljZSk7XG4gIH1cblxuICBvcGVuRmlsbFJlcG9ydChyZXBvcnRJZDogc3RyaW5nLCBwYXJhbWV0ZXJzVmFsdWVzOiBvYmplY3QsIGZpbHRlcjogb2JqZWN0KSB7XG4gICAgdGhpcy5yZXBvcnRTZXJ2aWNlLmNvbmZpZ3VyZVNlcnZpY2UodGhpcy5yZXBvcnRTZXJ2aWNlLmdldERlZmF1bHRTZXJ2aWNlQ29uZmlndXJhdGlvbigpKTtcbiAgICB0aGlzLnJlcG9ydFNlcnZpY2UuY29uZmlndXJlQWRhcHRlcigpO1xuICAgIGxldCBrdiA9IHsgJ1VVSUQnOiByZXBvcnRJZCB9O1xuICAgIHRoaXMucmVwb3J0U2VydmljZS5xdWVyeShrdiwgbnVsbCwgJ2dldFJlcG9ydCcsIHt9KS5zdWJzY3JpYmUoXG4gICAgICByZXMgPT4ge1xuICAgICAgICBpZiAocmVzICYmIHJlcy5kYXRhLmxlbmd0aCAmJiByZXMuY29kZSA9PT0gMCkge1xuICAgICAgICAgIGxldCBwYXJhbWV0ZXJzID0gcmVzLmRhdGFbMF0uUEFSQU1FVEVSUztcbiAgICAgICAgICBsZXQgbmFtZSA9IHJlcy5kYXRhWzBdLk5BTUU7XG4gICAgICAgICAgbGV0IGF2ID0gW107XG4gICAgICAgICAgaWYgKHBhcmFtZXRlcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgYXYgPSBbcmVwb3J0SWRdO1xuICAgICAgICAgICAgbGV0IHZhbHVlcyA9IE9iamVjdC52YWx1ZXMocGFyYW1ldGVyc1ZhbHVlcyk7XG4gICAgICAgICAgICBmb3IgKGxldCB2YWx1ZSBvZiB2YWx1ZXMpIHtcbiAgICAgICAgICAgICAgYXYucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGF2ID0gW3JlcG9ydElkXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgZGF0YSA9IHsgJ3BhcmFtcyc6IGF2LCAnZmlsdGVyJzogZmlsdGVyLCAnbmFtZSc6IG5hbWUgfTtcbiAgICAgICAgICBVdGlscy5vcGVuTW9kYWxWaXNvcih0aGlzLmRpYWxvZywgT1JlcG9ydFZpZXdlckNvbXBvbmVudCwgZGF0YSlcblxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZXJyID0+IHtcbiAgICAgICAgaWYgKHRoaXMuZGlhbG9nU2VydmljZSkge1xuICAgICAgICAgIHRoaXMuZGlhbG9nU2VydmljZS5lcnJvcignRVJST1InLFxuICAgICAgICAgICAgJ1NFUlZFUl9FUlJPUl9NRVNTQUdFJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgIH1cbiAgICApO1xuXG4gIH1cbn0iXX0=