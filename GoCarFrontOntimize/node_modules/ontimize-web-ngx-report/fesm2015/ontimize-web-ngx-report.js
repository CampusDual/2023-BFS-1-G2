import { Injectable, Injector, ɵɵdefineInjectable, ɵɵinject, INJECTOR, Component, ViewEncapsulation, Inject, Optional, ViewChild, Pipe, NgModule } from '@angular/core';
import { OntimizeEEService, OErrorDialogManager, Util, Observable, DialogService, OTableBaseDialogClass, AppConfig, OTranslateService, SnackBarService, OTableComponent, O_REPORT_SERVICE, OntimizeWebModule } from 'ontimize-web-ngx';
import { Subject } from 'rxjs';
import { MatDialogRef, MAT_DIALOG_DATA, MatDialog, MatSelectionList } from '@angular/material';
import { HttpRequest, HttpEventType, HttpHeaders } from '@angular/common/http';
import { share } from 'rxjs/operators';
import { moveItemInArray, DragDropModule } from '@angular/cdk/drag-drop';
import { MatDialogRef as MatDialogRef$1, MAT_DIALOG_DATA as MAT_DIALOG_DATA$1, MatDialog as MatDialog$1 } from '@angular/material/dialog';
import { SelectionModel } from '@angular/cdk/collections';
import { FormGroup, FormControl, Validators } from '@angular/forms';
import { FlexLayoutModule } from '@angular/flex-layout';
import { NgxExtendedPdfViewerModule } from 'ngx-extended-pdf-viewer';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/o-alert.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class OAlertService {
    constructor() {
        // Observable string
        this.alertSource = new Subject();
        // Observable string streams
        this.alert$ = this.alertSource.asObservable();
    }
    // Service message commands
    /**
     * @param {?} alert
     * @return {?}
     */
    announceAlert(alert) {
        this.alertSource.next(alert);
    }
}
OAlertService.decorators = [
    { type: Injectable }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    OAlertService.prototype.alertSource;
    /** @type {?} */
    OAlertService.prototype.alert$;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/o-report.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class OReportService extends OntimizeEEService {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        super(injector);
        this.injector = injector;
        super.configureService(this.getDefaultServiceConfiguration());
        this.oErrorDialogManager = injector.get(OErrorDialogManager);
    }
    /**
     * @param {?} reportparams
     * @return {?}
     */
    createReport(reportparams) {
        /** @type {?} */
        const body = JSON.stringify(reportparams);
        /** @type {?} */
        const url = this.urlBase + '/dynamicjasper/report';
        return this.doRequest({
            method: 'POST',
            url: url,
            body: body
        });
    }
    /**
     * @param {?=} preferencesparams
     * @return {?}
     */
    saveAsPreferences(preferencesparams) {
        /** @type {?} */
        const body = JSON.stringify(preferencesparams);
        /** @type {?} */
        const url = this.urlBase + '/preferences/save';
        return this.doRequest({
            method: 'POST',
            url: url,
            body: body
        });
    }
    /**
     * @param {?} id
     * @param {?=} preferencesparams
     * @return {?}
     */
    savePreferences(id, preferencesparams) {
        /** @type {?} */
        const body = JSON.stringify(preferencesparams);
        /** @type {?} */
        const url = this.urlBase + '/preferences/update/' + id;
        return this.doRequest({
            method: 'PUT',
            url: url,
            body: body
        });
    }
    /**
     * @param {?=} entity
     * @param {?=} service
     * @return {?}
     */
    getPreferences(entity, service) {
        /** @type {?} */
        const url = this.urlBase + '/preferences/preferences?entity=' + entity + '&service=' + service + "&type=REPORT";
        return this.doRequest({
            method: 'GET',
            url: url
        });
    }
    /**
     * @param {?=} functionparams
     * @return {?}
     */
    getFunctions(functionparams) {
        /** @type {?} */
        const body = JSON.stringify(functionparams);
        /** @type {?} */
        const url = this.urlBase + '/dynamicjasper/functionsName';
        return this.doRequest({
            method: 'POST',
            url: url,
            body: body
        });
    }
    /**
     * @param {?=} id
     * @return {?}
     */
    deletePreferences(id) {
        /** @type {?} */
        const url = this.urlBase + '/preferences/remove/' + id;
        return this.doRequest({
            method: 'DELETE',
            url: url
        });
    }
    /**
     * overridden method to add error callback for all requests
     * @param {?} param
     * @return {?}
     */
    doRequest(param) {
        return super.doRequest({
            method: param.method,
            url: param.url,
            body: param.body,
            errorCallBack: this.errorCallBack
        });
    }
    /**
     * @param {?} httpErrorResponse
     * @return {?}
     */
    errorCallBack(httpErrorResponse) {
        /** @type {?} */
        const error = httpErrorResponse.error;
        if (Util.isObject(error)) {
            if (error['code'] === 1 && Util.isDefined(error['message'])) {
                this.showNotificationError(error['message']);
                return;
            }
        }
        this.showNotificationError('MESSAGES.ERROR_QUERY');
    }
    /**
     * @param {?} error
     * @return {?}
     */
    showNotificationError(error) {
        this.oErrorDialogManager.openErrorDialog(error);
    }
    /**
     * @param {?} files
     * @param {?} entity
     * @param {?=} data
     * @return {?}
     */
    upload(files, entity, data) {
        /** @type {?} */
        const dataObservable = new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        observer => {
            /** @type {?} */
            let url = `${this.urlBase}/reportstore/${entity}`;
            /** @type {?} */
            const toUpload = new FormData();
            files.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                item.prepareToUpload();
                item.isUploading = true;
                toUpload.append('name', item.name);
                toUpload.append('file', item.file);
            }));
            if (data) {
                toUpload.append('data', JSON.stringify(data));
            }
            /** @type {?} */
            const request = new HttpRequest('POST', url, toUpload, {
                headers: this.buildHeadersReport(),
                reportProgress: true
            });
            this.httpClient.request(request).subscribe((/**
             * @param {?} resp
             * @return {?}
             */
            resp => {
                if (HttpEventType.UploadProgress === resp.type) {
                    // Upload progress event received
                    /** @type {?} */
                    const progressData = {
                        loaded: resp.loaded,
                        total: resp.total
                    };
                    observer.next(progressData);
                }
                else if (HttpEventType.Response === resp.type) {
                    // Full response received
                    if (resp.body) {
                        this.bodyCode(resp, observer);
                    }
                    else {
                        observer.next(resp.body);
                    }
                }
            }), (/**
             * @param {?} error
             * @return {?}
             */
            error => {
                console.error(error);
                if (error.status === 401) {
                    this.authService.logout();
                }
                else {
                    observer.error(error);
                }
            }), (/**
             * @return {?}
             */
            () => observer.complete()));
        }));
        return dataObservable.pipe(share());
    }
    /**
     * @protected
     * @param {?} resp
     * @param {?} observer
     * @return {?}
     */
    bodyCode(resp, observer) {
        if (resp.body['code'] === 3) {
            this.authService.logout();
        }
        else if (resp.body['code'] === 1) {
            observer.error(resp.body['message']);
        }
        else if (resp.body['code'] === 0) {
            // RESPONSE
            observer.next(resp.body);
        }
        else {
            // Unknow state -> error
            observer.error('Service unavailable');
        }
    }
    /**
     * @param {?=} _kv
     * @param {?=} _av
     * @param {?=} entity
     * @param {?=} _sqltypes
     * @param {?=} offset
     * @param {?=} _pagesize
     * @param {?=} _orderby
     * @return {?}
     */
    advancedQuery(_kv, _av, entity, _sqltypes, offset, _pagesize, _orderby) {
        offset = (Util.isDefined(offset)) ? offset : this.offset;
        // Calculate page
        /** @type {?} */
        let page = 0;
        if (Util.isDefined(offset)) {
            page = Math.trunc(offset / 10) + 1;
        }
        /** @type {?} */
        let url = this.urlBase + '/reportstore/' + entity + '/?format=json' + '&page=' + page;
        return this.doRequest({
            method: 'GET',
            url: url
        });
    }
    /**
     * @param {?=} kv
     * @param {?=} _av
     * @param {?=} entity
     * @param {?=} _sqltypes
     * @return {?}
     */
    query(kv, _av, entity, _sqltypes) {
        /** @type {?} */
        const identifier = kv['UUID'];
        /** @type {?} */
        let url = '';
        if (Object.keys(kv).length === 0) {
            url = `${this.urlBase}/reportstore/${entity}`;
        }
        else {
            url = `${this.urlBase}/reportstore/${entity}/` + identifier;
        }
        return this.doRequest({
            method: 'GET',
            url: url
        });
    }
    /**
     * @param {?=} av
     * @param {?=} entity
     * @param {?=} _sqltypes
     * @param {?=} filter
     * @return {?}
     */
    fillReport(av, entity, _sqltypes, filter) {
        /** @type {?} */
        const identifier = av[0];
        /** @type {?} */
        let params = '';
        for (let i = 1; i < av.length; i++)
            params = params + av[i].toString() + ',';
        /** @type {?} */
        let body = JSON.stringify({
            params: params,
            filter: filter
        });
        /** @type {?} */
        let url = `${this.urlBase}/reportstore/${entity}/` + identifier;
        return this.doRequest({
            method: 'POST',
            url: url,
            body: body
        });
    }
    /**
     * @param {?=} kv
     * @param {?=} _entity
     * @param {?=} _sqltypes
     * @return {?}
     */
    delete(kv, _entity, _sqltypes) {
        /** @type {?} */
        const identifier = kv.valueOf()[Object.keys(kv)[0]];
        /** @type {?} */
        let url = `${this.urlBase}/reportstore/removeReport/` + identifier;
        return this.doRequest({
            method: 'DELETE',
            url: url
        });
    }
    /**
     * @param {?=} kv
     * @param {?=} av
     * @param {?=} _entity
     * @param {?=} _sqltypes
     * @return {?}
     */
    update(kv, av, _entity, _sqltypes) {
        /** @type {?} */
        const identifier = kv.valueOf()[Object.keys(kv)[0]];
        /** @type {?} */
        let url = `${this.urlBase}/reportstore/updateReport/` + identifier;
        return this.doRequest({
            method: 'PUT',
            url: url,
            body: av
        });
    }
    /**
     * @protected
     * @return {?}
     */
    buildHeadersReport() {
        /** @type {?} */
        let headers = new HttpHeaders({ 'Access-Control-Allow-Origin': '*' });
        /** @type {?} */
        const sessionId = this.authService.getSessionInfo().id;
        if (Util.isDefined(sessionId)) {
            headers = headers.append('Authorization', 'Bearer ' + sessionId);
        }
        return headers;
    }
}
OReportService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
OReportService.ctorParameters = () => [
    { type: Injector }
];
/** @nocollapse */ OReportService.ngInjectableDef = ɵɵdefineInjectable({ factory: function OReportService_Factory() { return new OReportService(ɵɵinject(INJECTOR)); }, token: OReportService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @protected
     */
    OReportService.prototype.oErrorDialogManager;
    /**
     * @type {?}
     * @protected
     */
    OReportService.prototype.injector;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/util/constants.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class Constants {
}
Constants.DEFAULT_WIDTH_DIALOG = '70%';
Constants.DEFAULT_HEIGHT_DIALOG = '90%';
Constants.DEFAULT_WIDTH_COLUMN_STYLE = 85;
Constants.DEFAULT_ALIGNMENT_COLUMN_STYLE = 'left';
Constants.DEFAULT_COLUMN_FUNCTION = { columnName: 'TOTAL', type: 'TOTAL' };
if (false) {
    /** @type {?} */
    Constants.DEFAULT_WIDTH_DIALOG;
    /** @type {?} */
    Constants.DEFAULT_HEIGHT_DIALOG;
    /** @type {?} */
    Constants.DEFAULT_WIDTH_COLUMN_STYLE;
    /** @type {?} */
    Constants.DEFAULT_ALIGNMENT_COLUMN_STYLE;
    /** @type {?} */
    Constants.DEFAULT_COLUMN_FUNCTION;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/util/utils.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class Utils {
    /**
     * @param {?} fullscreen
     * @param {?} dialogRef
     * @return {?}
     */
    static setFullscreenDialog(fullscreen, dialogRef) {
        if (!fullscreen) {
            dialogRef.updateSize("100%", "100%");
        }
        else {
            dialogRef.updateSize(Constants.DEFAULT_WIDTH_DIALOG, Constants.DEFAULT_HEIGHT_DIALOG);
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    static cloneObject(data) {
        return JSON.parse(JSON.stringify(data));
    }
    /**
     * @param {?} dialog
     * @param {?} component
     * @param {?} data
     * @return {?}
     */
    static openModalVisor(dialog, component, data) {
        dialog.open(component, {
            maxWidth: '100vw',
            maxHeight: '100vh',
            height: Constants.DEFAULT_HEIGHT_DIALOG,
            width: Constants.DEFAULT_WIDTH_DIALOG,
            panelClass: ['o-dialog-class', 'o-table-dialog', 'o-report'],
            data: data
        });
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/report/o-report-viewer/o-report-viewer.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class OReportViewerComponent {
    /**
     * @param {?} dialogRef
     * @param {?} reportService
     * @param {?} dialogService
     * @param {?} data
     */
    constructor(dialogRef, reportService, dialogService, data) {
        this.dialogRef = dialogRef;
        this.reportService = reportService;
        this.dialogService = dialogService;
        this.data = data;
        this.pdf = '';
        this.name = '';
        this.fullscreen = false;
        this.reportService.configureService(this.reportService.getDefaultServiceConfiguration());
        this.reportService.configureAdapter();
        this.name = this.data.name;
        this.reportService.fillReport(this.data['params'], 'fillReport', {}, this.data['filter']).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            if (res && res.data.length && res.code === 0) {
                this.pdf = res.data[0].file;
            }
        }), (/**
         * @param {?} err
         * @return {?}
         */
        err => {
            if (this.dialogService) {
                this.dialogService.error('ERROR', 'SERVER_ERROR_MESSAGE');
            }
            console.log(err);
        }));
    }
    /**
     * @return {?}
     */
    setFullscreenDialog() {
        Utils.setFullscreenDialog(this.fullscreen, this.dialogRef);
        this.fullscreen = !this.fullscreen;
    }
}
OReportViewerComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-report-viewer',
                template: "<div mat-dialog-title class=\"dialog-title\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n  {{ name }}\n  <div>\n    <mat-icon aria-label=\"fullscreen dialog\" (click)=\"setFullscreenDialog()\">\n      <ng-container *ngIf=\"fullscreen\">fullscreen_exit</ng-container>\n      <ng-container *ngIf=\"!fullscreen\">fullscreen</ng-container>\n    </mat-icon>\n    <mat-icon svgIcon=\"ontimize:close\" [mat-dialog-close]=\"true\"></mat-icon>\n  </div>\n</div>\n<div #dialog mat-dialog-content class=\"dialog-container\">\n  <ngx-extended-pdf-viewer [base64Src]=\"pdf\" [filenameForDownload]=\"name\" [showBookmarkButton]=\"false\" [showPropertiesButton]=\"false\"\n    [showOpenFileButton]=\"false\" useBrowserLocale=\"true\" delayFirstView=\"1000\" [textLayer]=\"true\"></ngx-extended-pdf-viewer>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                host: {
                    '[class.o-report-viewer]': 'true'
                },
                styles: [".o-dialog-class .mat-dialog-container .o-report-viewer .mat-dialog-title .mat-icon{cursor:pointer}.o-dialog-class .mat-dialog-container .o-report-viewer .mat-dialog-content{max-height:calc(100% - 36px - 8px);height:100%;padding-top:8px;padding-bottom:0}.o-dialog-class .mat-dialog-container .o-report-viewer ngx-extended-pdf-viewer .zoom{height:100%}"]
            }] }
];
/** @nocollapse */
OReportViewerComponent.ctorParameters = () => [
    { type: MatDialogRef },
    { type: OReportService },
    { type: DialogService },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
];
if (false) {
    /** @type {?} */
    OReportViewerComponent.prototype.pdf;
    /** @type {?} */
    OReportViewerComponent.prototype.name;
    /** @type {?} */
    OReportViewerComponent.prototype.fullscreen;
    /** @type {?} */
    OReportViewerComponent.prototype.dialogRef;
    /**
     * @type {?}
     * @private
     */
    OReportViewerComponent.prototype.reportService;
    /**
     * @type {?}
     * @protected
     */
    OReportViewerComponent.prototype.dialogService;
    /** @type {?} */
    OReportViewerComponent.prototype.data;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/o-report-store.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class OReportStoreService {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        this.injector = injector;
        this.dialogService = this.injector.get(DialogService);
        this.dialog = this.injector.get(MatDialog);
        this.reportService = this.injector.get(OReportService);
    }
    /**
     * @param {?} reportId
     * @param {?} parametersValues
     * @param {?} filter
     * @return {?}
     */
    openFillReport(reportId, parametersValues, filter) {
        this.reportService.configureService(this.reportService.getDefaultServiceConfiguration());
        this.reportService.configureAdapter();
        /** @type {?} */
        let kv = { 'UUID': reportId };
        this.reportService.query(kv, null, 'getReport', {}).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            if (res && res.data.length && res.code === 0) {
                /** @type {?} */
                let parameters = res.data[0].PARAMETERS;
                /** @type {?} */
                let name = res.data[0].NAME;
                /** @type {?} */
                let av = [];
                if (parameters.length > 0) {
                    av = [reportId];
                    /** @type {?} */
                    let values = Object.values(parametersValues);
                    for (let value of values) {
                        av.push(value);
                    }
                }
                else {
                    av = [reportId];
                }
                /** @type {?} */
                const data = { 'params': av, 'filter': filter, 'name': name };
                Utils.openModalVisor(this.dialog, OReportViewerComponent, data);
            }
        }), (/**
         * @param {?} err
         * @return {?}
         */
        err => {
            if (this.dialogService) {
                this.dialogService.error('ERROR', 'SERVER_ERROR_MESSAGE');
            }
            console.log(err);
        }));
    }
}
OReportStoreService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
OReportStoreService.ctorParameters = () => [
    { type: Injector }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    OReportStoreService.prototype.reportService;
    /**
     * @type {?}
     * @protected
     */
    OReportStoreService.prototype.dialogService;
    /**
     * @type {?}
     * @protected
     */
    OReportStoreService.prototype.dialog;
    /**
     * @type {?}
     * @private
     */
    OReportStoreService.prototype.injector;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/types/report-preferences.type.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DefaultOReportPreferences {
    constructor() {
        this.title = '';
        this.subtitle = '';
        this.vertical = true;
        this.columns = [];
        this.groups = [];
        this.functions = [];
        this.style = {
            grid: false, rowNumber: false, columnName: true, backgroundOnOddRows: false, hideGroupDetails: false, groupNewPage: false, firstGroupNewPage: false
        };
        this.orderBy = [];
        this.entity = '';
        this.service = '';
    }
}
if (false) {
    /** @type {?} */
    DefaultOReportPreferences.prototype.title;
    /** @type {?} */
    DefaultOReportPreferences.prototype.subtitle;
    /** @type {?} */
    DefaultOReportPreferences.prototype.vertical;
    /** @type {?} */
    DefaultOReportPreferences.prototype.columns;
    /** @type {?} */
    DefaultOReportPreferences.prototype.groups;
    /** @type {?} */
    DefaultOReportPreferences.prototype.functions;
    /** @type {?} */
    DefaultOReportPreferences.prototype.style;
    /** @type {?} */
    DefaultOReportPreferences.prototype.orderBy;
    /** @type {?} */
    DefaultOReportPreferences.prototype.entity;
    /** @type {?} */
    DefaultOReportPreferences.prototype.service;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/report-on-demand/apply-configuration/apply-configuration-dialog.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ApplyConfigurationDialogComponent {
    /**
     * @param {?} dialogService
     * @param {?} reportsService
     * @param {?} dialogo
     * @param {?} data
     */
    constructor(dialogService, reportsService, dialogo, data) {
        this.dialogService = dialogService;
        this.reportsService = reportsService;
        this.dialogo = dialogo;
        this.data = data;
        this.configurationListData = [];
        this.getConfigurations();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.configurationList.selectedOptions = new SelectionModel(false);
    }
    /**
     * @return {?}
     */
    loadConfiguration() {
        this.dialogo.close(this.selectedConfiguration);
    }
    /**
     * @return {?}
     */
    remove() {
        this.dialogService.confirm('CONFIRM', 'TABLE.DIALOG.CONFIRM_REMOVE_CONFIGURATION').then((/**
         * @param {?} result
         * @return {?}
         */
        result => {
            if (result) {
                this.reportsService.deletePreferences(this.selectedConfiguration.ID).subscribe((/**
                 * @param {?} res
                 * @return {?}
                 */
                res => {
                    if (res && res.code === 0) {
                        this.getConfigurations();
                    }
                }));
            }
        }));
    }
    /**
     * @param {?} option
     * @return {?}
     */
    onClickConfigurationList(option) {
        this.selectedConfiguration = option;
    }
    /**
     * @return {?}
     */
    getConfigurations() {
        this.reportsService.getPreferences(this.data.entity, this.data.service).subscribe((/**
         * @param {?} resp
         * @return {?}
         */
        resp => {
            if (resp.isSuccessful()) {
                this.setDataArray(resp.data);
            }
        }));
    }
    /**
     * @param {?} data
     * @return {?}
     */
    setDataArray(data) {
        if (Util.isArray(data)) {
            this.configurationListData = data;
        }
        else {
            this.configurationListData = [];
        }
    }
}
ApplyConfigurationDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'apply-configuration-dialog',
                template: "<span mat-dialog-title>{{ 'TABLE.BUTTONS.APPLY_CONFIGURATION' | oTranslate }}</span>\n<mat-dialog-content fxLayout=\"column\">\n  <div mat-subheader>{{ 'TABLE.DIALOG.APPLY_CONFIGURATION' | oTranslate }}</div>\n  <mat-selection-list #configurationList dense class=\"apply-configuration-dialog-list\">\n    <mat-list-option (click)=\"onClickConfigurationList(configuration)\" checkboxPosition=\"before\"\n      *ngFor=\"let configuration of configurationListData\" [value]=\"configuration\">\n      <span matLine>{{ configuration.NAME }}</span>\n      <span matLine>{{ configuration.DESCRIPTION }}</span>\n    </mat-list-option>\n  </mat-selection-list>\n</mat-dialog-content>\n\n<mat-dialog-actions align=\"end\">\n  <button type=\"button\" (click)=\"remove()\" mat-stroked-button [disabled]=\"configurationList.selectedOptions.selected.length!==1\"\n    class=\"o-button-danger\">\n    {{ 'DELETE' | oTranslate }}\n  </button>\n  <span fxFlex></span>\n  <button type=\"button\" mat-stroked-button [mat-dialog-close]=\"false\" class=\"o-button-default\">{{ 'CANCEL' | oTranslate }}</button>\n  <button type=\"button\" (click)=\"loadConfiguration()\" mat-stroked-button [mat-dialog-close]=\"true\"\n    [disabled]=\"configurationList.selectedOptions.selected.length!==1\" class=\"o-button-primary\">{{ 'OK' | oTranslate}}</button>\n</mat-dialog-actions>\n"
            }] }
];
/** @nocollapse */
ApplyConfigurationDialogComponent.ctorParameters = () => [
    { type: DialogService },
    { type: OReportService },
    { type: MatDialogRef },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DIALOG_DATA,] }] }
];
ApplyConfigurationDialogComponent.propDecorators = {
    configurationList: [{ type: ViewChild, args: [MatSelectionList, { static: true },] }]
};
if (false) {
    /**
     * @type {?}
     * @protected
     */
    ApplyConfigurationDialogComponent.prototype.configurationList;
    /** @type {?} */
    ApplyConfigurationDialogComponent.prototype.configurationListData;
    /** @type {?} */
    ApplyConfigurationDialogComponent.prototype.selectedConfiguration;
    /**
     * @type {?}
     * @private
     */
    ApplyConfigurationDialogComponent.prototype.dialogService;
    /**
     * @type {?}
     * @private
     */
    ApplyConfigurationDialogComponent.prototype.reportsService;
    /** @type {?} */
    ApplyConfigurationDialogComponent.prototype.dialogo;
    /** @type {?} */
    ApplyConfigurationDialogComponent.prototype.data;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/report-on-demand/save-preferences-dialog/save-preferences-dialog.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SavePreferencesDialogComponent extends OTableBaseDialogClass {
    /**
     * @param {?} dialogo
     * @param {?} injector
     */
    constructor(dialogo, injector) {
        super(injector);
        this.dialogo = dialogo;
        this.injector = injector;
        this.formGroup = new FormGroup({
            name: new FormControl('', [
                Validators.required
            ]),
            description: new FormControl('')
        });
        this.setFormControl(this.formGroup.get('name'));
    }
    /**
     * @return {?}
     */
    save() {
        this.dialogo.close({ "name": this.name, "description": this.description });
    }
}
SavePreferencesDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-save-preferences-dialog',
                template: "<span mat-dialog-title>{{ 'TABLE.BUTTONS.SAVE_CONFIGURATION' | oTranslate }}</span>\n\n<mat-dialog-content>\n  <div mat-subheader>{{ 'TABLE.DIALOG.SAVE_CONFIGURATION' | oTranslate }}</div>\n  <form #form [formGroup]=\"formGroup\" fxLayout=\"column\">\n    <mat-form-field>\n      <input [(ngModel)]=\"name\" matInput [matTooltip]=\"tooltipText\" [matTooltipClass]=\"tooltipClass\"\n        placeholder=\"{{ 'TABLE.DIALOG.CONFIGURATION_NAME' | oTranslate }}\" formControlName=\"name\" required>\n      <mat-error *oMatError=\"hasError(formGroup.controls['name'], 'required')\">{{ 'FORM_VALIDATION.REQUIRED' | oTranslate }}</mat-error>\n    </mat-form-field>\n\n    <mat-form-field>\n      <textarea [(ngModel)]=\"description\" matInput placeholder=\"{{ 'TABLE.DIALOG.CONFIGURATION_DESCRIPTION' | oTranslate }}\"\n        formControlName=\"description\" rows=\"4\" cols=\"50\"></textarea>\n    </mat-form-field>\n\n  </form>\n</mat-dialog-content>\n\n<mat-dialog-actions align=\"end\">\n  <button type=\"button\" mat-stroked-button class=\"mat-primary\" [mat-dialog-close]=\"false\" class=\"o-button-default\">\n    {{ 'CANCEL' | oTranslate }}</button>\n  <button type=\"button\" mat-stroked-button class=\"mat-primary\" (click)=\"save()\" [mat-dialog-close]=\"true\" [disabled]=\"formGroup.invalid\">\n    {{ 'SAVE' | oTranslate }}</button>\n</mat-dialog-actions>\n"
            }] }
];
/** @nocollapse */
SavePreferencesDialogComponent.ctorParameters = () => [
    { type: MatDialogRef },
    { type: Injector }
];
if (false) {
    /** @type {?} */
    SavePreferencesDialogComponent.prototype.name;
    /** @type {?} */
    SavePreferencesDialogComponent.prototype.description;
    /** @type {?} */
    SavePreferencesDialogComponent.prototype.formGroup;
    /** @type {?} */
    SavePreferencesDialogComponent.prototype.dialogo;
    /**
     * @type {?}
     * @protected
     */
    SavePreferencesDialogComponent.prototype.injector;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/report-on-demand/select-function-dialog/select-function-dialog.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SelectFunctionDialogComponent {
    /**
     * @param {?} dialogo
     * @param {?} reportFunction
     */
    constructor(dialogo, reportFunction) {
        this.dialogo = dialogo;
        this.reportFunction = reportFunction;
        this.functions = [
            { id: 'SUM', value: 'DIALOG.SELECT_FUNCTION.SUM' },
            { id: 'AVERAGE', value: 'DIALOG.SELECT_FUNCTION.AVG' },
            { id: 'MAX', value: 'DIALOG.SELECT_FUNCTION.MAX' },
            { id: 'MIN', value: 'DIALOG.SELECT_FUNCTION.MIN' }
        ];
        this.selectedFunction = reportFunction.type;
    }
    /**
     * @return {?}
     */
    save() {
        this.dialogo.close({ columnName: this.reportFunction.columnName, type: this.selectedFunction });
    }
}
SelectFunctionDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-select-function-dialog',
                template: "<span mat-dialog-title> {{ 'DIALOG.SELECT_FUNCTION.TITLE' | oReportsTranslate }}</span>\n\n<mat-dialog-content>\n  <div mat-subheader>{{ 'DIALOG.SELECT_FUNCTION.DESCRIPTION' | oReportsTranslate }}</div>\n\n  <mat-radio-group name=\"Function\" [(ngModel)]=\"selectedFunction\" fxLayout=\"column\" fxLayoutAlign=\"start start\" fxLayoutGap=\"12px\">\n    <mat-radio-button *ngFor=\"let function of functions\" [value]=\"function.id\">\n      {{ function.value | oReportsTranslate }}\n    </mat-radio-button>\n  </mat-radio-group>\n\n</mat-dialog-content>\n\n<mat-dialog-actions align=\"end\">\n  <button type=\"button\" mat-stroked-button class=\"mat-primary\" [mat-dialog-close]=\"false\" class=\"o-button-default\">\n    {{ 'CANCEL' | oTranslate }}</button>\n  <button type=\"button\" mat-stroked-button class=\"mat-primary\" (click)=\"save()\" [mat-dialog-close]=\"true\" [disabled]=\"!selectedFunction\">\n    {{'SAVE' | oTranslate }}</button>\n</mat-dialog-actions>\n",
                styles: [".mat-radio-group{margin:0 12px}"]
            }] }
];
/** @nocollapse */
SelectFunctionDialogComponent.ctorParameters = () => [
    { type: MatDialogRef },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DIALOG_DATA,] }] }
];
if (false) {
    /** @type {?} */
    SelectFunctionDialogComponent.prototype.selectedFunction;
    /** @type {?} */
    SelectFunctionDialogComponent.prototype.functions;
    /** @type {?} */
    SelectFunctionDialogComponent.prototype.dialogo;
    /** @type {?} */
    SelectFunctionDialogComponent.prototype.reportFunction;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/report-on-demand/style-dialog/style-dialog.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class StyleDialogComponent {
    /**
     * @param {?} dialogo
     * @param {?} data
     */
    constructor(dialogo, data) {
        this.dialogo = dialogo;
        this.data = data;
        this.dataAlignment = [
            { "name": "left", "icon": "format_align_left" },
            { "name": "center", "icon": "format_align_center" },
            { "name": "right", "icon": "format_align_right" }
        ];
        this.reportColumn = Utils.cloneObject(data);
        if (this.reportColumn.columnStyle && !Util.isDefined(this.reportColumn.columnStyle.width)) {
            this.reportColumn.columnStyle.width = Constants.DEFAULT_WIDTH_COLUMN_STYLE;
        }
        if (this.reportColumn.columnStyle && !Util.isDefined(this.reportColumn.columnStyle.alignment)) {
            this.reportColumn.columnStyle.alignment = Constants.DEFAULT_ALIGNMENT_COLUMN_STYLE;
        }
        if (!this.reportColumn.columnStyle) {
            this.reportColumn.columnStyle = { width: Constants.DEFAULT_WIDTH_COLUMN_STYLE, alignment: Constants.DEFAULT_ALIGNMENT_COLUMN_STYLE };
        }
    }
    /**
     * @return {?}
     */
    confirm() {
        this.dialogo.close(this.reportColumn);
    }
}
StyleDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-style-dialog',
                template: "<span mat-dialog-title>{{ 'COLUMN_CONFIGURATION' | oReportsTranslate }}</span>\n<mat-dialog-content>\n  <div mat-subheader>{{ 'SAVE_COLUMN_CONFIGURATION' | oReportsTranslate }}</div>\n  <div fxLayout=\"column\" fxLayoutAlign=\"start start\" fxLayoutGap=\"12px\">\n    <form #form>\n      <mat-form-field fxFill>\n        <mat-label>{{ 'COLUMN_NAME' | oReportsTranslate }}</mat-label>\n        <input id=\"columnNameInput\" name=\"columnNameInput\" matInput placeholder=\"{{ 'COLUMN_NAME' | oReportsTranslate }}\" required\n          [(ngModel)]=\"reportColumn.name\" #columnNameInput=\"ngModel\" [ngModelOptions]=\"{standalone: true}\">\n      </mat-form-field>\n      <mat-form-field fxFill>\n        <input id=\"widthColumnInput\" name=\"widthColumnInput\" matInput type=\"number\" placeholder=\"{{ 'COLUMN_WIDTH' | oReportsTranslate }}\" required\n          [(ngModel)]=\"reportColumn.columnStyle.width\" #widthColumnInput=\"ngModel\" [ngModelOptions]=\"{standalone: true}\">\n        <span matSuffix>px</span>\n        <mat-hint></mat-hint>\n      </mat-form-field>\n      <mat-radio-group [(ngModel)]=\"reportColumn.columnStyle.alignment\" fxFill fxLayout=\"row\" fxLayoutAlign=\"space-between center\"\n        [ngModelOptions]=\"{standalone: true}\">\n        <mat-radio-button *ngFor=\"let aligmentItem of dataAlignment\" [value]=\"aligmentItem.name\" [checked]=\"reportColumn.columnStyle.alignment === aligmentItem\">\n          <mat-icon fxFlex>\n            {{ aligmentItem.icon }}\n          </mat-icon>\n        </mat-radio-button>\n      </mat-radio-group>\n    </form>\n  </div>\n</mat-dialog-content>\n<mat-dialog-actions align=\"end\">\n  <button type=\"button\" mat-stroked-button class=\"mat-primary\" [mat-dialog-close]=\"false\" class=\"o-button-default\">\n    {{ 'CANCEL' | oTranslate }}</button>\n  <button type=\"button\" mat-stroked-button class=\"mat-primary\" (click)=\"confirm()\" [mat-dialog-close]=\"true\"\n    [disabled]=\"columnNameInput.invalid || widthColumnInput.invalid\">\n    {{ 'SAVE' | oTranslate }}</button>\n</mat-dialog-actions>\n"
            }] }
];
/** @nocollapse */
StyleDialogComponent.ctorParameters = () => [
    { type: MatDialogRef$1, decorators: [{ type: Optional }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DIALOG_DATA$1,] }] }
];
if (false) {
    /** @type {?} */
    StyleDialogComponent.prototype.reportColumn;
    /** @type {?} */
    StyleDialogComponent.prototype.dataAlignment;
    /** @type {?} */
    StyleDialogComponent.prototype.dialogo;
    /** @type {?} */
    StyleDialogComponent.prototype.data;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/report-on-demand/report-on-demand/report-on-demand.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ReportOnDemandComponent {
    /**
     * @param {?} injector
     * @param {?} dialogRef
     * @param {?} data
     */
    constructor(injector, dialogRef, data) {
        this.injector = injector;
        this.dialogRef = dialogRef;
        this.data = data;
        this.orientations = [{ text: "vertical", value: true }, { text: "horizontal", value: false }];
        this.functionsData = [];
        this.initialFunctionsData = [];
        this.appliedConfiguration = false;
        this.selectedFunctions = [];
        this.stylesArray = [
            { value: 'grid', viewValue: 'GRID' },
            { value: 'rowNumber', viewValue: 'ROW_NUMBER' },
            { value: 'columnName', viewValue: 'COLUMNS_NAMES' },
            { value: 'backgroundOnOddRows', viewValue: 'BACKGROUND_ODD_ROWS' },
            { value: 'hideGroupDetails', viewValue: 'GROUP_DETAILS' },
            { value: 'groupNewPage', viewValue: 'GROUP_PAGE' },
            { value: 'firstGroupNewPage', viewValue: 'FIRST_GROUP_PAGE' }
        ];
        this.columnsOrderBy = [];
        this.openedSidenav = true;
        this.fullscreen = false;
        this.blankPdf = 'JVBERi0xLjYKJcOkw7zDtsOfCjIgMCBvYmoKPDwvTGVuZ3RoIDMgMCBSL0ZpbHRlci9GbGF0ZURlY29kZT4+CnN0cmVhbQp4nDPQM1Qo5ypUMFAw0DMwslAwtTTVMzI3VbAwMdSzMDNUKErlCtdSyOMKVAAAtxIIrgplbmRzdHJlYW0KZW5kb2JqCgozIDAgb2JqCjUwCmVuZG9iagoKNSAwIG9iago8PAo+PgplbmRvYmoKCjYgMCBvYmoKPDwvRm9udCA1IDAgUgovUHJvY1NldFsvUERGL1RleHRdCj4+CmVuZG9iagoKMSAwIG9iago8PC9UeXBlL1BhZ2UvUGFyZW50IDQgMCBSL1Jlc291cmNlcyA2IDAgUi9NZWRpYUJveFswIDAgNTk1LjMwMzkzNzAwNzg3NCA4NDEuODg5NzYzNzc5NTI4XS9Hcm91cDw8L1MvVHJhbnNwYXJlbmN5L0NTL0RldmljZVJHQi9JIHRydWU+Pi9Db250ZW50cyAyIDAgUj4+CmVuZG9iagoKNCAwIG9iago8PC9UeXBlL1BhZ2VzCi9SZXNvdXJjZXMgNiAwIFIKL01lZGlhQm94WyAwIDAgNTk1IDg0MSBdCi9LaWRzWyAxIDAgUiBdCi9Db3VudCAxPj4KZW5kb2JqCgo3IDAgb2JqCjw8L1R5cGUvQ2F0YWxvZy9QYWdlcyA0IDAgUgovT3BlbkFjdGlvblsxIDAgUiAvWFlaIG51bGwgbnVsbCAwXQovTGFuZyhlcy1FUykKPj4KZW5kb2JqCgo4IDAgb2JqCjw8L0F1dGhvcjxGRUZGMDA1MDAwNjEwMDc0MDA3MjAwNjkwMDYzMDA2OTAwNjEwMDIwMDA0RDAwNjEwMDcyMDA3NDAwRUQwMDZFMDA2NTAwN0EwMDIwMDA1NDAwNjkwMDZDMDA3NjAwNjU+Ci9DcmVhdG9yPEZFRkYwMDU3MDA3MjAwNjkwMDc0MDA2NTAwNzI+Ci9Qcm9kdWNlcjxGRUZGMDA0QzAwNjkwMDYyMDA3MjAwNjUwMDRGMDA2NjAwNjYwMDY5MDA2MzAwNjUwMDIwMDAzNzAwMkUwMDMxPgovQ3JlYXRpb25EYXRlKEQ6MjAyMjA1MTAxNDUyMDYrMDInMDAnKT4+CmVuZG9iagoKeHJlZgowIDkKMDAwMDAwMDAwMCA2NTUzNSBmIAowMDAwMDAwMjM0IDAwMDAwIG4gCjAwMDAwMDAwMTkgMDAwMDAgbiAKMDAwMDAwMDE0MCAwMDAwMCBuIAowMDAwMDAwNDAyIDAwMDAwIG4gCjAwMDAwMDAxNTkgMDAwMDAgbiAKMDAwMDAwMDE4MSAwMDAwMCBuIAowMDAwMDAwNTAwIDAwMDAwIG4gCjAwMDAwMDA1OTYgMDAwMDAgbiAKdHJhaWxlcgo8PC9TaXplIDkvUm9vdCA3IDAgUgovSW5mbyA4IDAgUgovSUQgWyA8RDdBODhCRTRFREFDRkU1RDFGMTIwMzNFMDUyN0JERkU+CjxEN0E4OEJFNEVEQUNGRTVEMUYxMjAzM0UwNTI3QkRGRT4gXQovRG9jQ2hlY2tzdW0gLzgwNTA5NDU4QjgyN0RCRDQ2QzlEODdBMjY4NjdCNEFDCj4+CnN0YXJ0eHJlZgo4NzYKJSVFT0YK';
        this.appConfig = this.injector.get(AppConfig);
        this.translateService = this.injector.get(OTranslateService);
        this.snackBarService = this.injector.get(SnackBarService);
        this.reportService = this.injector.get(OReportService);
        this.dialogService = this.injector.get(DialogService);
        this.dialog = this.injector.get(MatDialog$1);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initialize();
    }
    /**
     * @protected
     * @return {?}
     */
    initialize() {
        this.table = this.data;
        this.language = this.translateService.getCurrentLang();
        this.service = this.table.service;
        this.columnsArray = this.parseColumnsVisible();
        this.initialColumnsData = this.parseReportColumn(this.columnsArray);
        this.initialColumnsToGroupData = this.columnsArray;
        this.currentConfiguration = { ENTITY: this.table.entity };
        this.initializeReportPreferences();
        this.getFunctions();
    }
    /**
     * @param {?=} serviceName
     * @return {?}
     */
    getDefaultServiceConfiguration(serviceName) {
        /** @type {?} */
        const configuration = this.appConfig.getServiceConfiguration();
        /** @type {?} */
        let servConfig = {};
        if (serviceName && configuration.hasOwnProperty(serviceName)) {
            servConfig = configuration[serviceName];
        }
        return servConfig;
    }
    /**
     * @return {?}
     */
    previewReport() {
        this.openReport();
    }
    /**
     * @return {?}
     */
    clearCurrentPreferences() {
        this.initializeReportPreferences();
        if (this.columnsList) {
            this.columnsList.deselectAll();
        }
        if (this.functionsList) {
            this.functionsList.deselectAll();
        }
        if (this.orderByList) {
            this.orderByList.deselectAll();
        }
    }
    /**
     * @protected
     * @return {?}
     */
    initializeReportPreferences() {
        /* initialize columnsData and functionsData because they are modified by
        changing settings */
        this.columnsData = Utils.cloneObject(this.initialColumnsData);
        this.functionsData = Utils.cloneObject(this.initialFunctionsData);
        this.columnsToGroupData = Utils.cloneObject(this.initialColumnsToGroupData);
        this.columnsOrderBy = [];
        this.pdf = this.blankPdf;
        this.currentPreference = new DefaultOReportPreferences();
        this.currentPreference.entity = this.table.entity;
        this.currentPreference.service = this.table.service;
    }
    /**
     * @protected
     * @return {?}
     */
    parseColumnsVisible() {
        /** @type {?} */
        const columnsArray = Util.parseArray(this.table.columns);
        return this.table.oTableOptions.columns.filter((/**
         * @param {?} oCol
         * @return {?}
         */
        oCol => oCol.type !== "image" && oCol.visible && columnsArray.findIndex((/**
         * @param {?} column
         * @return {?}
         */
        column => column === oCol.attr)) > -1)).map((/**
         * @param {?} x
         * @return {?}
         */
        (x) => x.attr));
    }
    /**
     * @protected
     * @param {?} columns
     * @return {?}
     */
    parseReportColumn(columns) {
        return columns.map((/**
         * @param {?} column
         * @return {?}
         */
        column => {
            /** @type {?} */
            let reportColumn = {
                id: column, name: this.translateService.get(column)
            };
            /** @type {?} */
            let columnStyle = this.parseColumnStyle(column);
            if (Util.isObject(columnStyle) && Object.keys(columnStyle).length > 0) {
                reportColumn.columnStyle = columnStyle;
            }
            return reportColumn;
        }));
    }
    /**
     * @protected
     * @param {?} column
     * @return {?}
     */
    parseColumnStyle(column) {
        /** @type {?} */
        let columnStyle = {};
        /** @type {?} */
        const renderer = this.createRenderer(column);
        if (Util.isDefined(renderer) && Util.isDefined(renderer.type)) {
            columnStyle.renderer = renderer;
        }
        return columnStyle;
    }
    /**
     * @protected
     * @param {?} columnsOrderBy
     * @return {?}
     */
    parseColumnsOrderBy(columnsOrderBy) {
        return columnsOrderBy.map((/**
         * @param {?} column
         * @return {?}
         */
        column => {
            return { columnId: column.columnId, columnName: column.name, ascendent: column.ascendent };
        }));
    }
    /**
     * @protected
     * @return {?}
     */
    openReport() {
        /** @type {?} */
        const serviceConfiguration = this.getDefaultServiceConfiguration(this.currentPreference.service);
        /** @type {?} */
        let pathService;
        if (Util.isObject(serviceConfiguration) && serviceConfiguration.hasOwnProperty('path')) {
            pathService = serviceConfiguration.path;
        }
        this.reportService.createReport({
            "title": this.currentPreference.title, "groups": this.currentPreference.groups, "entity": this.currentPreference.entity, "path": pathService,
            "service": this.currentPreference.service, "vertical": this.currentPreference.vertical, "functions": this.currentPreference.functions,
            "style": this.currentPreference.style, "subtitle": this.currentPreference.subtitle, "columns": this.currentPreference.columns, "orderBy": this.currentPreference.orderBy,
            "language": this.language
        }).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            if (res && res.data.length && res.code === 0) {
                this.pdf = res.data[0].file;
            }
        }));
    }
    /**
     * @return {?}
     */
    getFunctions() {
        this.reportService.getFunctions({
            "columns": this.columnsArray, "entity": this.currentPreference.entity,
            "service": this.currentPreference.service, "language": this.language
        }).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            if (res && res.data.length && res.code === 0) {
                this.functionsData = this.parseDefaultFunctionsData(res.data[0].functions);
                this.initialFunctionsData = Utils.cloneObject(this.functionsData);
            }
        }));
    }
    /**
     * @param {?} listColumns
     * @return {?}
     */
    parseDefaultFunctionsData(listColumns) {
        return listColumns.filter((/**
         * @param {?} column
         * @return {?}
         */
        column => this.columnsData.
            findIndex((/**
         * @param {?} columnData
         * @return {?}
         */
        columnData => columnData.columnStyle && columnData.columnStyle.renderer && columnData.columnStyle.renderer.type === 'service' && columnData.id === column.columnName)) === -1));
    }
    /**
     * Checks preference data is consistent with the table data
     * @private
     * @return {?}
     */
    checkPreferenceData() {
        this.currentPreference.columns = this.currentPreference.columns.filter((/**
         * @param {?} column
         * @return {?}
         */
        column => this.initialColumnsData.findIndex((/**
         * @param {?} columnData
         * @return {?}
         */
        columnData => columnData.id === column.id)) > -1));
        this.currentPreference.groups = this.currentPreference.groups.filter((/**
         * @param {?} column
         * @return {?}
         */
        column => this.initialColumnsToGroupData.findIndex((/**
         * @param {?} columnData
         * @return {?}
         */
        columnData => columnData === column)) > -1));
        this.currentPreference.functions = this.currentPreference.functions.filter((/**
         * @param {?} column
         * @return {?}
         */
        column => this.initialFunctionsData.findIndex((/**
         * @param {?} columnData
         * @return {?}
         */
        columnData => columnData.columnName === column.columnName)) > -1));
        this.currentPreference.orderBy = this.currentPreference.orderBy.filter((/**
         * @param {?} column
         * @return {?}
         */
        column => this.columnsOrderBy.findIndex((/**
         * @param {?} columnData
         * @return {?}
         */
        columnData => columnData.columnId === column.columnId)) > -1));
    }
    /**
     * @param {?} configuration
     * @return {?}
     */
    applyConfiguration(configuration) {
        this.clearCurrentPreferences();
        this.currentConfiguration = configuration;
        this.currentPreference = JSON.parse(this.currentConfiguration.PREFERENCES);
        this.currentPreference.columns.forEach((/**
         * @param {?} column
         * @return {?}
         */
        (column) => this.updateColumnsOrderByData(column.id)));
        this.checkPreferenceData();
        // Set the functionsData with the data that is loaded from the configuration because it changes
        this.functionsData = this.functionsData.map((/**
         * @param {?} functionData
         * @return {?}
         */
        (functionData) => {
            /** @type {?} */
            const index = this.currentPreference.functions.findIndex((/**
             * @param {?} x
             * @return {?}
             */
            x => x.columnName === functionData.columnName));
            if (index > -1) {
                functionData.type = this.currentPreference.functions[index].type;
            }
            return functionData;
        }));
        this.columnsData.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => {
            /** @type {?} */
            let indexA = this.currentPreference.columns.findIndex((/**
             * @param {?} x
             * @return {?}
             */
            x => x.id === a.id));
            /** @type {?} */
            let indexB = this.currentPreference.columns.findIndex((/**
             * @param {?} x
             * @return {?}
             */
            x => x.id === b.id));
            return this.getSortIndex(indexA, indexB);
        }));
        this.columnsOrderBy.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => {
            /** @type {?} */
            let indexA = this.currentPreference.orderBy.findIndex((/**
             * @param {?} x
             * @return {?}
             */
            x => x.columnId === a.columnId));
            /** @type {?} */
            let indexB = this.currentPreference.orderBy.findIndex((/**
             * @param {?} x
             * @return {?}
             */
            x => x.columnId === b.columnId));
            return this.getSortIndex(indexA, indexB);
        }));
        this.columnsToGroupData.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => {
            /** @type {?} */
            let indexA = this.currentPreference.groups.findIndex((/**
             * @param {?} x
             * @return {?}
             */
            x => x === a));
            /** @type {?} */
            let indexB = this.currentPreference.groups.findIndex((/**
             * @param {?} x
             * @return {?}
             */
            x => x === b));
            return this.getSortIndex(indexA, indexB);
        }));
    }
    /**
     * @private
     * @param {?} indexA
     * @param {?} indexB
     * @return {?}
     */
    getSortIndex(indexA, indexB) {
        if (indexA === -1) {
            return 0;
        }
        if (indexB === -1) {
            return indexB;
        }
        else {
            return indexA - indexB;
        }
    }
    /**
     * @param {?} event
     * @param {?} id
     * @return {?}
     */
    showColumnStyleDialog(event, id) {
        event.stopPropagation();
        /** @type {?} */
        const columnData = Object.assign({}, this.currentPreference.columns.find((/**
         * @param {?} x
         * @return {?}
         */
        (x) => x.id === id)));
        if (Util.isDefined(columnData)) {
            this.dialog
                .open(StyleDialogComponent, {
                data: columnData,
                panelClass: ['o-dialog-class', 'o-table-dialog']
            })
                .afterClosed()
                .subscribe((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                if (Util.isDefined(data) && data) {
                    /** @type {?} */
                    const column = Utils.cloneObject(data);
                    this.updateColumnStyleConfigurationData(column);
                }
            }));
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    updateColumnStyleConfigurationData(data) {
        /** @type {?} */
        let columns = Utils.cloneObject(this.currentPreference.columns);
        this.currentPreference.columns = [];
        /** @type {?} */
        const indexColumnData = this.columnsData.findIndex((/**
         * @param {?} x
         * @return {?}
         */
        x => x.id === data.id));
        if (indexColumnData > -1) {
            this.columnsData[indexColumnData] = data;
        }
        /** @type {?} */
        const indexColumnStyleData = columns.findIndex((/**
         * @param {?} x
         * @return {?}
         */
        x => x.id === data.id));
        if (indexColumnStyleData > -1) {
            columns[indexColumnStyleData] = data;
        }
        this.currentPreference.columns = columns;
    }
    /**
     * @param {?} event
     * @param {?} reportFunction
     * @return {?}
     */
    selectFunction(event, reportFunction) {
        event.stopPropagation();
        if (reportFunction.columnName != 'TOTAL') {
            this.dialog
                .open(SelectFunctionDialogComponent, {
                data: reportFunction,
                panelClass: ['o-dialog-class', 'o-table-dialog']
            })
                .afterClosed()
                .subscribe((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                //Updated current functions selected and functionsData
                if (data) {
                    this.updatedFunctionData(data);
                    this.updatedSelectFunction(data);
                }
            }));
        }
    }
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    updatedFunctionData(data) {
        /** @type {?} */
        const index = this.functionsData.findIndex((/**
         * @param {?} x
         * @return {?}
         */
        x => x.columnName === data.columnName));
        if (index === -1) {
            this.functionsData.push(data);
        }
        else {
            this.functionsData[index] = data;
        }
    }
    /**
     * @private
     * @param {?} selectedFunction
     * @return {?}
     */
    updatedSelectFunction(selectedFunction) {
        this.currentPreference.functions.forEach((/**
         * @param {?} data
         * @param {?} i
         * @return {?}
         */
        (data, i) => {
            if (data.columnName === selectedFunction.columnName) {
                this.currentPreference.functions[i] = data;
            }
        }));
    }
    /**
     * @return {?}
     */
    openSaveAsPreferences() {
        this.dialog
            .open(SavePreferencesDialogComponent, {
            panelClass: ['o-dialog-class', 'o-table-dialog']
        })
            .afterClosed()
            .subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (Util.isDefined(data) && data) {
                this.savePreferences(data);
            }
        }));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    dropColumns(event) {
        moveItemInArray(this.columnsData, event.previousIndex, event.currentIndex);
        this.updateColumnsSort();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    dropGroups(event) {
        moveItemInArray(this.columnsToGroupData, event.previousIndex, event.currentIndex);
        this.updateColumnToGroupSort();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    dropColumnsOrderBy(event) {
        moveItemInArray(this.columnsOrderBy, event.previousIndex, event.currentIndex);
        this.updateColumnGroupBySort();
    }
    /**
     * @return {?}
     */
    updateColumnsSort() {
        this.currentPreference.columns.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => {
            /** @type {?} */
            let indexA = this.columnsData.findIndex((/**
             * @param {?} x
             * @return {?}
             */
            x => x.id === a.id));
            /** @type {?} */
            let indexB = this.columnsData.findIndex((/**
             * @param {?} x
             * @return {?}
             */
            x => x.id === b.id));
            return indexA - indexB;
        }));
    }
    /**
     * @return {?}
     */
    updateColumnGroupBySort() {
        this.currentPreference.orderBy.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => {
            /** @type {?} */
            let indexA = this.columnsOrderBy.findIndex((/**
             * @param {?} x
             * @return {?}
             */
            x => x.columnId === a.columnId));
            /** @type {?} */
            let indexB = this.columnsOrderBy.findIndex((/**
             * @param {?} x
             * @return {?}
             */
            x => x.columnId === b.columnId));
            return indexA - indexB;
        }));
    }
    /**
     * @return {?}
     */
    updateColumnToGroupSort() {
        this.currentPreference.groups.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => {
            /** @type {?} */
            let indexA = this.columnsToGroupData.findIndex((/**
             * @param {?} x
             * @return {?}
             */
            x => x === a));
            /** @type {?} */
            let indexB = this.columnsToGroupData.findIndex((/**
             * @param {?} x
             * @return {?}
             */
            x => x === b));
            return indexA - indexB;
        }));
    }
    /**
     * @return {?}
     */
    onApplyConfigurationClicked() {
        this.dialog.open(ApplyConfigurationDialogComponent, {
            width: 'calc((75em - 100%) * 1000)',
            maxWidth: '65vw',
            minWidth: '30vw',
            disableClose: true,
            panelClass: ['o-dialog-class', 'o-table-dialog'],
            data: { entity: this.currentPreference.entity, service: this.currentPreference.service },
        }).afterClosed()
            .subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (Util.isDefined(data) && data) {
                this.applyConfiguration(data);
                this.appliedConfiguration = true;
            }
        }), (/**
         * @param {?} _error
         * @return {?}
         */
        _error => {
            this.appliedConfiguration = false;
        }));
    }
    /**
     * @return {?}
     */
    openSavePreferences() {
        if (Util.isDefined(this.currentConfiguration.ID)) {
            this.savePreferences({ name: this.currentConfiguration.NAME, description: this.currentConfiguration.DESCRIPTION }, true);
        }
        else {
            this.dialog
                .open(SavePreferencesDialogComponent, {
                panelClass: ['o-dialog-class', 'o-table-dialog']
            })
                .afterClosed()
                .subscribe((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                if (Util.isDefined(data) && data) {
                    this.savePreferences(data, true);
                }
            }));
        }
    }
    /**
     * @param {?} data
     * @param {?=} update
     * @return {?}
     */
    savePreferences(data, update) {
        /** @type {?} */
        let preference = {
            "name": data.name, "description": data.description,
            "entity": this.currentPreference.entity, "service": this.currentPreference.service, "type": "REPORT", "params": {
                "title": this.currentPreference.title, "groups": this.currentPreference.groups,
                "vertical": this.currentPreference.vertical, "functions": this.currentPreference.functions, "style": this.currentPreference.style,
                "subtitle": this.currentPreference.subtitle, "columns": this.currentPreference.columns, "orderBy": this.currentPreference.orderBy, "entity": this.currentPreference.entity, "service": this.currentPreference.service
            }
        };
        if (update) {
            this.reportService.savePreferences(this.currentConfiguration.ID, preference).subscribe((/**
             * @param {?} res
             * @return {?}
             */
            res => {
                this.showConfirmOperatinInSnackBar(res);
            }));
        }
        else {
            this.reportService.saveAsPreferences(preference).subscribe((/**
             * @param {?} res
             * @return {?}
             */
            res => {
                if (res && res.code === 0) {
                    this.showConfirmOperatinInSnackBar(res);
                }
            }));
        }
    }
    /**
     * @private
     * @param {?} res
     * @return {?}
     */
    showConfirmOperatinInSnackBar(res) {
        if (res && res.code === 0) {
            this.snackBarService.open('MESSAGES.SAVED', { icon: 'check_circle' });
        }
    }
    /**
     * @return {?}
     */
    setFullscreenDialog() {
        Utils.setFullscreenDialog(this.fullscreen, this.dialogRef);
        this.fullscreen = !this.fullscreen;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onSelectionChangeColumns(event) {
        /** @type {?} */
        const selectedColumn = event.option.value;
        /** @type {?} */
        const selectColumnId = selectedColumn.id;
        this.updateColumnsOrderByData(selectColumnId, event);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onSelectionChangeGroups(event) {
        if (!event.option.selected)
            return;
        /** @type {?} */
        let groupSelected = event.option.value;
        this.updateColumnsOrderByData(groupSelected, event);
        if (event.option.selected &&
            this.currentPreference.columns.findIndex((/**
             * @param {?} x
             * @return {?}
             */
            x => x.id === groupSelected)) === -1) {
            /** @type {?} */
            const columnStyleSelected = this.columnsData.filter((/**
             * @param {?} x
             * @return {?}
             */
            (x) => x.id === groupSelected));
            if (columnStyleSelected.length > 0) {
                this.addColumnData(columnStyleSelected[0]);
            }
        }
    }
    /**
     * @param {?} columnId
     * @param {?=} event
     * @return {?}
     */
    updateColumnsOrderByData(columnId, event) {
        if (!event) {
            /** @type {?} */
            const existColumn = this.columnsArray.findIndex((/**
             * @param {?} col
             * @return {?}
             */
            col => col === columnId));
            if (existColumn === -1) {
                console.warn('The loaded configuration has the column ' + columnId + ' configured but this column does not exist as a table column');
                return;
            }
        }
        /** @type {?} */
        const columnGroupBySelected = { columnId: columnId, ascendent: true };
        /** @type {?} */
        let index = this.columnsOrderBy.findIndex((/**
         * @param {?} x
         * @return {?}
         */
        x => x.columnId === columnId));
        if ((!event) || (event && event.option.selected)) {
            if (index === -1) {
                this.columnsOrderBy.push(columnGroupBySelected);
            }
        }
        else if (index > -1) {
            this.columnsOrderBy.splice(index);
        }
    }
    /**
     * @param {?} columnSelected
     * @return {?}
     */
    addColumnData(columnSelected) {
        //Object Deep Cloning
        /** @type {?} */
        let currentPreference = Utils.cloneObject(this.currentPreference);
        currentPreference.columns.push(columnSelected);
        this.currentPreference = currentPreference;
        this.updateColumnsSort();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onSelectionChangeFunctions(event) {
        if (!event.option.selected || event.option.value.columnName === 'TOTAL')
            return;
        /** @type {?} */
        const functionSelect = event.option.value;
        /** @type {?} */
        const columnSelectedToGroup = functionSelect.columnName;
        if (event.option.selected &&
            this.currentPreference.columns.findIndex((/**
             * @param {?} x
             * @return {?}
             */
            x => x.id === columnSelectedToGroup)) === -1) {
            /** @type {?} */
            const column = this.columnsData.find((/**
             * @param {?} x
             * @return {?}
             */
            x => x.id === columnSelectedToGroup));
            this.addColumnData(column);
        }
    }
    /**
     * @param {?} column
     * @param {?} event
     * @return {?}
     */
    changeOrder(column, event) {
        /** @type {?} */
        const columnSelectedToOrder = this.columnsOrderBy.find((/**
         * @param {?} x
         * @return {?}
         */
        x => x.columnId === column.columnId));
        if (columnSelectedToOrder) {
            columnSelectedToOrder.ascendent = !columnSelectedToOrder.ascendent;
        }
        event.stopPropagation();
    }
    /**
     * @param {?} column
     * @return {?}
     */
    isCheckedColumn(column) {
        return this.currentPreference.columns.length > 0 ? this.currentPreference.columns.filter((/**
         * @param {?} x
         * @return {?}
         */
        x => x.id === column.id)).length > 0 : false;
    }
    /**
     * @param {?} column
     * @return {?}
     */
    isCheckedFunction(column) {
        return this.currentPreference.functions.length > 0 ? this.currentPreference.functions.filter((/**
         * @param {?} x
         * @return {?}
         */
        x => (x.columnName === column.columnName && x.type === column.type) && x.type !== 'TOTAL')).length > 0 : false;
    }
    /**
     * @param {?} co1
     * @param {?} co2
     * @return {?}
     */
    columnsOrderByCompareFunction(co1, co2) {
        return co1.columnId === co2.columnId;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onCheckboxStyleClick(value) {
        if (this.currentPreference.style[value]) {
            this.currentPreference.style[value] = false;
        }
        else {
            this.currentPreference.style[value] = true;
        }
    }
    /**
     * @param {?} co1
     * @param {?} co2
     * @return {?}
     */
    columnsCompareFunction(co1, co2) {
        return co1.id === co2.id;
    }
    /**
     * @param {?} co1
     * @param {?} co2
     * @return {?}
     */
    functionsCompareFunction(co1, co2) {
        return co1.columnName === co2.columnName;
    }
    /**
     * @protected
     * @param {?} column
     * @return {?}
     */
    createRenderer(column) {
        /** @type {?} */
        let oColumn = this.table.oTableOptions.columns.find((/**
         * @param {?} x
         * @return {?}
         */
        x => x.attr === column));
        /** @type {?} */
        let newRenderer;
        if (Util.isDefined(oColumn) && Util.isDefined(oColumn.type) && oColumn.type !== 'string') {
            /** @type {?} */
            const type = oColumn.type;
            newRenderer = {};
            /** @type {?} */
            let columnRenderer = oColumn.renderer;
            switch (type) {
                case 'currency':
                    newRenderer.type = type;
                    newRenderer.currencySymbol = columnRenderer.currencySymbol;
                    newRenderer.currencySymbolPosition = columnRenderer.currencySymbolPosition;
                    break;
                case 'date':
                    newRenderer.type = type;
                    newRenderer.format = columnRenderer.format;
                    break;
                case 'integer':
                    newRenderer.type = type;
                    newRenderer.grouping = columnRenderer.grouping;
                    newRenderer.thousandSeparator = columnRenderer.thousandSeparator;
                    break;
                case 'real':
                    newRenderer.type = type;
                    newRenderer.decimalSeparator = columnRenderer.decimalSeparator;
                    newRenderer.grouping = columnRenderer.grouping;
                    newRenderer.thousandSeparator = columnRenderer.thousandSeparator;
                    break;
                case 'service':
                    newRenderer.type = type;
                    newRenderer.entity = columnRenderer.entity;
                    newRenderer.service = columnRenderer.service;
                    newRenderer.keyColumn = oColumn.attr;
                    newRenderer.columns = Util.parseArray(columnRenderer.columns);
                    newRenderer.valueColumn = columnRenderer.valueColumn;
                    newRenderer.parentKeys = Util.parseArray(columnRenderer.parentKeys);
                    /** @type {?} */
                    const serviceConfiguration = this.getDefaultServiceConfiguration(columnRenderer.service);
                    if (Util.isObject(serviceConfiguration) && Object.hasOwnProperty(serviceConfiguration.path)) {
                        newRenderer.path = serviceConfiguration.path;
                    }
                    break;
            }
        }
        return newRenderer;
    }
}
ReportOnDemandComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-report-on-demand',
                template: "<div mat-dialog-title class=\"dialog-title\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n  {{ 'REPORT_ON_DEMAND_TITLE' | oReportsTranslate }}\n  <div>\n    <mat-icon svgIcon=\"ontimize:settings\" #configurationMenuButton [matMenuTriggerFor]=\"configurationMenu\"></mat-icon>\n    <mat-icon aria-label=\"fullscreen dialog\" (click)=\"setFullscreenDialog()\">\n      <ng-container *ngIf=\"fullscreen\">fullscreen_exit</ng-container>\n      <ng-container *ngIf=\"!fullscreen\">fullscreen</ng-container>\n    </mat-icon>\n    <mat-icon svgIcon=\"ontimize:close\" [mat-dialog-close]=\"true\"></mat-icon>\n\n    <mat-menu #configurationMenu=\"matMenu\" class=\"o-mat-menu\">\n      <button type=\"button\" [disabled]=\"!appliedConfiguration\" mat-menu-item (click)=\"openSavePreferences()\">\n        {{ 'BUTTONS.SAVE_CONFIGURATION' | oReportsTranslate }}\n      </button>\n      <button type=\"button\" mat-menu-item (click)=\"openSaveAsPreferences()\">\n        {{ 'BUTTONS.SAVEAS_CONFIGURATION' | oReportsTranslate }}\n      </button>\n      <button type=\"button\" mat-menu-item (click)=\"onApplyConfigurationClicked()\">\n        {{'BUTTONS.APPLY_CONFIGURATION'| oReportsTranslate }}\n      </button>\n    </mat-menu>\n  </div>\n</div>\n<div #dialog mat-dialog-content class=\"dialog-container\">\n  <mat-sidenav-container class=\"mat-sidenav-container\" [class.opened]=\"openedSidenav\" fxFill>\n    <mat-sidenav #sidenav [(opened)]=\"openedSidenav\" mode=\"side\" class=\"report-on-demand-sidenav\">\n      <div fxLayout=\"column\" fxFill fxLayoutGap=\"20px\">\n        <o-button (click)=\"openedSidenav=!openedSidenav\" svg-icon=\"ontimize:menu\" type=\"ICON\" label=\"\"\n          [matTooltip]=\"(sidenav.opened?'HIDE_FILTERS':'SHOW_FILTERS') | oTranslate\">\n        </o-button>\n\n        <div fxLayout=\"column\" *ngIf=\"openedSidenav\" class=\"container-title\" fxLayoutGap=\"10px\">\n          <mat-form-field>\n            <input [(ngModel)]=\"currentPreference.title\" matInput placeholder=\"{{ 'TITLE' | oReportsTranslate }}\">\n          </mat-form-field>\n          <mat-form-field>\n            <input [(ngModel)]=\"currentPreference.subtitle\" matInput placeholder=\"{{ 'SUBTITLE' | oReportsTranslate }}\">\n          </mat-form-field>\n        </div>\n\n        <mat-accordion multi=\"true\" displayMode=\"flat\" fxFlex=\"1 1 auto\" *ngIf=\"openedSidenav\" [@.disabled]=\"true\">\n          <mat-expansion-panel class=\"acordions\">\n            <mat-expansion-panel-header collapsedHeight=\"32px\" expandedHeight=\"32px\">\n              <mat-panel-title>\n                {{ 'ORIENTATION' | oReportsTranslate }}\n              </mat-panel-title>\n            </mat-expansion-panel-header>\n            <mat-radio-group name=\"Orientation\" [(ngModel)]=\"currentPreference.vertical\" fxLayout=\"column\" fxLayoutGap=\"12px\">\n              <mat-radio-button *ngFor=\"let orientation of orientations\" name=\"Orientation\" [value]=\"orientation.value\"\n                [checked]=\"currentPreference.vertical === orientation.value\">\n                {{ orientation.text | oReportsTranslate}}\n              </mat-radio-button>\n            </mat-radio-group>\n          </mat-expansion-panel>\n\n          <mat-expansion-panel class=\"acordions\">\n            <mat-expansion-panel-header collapsedHeight=\"32px\" expandedHeight=\"32px\">\n              <mat-panel-title>\n                {{ 'STYLE' | oReportsTranslate }}\n              </mat-panel-title>\n            </mat-expansion-panel-header>\n            <mat-selection-list dense #settings>\n              <mat-list-option checkboxPosition=\"before\" [selected]=\"currentPreference.style[choice.value]\" *ngFor=\"let choice of stylesArray\"\n                [value]=\"choice.value\" (click)=\"onCheckboxStyleClick(choice.value)\">\n                <div fxLayout=\"row\">\n                  <span fxFlex>\n                    {{choice.viewValue | oReportsTranslate}}\n                  </span>\n                </div>\n              </mat-list-option>\n            </mat-selection-list>\n          </mat-expansion-panel>\n\n          <mat-expansion-panel class=\"acordions\" expanded=\"true\">\n            <mat-expansion-panel-header collapsedHeight=\"32px\" expandedHeight=\"32px\">\n              <mat-panel-title>\n                {{ 'COLUMNS' | oReportsTranslate }}\n              </mat-panel-title>\n            </mat-expansion-panel-header>\n            <mat-selection-list dense #columnsList cdkDropList [cdkDropListData]=\"columnsData\" (cdkDropListDropped)=\"dropColumns($event)\"\n              class=\"columns\" [(ngModel)]=\"currentPreference.columns\" (selectionChange)=\"onSelectionChangeColumns($event)\"\n              [compareWith]=\"columnsCompareFunction\">\n              <mat-list-option checkboxPosition=\"before\" *ngFor=\"let column of columnsData\" [value]=\"column\" cdkDrag>\n                <div fxLayout=\"row\" fxLayoutAlign=\"space-around center\">\n                  <span mat-line fxFlex>\n                    {{column.id | oReportsTranslate}}\n                  </span>\n                  <mat-icon mat-list-icon *ngIf=\"isCheckedColumn(column)\" (click)=\"showColumnStyleDialog($event, column.id)\" class=\"button-edit\">\n                    edit\n                  </mat-icon>\n                  <mat-icon mat-list-icon class=\"button-edit\">drag_handle</mat-icon>\n                </div>\n              </mat-list-option>\n            </mat-selection-list>\n          </mat-expansion-panel>\n          <mat-expansion-panel class=\"acordions\" *ngIf=\"columnsOrderBy.length > 0\">\n            <mat-expansion-panel-header collapsedHeight=\"32px\" expandedHeight=\"32px\">\n              <mat-panel-title>\n                {{ 'ORDER_BY' | oReportsTranslate }}\n              </mat-panel-title>\n            </mat-expansion-panel-header>\n            <mat-selection-list dense #orderByList cdkDropList [cdkDropListData]=\"columnsOrderBy\" (cdkDropListDropped)=\"dropColumnsOrderBy($event)\"\n              class=\"columns\" [(ngModel)]=\"currentPreference.orderBy\" [compareWith]=\"columnsOrderByCompareFunction\">\n              <mat-list-option checkboxPosition=\"before\" *ngFor=\"let column of columnsOrderBy\" [value]=\"column\" cdkDrag>\n                <div fxLayout=\"row\" fxLayoutAlign=\"space-around center\">\n                  <span mat-line fxFlex>\n                    {{column.columnId | oReportsTranslate}}\n                  </span>\n                  <mat-icon *ngIf=\"column.ascendent\" (click)=\"changeOrder(column, $event)\" mat-list-icon svgIcon=\"ontimize:sort_by_alpha_asc\"\n                    class=\"button-edit\"></mat-icon>\n                  <mat-icon *ngIf=\"!column.ascendent\" (click)=\"changeOrder(column, $event)\" mat-list-icon svgIcon=\"ontimize:sort_by_alpha_desc\"\n                    class=\"button-edit\"></mat-icon>\n                  <mat-icon mat-list-icon class=\"button-edit\">drag_handle</mat-icon>\n                </div>\n              </mat-list-option>\n            </mat-selection-list>\n          </mat-expansion-panel>\n          <mat-expansion-panel class=\"acordions\">\n            <mat-expansion-panel-header collapsedHeight=\"32px\" expandedHeight=\"32px\">\n              <mat-panel-title>\n                {{ 'GROUPS' | oReportsTranslate }}\n              </mat-panel-title>\n            </mat-expansion-panel-header>\n            <mat-selection-list dense cdkDropList [cdkDropListData]=\"columnsToGroupData\" (cdkDropListDropped)=\"dropGroups($event)\"\n              [(ngModel)]=\"currentPreference.groups\" (selectionChange)=\"onSelectionChangeGroups($event)\">\n              <mat-list-option checkboxPosition=\"before\" *ngFor=\"let column of columnsToGroupData\" [value]=\"column\" cdkDrag>\n                <div fxLayout=\"row\" fxLayoutAlign=\"space-around center\">\n                  <span mat-line fxFlex>\n                    {{ column | oTranslate }}\n                  </span>\n                  <mat-icon mat-list-icon class=\"button-edit\">drag_handle</mat-icon>\n                </div>\n              </mat-list-option>\n            </mat-selection-list>\n          </mat-expansion-panel>\n\n          <mat-expansion-panel class=\"acordions\" *ngIf=\"functionsData.length>0\">\n            <mat-expansion-panel-header collapsedHeight=\"32px\" expandedHeight=\"32px\">\n              <mat-panel-title>\n                {{ 'FUNCTIONS' | oReportsTranslate }}\n              </mat-panel-title>\n            </mat-expansion-panel-header>\n            <mat-selection-list #functionsList dense [(ngModel)]=\"currentPreference.functions\" [compareWith]=\"functionsCompareFunction\"\n              (selectionChange)=\"onSelectionChangeFunctions($event)\">\n              <mat-list-option checkboxPosition=\"before\" *ngFor=\"let function of functionsData\" [value]=\"function\">\n                <div fxLayout=\"row\" fxLayoutAlign=\"space-around center\">\n                  <span mat-line fxFlex>\n                    <ng-container *ngIf=\"function.columnName==='TOTAL'; else functionColumnTemplate\">\n                      {{function.type | oReportsTranslate}}\n                    </ng-container>\n                  </span>\n                  <ng-template #functionColumnTemplate>\n                    {{function.type | oReportsTranslate }}({{function.columnName | oReportsTranslate }})\n                  </ng-template>\n\n                  <mat-icon *ngIf=\"isCheckedFunction(function)\" mat-list-icon (click)=\"selectFunction($event, function)\" class=\"button-edit\">\n                    edit\n                  </mat-icon>\n                </div>\n              </mat-list-option>\n            </mat-selection-list>\n          </mat-expansion-panel>\n        </mat-accordion>\n\n        <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"center center\" *ngIf=\"openedSidenav\">\n          <button type=\"button\" mat-stroked-button class=\"o-report-on-demand-clear-button\" (click)=\"clearCurrentPreferences()\">\n            {{'CLEAR' | oReportsTranslate }}</button>\n          <button type=\"button\" mat-stroked-button class=\"mat-primary\" (click)=\"previewReport()\" [disabled]=\"currentPreference.columns.length===0\">\n            {{'PREVIEW' | oReportsTranslate }}</button>\n        </div>\n\n      </div>\n    </mat-sidenav>\n    <mat-sidenav-content>\n      <div class=\"sidenav-container-content\">\n        <ngx-extended-pdf-viewer #pdfViewer [base64Src]=\"pdf\" [filenameForDownload]=\"currentPreference.title\" [showBookmarkButton]=\"false\"\n          [showPropertiesButton]=\"false\" [showOpenFileButton]=\"false\" useBrowserLocale=\"true\" delayFirstView=\"1000\" [textLayer]=\"true\">\n        </ngx-extended-pdf-viewer>\n      </div>\n    </mat-sidenav-content>\n  </mat-sidenav-container>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                host: {
                    '[class.o-report-on-demand]': 'true'
                },
                styles: [".o-dialog-class .mat-dialog-container .o-report-on-demand .mat-dialog-title .mat-icon{cursor:pointer}.o-dialog-class .mat-dialog-container .o-report-on-demand .mat-dialog-content{max-height:calc(100% - 36px - 16px);height:100%;padding-top:16px;padding-bottom:0}.o-dialog-class .mat-dialog-container .o-report-on-demand .mat-dialog-content ngx-extended-pdf-viewer .zoom{height:100%}.o-dialog-class .mat-dialog-container .o-report-on-demand .mat-dialog-content .mat-icon{cursor:pointer}.o-dialog-class .mat-dialog-container .o-report-on-demand .mat-dialog-content .mat-sidenav{visibility:visible!important;transform:none;top:0;left:0;padding:8px 16px;border:1px solid transparent}.o-dialog-class .mat-dialog-container .o-report-on-demand .mat-dialog-content .mat-sidenav .mat-drawer-inner-container{overflow:hidden}.o-dialog-class .mat-dialog-container .o-report-on-demand .mat-dialog-content .mat-sidenav .mat-dialog-actions{min-height:auto;padding-top:0}.o-dialog-class .mat-dialog-container .o-report-on-demand .mat-dialog-content .mat-sidenav .mat-dialog-actions button.o-report-on-demand-clear-button{min-width:80px}.o-dialog-class .mat-dialog-container .o-report-on-demand .mat-dialog-content .mat-sidenav .mat-radio-group{margin:0 12px}.o-dialog-class .mat-dialog-container .o-report-on-demand .mat-dialog-content .mat-sidenav .mat-accordion{overflow-y:scroll}.o-dialog-class .mat-dialog-container .o-report-on-demand .mat-dialog-content .mat-sidenav .mat-accordion .acordions.mat-expansion-panel{border-radius:0;box-shadow:none;margin-bottom:8px}.o-dialog-class .mat-dialog-container .o-report-on-demand .mat-dialog-content .mat-sidenav .mat-accordion .acordions.mat-expansion-panel:last-of-type{margin-bottom:0}.o-dialog-class .mat-dialog-container .o-report-on-demand .mat-dialog-content .mat-sidenav .mat-accordion .acordions.mat-expansion-panel .mat-expansion-panel-header{padding:0 8px}.o-dialog-class .mat-dialog-container .o-report-on-demand .mat-dialog-content .mat-sidenav .mat-accordion .acordions.mat-expansion-panel .mat-expansion-panel-body{padding:0}.o-dialog-class .mat-dialog-container .o-report-on-demand .mat-dialog-content .mat-sidenav .mat-accordion .mat-list-option .button-edit{cursor:pointer}.o-dialog-class .mat-dialog-container .o-report-on-demand .mat-dialog-content .mat-sidenav .mat-accordion .mat-list-option.cdk-drag{cursor:move}.o-dialog-class .mat-dialog-container .o-report-on-demand .mat-dialog-content .mat-sidenav .mat-accordion .mat-list-option .mat-list-item-content{padding:0 0 0 8px}.o-dialog-class .mat-dialog-container .o-report-on-demand .mat-dialog-content .mat-sidenav .mat-accordion .mat-list-option .mat-list-item-content .mat-list-text{padding-right:8px}.o-dialog-class .mat-dialog-container .o-report-on-demand .mat-dialog-content .mat-sidenav.mat-drawer-opened{border:1px solid #dee1e6;border-radius:4px;width:256px}.o-dialog-class .mat-dialog-container .o-report-on-demand .mat-dialog-content .mat-sidenav-container{background-color:transparent}.o-dialog-class .mat-dialog-container .o-report-on-demand .mat-dialog-content .mat-sidenav-container.opened .sidenav-container-content{margin-left:16px}.o-dialog-class .mat-dialog-container .o-report-on-demand .mat-dialog-content .mat-sidenav-content{overflow:hidden}.o-dialog-class .mat-dialog-container .o-report-on-demand .mat-dialog-content .mat-sidenav-content .sidenav-container-content{margin-left:66px;height:100%}"]
            }] }
];
/** @nocollapse */
ReportOnDemandComponent.ctorParameters = () => [
    { type: Injector },
    { type: MatDialogRef$1 },
    { type: OTableComponent, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA$1,] }] }
];
ReportOnDemandComponent.propDecorators = {
    columnsList: [{ type: ViewChild, args: ['columnsList', { static: false },] }],
    functionsList: [{ type: ViewChild, args: ['functionsList', { static: false },] }],
    orderByList: [{ type: ViewChild, args: ['orderByList', { static: false },] }]
};
if (false) {
    /** @type {?} */
    ReportOnDemandComponent.prototype.columnsList;
    /** @type {?} */
    ReportOnDemandComponent.prototype.functionsList;
    /** @type {?} */
    ReportOnDemandComponent.prototype.orderByList;
    /** @type {?} */
    ReportOnDemandComponent.prototype.orientations;
    /** @type {?} */
    ReportOnDemandComponent.prototype.functionsData;
    /**
     * @type {?}
     * @private
     */
    ReportOnDemandComponent.prototype.initialFunctionsData;
    /** @type {?} */
    ReportOnDemandComponent.prototype.appliedConfiguration;
    /** @type {?} */
    ReportOnDemandComponent.prototype.selectedFunctions;
    /** @type {?} */
    ReportOnDemandComponent.prototype.stylesArray;
    /** @type {?} */
    ReportOnDemandComponent.prototype.columnsData;
    /**
     * @type {?}
     * @private
     */
    ReportOnDemandComponent.prototype.initialColumnsData;
    /** @type {?} */
    ReportOnDemandComponent.prototype.selectedColumnsData;
    /** @type {?} */
    ReportOnDemandComponent.prototype.columnsOrderBy;
    /** @type {?} */
    ReportOnDemandComponent.prototype.columnsToGroupData;
    /**
     * @type {?}
     * @private
     */
    ReportOnDemandComponent.prototype.initialColumnsToGroupData;
    /** @type {?} */
    ReportOnDemandComponent.prototype.openedSidenav;
    /** @type {?} */
    ReportOnDemandComponent.prototype.fullscreen;
    /**
     * @type {?}
     * @protected
     */
    ReportOnDemandComponent.prototype.service;
    /**
     * @type {?}
     * @protected
     */
    ReportOnDemandComponent.prototype.language;
    /**
     * @type {?}
     * @protected
     */
    ReportOnDemandComponent.prototype.columnsArray;
    /**
     * @type {?}
     * @protected
     */
    ReportOnDemandComponent.prototype.table;
    /**
     * @type {?}
     * @private
     */
    ReportOnDemandComponent.prototype.blankPdf;
    /** @type {?} */
    ReportOnDemandComponent.prototype.currentPreference;
    /** @type {?} */
    ReportOnDemandComponent.prototype.currentConfiguration;
    /** @type {?} */
    ReportOnDemandComponent.prototype.pdf;
    /** @type {?} */
    ReportOnDemandComponent.prototype.translateService;
    /**
     * @type {?}
     * @protected
     */
    ReportOnDemandComponent.prototype.appConfig;
    /**
     * @type {?}
     * @protected
     */
    ReportOnDemandComponent.prototype.snackBarService;
    /**
     * @type {?}
     * @protected
     */
    ReportOnDemandComponent.prototype.reportService;
    /**
     * @type {?}
     * @protected
     */
    ReportOnDemandComponent.prototype.dialogService;
    /** @type {?} */
    ReportOnDemandComponent.prototype.dialog;
    /** @type {?} */
    ReportOnDemandComponent.prototype.injector;
    /** @type {?} */
    ReportOnDemandComponent.prototype.dialogRef;
    /** @type {?} */
    ReportOnDemandComponent.prototype.data;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/ontimize-report.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class OntimizeReportService {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        this.injector = injector;
        this.dialogService = this.injector.get(DialogService);
        this.dialog = this.injector.get(MatDialog);
    }
    /**
     * @param {?} table
     * @return {?}
     */
    openReportOnDemand(table) {
        Utils.openModalVisor(this.dialog, ReportOnDemandComponent, table);
    }
}
OntimizeReportService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
OntimizeReportService.ctorParameters = () => [
    { type: Injector }
];
/** @nocollapse */ OntimizeReportService.ngInjectableDef = ɵɵdefineInjectable({ factory: function OntimizeReportService_Factory() { return new OntimizeReportService(ɵɵinject(INJECTOR)); }, token: OntimizeReportService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @protected
     */
    OntimizeReportService.prototype.dialogService;
    /**
     * @type {?}
     * @protected
     */
    OntimizeReportService.prototype.dialog;
    /**
     * @type {?}
     * @private
     */
    OntimizeReportService.prototype.injector;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/config/o-providers.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} injector
 * @return {?}
 */
function reportServiceFactory(injector) {
    return new OReportService(injector);
}
/** @type {?} */
const OREPORT_PROVIDERS = [{ provide: O_REPORT_SERVICE, useClass: OntimizeReportService },
    {
        provide: 'report',
        useFactory: reportServiceFactory,
        deps: [Injector]
    },
    OAlertService, OReportStoreService
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/report/o-report-home/o-report-home.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class OReportHomeComponent {
    /**
     * @param {?} alertService
     */
    constructor(alertService) {
        this.alertService = alertService;
        alertService.alert$.subscribe((/**
         * @param {?} _res
         * @return {?}
         */
        _res => {
            this.table.refresh();
        }));
    }
}
OReportHomeComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-report-home',
                template: "<o-form-layout-manager attr=\"report\" title=\"{{'REPORTS' | oTranslate }}\" separator=\" \" mode=\"tab\" label-columns=\"NAME\">\n  <div fxLayout=\"column\" fxLayoutAlign=\"start start\" fxFill>\n    <o-table #table fxFlex attr=\"report\" service-type=\"report\" entity=\"listReports\" keys=\"UUID\"\n      columns=\"UUID;NAME;DESCRIPTION;REPORT_TYPE;MAIN_REPORT_FILENAME\"\n      visible-columns=\"NAME;DESCRIPTION;REPORT_TYPE\" query-rows=\"20\" show-report-on-demand-option=\"no\">\n      <o-table-column attr=\"NAME\" title=\"{{'REPORT_NAME' | oTranslate }}\" orderable=\"yes\" searchable=\"yes\" class=\"o-table-column-centered\"></o-table-column>\n      <o-table-column attr=\"DESCRIPTION\" title=\"{{'REPORT_DESCRIPTION' | oTranslate }}\" orderable=\"yes\" searchable=\"no\" class=\"o-table-column-centered\"></o-table-column>\n      <o-table-column attr=\"REPORT_TYPE\" title=\"{{'REPORT_TYPE' | oTranslate }}\" orderable=\"yes\" searchable=\"no\" class=\"o-table-column-centered\"></o-table-column>\n    </o-table>\n  </div>\n</o-form-layout-manager>\n"
            }] }
];
/** @nocollapse */
OReportHomeComponent.ctorParameters = () => [
    { type: OAlertService }
];
OReportHomeComponent.propDecorators = {
    table: [{ type: ViewChild, args: ['table', { static: true },] }]
};
if (false) {
    /** @type {?} */
    OReportHomeComponent.prototype.table;
    /**
     * @type {?}
     * @private
     */
    OReportHomeComponent.prototype.alertService;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/report/o-report-new/o-report-new.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class OReportNewComponent {
    /**
     * @param {?} alertService
     * @param {?} dialogService
     */
    constructor(alertService, dialogService) {
        this.alertService = alertService;
        this.dialogService = dialogService;
        this.loading = false;
    }
    /**
     * @return {?}
     */
    getFileData() {
        return {
            'name': this.name.getValue(),
            'type': this.type.getValue(),
            'description': this.description.getValue(),
        };
    }
    /**
     * @return {?}
     */
    onUploadFile() {
        this.loading = false;
        this.confirm();
        this.form._clearAndCloseFormAfterInsert();
    }
    /**
     * @return {?}
     */
    onError() {
        if (this.dialogService) {
            this.dialogService.error('ERROR', 'SERVER_ERROR_MESSAGE');
            this.loading = false;
        }
    }
    /**
     * @return {?}
     */
    confirm() {
        this.alertService.announceAlert('alert');
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onClickSave(e) {
        Object.keys(this.form.formGroup.controls).forEach((/**
         * @param {?} control
         * @return {?}
         */
        (control) => {
            this.form.formGroup.controls[control].markAsTouched();
        }));
        if (!this.form.formGroup.valid) {
            this.dialogService.alert('ERROR', 'MESSAGES.FORM_VALIDATION_ERROR');
            return;
        }
        this.loading = true;
        this.file.onClickUpload(e);
    }
}
OReportNewComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-report-new',
                template: "<o-form #form service-type=\"report\" entity=\"addReport\" keys=\"UUID\" header-actions=\"R;I;U;D\" show-header-navigation=\"no\">\n  <div o-form-toolbar-buttons>\n    <button type=\"button\" class=\"o-form-toolbar-button\" mat-stroked-button (click)=\"onClickSave($event)\" attr=\"fillreport\">\n      <mat-icon>save</mat-icon>\n      <span>{{ 'SAVE'| oReportsTranslate}}</span>\n    </button>\n  </div>\n  <o-column attr=\"row1\" title=\"REPORT_DATA\" icon=\"description\" layout-gap=\"14px\" fxFill>\n    <div fxLayout=\"row wrap\" fxLayoutGap=\"14px\" fxLayoutAlign=\"start start\" fxFlex>\n      <o-text-input #name class=\"input-padding\" attr=\"NAME\" label=\"REPORT_NAME\" fxFlex=\"50\" required=\"yes\"></o-text-input>\n      <o-text-input #type class=\"input-padding\" attr=\"REPORT_TYPE\" label=\"REPORT_TYPE\" fxFlex required=\"yes\"></o-text-input>\n    </div>\n    <o-textarea-input #description attr=\"DESCRIPTION\" label=\"REPORT_DESCRIPTION\" fxFlex required=\"yes\"></o-textarea-input>\n    <o-file-input #file attr=\"file\" fxFlex=\"50\" service=\"report\" service-type=\"report\" entity=\"addReport\" label=\"REPORT_ZIPFOLDER\" show-info=\"yes\"\n      workspace-key=\"id\" required=\"yes\" (onUploadFile)=\"onUploadFile()\" accept-file-type=\".zip\" [additional-data]=\"getFileData()\"\n      (onErrorFile)=\"onError()\">\n    </o-file-input>\n  </o-column>\n</o-form>\n<div class=\"loading\" *ngIf=\"loading\">\n  <div class=\"spinner\">\n    <mat-spinner mode=\"indeterminate\"></mat-spinner>\n  </div>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                host: {
                    '[class.app-report-store-new]': 'true'
                },
                styles: [".o-form-toolbar-button.o-form-toolbar-button-insert{display:none}.loading{position:fixed;top:0;left:0;right:0;bottom:0;width:100%;height:100%;background-color:#fff;opacity:.5;z-index:1000}.spinner{position:absolute;top:50%;left:50%;margin-top:-20px;margin-left:-25px;width:50px;height:40px;text-align:center;font-size:10px;opacity:1}"]
            }] }
];
/** @nocollapse */
OReportNewComponent.ctorParameters = () => [
    { type: OAlertService },
    { type: DialogService }
];
OReportNewComponent.propDecorators = {
    name: [{ type: ViewChild, args: ['name', { static: true },] }],
    type: [{ type: ViewChild, args: ['type', { static: true },] }],
    description: [{ type: ViewChild, args: ['description', { static: true },] }],
    form: [{ type: ViewChild, args: ['form', { static: true },] }],
    file: [{ type: ViewChild, args: ['file', { static: true },] }]
};
if (false) {
    /** @type {?} */
    OReportNewComponent.prototype.name;
    /** @type {?} */
    OReportNewComponent.prototype.type;
    /** @type {?} */
    OReportNewComponent.prototype.description;
    /** @type {?} */
    OReportNewComponent.prototype.form;
    /** @type {?} */
    OReportNewComponent.prototype.file;
    /** @type {?} */
    OReportNewComponent.prototype.subscription;
    /** @type {?} */
    OReportNewComponent.prototype.loading;
    /**
     * @type {?}
     * @private
     */
    OReportNewComponent.prototype.alertService;
    /**
     * @type {?}
     * @private
     */
    OReportNewComponent.prototype.dialogService;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/report/o-report-detail/o-report-detail.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class OReportDetailComponent {
    /**
     * @param {?} dialogService
     * @param {?} dialog
     */
    constructor(dialogService, dialog) {
        this.dialogService = dialogService;
        this.dialog = dialog;
        this.hasParams = false;
    }
    /**
     * @private
     * @return {?}
     */
    getValues() {
        for (let i = 0; i < this.parameters.length; i++) {
            /** @type {?} */
            let v = this.paramForm.getFieldValue('value' + i);
            this.values.push(v);
        }
    }
    /**
     * @return {?}
     */
    fillReport() {
        this.values = [];
        this.av = [this.id.getValue()];
        if (this.parameters.length > 0) {
            this.getValues();
            /** @type {?} */
            let size = this.values.length;
            for (let i = 0; i < size; i++)
                this.av.push(this.values.shift());
        }
        this.dialog.open(OReportViewerComponent, {
            height: Constants.DEFAULT_HEIGHT_DIALOG,
            width: Constants.DEFAULT_HEIGHT_DIALOG,
            data: {
                'params': this.av,
                'filter': {}
            }
        });
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onDataLoaded(e) {
        this.parameters = e['PARAMETERS'];
        if (this.parameters.length > 0) {
            this.hasParams = true;
        }
    }
}
OReportDetailComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-report-detail',
                template: "<o-form #form attr=\"report\" service-type=\"report\" entity=\"getReport\" keys=\"UUID\" header-actions=\"R;I;U;D\" show-header=\"yes\"\n  show-header-navigation=\"yes\" fxLayout=\"column\" (onDataLoaded)=\"onDataLoaded($event)\">\n  <o-column attr=\"row1\" title=\"REPORT_DATA\" icon=\"description\" layout-gap=\"14px\" fxFill>\n    <o-text-input #id attr=\"UUID\" label=\"REPORT_ID\" enabled=\"no\" fxFlex=\"100\"></o-text-input>\n    <div fxLayout=\"row wrap\" fxLayoutGap=\"14px\" fxLayoutAlign=\"start start\" fxFlex>\n      <o-text-input attr=\"NAME\" label=\"REPORT_NAME\" required=\"yes\" fxFlex=\"50\"></o-text-input>\n      <o-text-input attr=\"REPORT_TYPE\" label=\"REPORT_TYPE\" required=\"yes\" fxFlex></o-text-input>\n    </div>\n    <o-text-input class=\"form-field\" attr=\"MAIN_REPORT_FILENAME\" label=\"REPORT_FILENAME\" required=\"yes\" fxFlex></o-text-input>\n    <o-textarea-input class=\"form-field\" attr=\"DESCRIPTION\" label=\"REPORT_DESCRIPTION\" required=\"yes\" fxFlex></o-textarea-input>\n  </o-column>\n\n  <div *ngIf=\"hasParams\">\n    <o-column #params title=\"PARAMETERS\" icon=\"info\" class=\"vertical-margin-10\" layout-align=\"start stretch\" appearance=\"outline\">\n      <o-form #paramForm attr=\"report\" service-type=\"report\" entity=\"fillReport\" keys=\"id\" header-mode=\"none\" show-header=\"no\"\n        layout-direction=\"column\">\n        <ng-container *ngFor=\"let elem of parameters; let i = index\">\n          <o-row fxFlex>\n            <ng-template [ngIf]=\"elem.valueClass == 'java.sql.Date' || elem.valueClass == 'java.sql.Timestamp'\" [ngIfElse]=\"textInput\">\n              <o-date-input [attr]=\"'value' + i\" [label]=\"elem.name\" required=\"yes\" value-type=\"string\" format=\"YYYY-MM-DD\" fxFlex></o-date-input>\n            </ng-template>\n            <ng-template #textInput>\n              <o-text-input [attr]=\"'value' + i\" [label]=\"elem.description\" required=\"yes\" fxFlex></o-text-input>\n            </ng-template>\n          </o-row>\n        </ng-container>\n      </o-form>\n    </o-column>\n  </div>\n  <o-button type=\"RAISED\" (click)=\"fillReport()\" label=\"{{ 'FILL_REPORT' | oTranslate }}\" icon=\"download\" layout-padding color=\"accent\"\n    [enabled]=\"form.formGroup?.valid && paramForm?.formGroup?.valid\"></o-button>\n</o-form>\n"
            }] }
];
/** @nocollapse */
OReportDetailComponent.ctorParameters = () => [
    { type: DialogService },
    { type: MatDialog }
];
OReportDetailComponent.propDecorators = {
    id: [{ type: ViewChild, args: ['id', { static: true },] }],
    paramForm: [{ type: ViewChild, args: ['paramForm', { static: false },] }]
};
if (false) {
    /** @type {?} */
    OReportDetailComponent.prototype.id;
    /** @type {?} */
    OReportDetailComponent.prototype.paramForm;
    /**
     * @type {?}
     * @private
     */
    OReportDetailComponent.prototype.values;
    /** @type {?} */
    OReportDetailComponent.prototype.parameters;
    /**
     * @type {?}
     * @private
     */
    OReportDetailComponent.prototype.av;
    /** @type {?} */
    OReportDetailComponent.prototype.hasParams;
    /**
     * @type {?}
     * @protected
     */
    OReportDetailComponent.prototype.dialogService;
    /**
     * @type {?}
     * @protected
     */
    OReportDetailComponent.prototype.dialog;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/i18n/i18n.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const MAP = {
    // English
    en: {
        'REPORT_ON_DEMAND_TITLE': 'Dynamic Reports',
        'BUTTONS.SAVE_CONFIGURATION': 'Save configuration',
        'BUTTONS.SAVEAS_CONFIGURATION': 'Save as configuration',
        'BUTTONS.APPLY_CONFIGURATION': 'Load configuration',
        'TITLE': 'Title',
        'SUBTITLE': 'Subtitle',
        'ORIENTATION': 'Orientation',
        'STYLE': 'Style',
        'COLUMNS': 'Columns to print',
        'GROUPS': 'Groups',
        'FUNCTIONS': 'Functions',
        'PREVIEW': 'Preview',
        'COLUMN_CONFIGURATION': 'Column Configuration',
        'SAVE_COLUMN_CONFIGURATION': 'Enter a name, a with and a alignment for the column',
        'GRID': 'Draw grid',
        'ROW_NUMBER': 'Row numbers',
        'COLUMNS_NAMES': 'Column names',
        'GROUP_DETAILS': 'Hide group details',
        'GROUP_PAGE': 'Group in page',
        'BACKGROUND_ODD_ROWS': 'Background on odd rows',
        'FIRST_GROUP_PAGE': 'First group in page',
        'DIALOG.SELECT_FUNCTION.TITLE': 'Select function',
        'DIALOG.SELECT_FUNCTION.DESCRIPTION': 'Select one of the following functions',
        'COLUMN_NAME': 'Column name',
        'COLUMN_WIDTH': 'Column width',
        'DIALOG.SELECT_FUNCTION.MIN': 'Minumun',
        'DIALOG.SELECT_FUNCTION.MAX': 'Maximun',
        'DIALOG.SELECT_FUNCTION.AVG': 'Average',
        'DIALOG.SELECT_FUNCTION.SUM': 'Sum',
        'ORDER_BY': 'Order by',
        'CLEAR': 'Clear',
        'MIN': 'Minumun',
        'MAX': 'Maximun',
        'AVERAGE': 'Average',
        'SUM': 'Sum',
        'TOTAL': 'Total'
    },
    // Spanish
    es: {
        'REPORT_ON_DEMAND_TITLE': 'Informes Dinámicos',
        'BUTTONS.SAVE_CONFIGURATION': 'Guardar configuración',
        'BUTTONS.SAVEAS_CONFIGURATION': 'Guardar configuración como',
        'BUTTONS.APPLY_CONFIGURATION': 'Aplicar configuración',
        'TITLE': 'Título',
        'SUBTITLE': 'Subtítulo',
        'ORIENTATION': 'Orientación',
        'STYLE': 'Estilo',
        'COLUMNS': 'Columnas a imprimir',
        'GROUPS': 'Grupos',
        'FUNCTIONS': 'Funciones',
        'PREVIEW': 'Previsualizar',
        'COLUMN_CONFIGURATION': 'Configuración de columna',
        'SAVE_COLUMN_CONFIGURATION': 'Introduzca un nombre, un ancho y una alineación para la columna',
        'GRID': 'Dibujar rejilla',
        'ROW_NUMBER': 'Números de fila',
        'COLUMNS_NAMES': 'Nombre de columnas',
        'GROUP_DETAILS': 'Ocultar detalles grupo',
        'GROUP_PAGE': 'Grupo en página',
        'BACKGROUND_ODD_ROWS': 'Fondo sobre filas impares',
        'FIRST_GROUP_PAGE': 'Primer grupo en página',
        'DIALOG.SELECT_FUNCTION.TITLE': 'Seleccionar función',
        'DIALOG.SELECT_FUNCTION.DESCRIPTION': 'Seleccione una de las siguientes funciones',
        'COLUMN_NAME': 'Nombre de la columna',
        'COLUMN_WIDTH': 'Ancho de la columna',
        'DIALOG.SELECT_FUNCTION.MIN': 'Mínimo',
        'DIALOG.SELECT_FUNCTION.MAX': 'Máximo',
        'DIALOG.SELECT_FUNCTION.AVG': 'Media',
        'DIALOG.SELECT_FUNCTION.SUM': 'Suma',
        'ORDER_BY': 'Ordenar por',
        'CLEAR': 'Limpiar',
        'MIN': 'Mínimo',
        'MAX': 'Máximo',
        'AVERAGE': 'Media',
        'SUM': 'Suma',
        'TOTAL': 'Total'
    }
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/util/o-reports-translate.pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class OReportsTranslatePipe {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        this.injector = injector;
        this.translateService = this.injector.get(OTranslateService);
    }
    /**
     * @param {?} text
     * @return {?}
     */
    transform(text) {
        /** @type {?} */
        let textTranslated = undefined;
        /** @type {?} */
        let bundle = MAP[this.translateService.getCurrentLang()];
        if (bundle && bundle[text]) {
            textTranslated = bundle[text];
        }
        else {
            textTranslated = this.translateService.get(text);
        }
        return textTranslated;
    }
}
OReportsTranslatePipe.decorators = [
    { type: Pipe, args: [{
                name: 'oReportsTranslate',
                pure: false
            },] }
];
/** @nocollapse */
OReportsTranslatePipe.ctorParameters = () => [
    { type: Injector }
];
if (false) {
    /**
     * @type {?}
     * @protected
     */
    OReportsTranslatePipe.prototype.translateService;
    /**
     * @type {?}
     * @protected
     */
    OReportsTranslatePipe.prototype.injector;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/config/o-components.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const OREPORT_DECLARATION_MODULES = [
    OReportHomeComponent,
    OReportNewComponent,
    OReportDetailComponent,
    OReportViewerComponent,
    ReportOnDemandComponent,
    StyleDialogComponent,
    SelectFunctionDialogComponent,
    SavePreferencesDialogComponent,
    ApplyConfigurationDialogComponent,
    OReportsTranslatePipe
];
/** @type {?} */
const OREPORT_IMPORTS_MODULES = [
    CommonModule,
    OntimizeWebModule,
    NgxExtendedPdfViewerModule,
    FlexLayoutModule,
    DragDropModule
];
/** @type {?} */
const OREPORT_EXPORT_MODULES = [];
/** @type {?} */
const OREPORT_ENTRY_COMPONENTS_MODULES = [
    OReportViewerComponent,
    ReportOnDemandComponent,
    StyleDialogComponent,
    SelectFunctionDialogComponent,
    SavePreferencesDialogComponent,
    ApplyConfigurationDialogComponent
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ontimize-web-ngx-report.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class OReportModule {
}
OReportModule.decorators = [
    { type: NgModule, args: [{
                declarations: OREPORT_DECLARATION_MODULES,
                imports: OREPORT_IMPORTS_MODULES,
                providers: OREPORT_PROVIDERS,
                entryComponents: OREPORT_ENTRY_COMPONENTS_MODULES
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/report/o-report-routing.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const routes = [{
        path: '',
        component: OReportHomeComponent
    }, {
        path: 'new',
        component: OReportNewComponent
    }, {
        path: ':UUID',
        component: OReportDetailComponent
    }];
class OReportRoutingModule {
}
OReportRoutingModule.decorators = [
    { type: NgModule, args: [{
                imports: [RouterModule.forChild(routes)],
                exports: [RouterModule]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/report/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/report-on-demand/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: lib/types/report-column-style.type.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: lib/types/report-configuration.type.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: lib/types/report-function.type.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: lib/types/report-orderBy.type.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: lib/types/report-column.type.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: lib/types/report-param.type.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: lib/types/report-service-renderer.type.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: lib/types/report-style-params.type.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: lib/types/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: lib/util/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: lib/interfaces/report-renderer.interface.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function IReportRenderer() { }
if (false) {
    /** @type {?} */
    IReportRenderer.prototype.type;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/interfaces/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: ontimize-web-ngx-report.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { ApplyConfigurationDialogComponent, DefaultOReportPreferences, OReportDetailComponent, OReportHomeComponent, OReportModule, OReportNewComponent, OReportRoutingModule, OReportService, OReportStoreService, OReportViewerComponent, OReportsTranslatePipe, OntimizeReportService, ReportOnDemandComponent, SavePreferencesDialogComponent, SelectFunctionDialogComponent, StyleDialogComponent, OREPORT_DECLARATION_MODULES as ɵa, OREPORT_IMPORTS_MODULES as ɵb, OREPORT_ENTRY_COMPONENTS_MODULES as ɵc, OAlertService as ɵd, reportServiceFactory as ɵe, OREPORT_PROVIDERS as ɵf };
//# sourceMappingURL=ontimize-web-ngx-report.js.map
