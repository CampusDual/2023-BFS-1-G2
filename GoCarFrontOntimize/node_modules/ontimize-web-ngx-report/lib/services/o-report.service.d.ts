import { Injector } from "@angular/core";
import { OReportParam } from "../types/report-param.type";
import { Observable, OErrorDialogManager, OntimizeEEService, ServiceRequestParam, ServiceResponse } from 'ontimize-web-ngx';
import { HttpHeaders } from "@angular/common/http";
export declare class OReportService extends OntimizeEEService {
    protected injector: Injector;
    protected oErrorDialogManager: OErrorDialogManager;
    constructor(injector: Injector);
    createReport(reportparams: OReportParam): Observable<any>;
    saveAsPreferences(preferencesparams?: object): Observable<any>;
    savePreferences(id: number, preferencesparams?: object): Observable<any>;
    getPreferences(entity?: string, service?: string): Observable<any>;
    getFunctions(functionparams?: object): Observable<any>;
    deletePreferences(id?: number): Observable<any>;
    /** overridden method to add error callback for all requests */
    doRequest(param: ServiceRequestParam): Observable<ServiceResponse>;
    errorCallBack(httpErrorResponse: any): void;
    showNotificationError(error: string): void;
    upload(files: any[], entity: string, data?: object): Observable<any>;
    protected bodyCode(resp: any, observer: any): void;
    advancedQuery(_kv?: Object, _av?: Array<string>, entity?: string, _sqltypes?: Object, offset?: number, _pagesize?: number, _orderby?: Array<Object>): Observable<any>;
    query(kv?: Object, _av?: Array<string>, entity?: string, _sqltypes?: Object): Observable<any>;
    fillReport(av?: Array<string>, entity?: string, _sqltypes?: Object, filter?: Object): Observable<any>;
    delete(kv?: Object, _entity?: string, _sqltypes?: Object): Observable<any>;
    update(kv?: Object, av?: Array<string>, _entity?: string, _sqltypes?: Object): Observable<any>;
    protected buildHeadersReport(): HttpHeaders;
}
