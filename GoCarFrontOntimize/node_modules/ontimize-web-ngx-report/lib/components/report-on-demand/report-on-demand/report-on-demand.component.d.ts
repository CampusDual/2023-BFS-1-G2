import { CdkDragDrop } from '@angular/cdk/drag-drop';
import { Injector } from '@angular/core';
import { OnInit } from '@angular/core';
import { MatSelectionList, MatSelectionListChange } from '@angular/material';
import { MatDialog, MatDialogRef } from '@angular/material/dialog';
import { AppConfig, DialogService, OTableComponent, OTranslateService, SnackBarService } from 'ontimize-web-ngx';
import { OReportService } from '../../../services/o-report.service';
import { OReportColumnStyle } from '../../../types/report-column-style.type';
import { OReportColumn } from '../../../types/report-column.type';
import { OReportConfiguration } from '../../../types/report-configuration.type';
import { OReportFunction } from '../../../types/report-function.type';
import { OReportOrderBy } from '../../../types/report-orderBy.type';
import { OReportPreferences } from '../../../types/report-preferences.type';
export declare class ReportOnDemandComponent implements OnInit {
    injector: Injector;
    dialogRef: MatDialogRef<ReportOnDemandComponent>;
    data: OTableComponent;
    columnsList: MatSelectionList;
    functionsList: MatSelectionList;
    orderByList: MatSelectionList;
    orientations: {
        text: string;
        value: boolean;
    }[];
    functionsData: OReportFunction[];
    private initialFunctionsData;
    appliedConfiguration: boolean;
    selectedFunctions: any[];
    stylesArray: {
        value: string;
        viewValue: string;
    }[];
    columnsData: Array<OReportColumn>;
    private initialColumnsData;
    selectedColumnsData: string[];
    columnsOrderBy: Array<OReportOrderBy>;
    columnsToGroupData: any[];
    private initialColumnsToGroupData;
    openedSidenav: boolean;
    fullscreen: boolean;
    protected service: string;
    protected language: string;
    protected columnsArray: Array<string>;
    protected table: OTableComponent;
    private blankPdf;
    currentPreference: OReportPreferences;
    currentConfiguration: OReportConfiguration;
    pdf: string;
    translateService: OTranslateService;
    protected appConfig: AppConfig;
    protected snackBarService: SnackBarService;
    protected reportService: OReportService;
    protected dialogService: DialogService;
    dialog: MatDialog;
    constructor(injector: Injector, dialogRef: MatDialogRef<ReportOnDemandComponent>, data: OTableComponent);
    ngOnInit(): void;
    protected initialize(): void;
    getDefaultServiceConfiguration(serviceName?: string): any;
    previewReport(): void;
    clearCurrentPreferences(): void;
    protected initializeReportPreferences(): void;
    protected parseColumnsVisible(): string[];
    protected parseReportColumn(columns: any[]): OReportColumn[];
    protected parseColumnStyle(column: string): OReportColumnStyle;
    protected parseColumnsOrderBy(columnsOrderBy: any): OReportOrderBy[];
    protected openReport(): void;
    getFunctions(): void;
    parseDefaultFunctionsData(listColumns: OReportFunction[]): OReportFunction[];
    /**
     * Checks preference data is consistent with the table data
     */
    private checkPreferenceData;
    applyConfiguration(configuration: any): void;
    private getSortIndex;
    showColumnStyleDialog(event: Event, id: string): void;
    updateColumnStyleConfigurationData(data: OReportColumn): void;
    selectFunction(event: any, reportFunction: OReportFunction): void;
    private updatedFunctionData;
    private updatedSelectFunction;
    openSaveAsPreferences(): void;
    dropColumns(event: CdkDragDrop<string[]>): void;
    dropGroups(event: CdkDragDrop<any[]>): void;
    dropColumnsOrderBy(event: CdkDragDrop<string[]>): void;
    updateColumnsSort(): void;
    updateColumnGroupBySort(): void;
    updateColumnToGroupSort(): void;
    onApplyConfigurationClicked(): void;
    openSavePreferences(): void;
    savePreferences(data: any, update?: boolean): void;
    private showConfirmOperatinInSnackBar;
    setFullscreenDialog(): void;
    onSelectionChangeColumns(event: MatSelectionListChange): void;
    onSelectionChangeGroups(event: MatSelectionListChange): void;
    updateColumnsOrderByData(columnId: string, event?: MatSelectionListChange): void;
    addColumnData(columnSelected: any): void;
    onSelectionChangeFunctions(event: MatSelectionListChange): void;
    changeOrder(column: OReportOrderBy, event: any): void;
    isCheckedColumn(column: OReportColumn): boolean;
    isCheckedFunction(column: OReportFunction): boolean;
    columnsOrderByCompareFunction(co1: OReportOrderBy, co2: OReportOrderBy): boolean;
    onCheckboxStyleClick(value: any): void;
    columnsCompareFunction(co1: OReportColumn, co2: OReportColumn): boolean;
    functionsCompareFunction(co1: OReportFunction, co2: OReportFunction): boolean;
    protected createRenderer(column: string): any;
}
