/**
 * @fileoverview added by tsickle
 * Generated from: lib/util/o-reports-translate.pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe, Injector } from '@angular/core';
import { OTranslateService } from 'ontimize-web-ngx';
import * as CORE_TRANSLATIONS from '../i18n/i18n';
export class OReportsTranslatePipe {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        this.injector = injector;
        this.translateService = this.injector.get(OTranslateService);
    }
    /**
     * @param {?} text
     * @return {?}
     */
    transform(text) {
        /** @type {?} */
        let textTranslated = undefined;
        /** @type {?} */
        let bundle = CORE_TRANSLATIONS.MAP[this.translateService.getCurrentLang()];
        if (bundle && bundle[text]) {
            textTranslated = bundle[text];
        }
        else {
            textTranslated = this.translateService.get(text);
        }
        return textTranslated;
    }
}
OReportsTranslatePipe.decorators = [
    { type: Pipe, args: [{
                name: 'oReportsTranslate',
                pure: false
            },] }
];
/** @nocollapse */
OReportsTranslatePipe.ctorParameters = () => [
    { type: Injector }
];
if (false) {
    /**
     * @type {?}
     * @protected
     */
    OReportsTranslatePipe.prototype.translateService;
    /**
     * @type {?}
     * @protected
     */
    OReportsTranslatePipe.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1yZXBvcnRzLXRyYW5zbGF0ZS5waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vb250aW1pemUtd2ViLW5neC1yZXBvcnQvIiwic291cmNlcyI6WyJsaWIvdXRpbC9vLXJlcG9ydHMtdHJhbnNsYXRlLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDckQsT0FBTyxLQUFLLGlCQUFpQixNQUFNLGNBQWMsQ0FBQztBQU1sRCxNQUFNLE9BQU8scUJBQXFCOzs7O0lBSWhDLFlBQXNCLFFBQWtCO1FBQWxCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDdEMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDL0QsQ0FBQzs7Ozs7SUFFRCxTQUFTLENBQUMsSUFBWTs7WUFDaEIsY0FBYyxHQUFHLFNBQVM7O1lBQzFCLE1BQU0sR0FBRyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQzFFLElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUMxQixjQUFjLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQy9CO2FBQU07WUFDTCxjQUFjLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNsRDtRQUNELE9BQU8sY0FBYyxDQUFDO0lBQ3hCLENBQUM7OztZQXJCRixJQUFJLFNBQUM7Z0JBQ0osSUFBSSxFQUFFLG1CQUFtQjtnQkFDekIsSUFBSSxFQUFFLEtBQUs7YUFDWjs7OztZQVA2QixRQUFROzs7Ozs7O0lBVXBDLGlEQUE4Qzs7Ozs7SUFFbEMseUNBQTRCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9UcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnb250aW1pemUtd2ViLW5neCc7XG5pbXBvcnQgKiBhcyBDT1JFX1RSQU5TTEFUSU9OUyBmcm9tICcuLi9pMThuL2kxOG4nO1xuXG5AUGlwZSh7XG4gIG5hbWU6ICdvUmVwb3J0c1RyYW5zbGF0ZScsXG4gIHB1cmU6IGZhbHNlXG59KVxuZXhwb3J0IGNsYXNzIE9SZXBvcnRzVHJhbnNsYXRlUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuXG4gIHByb3RlY3RlZCB0cmFuc2xhdGVTZXJ2aWNlOiBPVHJhbnNsYXRlU2VydmljZTtcblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgaW5qZWN0b3I6IEluamVjdG9yKSB7XG4gICAgdGhpcy50cmFuc2xhdGVTZXJ2aWNlID0gdGhpcy5pbmplY3Rvci5nZXQoT1RyYW5zbGF0ZVNlcnZpY2UpO1xuICB9XG5cbiAgdHJhbnNmb3JtKHRleHQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgbGV0IHRleHRUcmFuc2xhdGVkID0gdW5kZWZpbmVkO1xuICAgIGxldCBidW5kbGUgPSBDT1JFX1RSQU5TTEFUSU9OUy5NQVBbdGhpcy50cmFuc2xhdGVTZXJ2aWNlLmdldEN1cnJlbnRMYW5nKCldO1xuICAgIGlmIChidW5kbGUgJiYgYnVuZGxlW3RleHRdKSB7XG4gICAgICB0ZXh0VHJhbnNsYXRlZCA9IGJ1bmRsZVt0ZXh0XTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGV4dFRyYW5zbGF0ZWQgPSB0aGlzLnRyYW5zbGF0ZVNlcnZpY2UuZ2V0KHRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gdGV4dFRyYW5zbGF0ZWQ7XG4gIH1cblxufVxuIl19