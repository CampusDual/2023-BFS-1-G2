/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/report/o-report-viewer/o-report-viewer.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Inject, ViewEncapsulation } from '@angular/core';
import { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';
import { DialogService } from 'ontimize-web-ngx';
import { OReportService } from '../../../services/o-report.service';
import { Utils } from '../../../util/utils';
export class OReportViewerComponent {
    /**
     * @param {?} dialogRef
     * @param {?} reportService
     * @param {?} dialogService
     * @param {?} data
     */
    constructor(dialogRef, reportService, dialogService, data) {
        this.dialogRef = dialogRef;
        this.reportService = reportService;
        this.dialogService = dialogService;
        this.data = data;
        this.pdf = '';
        this.name = '';
        this.fullscreen = false;
        this.reportService.configureService(this.reportService.getDefaultServiceConfiguration());
        this.reportService.configureAdapter();
        this.name = this.data.name;
        this.reportService.fillReport(this.data['params'], 'fillReport', {}, this.data['filter']).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            if (res && res.data.length && res.code === 0) {
                this.pdf = res.data[0].file;
            }
        }), (/**
         * @param {?} err
         * @return {?}
         */
        err => {
            if (this.dialogService) {
                this.dialogService.error('ERROR', 'SERVER_ERROR_MESSAGE');
            }
            console.log(err);
        }));
    }
    /**
     * @return {?}
     */
    setFullscreenDialog() {
        Utils.setFullscreenDialog(this.fullscreen, this.dialogRef);
        this.fullscreen = !this.fullscreen;
    }
}
OReportViewerComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-report-viewer',
                template: "<div mat-dialog-title class=\"dialog-title\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n  {{ name }}\n  <div>\n    <mat-icon aria-label=\"fullscreen dialog\" (click)=\"setFullscreenDialog()\">\n      <ng-container *ngIf=\"fullscreen\">fullscreen_exit</ng-container>\n      <ng-container *ngIf=\"!fullscreen\">fullscreen</ng-container>\n    </mat-icon>\n    <mat-icon svgIcon=\"ontimize:close\" [mat-dialog-close]=\"true\"></mat-icon>\n  </div>\n</div>\n<div #dialog mat-dialog-content class=\"dialog-container\">\n  <ngx-extended-pdf-viewer [base64Src]=\"pdf\" [filenameForDownload]=\"name\" [showBookmarkButton]=\"false\" [showPropertiesButton]=\"false\"\n    [showOpenFileButton]=\"false\" useBrowserLocale=\"true\" delayFirstView=\"1000\" [textLayer]=\"true\"></ngx-extended-pdf-viewer>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                host: {
                    '[class.o-report-viewer]': 'true'
                },
                styles: [".o-dialog-class .mat-dialog-container .o-report-viewer .mat-dialog-title .mat-icon{cursor:pointer}.o-dialog-class .mat-dialog-container .o-report-viewer .mat-dialog-content{max-height:calc(100% - 36px - 8px);height:100%;padding-top:8px;padding-bottom:0}.o-dialog-class .mat-dialog-container .o-report-viewer ngx-extended-pdf-viewer .zoom{height:100%}"]
            }] }
];
/** @nocollapse */
OReportViewerComponent.ctorParameters = () => [
    { type: MatDialogRef },
    { type: OReportService },
    { type: DialogService },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
];
if (false) {
    /** @type {?} */
    OReportViewerComponent.prototype.pdf;
    /** @type {?} */
    OReportViewerComponent.prototype.name;
    /** @type {?} */
    OReportViewerComponent.prototype.fullscreen;
    /** @type {?} */
    OReportViewerComponent.prototype.dialogRef;
    /**
     * @type {?}
     * @private
     */
    OReportViewerComponent.prototype.reportService;
    /**
     * @type {?}
     * @protected
     */
    OReportViewerComponent.prototype.dialogService;
    /** @type {?} */
    OReportViewerComponent.prototype.data;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1yZXBvcnQtdmlld2VyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL29udGltaXplLXdlYi1uZ3gtcmVwb3J0LyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcmVwb3J0L28tcmVwb3J0LXZpZXdlci9vLXJlcG9ydC12aWV3ZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckUsT0FBTyxFQUFFLFlBQVksRUFBRSxlQUFlLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNsRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDakQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ3BFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQVc1QyxNQUFNLE9BQU8sc0JBQXNCOzs7Ozs7O0lBTWpDLFlBQ1MsU0FBK0MsRUFDOUMsYUFBNkIsRUFDM0IsYUFBNEIsRUFDTixJQUFTO1FBSGxDLGNBQVMsR0FBVCxTQUFTLENBQXNDO1FBQzlDLGtCQUFhLEdBQWIsYUFBYSxDQUFnQjtRQUMzQixrQkFBYSxHQUFiLGFBQWEsQ0FBZTtRQUNOLFNBQUksR0FBSixJQUFJLENBQUs7UUFScEMsUUFBRyxHQUFHLEVBQUUsQ0FBQztRQUNULFNBQUksR0FBRyxFQUFFLENBQUM7UUFDVixlQUFVLEdBQVksS0FBSyxDQUFDO1FBT2pDLElBQUksQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyw4QkFBOEIsRUFBRSxDQUFDLENBQUM7UUFDekYsSUFBSSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQ3RDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDM0IsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxZQUFZLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxTQUFTOzs7O1FBQ2pHLEdBQUcsQ0FBQyxFQUFFO1lBQ0osSUFBSSxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksR0FBRyxDQUFDLElBQUksS0FBSyxDQUFDLEVBQUU7Z0JBQzVDLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7YUFDN0I7UUFDSCxDQUFDOzs7O1FBQ0QsR0FBRyxDQUFDLEVBQUU7WUFDSixJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUU7Z0JBQ3RCLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFDOUIsc0JBQXNCLENBQUMsQ0FBQzthQUMzQjtZQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbkIsQ0FBQyxFQUNGLENBQUM7SUFDSixDQUFDOzs7O0lBQ0QsbUJBQW1CO1FBQ2pCLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUMzRCxJQUFJLENBQUMsVUFBVSxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUNyQyxDQUFDOzs7WUF6Q0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxpQkFBaUI7Z0JBQzNCLDB6QkFBK0M7Z0JBRS9DLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO2dCQUNyQyxJQUFJLEVBQUU7b0JBQ0oseUJBQXlCLEVBQUUsTUFBTTtpQkFDbEM7O2FBQ0Y7Ozs7WUFiUSxZQUFZO1lBRVosY0FBYztZQURkLGFBQWE7NENBdUJqQixNQUFNLFNBQUMsZUFBZTs7OztJQVJ6QixxQ0FBZ0I7O0lBQ2hCLHNDQUFpQjs7SUFDakIsNENBQW1DOztJQUdqQywyQ0FBc0Q7Ozs7O0lBQ3RELCtDQUFxQzs7Ozs7SUFDckMsK0NBQXNDOztJQUN0QyxzQ0FBeUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEluamVjdCwgVmlld0VuY2Fwc3VsYXRpb24gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1hdERpYWxvZ1JlZiwgTUFUX0RJQUxPR19EQVRBIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwnO1xuaW1wb3J0IHsgRGlhbG9nU2VydmljZSB9IGZyb20gJ29udGltaXplLXdlYi1uZ3gnO1xuaW1wb3J0IHsgT1JlcG9ydFNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9zZXJ2aWNlcy9vLXJlcG9ydC5zZXJ2aWNlJztcbmltcG9ydCB7IFV0aWxzIH0gZnJvbSAnLi4vLi4vLi4vdXRpbC91dGlscyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ28tcmVwb3J0LXZpZXdlcicsXG4gIHRlbXBsYXRlVXJsOiAnLi9vLXJlcG9ydC12aWV3ZXIuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9vLXJlcG9ydC12aWV3ZXIuY29tcG9uZW50LnNjc3MnXSxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgaG9zdDoge1xuICAgICdbY2xhc3Muby1yZXBvcnQtdmlld2VyXSc6ICd0cnVlJ1xuICB9XG59KVxuZXhwb3J0IGNsYXNzIE9SZXBvcnRWaWV3ZXJDb21wb25lbnQge1xuXG4gIHB1YmxpYyBwZGYgPSAnJztcbiAgcHVibGljIG5hbWUgPSAnJztcbiAgcHVibGljIGZ1bGxzY3JlZW46IGJvb2xlYW4gPSBmYWxzZTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgZGlhbG9nUmVmOiBNYXREaWFsb2dSZWY8T1JlcG9ydFZpZXdlckNvbXBvbmVudD4sXG4gICAgcHJpdmF0ZSByZXBvcnRTZXJ2aWNlOiBPUmVwb3J0U2VydmljZSxcbiAgICBwcm90ZWN0ZWQgZGlhbG9nU2VydmljZTogRGlhbG9nU2VydmljZSxcbiAgICBASW5qZWN0KE1BVF9ESUFMT0dfREFUQSkgcHVibGljIGRhdGE6IGFueSkge1xuICAgIHRoaXMucmVwb3J0U2VydmljZS5jb25maWd1cmVTZXJ2aWNlKHRoaXMucmVwb3J0U2VydmljZS5nZXREZWZhdWx0U2VydmljZUNvbmZpZ3VyYXRpb24oKSk7XG4gICAgdGhpcy5yZXBvcnRTZXJ2aWNlLmNvbmZpZ3VyZUFkYXB0ZXIoKTtcbiAgICB0aGlzLm5hbWUgPSB0aGlzLmRhdGEubmFtZTtcbiAgICB0aGlzLnJlcG9ydFNlcnZpY2UuZmlsbFJlcG9ydCh0aGlzLmRhdGFbJ3BhcmFtcyddLCAnZmlsbFJlcG9ydCcsIHt9LCB0aGlzLmRhdGFbJ2ZpbHRlciddKS5zdWJzY3JpYmUoXG4gICAgICByZXMgPT4ge1xuICAgICAgICBpZiAocmVzICYmIHJlcy5kYXRhLmxlbmd0aCAmJiByZXMuY29kZSA9PT0gMCkge1xuICAgICAgICAgIHRoaXMucGRmID0gcmVzLmRhdGFbMF0uZmlsZTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGVyciA9PiB7XG4gICAgICAgIGlmICh0aGlzLmRpYWxvZ1NlcnZpY2UpIHtcbiAgICAgICAgICB0aGlzLmRpYWxvZ1NlcnZpY2UuZXJyb3IoJ0VSUk9SJyxcbiAgICAgICAgICAgICdTRVJWRVJfRVJST1JfTUVTU0FHRScpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICB9XG4gICAgKTtcbiAgfVxuICBzZXRGdWxsc2NyZWVuRGlhbG9nKCk6IHZvaWQge1xuICAgIFV0aWxzLnNldEZ1bGxzY3JlZW5EaWFsb2codGhpcy5mdWxsc2NyZWVuLCB0aGlzLmRpYWxvZ1JlZik7XG4gICAgdGhpcy5mdWxsc2NyZWVuID0gIXRoaXMuZnVsbHNjcmVlbjtcbiAgfVxufVxuIl19