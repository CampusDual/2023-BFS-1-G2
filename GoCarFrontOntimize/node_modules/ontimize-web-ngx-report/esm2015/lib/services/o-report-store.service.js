/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/o-report-store.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector } from "@angular/core";
import { MatDialog } from "@angular/material";
import { DialogService } from "ontimize-web-ngx";
import { OReportViewerComponent } from "../components/report/o-report-viewer/o-report-viewer.component";
import { Utils } from "../util/utils";
import { OReportService } from "./o-report.service";
export class OReportStoreService {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        this.injector = injector;
        this.dialogService = this.injector.get(DialogService);
        this.dialog = this.injector.get(MatDialog);
        this.reportService = this.injector.get(OReportService);
    }
    /**
     * @param {?} reportId
     * @param {?} parametersValues
     * @param {?} filter
     * @return {?}
     */
    openFillReport(reportId, parametersValues, filter) {
        this.reportService.configureService(this.reportService.getDefaultServiceConfiguration());
        this.reportService.configureAdapter();
        /** @type {?} */
        let kv = { 'UUID': reportId };
        this.reportService.query(kv, null, 'getReport', {}).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            if (res && res.data.length && res.code === 0) {
                /** @type {?} */
                let parameters = res.data[0].PARAMETERS;
                /** @type {?} */
                let name = res.data[0].NAME;
                /** @type {?} */
                let av = [];
                if (parameters.length > 0) {
                    av = [reportId];
                    /** @type {?} */
                    let values = Object.values(parametersValues);
                    for (let value of values) {
                        av.push(value);
                    }
                }
                else {
                    av = [reportId];
                }
                /** @type {?} */
                const data = { 'params': av, 'filter': filter, 'name': name };
                Utils.openModalVisor(this.dialog, OReportViewerComponent, data);
            }
        }), (/**
         * @param {?} err
         * @return {?}
         */
        err => {
            if (this.dialogService) {
                this.dialogService.error('ERROR', 'SERVER_ERROR_MESSAGE');
            }
            console.log(err);
        }));
    }
}
OReportStoreService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
OReportStoreService.ctorParameters = () => [
    { type: Injector }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    OReportStoreService.prototype.reportService;
    /**
     * @type {?}
     * @protected
     */
    OReportStoreService.prototype.dialogService;
    /**
     * @type {?}
     * @protected
     */
    OReportStoreService.prototype.dialog;
    /**
     * @type {?}
     * @private
     */
    OReportStoreService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1yZXBvcnQtc3RvcmUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL29udGltaXplLXdlYi1uZ3gtcmVwb3J0LyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL28tcmVwb3J0LXN0b3JlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDOUMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGdFQUFnRSxDQUFDO0FBQ3hHLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdEMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBR3BELE1BQU0sT0FBTyxtQkFBbUI7Ozs7SUFJOUIsWUFDVSxRQUFrQjtRQUFsQixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBRTFCLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQWdCLGFBQWEsQ0FBQyxDQUFDO1FBQ3JFLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQVksU0FBUyxDQUFDLENBQUM7UUFDdEQsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBaUIsY0FBYyxDQUFDLENBQUM7SUFDekUsQ0FBQzs7Ozs7OztJQUVELGNBQWMsQ0FBQyxRQUFnQixFQUFFLGdCQUF3QixFQUFFLE1BQWM7UUFDdkUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLDhCQUE4QixFQUFFLENBQUMsQ0FBQztRQUN6RixJQUFJLENBQUMsYUFBYSxDQUFDLGdCQUFnQixFQUFFLENBQUM7O1lBQ2xDLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUU7UUFDN0IsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsRUFBRSxDQUFDLENBQUMsU0FBUzs7OztRQUMzRCxHQUFHLENBQUMsRUFBRTtZQUNKLElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLEdBQUcsQ0FBQyxJQUFJLEtBQUssQ0FBQyxFQUFFOztvQkFDeEMsVUFBVSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVTs7b0JBQ25DLElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUk7O29CQUN2QixFQUFFLEdBQUcsRUFBRTtnQkFDWCxJQUFJLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO29CQUN6QixFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQzs7d0JBQ1osTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUM7b0JBQzVDLEtBQUssSUFBSSxLQUFLLElBQUksTUFBTSxFQUFFO3dCQUN4QixFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO3FCQUNoQjtpQkFDRjtxQkFBTTtvQkFDTCxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztpQkFDakI7O3NCQUNLLElBQUksR0FBRyxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFO2dCQUM3RCxLQUFLLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsc0JBQXNCLEVBQUUsSUFBSSxDQUFDLENBQUE7YUFFaEU7UUFDSCxDQUFDOzs7O1FBQ0QsR0FBRyxDQUFDLEVBQUU7WUFDSixJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUU7Z0JBQ3RCLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFDOUIsc0JBQXNCLENBQUMsQ0FBQzthQUMzQjtZQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbkIsQ0FBQyxFQUNGLENBQUM7SUFFSixDQUFDOzs7WUE5Q0YsVUFBVTs7OztZQVBVLFFBQVE7Ozs7Ozs7SUFTM0IsNENBQXNDOzs7OztJQUN0Qyw0Q0FBdUM7Ozs7O0lBQ3ZDLHFDQUEyQjs7Ozs7SUFFekIsdUNBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgTWF0RGlhbG9nIH0gZnJvbSBcIkBhbmd1bGFyL21hdGVyaWFsXCI7XG5pbXBvcnQgeyBEaWFsb2dTZXJ2aWNlIH0gZnJvbSBcIm9udGltaXplLXdlYi1uZ3hcIjtcbmltcG9ydCB7IE9SZXBvcnRWaWV3ZXJDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9yZXBvcnQvby1yZXBvcnQtdmlld2VyL28tcmVwb3J0LXZpZXdlci5jb21wb25lbnRcIjtcbmltcG9ydCB7IFV0aWxzIH0gZnJvbSBcIi4uL3V0aWwvdXRpbHNcIjtcbmltcG9ydCB7IE9SZXBvcnRTZXJ2aWNlIH0gZnJvbSBcIi4vby1yZXBvcnQuc2VydmljZVwiO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgT1JlcG9ydFN0b3JlU2VydmljZSB7XG4gIHByaXZhdGUgcmVwb3J0U2VydmljZTogT1JlcG9ydFNlcnZpY2U7XG4gIHByb3RlY3RlZCBkaWFsb2dTZXJ2aWNlOiBEaWFsb2dTZXJ2aWNlO1xuICBwcm90ZWN0ZWQgZGlhbG9nOiBNYXREaWFsb2dcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3JcbiAgKSB7XG4gICAgdGhpcy5kaWFsb2dTZXJ2aWNlID0gdGhpcy5pbmplY3Rvci5nZXQ8RGlhbG9nU2VydmljZT4oRGlhbG9nU2VydmljZSk7XG4gICAgdGhpcy5kaWFsb2cgPSB0aGlzLmluamVjdG9yLmdldDxNYXREaWFsb2c+KE1hdERpYWxvZyk7XG4gICAgdGhpcy5yZXBvcnRTZXJ2aWNlID0gdGhpcy5pbmplY3Rvci5nZXQ8T1JlcG9ydFNlcnZpY2U+KE9SZXBvcnRTZXJ2aWNlKTtcbiAgfVxuXG4gIG9wZW5GaWxsUmVwb3J0KHJlcG9ydElkOiBzdHJpbmcsIHBhcmFtZXRlcnNWYWx1ZXM6IG9iamVjdCwgZmlsdGVyOiBvYmplY3QpIHtcbiAgICB0aGlzLnJlcG9ydFNlcnZpY2UuY29uZmlndXJlU2VydmljZSh0aGlzLnJlcG9ydFNlcnZpY2UuZ2V0RGVmYXVsdFNlcnZpY2VDb25maWd1cmF0aW9uKCkpO1xuICAgIHRoaXMucmVwb3J0U2VydmljZS5jb25maWd1cmVBZGFwdGVyKCk7XG4gICAgbGV0IGt2ID0geyAnVVVJRCc6IHJlcG9ydElkIH07XG4gICAgdGhpcy5yZXBvcnRTZXJ2aWNlLnF1ZXJ5KGt2LCBudWxsLCAnZ2V0UmVwb3J0Jywge30pLnN1YnNjcmliZShcbiAgICAgIHJlcyA9PiB7XG4gICAgICAgIGlmIChyZXMgJiYgcmVzLmRhdGEubGVuZ3RoICYmIHJlcy5jb2RlID09PSAwKSB7XG4gICAgICAgICAgbGV0IHBhcmFtZXRlcnMgPSByZXMuZGF0YVswXS5QQVJBTUVURVJTO1xuICAgICAgICAgIGxldCBuYW1lID0gcmVzLmRhdGFbMF0uTkFNRTtcbiAgICAgICAgICBsZXQgYXYgPSBbXTtcbiAgICAgICAgICBpZiAocGFyYW1ldGVycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBhdiA9IFtyZXBvcnRJZF07XG4gICAgICAgICAgICBsZXQgdmFsdWVzID0gT2JqZWN0LnZhbHVlcyhwYXJhbWV0ZXJzVmFsdWVzKTtcbiAgICAgICAgICAgIGZvciAobGV0IHZhbHVlIG9mIHZhbHVlcykge1xuICAgICAgICAgICAgICBhdi5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXYgPSBbcmVwb3J0SWRdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBkYXRhID0geyAncGFyYW1zJzogYXYsICdmaWx0ZXInOiBmaWx0ZXIsICduYW1lJzogbmFtZSB9O1xuICAgICAgICAgIFV0aWxzLm9wZW5Nb2RhbFZpc29yKHRoaXMuZGlhbG9nLCBPUmVwb3J0Vmlld2VyQ29tcG9uZW50LCBkYXRhKVxuXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBlcnIgPT4ge1xuICAgICAgICBpZiAodGhpcy5kaWFsb2dTZXJ2aWNlKSB7XG4gICAgICAgICAgdGhpcy5kaWFsb2dTZXJ2aWNlLmVycm9yKCdFUlJPUicsXG4gICAgICAgICAgICAnU0VSVkVSX0VSUk9SX01FU1NBR0UnKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgfVxuICAgICk7XG5cbiAgfVxufSJdfQ==