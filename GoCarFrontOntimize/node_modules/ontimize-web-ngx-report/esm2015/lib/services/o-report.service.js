/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/o-report.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector } from "@angular/core";
import { Observable, OErrorDialogManager, OntimizeEEService, Util } from 'ontimize-web-ngx';
import { HttpEventType, HttpHeaders, HttpRequest } from "@angular/common/http";
import { share } from 'rxjs/operators';
import * as i0 from "@angular/core";
export class OReportService extends OntimizeEEService {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        super(injector);
        this.injector = injector;
        super.configureService(this.getDefaultServiceConfiguration());
        this.oErrorDialogManager = injector.get(OErrorDialogManager);
    }
    /**
     * @param {?} reportparams
     * @return {?}
     */
    createReport(reportparams) {
        /** @type {?} */
        const body = JSON.stringify(reportparams);
        /** @type {?} */
        const url = this.urlBase + '/dynamicjasper/report';
        return this.doRequest({
            method: 'POST',
            url: url,
            body: body
        });
    }
    /**
     * @param {?=} preferencesparams
     * @return {?}
     */
    saveAsPreferences(preferencesparams) {
        /** @type {?} */
        const body = JSON.stringify(preferencesparams);
        /** @type {?} */
        const url = this.urlBase + '/preferences/save';
        return this.doRequest({
            method: 'POST',
            url: url,
            body: body
        });
    }
    /**
     * @param {?} id
     * @param {?=} preferencesparams
     * @return {?}
     */
    savePreferences(id, preferencesparams) {
        /** @type {?} */
        const body = JSON.stringify(preferencesparams);
        /** @type {?} */
        const url = this.urlBase + '/preferences/update/' + id;
        return this.doRequest({
            method: 'PUT',
            url: url,
            body: body
        });
    }
    /**
     * @param {?=} entity
     * @param {?=} service
     * @return {?}
     */
    getPreferences(entity, service) {
        /** @type {?} */
        const url = this.urlBase + '/preferences/preferences?entity=' + entity + '&service=' + service + "&type=REPORT";
        return this.doRequest({
            method: 'GET',
            url: url
        });
    }
    /**
     * @param {?=} functionparams
     * @return {?}
     */
    getFunctions(functionparams) {
        /** @type {?} */
        const body = JSON.stringify(functionparams);
        /** @type {?} */
        const url = this.urlBase + '/dynamicjasper/functionsName';
        return this.doRequest({
            method: 'POST',
            url: url,
            body: body
        });
    }
    /**
     * @param {?=} id
     * @return {?}
     */
    deletePreferences(id) {
        /** @type {?} */
        const url = this.urlBase + '/preferences/remove/' + id;
        return this.doRequest({
            method: 'DELETE',
            url: url
        });
    }
    /**
     * overridden method to add error callback for all requests
     * @param {?} param
     * @return {?}
     */
    doRequest(param) {
        return super.doRequest({
            method: param.method,
            url: param.url,
            body: param.body,
            errorCallBack: this.errorCallBack
        });
    }
    /**
     * @param {?} httpErrorResponse
     * @return {?}
     */
    errorCallBack(httpErrorResponse) {
        /** @type {?} */
        const error = httpErrorResponse.error;
        if (Util.isObject(error)) {
            if (error['code'] === 1 && Util.isDefined(error['message'])) {
                this.showNotificationError(error['message']);
                return;
            }
        }
        this.showNotificationError('MESSAGES.ERROR_QUERY');
    }
    /**
     * @param {?} error
     * @return {?}
     */
    showNotificationError(error) {
        this.oErrorDialogManager.openErrorDialog(error);
    }
    /**
     * @param {?} files
     * @param {?} entity
     * @param {?=} data
     * @return {?}
     */
    upload(files, entity, data) {
        /** @type {?} */
        const dataObservable = new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        observer => {
            /** @type {?} */
            let url = `${this.urlBase}/reportstore/${entity}`;
            /** @type {?} */
            const toUpload = new FormData();
            files.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                item.prepareToUpload();
                item.isUploading = true;
                toUpload.append('name', item.name);
                toUpload.append('file', item.file);
            }));
            if (data) {
                toUpload.append('data', JSON.stringify(data));
            }
            /** @type {?} */
            const request = new HttpRequest('POST', url, toUpload, {
                headers: this.buildHeadersReport(),
                reportProgress: true
            });
            this.httpClient.request(request).subscribe((/**
             * @param {?} resp
             * @return {?}
             */
            resp => {
                if (HttpEventType.UploadProgress === resp.type) {
                    // Upload progress event received
                    /** @type {?} */
                    const progressData = {
                        loaded: resp.loaded,
                        total: resp.total
                    };
                    observer.next(progressData);
                }
                else if (HttpEventType.Response === resp.type) {
                    // Full response received
                    if (resp.body) {
                        this.bodyCode(resp, observer);
                    }
                    else {
                        observer.next(resp.body);
                    }
                }
            }), (/**
             * @param {?} error
             * @return {?}
             */
            error => {
                console.error(error);
                if (error.status === 401) {
                    this.authService.logout();
                }
                else {
                    observer.error(error);
                }
            }), (/**
             * @return {?}
             */
            () => observer.complete()));
        }));
        return dataObservable.pipe(share());
    }
    /**
     * @protected
     * @param {?} resp
     * @param {?} observer
     * @return {?}
     */
    bodyCode(resp, observer) {
        if (resp.body['code'] === 3) {
            this.authService.logout();
        }
        else if (resp.body['code'] === 1) {
            observer.error(resp.body['message']);
        }
        else if (resp.body['code'] === 0) {
            // RESPONSE
            observer.next(resp.body);
        }
        else {
            // Unknow state -> error
            observer.error('Service unavailable');
        }
    }
    /**
     * @param {?=} _kv
     * @param {?=} _av
     * @param {?=} entity
     * @param {?=} _sqltypes
     * @param {?=} offset
     * @param {?=} _pagesize
     * @param {?=} _orderby
     * @return {?}
     */
    advancedQuery(_kv, _av, entity, _sqltypes, offset, _pagesize, _orderby) {
        offset = (Util.isDefined(offset)) ? offset : this.offset;
        // Calculate page
        /** @type {?} */
        let page = 0;
        if (Util.isDefined(offset)) {
            page = Math.trunc(offset / 10) + 1;
        }
        /** @type {?} */
        let url = this.urlBase + '/reportstore/' + entity + '/?format=json' + '&page=' + page;
        return this.doRequest({
            method: 'GET',
            url: url
        });
    }
    /**
     * @param {?=} kv
     * @param {?=} _av
     * @param {?=} entity
     * @param {?=} _sqltypes
     * @return {?}
     */
    query(kv, _av, entity, _sqltypes) {
        /** @type {?} */
        const identifier = kv['UUID'];
        /** @type {?} */
        let url = '';
        if (Object.keys(kv).length === 0) {
            url = `${this.urlBase}/reportstore/${entity}`;
        }
        else {
            url = `${this.urlBase}/reportstore/${entity}/` + identifier;
        }
        return this.doRequest({
            method: 'GET',
            url: url
        });
    }
    /**
     * @param {?=} av
     * @param {?=} entity
     * @param {?=} _sqltypes
     * @param {?=} filter
     * @return {?}
     */
    fillReport(av, entity, _sqltypes, filter) {
        /** @type {?} */
        const identifier = av[0];
        /** @type {?} */
        let params = '';
        for (let i = 1; i < av.length; i++)
            params = params + av[i].toString() + ',';
        /** @type {?} */
        let body = JSON.stringify({
            params: params,
            filter: filter
        });
        /** @type {?} */
        let url = `${this.urlBase}/reportstore/${entity}/` + identifier;
        return this.doRequest({
            method: 'POST',
            url: url,
            body: body
        });
    }
    /**
     * @param {?=} kv
     * @param {?=} _entity
     * @param {?=} _sqltypes
     * @return {?}
     */
    delete(kv, _entity, _sqltypes) {
        /** @type {?} */
        const identifier = kv.valueOf()[Object.keys(kv)[0]];
        /** @type {?} */
        let url = `${this.urlBase}/reportstore/removeReport/` + identifier;
        return this.doRequest({
            method: 'DELETE',
            url: url
        });
    }
    /**
     * @param {?=} kv
     * @param {?=} av
     * @param {?=} _entity
     * @param {?=} _sqltypes
     * @return {?}
     */
    update(kv, av, _entity, _sqltypes) {
        /** @type {?} */
        const identifier = kv.valueOf()[Object.keys(kv)[0]];
        /** @type {?} */
        let url = `${this.urlBase}/reportstore/updateReport/` + identifier;
        return this.doRequest({
            method: 'PUT',
            url: url,
            body: av
        });
    }
    /**
     * @protected
     * @return {?}
     */
    buildHeadersReport() {
        /** @type {?} */
        let headers = new HttpHeaders({ 'Access-Control-Allow-Origin': '*' });
        /** @type {?} */
        const sessionId = this.authService.getSessionInfo().id;
        if (Util.isDefined(sessionId)) {
            headers = headers.append('Authorization', 'Bearer ' + sessionId);
        }
        return headers;
    }
}
OReportService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
OReportService.ctorParameters = () => [
    { type: Injector }
];
/** @nocollapse */ OReportService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function OReportService_Factory() { return new OReportService(i0.ɵɵinject(i0.INJECTOR)); }, token: OReportService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @protected
     */
    OReportService.prototype.oErrorDialogManager;
    /**
     * @type {?}
     * @protected
     */
    OReportService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,