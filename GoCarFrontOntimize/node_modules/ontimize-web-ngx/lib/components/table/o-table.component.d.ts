import { SelectionModel } from '@angular/cdk/collections';
import { DomPortalOutlet } from '@angular/cdk/portal';
import { CdkVirtualScrollViewport } from '@angular/cdk/scrolling';
import { AfterViewInit, ApplicationRef, ComponentFactoryResolver, ElementRef, EventEmitter, Injector, OnDestroy, OnInit, QueryList, SimpleChange, TemplateRef, ViewContainerRef } from '@angular/core';
import { MatCheckboxChange, MatDialog, MatMenu, MatTab, MatTabGroup, PageEvent } from '@angular/material';
import { Observable, Subscription } from 'rxjs';
import { OTableButton } from '../../interfaces/o-table-button.interface';
import { OTableButtons } from '../../interfaces/o-table-buttons.interface';
import { OTableColumnsGrouping } from '../../interfaces/o-table-columns-grouping-interface';
import { OTableDataSource } from '../../interfaces/o-table-datasource.interface';
import { OTableMenu } from '../../interfaces/o-table-menu.interface';
import { OTableOptions } from '../../interfaces/o-table-options.interface';
import { OTablePaginator } from '../../interfaces/o-table-paginator.interface';
import { OTableQuickfilter } from '../../interfaces/o-table-quickfilter.interface';
import { SnackBarService } from '../../services/snackbar.service';
import { OTableComponentStateClass } from '../../services/state/o-table-component-state.class';
import { OTableComponentStateService } from '../../services/state/o-table-component-state.service';
import { OColumnDisplay, OFilterDefinition, OGroupedColumnTypes } from '../../types';
import { Expression } from '../../types/expression.type';
import { OPermissions } from '../../types/o-permissions.type';
import { OQueryDataArgs } from '../../types/query-data-args.type';
import { QuickFilterFunction } from '../../types/quick-filter-function.type';
import { SQLOrder } from '../../types/sql-order.type';
import { OColumnAggregate } from '../../types/table/o-column-aggregate.type';
import { OColumnValueFilter } from '../../types/table/o-column-value-filter.type';
import { OTableGlobalConfig } from '../../types/table/o-table-global-config.type';
import { OTableInitializationOptions } from '../../types/table/o-table-initialization-options.type';
import { OTableMenuPermissions } from '../../types/table/o-table-menu-permissions.type';
import { OTablePermissions } from '../../types/table/o-table-permissions.type';
import { OContextMenuComponent } from '../contextmenu/o-context-menu.component';
import { OFormComponent } from '../form/o-form.component';
import { AbstractOServiceComponent } from '../o-service-component.class';
import { OTableColumnCalculatedComponent } from './column/calculated/o-table-column-calculated.component';
import { OColumn } from './column/o-column.class';
import { OTableColumnComponent } from './column/o-table-column.component';
import { OTableContextMenuComponent } from './extensions/contextmenu/o-table-context-menu.component';
import { OTableFilterByColumnDataDialogComponent } from './extensions/dialog/filter-by-column/o-table-filter-by-column-data-dialog.component';
import { OFilterColumn } from './extensions/header/table-columns-filter/columns/o-table-columns-filter-column.component';
import { OTableColumnsFilterComponent } from './extensions/header/table-columns-filter/o-table-columns-filter.component';
import { OTableColumnsGroupingColumnComponent } from './extensions/header/table-columns-grouping/columns/o-table-columns-grouping-column.component';
import { OTableHeaderComponent } from './extensions/header/table-header/o-table-header.component';
import { OTableInsertableRowComponent } from './extensions/header/table-insertable-row/o-table-insertable-row.component';
import { OTableOptionComponent } from './extensions/header/table-option/o-table-option.component';
import { OTableVirtualScrollStrategy } from './extensions/o-table-strategy.service';
import { OTableDao } from './extensions/o-table.dao';
import { OTableGroupedRow } from './extensions/row/o-table-row-group.class';
import { OTableRowExpandableComponent } from './extensions/row/table-row-expandable/o-table-row-expandable.component';
import { OMatSort } from './extensions/sort/o-mat-sort';
export declare const DEFAULT_INPUTS_O_TABLE: string[];
export declare const DEFAULT_OUTPUTS_O_TABLE: string[];
declare type DisableSelectionFunction = (item: any) => boolean;
export declare class OTableComponent extends AbstractOServiceComponent<OTableComponentStateService> implements OnInit, OnDestroy, AfterViewInit {
    injector: Injector;
    protected dialog: MatDialog;
    private _viewContainerRef;
    private appRef;
    private _componentFactoryResolver;
    readonly scrollStrategy: OTableVirtualScrollStrategy;
    static DEFAULT_BASE_SIZE_SPINNER: number;
    static FIRST_LAST_CELL_PADDING: number;
    static EXPANDED_ROW_CONTAINER_CLASS: string;
    static AVAILABLE_GROUPING_COLUMNS_RENDERERS: string[];
    DETAIL_MODE_NONE: string;
    EDIT_MODE_NONE: string;
    protected snackBarService: SnackBarService;
    paginator: OTablePaginator;
    sort: OMatSort;
    virtualScrollViewport: CdkVirtualScrollViewport;
    oTableGlobalConfig: OTableGlobalConfig;
    cdkVirtualScrollViewport: CdkVirtualScrollViewport;
    protected tableHeaders: Array<OTableHeaderComponent>;
    spinnerContainer: ElementRef;
    tableRowExpandable: OTableRowExpandableComponent;
    _filterColumns: Array<OFilterColumn>;
    portalHost: Array<DomPortalOutlet>;
    onDataLoadedCellRendererSubscription: Subscription;
    readonly diameterSpinner: number;
    tableContextMenu: OContextMenuComponent;
    selectAllCheckbox: boolean;
    exportButton: boolean;
    showConfigurationOption: boolean;
    columnsVisibilityButton: boolean;
    showFilterOption: boolean;
    showReportOnDemandOption: boolean;
    showChartsOnDemandOption: boolean;
    showButtonsText: boolean;
    filterColumnActiveByDefault: boolean;
    showResetWidthOption: boolean;
    showExpandableIconFunction: (row: any, rowIndex: number) => boolean | Promise<boolean> | Observable<boolean>;
    protected _oTableOptions: OTableOptions;
    oTableOptions: OTableOptions;
    quickFilter: boolean;
    filterCaseSensitive: boolean;
    insertButton: boolean;
    refreshButton: boolean;
    deleteButton: boolean;
    fixedHeader: boolean;
    showTitle: boolean;
    editionMode: string;
    selectionMode: string;
    protected _horizontalScroll: boolean;
    horizontalScroll: boolean;
    showPaginatorFirstLastButtons: boolean;
    autoAlignTitles: boolean;
    multipleSort: boolean;
    orderable: boolean;
    resizable: boolean;
    autoAdjust: boolean;
    groupable: boolean;
    expandGroupsSameLevel: boolean;
    collapseGroupedColumns: boolean;
    virtualScroll: boolean;
    contextMenu: boolean;
    readonly enabled: boolean;
    protected _selectAllCheckboxVisible: boolean;
    selectAllCheckboxVisible: boolean;
    keepSelectedItems: boolean;
    exportMode: string;
    exportServiceType: string;
    visibleExportDialogButtons: string;
    daoTable: OTableDao | null;
    dataSource: OTableDataSource | null;
    visibleColumns: string;
    searcheableColumns: string[];
    defaultVisibleColumns: string;
    groupedColumns: string;
    sortColumns: string;
    groupedColumnTypes: OGroupedColumnTypes[];
    rowClass: (rowData: any, rowIndex: number) => string | string[];
    protected _visibleColArray: string[];
    visibleColArray: any[];
    sortColArray: SQLOrder[];
    protected tabGroupContainer: MatTabGroup;
    protected tabContainer: MatTab;
    tabGroupChangeSubscription: Subscription;
    protected pendingQuery: boolean;
    protected pendingQueryFilter: any;
    protected setStaticData: boolean;
    protected avoidQueryColumns: Array<any>;
    protected asyncLoadColumns: Array<any>;
    protected asyncLoadSubscriptions: object;
    protected querySubscription: Subscription;
    protected contextMenuSubscription: Subscription;
    protected virtualScrollSubscription: Subscription;
    protected checkViewportSizeSubscription: Subscription;
    protected finishQuerySubscription: boolean;
    onRowSelected: EventEmitter<any>;
    onRowDeselected: EventEmitter<any>;
    onRowDeleted: EventEmitter<any>;
    onReinitialize: EventEmitter<any>;
    onContentChange: EventEmitter<any>;
    onFilterByColumnChange: EventEmitter<any>;
    protected selectionChangeSubscription: Subscription;
    oTableFilterByColumnDataDialogComponent: OTableFilterByColumnDataDialogComponent;
    oTableColumnsFilterComponent: OTableColumnsFilterComponent;
    private showTotalsSubject;
    showTotals: Observable<boolean>;
    private loadingSortingSubject;
    protected loadingSorting: Observable<boolean>;
    private loadingScrollSubject;
    loadingScroll: Observable<boolean>;
    showLoading: Observable<boolean>;
    oTableInsertableRowComponent: OTableInsertableRowComponent;
    showFirstInsertableRow: boolean;
    showLastInsertableRow: boolean;
    expandableItem: SelectionModel<any>;
    protected clickTimer: any;
    protected clickDelay: number;
    protected clickPrevent: boolean;
    editingCell: any;
    protected editingRow: any;
    currentPage: number;
    oTableQuickFilterComponent: OTableQuickfilter;
    protected sortSubscription: Subscription;
    protected onRenderedDataChange: Subscription;
    protected previousRendererData: any;
    quickFilterCallback: QuickFilterFunction;
    disableSelectionFunction: DisableSelectionFunction;
    protected tableBodyEl: ElementRef;
    tableHeaderEl: ElementRef;
    tableToolbarEl: ElementRef;
    horizontalScrolled: boolean;
    onUpdateScrolledState: EventEmitter<any>;
    rowWidth: any;
    storePaginationState: boolean;
    pageScrollVirtual: number;
    static DEFAULT_ROW_HEIGHT: number;
    protected permissions: OTablePermissions;
    matMenu: MatMenu;
    oTableMenu: OTableMenu;
    tableOptions: QueryList<OTableOptionComponent>;
    oTableButtons: OTableButtons;
    tableButtons: QueryList<OTableButton>;
    quickfilterContentChild: OTableQuickfilter;
    exportOptsTemplate: TemplateRef<any>;
    groupedColumnsArray: string[];
    updateScrolledState(): void;
    protected _isColumnFiltersActive: boolean;
    isColumnFiltersActive: boolean;
    groupingHeadersRows: string[];
    oTableColumnsGroupingComponent: OTableColumnsGrouping;
    contextMenuContentChild: OTableContextMenuComponent;
    protected triggerSelectionEvents: boolean;
    constructor(injector: Injector, elRef: ElementRef, dialog: MatDialog, _viewContainerRef: ViewContainerRef, appRef: ApplicationRef, _componentFactoryResolver: ComponentFactoryResolver, form: OFormComponent, scrollStrategy: OTableVirtualScrollStrategy);
    private getGlobalConfig;
    readonly state: OTableComponentStateClass;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    ngOnChanges(changes: {
        [propName: string]: SimpleChange;
    }): void;
    updateHeaderAndFooterStickyPositions(): void;
    protected createExpandableColumn(): void;
    ngOnDestroy(): void;
    getSuffixColumnInsertable(): string;
    getActionsPermissions(): OPermissions[];
    getMenuPermissions(): OTableMenuPermissions;
    getOColumnPermissions(attr: string): OPermissions;
    protected getActionPermissions(attr: string): OPermissions;
    protected checkEnabledActionPermission(attr: string): boolean;
    initialize(): any;
    protected initializeDao(): void;
    reinitialize(options: OTableInitializationOptions): void;
    protected initTableAfterViewInit(): void;
    parseSearcheableColumns(): void;
    destroy(): void;
    getDataToStore(): any;
    registerQuickFilter(arg: any): void;
    registerPagination(value: OTablePaginator): void;
    registerContextMenu(value: OContextMenuComponent): void;
    registerDefaultColumn(column: string): void;
    registerColumn(column: OTableColumnComponent | OTableColumnCalculatedComponent | any): void;
    protected pushOColumnDefinition(colDef: OColumn): void;
    protected refreshEditionModeWarn(): void;
    registerColumnAggregate(column: OColumnAggregate): void;
    registerTableHeaders(tableHeader: OTableHeaderComponent): void;
    parseVisibleColumns(defaultConfiguration?: boolean): void;
    checkChangesVisibleColummnsInInitialConfiguration(stateCols: OColumnDisplay[]): OColumnDisplay[];
    parseSortColumns(): void;
    protected ensureColumnsOrder(): void;
    initializeParams(): void;
    updateStateExpandedColumn(): void;
    registerTabListener(): void;
    protected insideTabBugWorkaround(): void;
    registerSortListener(): void;
    private updateSortingSubject;
    protected onSortChange(sortArray: any[]): void;
    setDatasource(): void;
    protected registerDataSourceListeners(): void;
    getExpandedRowContainerClass(rowIndex: number): string;
    getExpandableItems(): any[];
    toogleRowExpandable(item: any, rowIndex: number, event?: Event): void;
    private emitTableRowExpandableChangeEvent;
    isExpanded(data: any): boolean;
    getStateExpand(row: any): "expanded" | "collapsed";
    isColumnExpandable(): boolean;
    readonly hasExpandedRow: boolean;
    hasInsertableRow(): boolean;
    getNumVisibleColumns(): number;
    queryData(filter?: any, ovrrArgs?: OQueryDataArgs): void;
    protected isInsideInactiveTab(): boolean;
    getComponentFilter(existingFilter?: any): any;
    protected getQuickFilterExpression(): Expression;
    protected getColumnFiltersExpression(): Expression;
    updatePaginationInfo(queryRes: any): void;
    initViewPort(data: any[]): void;
    protected setData(data: any, sqlTypes: any): void;
    showDialogError(error: string, errorOptional?: string): void;
    projectContentChanged(): void;
    getAttributesValuesToQuery(): Array<string>;
    getQueryArguments(filter: object, ovrrArgs?: OQueryDataArgs): Array<any>;
    getSqlTypesForFilter(filter: any): object;
    onExportButtonClicked(): void;
    onChangeColumnsVisibilityClicked(): void;
    onMatTableContentChanged(): void;
    add(): void;
    remove(clearSelectedItems?: boolean): void;
    refresh(): void;
    showAndSelectAllCheckbox(): void;
    reloadPaginatedDataFromStart(clearSelectedItems?: boolean): void;
    reloadData(clearSelectedItems?: boolean): void;
    handleClick(row: any, column: OColumn, rowIndex: number, cellRef: ElementRef, event: MouseEvent): void;
    doHandleClick(row: any, column: string, rowIndex: number, $event: MouseEvent): void;
    handleMultipleSelection(item: any): void;
    protected saveDataNavigationInLocalStorage(): void;
    handleDoubleClick(row: any, column: OColumn, rowIndex: number, cellRef: ElementRef, $event: MouseEvent): void;
    readonly editionEnabled: boolean;
    handleDOMClick(event: any): void;
    protected activateColumnEdition(column: OColumn, row: any, cellRef: any): void;
    updateCellData(column: OColumn, data: any, saveChanges: boolean): Observable<any>;
    protected getKeysValues(): any[];
    onShowsSelects(): void;
    initializeCheckboxColumn(): void;
    protected updateSelectionColumnState(): void;
    getNumRowSelectedInCurrentData(): number;
    isAllSelected(): boolean;
    isIndeterminate(): boolean;
    masterToggle(event: MatCheckboxChange): void;
    selectAll(): void;
    selectionCheckboxToggle(event: MatCheckboxChange, row: any): void;
    selectedRow(row: any): void;
    clearSelection(): void;
    setSelected(item: any): void;
    readonly showDeleteButton: boolean;
    getTrackByFunction(): (index: number, item: any) => string;
    queryRowAsyncData(rowIndex: number, rowData: any): void;
    getValue(): any[];
    getAllValues(): any[];
    getAllRenderedValues(): any[];
    getRenderedValue(): any[];
    getSqlTypes(): any;
    setOTableColumnsFilter(tableColumnsFilter: OTableColumnsFilterComponent): void;
    readonly filterColumns: OFilterColumn[];
    readonly originalFilterColumns: Array<OFilterColumn>;
    readonly originalGroupedColumnsArray: Array<string>;
    getStoredColumnsFilters(): import("../../types").OTableFiltersStatus[];
    getStoredGroupedColumns(): import("../../types").OTableConfiguration[];
    onFilterByColumnClicked(): void;
    onStoreFilterClicked(): void;
    onLoadFilterClicked(): void;
    onClearFilterClicked(): void;
    clearFilters(triggerDatasourceUpdate?: boolean): void;
    clearColumnFilter(attr: string, triggerDatasourceUpdate?: boolean): void;
    filterByColumn(columnValueFilter: OColumnValueFilter): void;
    clearColumnFilters(triggerDatasourceUpdate?: boolean, columnsAttr?: string[]): void;
    isColumnFilterable(column: OColumn): boolean;
    isSearcheableColumn(column: OColumn): boolean;
    isColumnFilterActive(column: OColumn): boolean;
    openColumnFilterDialog(column: OColumn, event: Event): void;
    storeFilterColumns(sortColumnFilter: OFilterColumn): void;
    getStartViewFilterColumn(column: OColumn): string;
    getSortFilterColumn(column: OColumn): string;
    readonly disableTableMenuButton: boolean;
    readonly showTableMenuButton: boolean;
    setOTableInsertableRow(tableInsertableRow: OTableInsertableRowComponent): void;
    clearSelectionAndEditing(clearSelection?: boolean): void;
    protected checkSelectedItemData(): void;
    useDetailButton(column: OColumn): boolean;
    onDetailButtonClick(column: OColumn, row: any, event: any): void;
    getDetailButtonIcon(column: OColumn): string;
    usePlainRender(column: OColumn, row: any): boolean;
    useCellRenderer(column: OColumn, row: any): boolean;
    useCellEditor(column: OColumn, row: any): boolean;
    isSelectionModeMultiple(): boolean;
    isSelectionModeSingle(): boolean;
    isSelectionModeNone(): boolean;
    onChangePage(evt: PageEvent): void;
    getOColumn(attr: string): OColumn;
    insertRecord(recordData: any, sqlTypes?: object): Observable<any>;
    updateRecord(filter: any, updateData: any, sqlTypes?: object): Observable<any>;
    getDataArray(): any[];
    setDataArray(data: Array<any>): void;
    protected deleteLocalItems(): void;
    isColumnSortActive(column: OColumn): boolean;
    isColumnDescSortActive(column: OColumn): boolean;
    hasTabGroupChangeSubscription(): boolean;
    isEmpty(value: any): boolean;
    setFiltersConfiguration(storage?: OTableComponentStateClass): void;
    onStoreConfigurationClicked(): void;
    onApplyConfigurationClicked(): void;
    applyDefaultConfiguration(): void;
    resetQueryRows(): void;
    applyConfiguration(configurationName: string): void;
    getTitleAlignClass(oCol: OColumn): any;
    getCellAlignClass(column: OColumn): string;
    getGroupHeaderCellAlignClass(column: string): string[];
    protected addDefaultRowButtons(): void;
    protected addButtonInRow(name: string): void;
    readonly headerHeight: number;
    isDetailMode(): boolean;
    copyAll(): void;
    copySelection(): void;
    viewDetail(item: any): void;
    editDetail(item: any): void;
    getOColumnFromTh(th: any): OColumn;
    getOColumnFromGroupHeaderColumn(attr: string): OColumn;
    getThWidthFromOColumn(oColumn: OColumn): any;
    getColumnInsertable(name: any): string;
    isRowSelected(row: any): boolean;
    refreshColumnsWidth(): void;
    private createOColumn;
    registerOTableButtons(arg: OTableButtons): void;
    getClientWidthColumn(col: OColumn): number;
    getMinWidthColumn(col: OColumn): string;
    showExpandableRow(): boolean;
    readonly enabledVirtualScroll: boolean;
    parseGroupedColumns(): void;
    parseGroupedColumnTypes(): void;
    groupByColumn(column: OColumn, type?: string): void;
    unGroupByColumn(column: OColumn): void;
    unGroupByAllColumns(): void;
    setGroupColumns(value: any[]): void;
    setGroupedColumnTypes(value: OGroupedColumnTypes[]): void;
    checkGroupByColumn(field: string, add: boolean): void;
    isGroup(index: any, item: any): boolean;
    isNotGroup(index: any, item: any): boolean;
    getLastGroups(): any;
    groupHeaderClick(row: OTableGroupedRow): void;
    private isInstanceOfOTableCellRendererServiceComponent;
    getColumnDataByAttr(attr: any, row: any): any;
    updateGroupedColumnTypes(attr: string, add: boolean, operation?: string): void;
    getClassNameGroupHeader(row: OTableGroupedRow): string;
    private stopEdition;
    storeFilterInState(arg: OFilterDefinition): void;
    reinitializateQuickFilterColumns(): void;
    reinitializeSortColumns(sortColumns?: SQLOrder[]): void;
    protected refreshSortHeaders(): void;
    getQuickFilterValue(): string;
    protected queryCellRenderers(): Observable<any>;
    tableQuickFilterChanged(value: string): void;
    filterData(value?: string, loadMore?: boolean): void;
    setOTableColumnsGrouping(value: OTableColumnsGrouping): void;
    getColumnGroupingComponent(columnAttr: string): OTableColumnsGroupingColumnComponent;
    useColumnGroupingAggregate(columnAttr: string): boolean;
    protected checkViewportSize(): void;
    showExpandableIcon(row: any, rowIndex: number): Observable<boolean>;
    getColumnsNotIncluded(): string[];
    getColumnNames(columns: string[]): {
        [columnId: string]: string;
    };
    resetColumnsWidth(): void;
    updateColumnsDOMWidth(): void;
    isDisableCheckbox(item: any): boolean;
}
export {};
