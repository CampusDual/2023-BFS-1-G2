import { AfterViewInit, Injector } from '@angular/core';
import { BehaviorSubject, Subscription } from 'rxjs';
import { OTranslateService } from '../../../../services/translate/o-translate.service';
import { OContextMenuComponent } from '../../../contextmenu/o-context-menu.component';
import { OColumn } from '../../column/o-column.class';
import { OTableComponent } from '../../o-table.component';
export declare const DEFAULT_TABLE_CONTEXT_MENU_INPUTS: string[];
export declare class OTableContextMenuComponent implements AfterViewInit {
    protected injector: Injector;
    table: OTableComponent;
    contextMenu: OContextMenuComponent;
    isVisibleInsert: BehaviorSubject<boolean>;
    isVisibleEdit: BehaviorSubject<boolean>;
    isVisibleDetail: BehaviorSubject<boolean>;
    isVisibleCopy: BehaviorSubject<boolean>;
    isVisibleSelectAll: BehaviorSubject<boolean>;
    isVisibleRefresh: BehaviorSubject<boolean>;
    isVisibleDelete: BehaviorSubject<boolean>;
    isVisibleFilter: BehaviorSubject<boolean>;
    isVisibleGroupByRow: BehaviorSubject<boolean>;
    isEnabledGroupByColumn: BehaviorSubject<boolean>;
    isEnabledUnGroupByColumn: BehaviorSubject<boolean>;
    isEnabledUnGroupAllColumn: BehaviorSubject<boolean>;
    isDataCell: BehaviorSubject<boolean>;
    isTableGroupedRow: BehaviorSubject<boolean>;
    isGroupableCell: BehaviorSubject<boolean>;
    showInsert: boolean;
    showEdit: boolean;
    showViewDetail: boolean;
    showCopy: boolean;
    showSelectAll: boolean;
    showRefresh: boolean;
    showDelete: boolean;
    showFilter: boolean;
    showGroupByRow: boolean;
    protected defaultContextMenu: OContextMenuComponent;
    protected _row: any;
    protected column: OColumn;
    protected translateService: OTranslateService;
    protected contextMenuSubscription: Subscription;
    isDateColumn: BehaviorSubject<boolean>;
    constructor(injector: Injector, table: OTableComponent);
    ngAfterViewInit(): void;
    registerContextMenuListeners(): void;
    gotoDetails(event: any): void;
    edit(event: any): void;
    add(): void;
    selectAll(): void;
    unSelectAll(): void;
    copyAll(): void;
    copyCell(event: any): void;
    copySelection(): void;
    copyRow(event: any): void;
    delete(event: any): void;
    refresh(): void;
    filterByValue(): void;
    groupByColumn(dateType?: string): void;
    unGroupByColumn(): void;
    unGroupAll(): void;
    readonly labelFilterByColumn: string;
    readonly labelGroupByColumn: string;
    readonly labelUnGroupByColumn: string;
    row: any;
    readonly availableColumnAggregates: string[];
    filterByColumn(event: any): void;
    checkVisibleFilter(): void;
    checkGroupByRowOptions(): void;
    foundColumnInGroupedColumns(column: any): boolean;
    changeAggregateFunction(arg: any, aggregateFnName: string): void;
    protected initProperties(param: any): void;
    expandRowGroupsSameLevel(): void;
    collapseRowGroupsSameLevel(): void;
    isColumnDate(): void;
}
