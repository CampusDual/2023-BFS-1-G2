import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, Injector, OnDestroy, OnInit } from '@angular/core';
import { MatDialog, MatMenu } from '@angular/material';
import { Observable } from 'rxjs';
import { IChartOnDemandService } from '../../../../../interfaces/chart-on-demand.interface';
import { OTableMenu } from '../../../../../interfaces/o-table-menu.interface';
import { IReportService } from '../../../../../interfaces/report-on-demand-service.interface';
import { DialogService } from '../../../../../services/dialog.service';
import { OntimizeExportDataProviderService } from '../../../../../services/ontimize-export-data-provider.service';
import { SnackBarService } from '../../../../../services/snackbar.service';
import { OTranslateService } from '../../../../../services/translate/o-translate.service';
import { OPermissions } from '../../../../../types/o-permissions.type';
import { OTableMenuPermissions } from '../../../../../types/table/o-table-menu-permissions.type';
import { OTableComponent } from '../../../o-table.component';
import { OTableOptionComponent } from '../table-option/o-table-option.component';
export declare const DEFAULT_INPUTS_O_TABLE_MENU: string[];
export declare const DEFAULT_OUTPUTS_O_TABLE_MENU: any[];
export declare class OTableMenuComponent implements OTableMenu, OnInit, AfterViewInit, OnDestroy {
    protected injector: Injector;
    protected dialog: MatDialog;
    protected cd: ChangeDetectorRef;
    protected table: OTableComponent;
    chartOnDemandService: IChartOnDemandService;
    reportService: IReportService;
    selectAllCheckbox: boolean;
    exportButton: boolean;
    showConfigurationOption: boolean;
    showFilterOption: boolean;
    columnsVisibilityButton: boolean;
    showGroupByOption: boolean;
    showResetWidthOption: boolean;
    showReportOnDemandOption: boolean;
    showChartsOnDemandOption: boolean;
    onVisibleFilterOptionChange: EventEmitter<any>;
    protected dialogService: DialogService;
    protected translateService: OTranslateService;
    protected snackBarService: SnackBarService;
    matMenu: MatMenu;
    selectAllCheckboxOption: OTableOptionComponent;
    exportButtonOption: OTableOptionComponent;
    columnsVisibilityButtonOption: OTableOptionComponent;
    filterMenuButton: ElementRef;
    configurationMenuButton: ElementRef;
    filterMenu: MatMenu;
    configurationMenu: MatMenu;
    columnFilterOption: OTableOptionComponent;
    chartMenu: MatMenu;
    protected permissions: OTableMenuPermissions;
    protected mutationObservers: MutationObserver[];
    protected exportDataProvider: OntimizeExportDataProviderService;
    constructor(injector: Injector, dialog: MatDialog, cd: ChangeDetectorRef, table: OTableComponent, chartOnDemandService: IChartOnDemandService, reportService: IReportService);
    ngOnInit(): void;
    readonly isColumnFilterOptionActive: boolean;
    ngAfterViewInit(): void;
    protected disableOTableOptionComponent(comp: OTableOptionComponent): void;
    protected disableButton(buttonEL: ElementRef): void;
    ngOnDestroy(): void;
    registerOptions(oTableOptions: OTableOptionComponent[]): void;
    protected setPermissionsToOTableOption(perm: OPermissions, option: OTableOptionComponent): void;
    getPermissionByAttr(attr: string): OPermissions;
    readonly isSelectAllOptionActive: boolean;
    readonly showSelectAllCheckbox: boolean;
    readonly rowHeightObservable: Observable<string>;
    readonly enabledSelectAllCheckbox: boolean;
    readonly showExportButton: boolean;
    readonly enabledExportButton: boolean;
    readonly showColumnsVisibilityButton: boolean;
    readonly showReportOnDemandButton: boolean;
    readonly enabledColumnsVisibilityButton: boolean;
    readonly showFilterMenu: boolean;
    readonly enabledFilterMenu: boolean;
    readonly showConfigurationMenu: boolean;
    readonly enabledConfigurationMenu: boolean;
    readonly showGroupByButton: boolean;
    readonly showChartsOnDemandButton: boolean;
    onShowsSelects(): void;
    onExportButtonClicked(): void;
    onChangeColumnsVisibilityClicked(): void;
    onGroupByClicked(): void;
    onFilterByColumnClicked(): void;
    onStoreFilterClicked(): void;
    onLoadFilterClicked(): void;
    onClearFilterClicked(): void;
    onChartsOnDemandClicked(): void;
    onResetWidthClicked(): void;
    onReportOnDemandClicked(): void;
    onStoreConfigurationClicked(): void;
    onApplyConfigurationClicked(): void;
}
