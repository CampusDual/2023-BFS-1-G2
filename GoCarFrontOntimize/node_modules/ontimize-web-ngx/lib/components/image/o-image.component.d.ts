import { ElementRef, Injector, OnDestroy, OnInit } from '@angular/core';
import { FormControl, FormGroup, ValidationErrors, ValidatorFn } from '@angular/forms';
import { MatDialog } from '@angular/material';
import { OSafePipe } from '../../pipes/o-safe.pipe';
import { FormValueOptions } from '../../types';
import { OFormComponent } from '../form/o-form.component';
import { OFormControl } from '../input/o-form-control.class';
import { OFormDataComponent } from '../o-form-data-component.class';
export declare const DEFAULT_INPUTS_O_IMAGE: string[];
export declare const DEFAULT_OUTPUTS_O_IMAGE: string[];
export declare class OImageComponent extends OFormDataComponent implements OnInit, OnDestroy {
    acceptFileType: string;
    maxFileSize: number;
    emptyimage: string;
    notfoundimage: string;
    emptyicon: string;
    height: string;
    autoFit: boolean;
    currentFileName: string;
    protected showControls: boolean;
    fullScreenButton: boolean;
    protected _fullScreenButton: boolean;
    protected fileInput: ElementRef;
    protected _useEmptyIcon: boolean;
    protected _useEmptyImage: boolean;
    protected oSafe: OSafePipe;
    protected dialog: MatDialog;
    stateCtrl: FormControl;
    src: string;
    constructor(form: OFormComponent, elRef: ElementRef, injector: Injector);
    ngOnInit(): void;
    ngOnDestroy(): void;
    ensureOFormValue(val: any): void;
    isEmpty(): boolean;
    createFormControl(cfg?: {
        value: any;
        disabled: boolean;
    }, validators?: ValidatorFn[]): OFormControl;
    fileChange(input: any): void;
    notFoundImageUrl(event: any): any;
    private getSrcValue;
    onClickBlocker(evt: Event): void;
    onClickClearValue(e: Event): void;
    hasControls(): boolean;
    useEmptyIcon(): boolean;
    useEmptyImage(): boolean;
    getFormGroup(): FormGroup;
    readonly hostHeight: string;
    openFullScreen(e?: Event): void;
    openFileSelector(e?: Event): void;
    internalFormControl(): string;
    resolveValidators(): ValidatorFn[];
    setValue(val: any, options?: FormValueOptions, setDirty?: boolean): void;
    protected maxFileSizeValidator(control: FormControl): ValidationErrors;
    onFileDropped(pFileList: File[]): void;
    createFileListItems(files: any): FileList;
    getFileName(): string;
    getImageFile(): File;
    hasErrorInDragAndDrop(): boolean;
}
