import { SelectionModel } from '@angular/cdk/collections';
import { AfterContentInit, AfterViewInit, ElementRef, EventEmitter, Injector, OnChanges, OnDestroy, OnInit, QueryList, SimpleChange } from '@angular/core';
import { MatFormFieldAppearance } from '@angular/material';
import { Subscription } from 'rxjs';
import { IListItem } from '../../interfaces/o-list-item.interface';
import { IList } from '../../interfaces/o-list.interface';
import { OListComponentStateClass } from '../../services/state/o-list-component-state.class';
import { OListComponentStateService } from '../../services/state/o-list-component-state.service';
import { OListInitializationOptions } from '../../types/o-list-initialization-options.type';
import { OQueryDataArgs } from '../../types/query-data-args.type';
import { SQLOrder } from '../../types/sql-order.type';
import { OFormComponent } from '../form/o-form.component';
import { AbstractOServiceComponent } from '../o-service-component.class';
import { OMatSort } from '../table/extensions/sort/o-mat-sort';
import { OListItemDirective } from './list-item/o-list-item.directive';
export declare const DEFAULT_INPUTS_O_LIST: string[];
export declare const DEFAULT_OUTPUTS_O_LIST: string[];
export declare class OListComponent extends AbstractOServiceComponent<OListComponentStateService> implements IList, AfterContentInit, AfterViewInit, OnDestroy, OnInit, OnChanges {
    listItemDirectives: QueryList<OListItemDirective>;
    refreshButton: boolean;
    selectable: boolean;
    odense: boolean;
    deleteButton: boolean;
    insertButtonFloatable: boolean;
    showButtonsText: boolean;
    paginationControls: boolean;
    quickFilterColumns: string;
    route: string;
    sortColumns: string;
    sortColArray: SQLOrder[];
    onInsertButtonClick: EventEmitter<any>;
    onItemDeleted: EventEmitter<any>;
    selection: SelectionModel<Element>;
    enabledDeleteButton: boolean;
    insertButtonPosition: 'top' | 'bottom';
    storePaginationState: boolean;
    protected subscription: Subscription;
    protected _quickFilterAppearance: MatFormFieldAppearance;
    protected keysSqlTypes: string;
    keysSqlTypesArray: Array<string>;
    protected oMatSort: OMatSort;
    constructor(injector: Injector, elRef: ElementRef, form: OFormComponent);
    readonly state: OListComponentStateClass;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: {
        [propName: string]: SimpleChange;
    }): void;
    getComponentKey(): string;
    initialize(): void;
    reinitialize(options: OListInitializationOptions): void;
    getDense(): boolean;
    onListItemClicked(onNext: (item: OListItemDirective) => void): object;
    onItemDetailClick(item: OListItemDirective | IListItem): void;
    onItemDetailDoubleClick(item: OListItemDirective | IListItem): void;
    getDataToStore(): any;
    reloadData(clearSelectedItems?: boolean): void;
    reloadPaginatedDataFromStart(clearSelectedItems?: boolean): void;
    protected getSortedDataFromArray(dataArray: any[]): any[];
    isItemSelected(item: any): boolean;
    onScroll(e: Event): void;
    remove(clearSelectedItems?: boolean): void;
    add(e?: Event): void;
    parseSortColumns(): void;
    getQueryArguments(filter: object, ovrrArgs?: OQueryDataArgs): any[];
    protected setListItemDirectivesData(): void;
    protected saveDataNavigationInLocalStorage(): void;
    protected parseResponseArray(data: any[], replace?: boolean): any[];
    registerQuickFilter(arg: any): void;
    setDataArray(data: any): void;
    setSelected(item: any): void;
    updateSelectedItems(): void;
    getSqlTypes(): any;
}
