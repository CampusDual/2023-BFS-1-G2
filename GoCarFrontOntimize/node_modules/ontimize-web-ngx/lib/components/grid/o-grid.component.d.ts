import { AfterViewInit, ElementRef, Injector, OnChanges, OnDestroy, OnInit, QueryList, SimpleChange } from '@angular/core';
import { MediaObserver } from '@angular/flex-layout';
import { MatFormFieldAppearance, MatPaginator, MatSelectChange } from '@angular/material';
import { Subscription } from 'rxjs';
import { IGridItem } from '../../interfaces/o-grid-item.interface';
import { OGridComponentStateClass } from '../../services/state/o-grid-component-state.class';
import { OGridComponentStateService } from '../../services/state/o-grid-component-state.service';
import { OQueryDataArgs } from '../../types/query-data-args.type';
import { SQLOrder } from '../../types/sql-order.type';
import { OFormComponent } from '../form/o-form.component';
import { AbstractOServiceComponent } from '../o-service-component.class';
import { OMatSort } from '../table/extensions/sort/o-mat-sort';
import { OGridItemComponent } from './grid-item/o-grid-item.component';
import { OGridItemDirective } from './grid-item/o-grid-item.directive';
export declare const DEFAULT_INPUTS_O_GRID: string[];
export declare const DEFAULT_OUTPUTS_O_GRID: string[];
export declare class OGridComponent extends AbstractOServiceComponent<OGridComponentStateService> implements AfterViewInit, OnChanges, OnDestroy, OnInit {
    protected _queryRows: number;
    fixedHeader: boolean;
    showPageSize: boolean;
    showSort: boolean;
    showFooter: boolean;
    gridItemHeight: string;
    refreshButton: boolean;
    insertButton: boolean;
    insertButtonFloatable: boolean;
    showButtonsText: boolean;
    insertButtonPosition: 'top' | 'bottom';
    paginationControls: boolean;
    gutterSize: string;
    protected _quickFilterAppearance: MatFormFieldAppearance;
    cols: number;
    sortableColumns: SQLOrder[];
    quickFilterColumns: string;
    inputGridItems: QueryList<OGridItemComponent>;
    gridItemDirectives: QueryList<OGridItemDirective>;
    matpaginator: MatPaginator;
    protected _sortableColumns: SQLOrder[];
    sortColumnOrder: SQLOrder;
    protected _cols: any;
    protected _colsDefault: number;
    _pageSizeOptions: number[];
    protected sortColumn: string;
    storePaginationState: boolean;
    gridItems: IGridItem[];
    protected _gridItems: IGridItem[];
    protected subscription: Subscription;
    protected media: MediaObserver;
    protected oMatSort: OMatSort;
    constructor(injector: Injector, elRef: ElementRef, form: OFormComponent);
    readonly state: OGridComponentStateClass;
    ngOnInit(): void;
    initialize(): void;
    ngAfterViewInit(): void;
    ngAfterContentInit(): void;
    subscribeToMediaChanges(): void;
    reloadData(): void;
    reloadPaginatedDataFromStart(): void;
    protected getSortedDataFromArray(dataArray: any[]): any[];
    registerGridItemDirective(item: OGridItemDirective): void;
    onItemDetailClick(item: OGridItemDirective): void;
    onItemDetailDblClick(item: OGridItemDirective): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: {
        [propName: string]: SimpleChange;
    }): void;
    destroy(): void;
    loadMore(): void;
    getQueryArguments(filter: object, ovrrArgs?: OQueryDataArgs): any[];
    parseSortColumn(): void;
    currentOrderColumn: number;
    protected findSortableColumnIndex(sortableColumn: SQLOrder): number;
    getDataToStore(): any;
    getSortOptionText(col: SQLOrder): string;
    add(): void;
    protected parseResponseArray(data: any[], replace?: boolean): any[];
    protected saveDataNavigationInLocalStorage(): void;
    protected setGridItemDirectivesData(): void;
    pageSizeChanged(): void;
    sortColumnChanged(event: MatSelectChange): void;
    registerQuickFilter(arg: any): void;
}
