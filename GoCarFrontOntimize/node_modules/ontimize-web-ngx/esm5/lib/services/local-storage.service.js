import { EventEmitter, Injectable, Injector } from '@angular/core';
import { NavigationStart, Router } from '@angular/router';
import { AppConfig } from '../config/app-config';
import { ObservableWrapper } from '../util/async';
import { Util } from '../util/util';
import { AuthService } from './auth.service';
import * as i0 from "@angular/core";
var LocalStorageService = (function () {
    function LocalStorageService(injector) {
        this.injector = injector;
        this.onRouteChange = new EventEmitter();
        this.onSetLocalStorage = new EventEmitter();
        this._config = this.injector.get(AppConfig).getConfiguration();
        this._router = this.injector.get(Router);
        this.authService = this.injector.get(AuthService);
        var self = this;
        this._router.events.subscribe(function (event) {
            if (event instanceof NavigationStart) {
                ObservableWrapper.callEmit(self.onRouteChange, {});
            }
        });
    }
    LocalStorageService.prototype.getComponentStorage = function (comp, routeKey) {
        var componentKey = comp.getComponentKey();
        var completeKey = componentKey;
        if (routeKey) {
            completeKey += '_' + routeKey;
        }
        return this.getAppComponentData(completeKey) || {};
    };
    LocalStorageService.prototype.updateComponentStorage = function (comp, routeKey) {
        var dataToStore = comp.getDataToStore();
        var componentKey = comp.getComponentKey();
        if (!Util.isDefined(componentKey)) {
            return;
        }
        var completeKey = componentKey;
        if (routeKey) {
            completeKey += '_' + routeKey;
        }
        var storedObject = {};
        for (var prop in dataToStore) {
            if (dataToStore.hasOwnProperty(prop)) {
                storedObject[prop] = dataToStore[prop];
            }
        }
        this.updateAppComponentStorage(completeKey, storedObject);
    };
    LocalStorageService.prototype.getAppComponentData = function (key) {
        var componentData;
        var storedComponents = this.getSessionUserComponentsData() || {};
        if (storedComponents[key]) {
            var decoded = atob(storedComponents[key]);
            try {
                componentData = JSON.parse(decoded);
            }
            catch (e) {
                componentData = undefined;
            }
        }
        return componentData;
    };
    LocalStorageService.prototype.updateAppComponentStorage = function (componentKey, componentData) {
        var componentDataB64;
        try {
            componentDataB64 = btoa(JSON.stringify(componentData));
        }
        catch (e) {
            componentDataB64 = undefined;
        }
        this.storeComponentInSessionUser(componentKey, componentDataB64);
    };
    LocalStorageService.prototype.getSessionUserComponentsData = function () {
        var storedComponentsByUser = {};
        var appData = this.getStoredData();
        var session = appData[LocalStorageService.SESSION_STORAGE_KEY] || {};
        var users = appData[LocalStorageService.USERS_STORAGE_KEY] || {};
        storedComponentsByUser = (users[session.user] || {})[LocalStorageService.COMPONENTS_STORAGE_KEY] || {};
        return storedComponentsByUser;
    };
    LocalStorageService.prototype.storeSessionUserComponentsData = function (componentsData) {
        var appData = this.getStoredData();
        var session = appData[LocalStorageService.SESSION_STORAGE_KEY] || {};
        if (!Util.isDefined(appData[LocalStorageService.USERS_STORAGE_KEY])) {
            appData[LocalStorageService.USERS_STORAGE_KEY] = {};
        }
        var userData = appData[LocalStorageService.USERS_STORAGE_KEY][session.user] || {};
        userData[LocalStorageService.COMPONENTS_STORAGE_KEY] = componentsData;
        appData[LocalStorageService.USERS_STORAGE_KEY][session.user] = userData;
        this.setLocalStorage(appData);
    };
    LocalStorageService.prototype.storeComponentInSessionUser = function (componentKey, componentDataB64) {
        var appData = this.getStoredData();
        var session = appData[LocalStorageService.SESSION_STORAGE_KEY] || {};
        if (!Util.isDefined(session) || !Util.isDefined(session.user)) {
            return;
        }
        var users = appData[LocalStorageService.USERS_STORAGE_KEY] || {};
        var idUser = session.user || this.authService.getSessionInfo().user;
        var user = users[idUser] || {};
        var componentsData = {};
        if (users[idUser]) {
            componentsData = users[idUser][LocalStorageService.COMPONENTS_STORAGE_KEY] || {};
        }
        componentsData[componentKey] = componentDataB64 || {};
        user[LocalStorageService.COMPONENTS_STORAGE_KEY] = componentsData;
        users[idUser] = user;
        appData[LocalStorageService.USERS_STORAGE_KEY] = users;
        this.setLocalStorage(appData);
    };
    LocalStorageService.prototype.getStoredData = function () {
        var appData = {};
        var appStoredData = localStorage.getItem(this._config.uuid);
        if (appStoredData) {
            try {
                appData = JSON.parse(appStoredData);
            }
            catch (e) {
                appData = {};
            }
        }
        return appData;
    };
    LocalStorageService.prototype.setBackwardCompatibility = function () {
        var appData = this.getStoredData();
        var session = appData[LocalStorageService.SESSION_STORAGE_KEY];
        if (!Util.isDefined(session) || !Util.isDefined(session.user)) {
            return;
        }
        var componentsInfo = appData[LocalStorageService.COMPONENTS_STORAGE_KEY] || {};
        var usersObject = {};
        var existsUsersTag = Util.isDefined(appData[LocalStorageService.USERS_STORAGE_KEY]);
        var createUserInfo = existsUsersTag;
        if (existsUsersTag) {
            usersObject = appData[LocalStorageService.USERS_STORAGE_KEY];
            createUserInfo = !Util.isDefined(appData[LocalStorageService.USERS_STORAGE_KEY][session.user]);
        }
        if (createUserInfo) {
            usersObject[session.user] = {};
            usersObject[session.user][LocalStorageService.COMPONENTS_STORAGE_KEY] = componentsInfo;
            appData[LocalStorageService.USERS_STORAGE_KEY] = usersObject;
            try {
                localStorage.setItem(this._config.uuid, JSON.stringify(appData));
            }
            catch (e) {
                console.error("Cannot set new item in localStorage. Error: " + e);
            }
        }
    };
    LocalStorageService.prototype.setLocalStorage = function (appData) {
        this.onSetLocalStorage.emit();
        try {
            localStorage.setItem(this._config.uuid, JSON.stringify(appData));
        }
        catch (e) {
            console.error("Cannot set new item in localStorage. Error: " + e);
        }
    };
    LocalStorageService.COMPONENTS_STORAGE_KEY = 'components';
    LocalStorageService.USERS_STORAGE_KEY = 'users';
    LocalStorageService.SESSION_STORAGE_KEY = 'session';
    LocalStorageService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    LocalStorageService.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    LocalStorageService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function LocalStorageService_Factory() { return new LocalStorageService(i0.ɵɵinject(i0.INJECTOR)); }, token: LocalStorageService, providedIn: "root" });
    return LocalStorageService;
}());
export { LocalStorageService };
//# sourceMappingURL=data:application/json;base64,