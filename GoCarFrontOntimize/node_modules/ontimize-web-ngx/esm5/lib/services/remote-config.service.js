import { HttpClient, HttpHeaders } from '@angular/common/http';
import { HostListener, Injectable, Injector } from '@angular/core';
import { Observable, timer } from 'rxjs';
import { AppConfig } from '../config/app-config';
import { Codes } from '../util/codes';
import { Util } from '../util/util';
import { AuthService } from './auth.service';
import { LocalStorageService } from './local-storage.service';
import * as i0 from "@angular/core";
var ORemoteConfigurationService = (function () {
    function ORemoteConfigurationService(injector) {
        this.injector = injector;
        this._columns = {
            user: ORemoteConfigurationService.DEFAULT_COLUMN_USER,
            appId: ORemoteConfigurationService.DEFAULT_COLUMN_APPID,
            configuration: ORemoteConfigurationService.DEFAULT_COLUMN_CONFIG
        };
        this.httpClient = this.injector.get(HttpClient);
        this._appConfig = this.injector.get(AppConfig);
        this.authService = this.injector.get(AuthService);
        this.localStorageService = this.injector.get(LocalStorageService);
        this.httpClient = this.injector.get(HttpClient);
        this._uuid = this._appConfig.getConfiguration().uuid;
        if (this._appConfig.useRemoteConfiguration()) {
            this._url = this._appConfig.getRemoteConfigurationEndpoint();
            var remoteConfig = this._appConfig.getRemoteConfigurationConfig();
            this._columns = (remoteConfig && remoteConfig.columns) ? Object.assign(this._columns, remoteConfig.columns) : this._columns;
            this._timeout = (remoteConfig && remoteConfig.timeout) ? remoteConfig.timeout : ORemoteConfigurationService.DEFAULT_STORAGE_TIMEOUT;
            var self_1 = this;
            this.localStorageService.onSetLocalStorage.subscribe(function () {
                if (self_1.storeSubscription) {
                    self_1.storeSubscription.unsubscribe();
                }
            });
        }
    }
    ORemoteConfigurationService.prototype.beforeunloadHandler = function () {
        this.finalize().subscribe(function () {
        });
    };
    ORemoteConfigurationService.prototype.getUserConfiguration = function () {
        var self = this;
        var observable = new Observable(function (observer) {
            var sessionInfo = self.authService.getSessionInfo();
            if (!self.hasSession(sessionInfo)) {
                observer.error();
                return;
            }
            var url = self._url + '/search';
            var body = {};
            body[self._columns.user] = sessionInfo.user;
            body[self._columns.appId] = self._uuid;
            var options = {
                headers: self.buildHeaders()
            };
            self.httpClient.post(url, body, options).subscribe(function (resp) {
                if (resp && resp.code === Codes.ONTIMIZE_SUCCESSFUL_CODE && Util.isDefined(resp.data)) {
                    observer.next(resp);
                }
                else {
                    observer.error();
                }
            }, function (error) { return observer.error(error); }, function () { return observer.complete(); });
        });
        return observable;
    };
    ORemoteConfigurationService.prototype.storeUserConfiguration = function () {
        var self = this;
        if (self.storeSubscription) {
            self.storeSubscription.unsubscribe();
        }
        var observable = new Observable(function (observer) {
            var sessionInfo = self.authService.getSessionInfo();
            if (!self._appConfig.useRemoteConfiguration() || !self.hasSession(sessionInfo)) {
                observer.next();
                observer.complete();
                return;
            }
            var url = self._url;
            var body = { filter: {}, data: {} };
            body.filter[self._columns.user] = sessionInfo.user;
            body.filter[self._columns.appId] = self._uuid;
            var userData = self.localStorageService.getSessionUserComponentsData() || '';
            try {
                userData = btoa(JSON.stringify(userData));
            }
            catch (e) {
                userData = '';
            }
            body.data[self._columns.configuration] = userData;
            var options = {
                headers: self.buildHeaders()
            };
            self.httpClient.put(url, body, options).subscribe(function (resp) {
                if (resp && resp.code === Codes.ONTIMIZE_SUCCESSFUL_CODE) {
                    observer.next(resp);
                }
                else {
                    observer.error();
                }
            }, function (error) { return observer.error(error); }, function () { return observer.complete(); });
        });
        return observable;
    };
    ORemoteConfigurationService.prototype.initialize = function () {
        var self = this;
        return new Observable(function (observer) {
            if (self._appConfig.useRemoteConfiguration()) {
                self.timerSubscription = timer(self._timeout, self._timeout).subscribe(function () {
                    self.storeSubscription = self.storeUserConfiguration().subscribe(function () {
                    });
                });
                self.getUserConfiguration().subscribe(function (resp) {
                    var storedConf;
                    if (Util.isArray(resp.data)) {
                        storedConf = resp.data[0][self._columns.configuration];
                    }
                    else {
                        storedConf = resp.data;
                    }
                    if (Util.isDefined(storedConf)) {
                        var componentsData = void 0;
                        try {
                            var decoded = atob(storedConf);
                            componentsData = JSON.parse(decoded);
                        }
                        catch (e) {
                            componentsData = {};
                        }
                        self.localStorageService.storeSessionUserComponentsData(componentsData);
                    }
                    observer.next();
                }, function () {
                    observer.next();
                });
            }
            else {
                observer.next();
            }
        });
    };
    ORemoteConfigurationService.prototype.finalize = function () {
        if (this.timerSubscription) {
            this.timerSubscription.unsubscribe();
        }
        return this.storeUserConfiguration();
    };
    ORemoteConfigurationService.prototype.hasSession = function (sessionInfo) {
        return Util.isDefined(sessionInfo) && Util.isDefined(sessionInfo.user) && Util.isDefined(sessionInfo.id);
    };
    ORemoteConfigurationService.prototype.buildHeaders = function () {
        var sessionInfo = this.authService.getSessionInfo();
        return new HttpHeaders({
            'Access-Control-Allow-Origin': '*',
            'Content-Type': 'application/json;charset=UTF-8',
            Authorization: 'Bearer ' + sessionInfo.id
        });
    };
    ORemoteConfigurationService.DEFAULT_COLUMN_USER = 'USER_';
    ORemoteConfigurationService.DEFAULT_COLUMN_APPID = 'APP_UUID';
    ORemoteConfigurationService.DEFAULT_COLUMN_CONFIG = 'CONFIGURATION';
    ORemoteConfigurationService.DEFAULT_STORAGE_TIMEOUT = 60000;
    ORemoteConfigurationService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    ORemoteConfigurationService.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    ORemoteConfigurationService.propDecorators = {
        beforeunloadHandler: [{ type: HostListener, args: ['window:beforeunload', [],] }]
    };
    ORemoteConfigurationService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function ORemoteConfigurationService_Factory() { return new ORemoteConfigurationService(i0.ɵɵinject(i0.INJECTOR)); }, token: ORemoteConfigurationService, providedIn: "root" });
    return ORemoteConfigurationService;
}());
export { ORemoteConfigurationService };
//# sourceMappingURL=data:application/json;base64,