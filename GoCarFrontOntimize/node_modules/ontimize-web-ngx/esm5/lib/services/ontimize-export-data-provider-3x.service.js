import * as tslib_1 from "tslib";
import { Injectable, Injector } from "@angular/core";
import { Util } from "../util/util";
import { OntimizeExportDataBaseProviderService } from "./ontimize-export-data-base-provider.service";
var OntimizeExportDataProviderService3X = (function (_super) {
    tslib_1.__extends(OntimizeExportDataProviderService3X, _super);
    function OntimizeExportDataProviderService3X(injector) {
        var _this = _super.call(this, injector) || this;
        _this.injector = injector;
        return _this;
    }
    OntimizeExportDataProviderService3X.prototype.getExportConfiguration = function (param) {
        var currentPage = 0;
        if (this.table.pageable && Util.isDefined(this.table.currentPage)) {
            currentPage = this.table.currentPage;
        }
        var exportData = {
            type: param.format,
            queryParam: {
                columns: this.columns,
                sqltypes: this.sqlTypes,
                offset: this.table.pageable ? currentPage * this.table.queryRows : -1,
                pageSize: this.table.queryRows,
                filter: this.filter,
                orderBy: this.table.sortColArray
            },
            advQuery: (this.table.pageable ? true : false),
            path: param.path,
            dao: this.entity
        };
        if (param.format === 'xlsx' || 'pdf') {
            exportData.columns = this.parseColumns(this.columns);
            exportData.columnTitles = this.columnNames;
            exportData.styles = {};
            exportData.rowStyles = {};
            exportData.columnStyles = {};
            exportData.columnTypes = {};
            exportData.cellStyles = {};
        }
        return exportData;
    };
    OntimizeExportDataProviderService3X.prototype.parseColumns = function (columns) {
        var obj = {};
        columns.forEach(function (column) {
            obj[column] = {};
        });
        return obj;
    };
    OntimizeExportDataProviderService3X.decorators = [
        { type: Injectable }
    ];
    OntimizeExportDataProviderService3X.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    return OntimizeExportDataProviderService3X;
}(OntimizeExportDataBaseProviderService));
export { OntimizeExportDataProviderService3X };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib250aW1pemUtZXhwb3J0LWRhdGEtcHJvdmlkZXItM3guc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL29udGltaXplLXdlYi1uZ3gvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvb250aW1pemUtZXhwb3J0LWRhdGEtcHJvdmlkZXItM3guc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFckQsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUNwQyxPQUFPLEVBQUUscUNBQXFDLEVBQUUsTUFBTSw4Q0FBOEMsQ0FBQztBQUVyRztJQUN5RCwrREFBcUM7SUFFNUYsNkNBQXNCLFFBQWtCO1FBQXhDLFlBQ0Usa0JBQU0sUUFBUSxDQUFDLFNBQ2hCO1FBRnFCLGNBQVEsR0FBUixRQUFRLENBQVU7O0lBRXhDLENBQUM7SUFFRCxvRUFBc0IsR0FBdEIsVUFBdUIsS0FBVTtRQUcvQixJQUFJLFdBQVcsR0FBRyxDQUFDLENBQUM7UUFDcEIsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLEVBQUU7WUFDakUsV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDO1NBQ3RDO1FBQ0QsSUFBSSxVQUFVLEdBQVE7WUFDcEIsSUFBSSxFQUFFLEtBQUssQ0FBQyxNQUFNO1lBQ2xCLFVBQVUsRUFBRTtnQkFDVixPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU87Z0JBQ3JCLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtnQkFDdkIsTUFBTSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDckUsUUFBUSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUztnQkFDOUIsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNO2dCQUNuQixPQUFPLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZO2FBRWpDO1lBQ0QsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1lBQzlDLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSTtZQUNoQixHQUFHLEVBQUUsSUFBSSxDQUFDLE1BQU07U0FDakIsQ0FBQztRQUVGLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxNQUFNLElBQUksS0FBSyxFQUFFO1lBQ3BDLFVBQVUsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDckQsVUFBVSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1lBQzNDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO1lBQ3ZCLFVBQVUsQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO1lBQzFCLFVBQVUsQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDO1lBQzdCLFVBQVUsQ0FBQyxXQUFXLEdBQUcsRUFBRSxDQUFDO1lBQzVCLFVBQVUsQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDO1NBQzVCO1FBRUQsT0FBTyxVQUFVLENBQUM7SUFHcEIsQ0FBQztJQUVPLDBEQUFZLEdBQXBCLFVBQXFCLE9BQWM7UUFDakMsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDO1FBQ2IsT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFDLE1BQWM7WUFDN0IsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNuQixDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sR0FBRyxDQUFBO0lBQ1osQ0FBQzs7Z0JBbkRGLFVBQVU7OztnQkFMVSxRQUFROztJQTREN0IsMENBQUM7Q0FBQSxBQXZERCxDQUN5RCxxQ0FBcUMsR0FzRDdGO1NBdERZLG1DQUFtQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdG9yIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IElFeHBvcnREYXRhUHJvdmlkZXIgfSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9leHBvcnQtZGF0YS1wcm92aWRlci5pbnRlcmZhY2VcIjtcbmltcG9ydCB7IFV0aWwgfSBmcm9tIFwiLi4vdXRpbC91dGlsXCI7XG5pbXBvcnQgeyBPbnRpbWl6ZUV4cG9ydERhdGFCYXNlUHJvdmlkZXJTZXJ2aWNlIH0gZnJvbSBcIi4vb250aW1pemUtZXhwb3J0LWRhdGEtYmFzZS1wcm92aWRlci5zZXJ2aWNlXCI7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBPbnRpbWl6ZUV4cG9ydERhdGFQcm92aWRlclNlcnZpY2UzWCBleHRlbmRzIE9udGltaXplRXhwb3J0RGF0YUJhc2VQcm92aWRlclNlcnZpY2UgaW1wbGVtZW50cyBJRXhwb3J0RGF0YVByb3ZpZGVyIHtcblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgaW5qZWN0b3I6IEluamVjdG9yKSB7XG4gICAgc3VwZXIoaW5qZWN0b3IpO1xuICB9XG5cbiAgZ2V0RXhwb3J0Q29uZmlndXJhdGlvbihwYXJhbTogYW55KTogYW55IHtcblxuICAgIC8vIFRhYmxlIGRhdGEvZmlsdGVycy9xdWVyeVBhcmFtXG4gICAgbGV0IGN1cnJlbnRQYWdlID0gMDtcbiAgICBpZiAodGhpcy50YWJsZS5wYWdlYWJsZSAmJiBVdGlsLmlzRGVmaW5lZCh0aGlzLnRhYmxlLmN1cnJlbnRQYWdlKSkge1xuICAgICAgY3VycmVudFBhZ2UgPSB0aGlzLnRhYmxlLmN1cnJlbnRQYWdlO1xuICAgIH1cbiAgICBsZXQgZXhwb3J0RGF0YTogYW55ID0ge1xuICAgICAgdHlwZTogcGFyYW0uZm9ybWF0LFxuICAgICAgcXVlcnlQYXJhbToge1xuICAgICAgICBjb2x1bW5zOiB0aGlzLmNvbHVtbnMsXG4gICAgICAgIHNxbHR5cGVzOiB0aGlzLnNxbFR5cGVzLFxuICAgICAgICBvZmZzZXQ6IHRoaXMudGFibGUucGFnZWFibGUgPyBjdXJyZW50UGFnZSAqIHRoaXMudGFibGUucXVlcnlSb3dzIDogLTEsXG4gICAgICAgIHBhZ2VTaXplOiB0aGlzLnRhYmxlLnF1ZXJ5Um93cyxcbiAgICAgICAgZmlsdGVyOiB0aGlzLmZpbHRlcixcbiAgICAgICAgb3JkZXJCeTogdGhpcy50YWJsZS5zb3J0Q29sQXJyYXlcblxuICAgICAgfSxcbiAgICAgIGFkdlF1ZXJ5OiAodGhpcy50YWJsZS5wYWdlYWJsZSA/IHRydWUgOiBmYWxzZSksXG4gICAgICBwYXRoOiBwYXJhbS5wYXRoLFxuICAgICAgZGFvOiB0aGlzLmVudGl0eVxuICAgIH07XG5cbiAgICBpZiAocGFyYW0uZm9ybWF0ID09PSAneGxzeCcgfHwgJ3BkZicpIHtcbiAgICAgIGV4cG9ydERhdGEuY29sdW1ucyA9IHRoaXMucGFyc2VDb2x1bW5zKHRoaXMuY29sdW1ucyk7XG4gICAgICBleHBvcnREYXRhLmNvbHVtblRpdGxlcyA9IHRoaXMuY29sdW1uTmFtZXM7XG4gICAgICBleHBvcnREYXRhLnN0eWxlcyA9IHt9O1xuICAgICAgZXhwb3J0RGF0YS5yb3dTdHlsZXMgPSB7fTtcbiAgICAgIGV4cG9ydERhdGEuY29sdW1uU3R5bGVzID0ge307XG4gICAgICBleHBvcnREYXRhLmNvbHVtblR5cGVzID0ge307XG4gICAgICBleHBvcnREYXRhLmNlbGxTdHlsZXMgPSB7fTtcbiAgICB9XG5cbiAgICByZXR1cm4gZXhwb3J0RGF0YTtcblxuXG4gIH1cblxuICBwcml2YXRlIHBhcnNlQ29sdW1ucyhjb2x1bW5zOiBhbnlbXSk6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0ge1xuICAgIGxldCBvYmogPSB7fTtcbiAgICBjb2x1bW5zLmZvckVhY2goKGNvbHVtbjogc3RyaW5nKSA9PiB7XG4gICAgICBvYmpbY29sdW1uXSA9IHt9O1xuICAgIH0pO1xuICAgIHJldHVybiBvYmpcbiAgfVxuXG5cblxufSJdfQ==