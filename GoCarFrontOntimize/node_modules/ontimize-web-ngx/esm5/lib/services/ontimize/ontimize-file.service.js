import * as tslib_1 from "tslib";
import { HttpEventType, HttpHeaders, HttpRequest } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { share } from 'rxjs/operators';
import { Util } from '../../util';
import { OntimizeBaseService } from './ontimize-base-service.class';
var OntimizeFileService = (function (_super) {
    tslib_1.__extends(OntimizeFileService, _super);
    function OntimizeFileService() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.path = '';
        return _this;
    }
    OntimizeFileService.prototype.configureService = function (config) {
        _super.prototype.configureService.call(this, config);
        this.path = config.path;
    };
    OntimizeFileService.prototype.upload = function (files, entity, data) {
        var _this = this;
        var dataObservable = new Observable(function (observer) {
            var url = "" + _this.urlBase + _this.path + "/" + entity;
            var toUpload = new FormData();
            files.forEach(function (item) {
                item.prepareToUpload();
                item.isUploading = true;
                toUpload.append('name', item.name);
                toUpload.append('file', item.file);
            });
            if (data) {
                toUpload.append('data', JSON.stringify(data));
            }
            var request = new HttpRequest('POST', url, toUpload, {
                headers: _this.buildHeaders(),
                reportProgress: true
            });
            _this.httpClient.request(request).subscribe(function (resp) {
                if (HttpEventType.UploadProgress === resp.type) {
                    var progressData = {
                        loaded: resp.loaded,
                        total: resp.total
                    };
                    observer.next(progressData);
                }
                else if (HttpEventType.Response === resp.type) {
                    if (resp.body) {
                        if (resp.body['code'] === 3) {
                            _this.authService.logout();
                        }
                        else if (resp.body['code'] === 1) {
                            observer.error(resp.body['message']);
                        }
                        else if (resp.body['code'] === 0) {
                            observer.next(resp.body);
                        }
                        else {
                            observer.error('Service unavailable');
                        }
                    }
                    else {
                        observer.next(resp.body);
                    }
                }
            }, function (error) {
                console.error(error);
                if (error.status === 401) {
                    _this.authService.logout();
                }
                else {
                    observer.error(error);
                }
            }, function () { return observer.complete(); });
        });
        return dataObservable.pipe(share());
    };
    OntimizeFileService.prototype.buildHeaders = function () {
        var headers = new HttpHeaders({ 'Access-Control-Allow-Origin': '*' });
        var sessionId = this.authService.getSessionInfo().id;
        if (Util.isDefined(sessionId)) {
            headers = headers.append('Authorization', 'Bearer ' + sessionId);
        }
        return headers;
    };
    OntimizeFileService.decorators = [
        { type: Injectable }
    ];
    return OntimizeFileService;
}(OntimizeBaseService));
export { OntimizeFileService };
//# sourceMappingURL=data:application/json;base64,