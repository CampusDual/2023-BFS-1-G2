import * as tslib_1 from "tslib";
import { HttpHeaders } from '@angular/common/http';
import { Injectable, Injector } from '@angular/core';
import { Observable } from 'rxjs';
import { share } from 'rxjs/operators';
import { AppConfig } from '../../config/app-config';
import { Util } from '../../util';
import { OntimizeExportDataProviderService } from '../ontimize-export-data-provider.service';
import { OntimizeBaseService } from './ontimize-base-service.class';
var OntimizeExportService3X = (function (_super) {
    tslib_1.__extends(OntimizeExportService3X, _super);
    function OntimizeExportService3X(injector) {
        var _this = _super.call(this, injector) || this;
        _this.injector = injector;
        _this.exportPath = _this.injector.get(AppConfig).getExportPath();
        _this.exportDataProvider = _this.injector.get(OntimizeExportDataProviderService);
        return _this;
    }
    OntimizeExportService3X.prototype.configureService = function (config) {
        _super.prototype.configureService.call(this, config);
        this.servicePath = config.path;
    };
    OntimizeExportService3X.prototype.buildHeaders = function () {
        var headers = new HttpHeaders({ 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Headers': 'X-Requested-With,content-type' });
        var sessionId = this.authService.getSessionInfo().id;
        if (Util.isDefined(sessionId)) {
            headers = headers.append('Authorization', 'Bearer ' + sessionId);
        }
        return headers;
    };
    OntimizeExportService3X.prototype.exportData = function (format) {
        var _this = this;
        var url = "" + this.urlBase + this.exportPath + "/" + format;
        var options = {
            headers: this.buildHeaders().append('Content-Type', 'application/json;charset=UTF-8'),
            observe: 'response',
            responseType: 'blob'
        };
        var paramExport = {
            format: format,
            path: this.servicePath
        };
        var exportData = this.exportDataProvider.getExportConfiguration(paramExport);
        var body = JSON.stringify(exportData);
        var dataObservable = new Observable(function (observer) {
            _this.httpClient.post(url, body, options).subscribe(function (resp) {
                var fileData = resp.body;
                var contentDisposition = resp.headers.get('content-disposition');
                var fileName = 'file.' + format;
                var fileNameRegex = /filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/;
                var matches = fileNameRegex.exec(contentDisposition);
                if (matches != null && matches[1]) {
                    fileName = matches[1].replace(/['"]/g, '');
                }
                var fileURL = URL.createObjectURL(fileData);
                var a = document.createElement('a');
                document.body.appendChild(a);
                a.href = fileURL;
                a.download = fileName;
                a.click();
                document.body.removeChild(a);
                observer.next(fileData);
                URL.revokeObjectURL(fileURL);
            }, function (error) { return observer.error(error); }, function () { return observer.complete(); });
        });
        return dataObservable.pipe(share());
    };
    OntimizeExportService3X.decorators = [
        { type: Injectable }
    ];
    OntimizeExportService3X.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    return OntimizeExportService3X;
}(OntimizeBaseService));
export { OntimizeExportService3X };
//# sourceMappingURL=data:application/json;base64,