import * as tslib_1 from "tslib";
import { HttpHeaders } from '@angular/common/http';
import { Injectable, Injector } from '@angular/core';
import { Observable } from 'rxjs';
import { map, share } from 'rxjs/operators';
import { Util } from '../../util';
import { OntimizeExportDataProviderService } from '../ontimize-export-data-provider.service';
import { OntimizeBaseService } from './ontimize-base-service.class';
var OntimizeExportService = (function (_super) {
    tslib_1.__extends(OntimizeExportService, _super);
    function OntimizeExportService(injector) {
        var _this = _super.call(this, injector) || this;
        _this.injector = injector;
        _this.exportDataProvider = _this.injector.get(OntimizeExportDataProviderService);
        return _this;
    }
    OntimizeExportService.prototype.configureService = function (config) {
        _super.prototype.configureService.call(this, config);
        if (config.exportPath) {
            this.exportPath = config.exportPath;
        }
        if (config.downloadPath) {
            this.downloadPath = config.downloadPath;
        }
        if (config.path) {
            this.servicePath = config.path;
        }
    };
    OntimizeExportService.prototype.buildHeaders = function () {
        var headers = new HttpHeaders({ 'Access-Control-Allow-Origin': '*' });
        var sessionId = this.authService.getSessionInfo().id;
        if (Util.isDefined(sessionId)) {
            headers = headers.append('Authorization', 'Bearer ' + sessionId);
        }
        return headers;
    };
    OntimizeExportService.prototype.exportData = function (format) {
        var _this = this;
        var entity = this.exportDataProvider.entity;
        var url = "" + this.urlBase + (this.exportPath ? this.exportPath : '') + this.servicePath + "/" + entity + "/" + format;
        var options = {
            headers: this.buildHeaders().append('Content-Type', 'application/json;charset=UTF-8'),
            observe: 'response'
        };
        var exportData = this.exportDataProvider.getExportConfiguration();
        var body = JSON.stringify(exportData);
        var dataObservable = new Observable(function (observer) {
            _this.httpClient.post(url, body, options).pipe(map(function (resData) { return _this.adapter.adapt(resData); })).subscribe(function (resp) {
                _this.parseSuccessfulExportDataResponse(format, resp, observer);
            }, function (error) {
                _this.parseUnsuccessfulResponse(error, observer);
            });
        });
        return dataObservable.pipe(share());
    };
    OntimizeExportService.prototype.parseSuccessfulExportDataResponse = function (format, resp, subscriber) {
        if (resp && resp.isUnauthorized()) {
            this.clientErrorFallback(401);
        }
        else if (resp && resp.isFailed()) {
            subscriber.error(resp.message);
        }
        else if (resp && resp.isSuccessful()) {
            this.downloadFile(resp.data[0][format + 'Id'], format)
                .subscribe(function (r) { return subscriber.next(r); }, function (e) { return subscriber.error(e); }, function () { return subscriber.complete(); });
        }
        else {
            subscriber.error('Service unavailable');
        }
    };
    OntimizeExportService.prototype.downloadFile = function (fileId, fileExtension) {
        var _this = this;
        var url = "" + this.urlBase + (this.downloadPath ? this.downloadPath : '') + this.servicePath + "/" + fileExtension + "/" + fileId;
        var options = {
            headers: this.buildHeaders(),
            observe: 'response',
            responseType: 'blob'
        };
        var dataObservable = new Observable(function (observer) {
            _this.httpClient.get(url, options).subscribe(function (resp) {
                var fileData = resp.body;
                var fileURL = URL.createObjectURL(fileData);
                var a = document.createElement('a');
                document.body.appendChild(a);
                a.href = fileURL;
                a.download = fileId + '.' + fileExtension;
                a.click();
                document.body.removeChild(a);
                observer.next(fileData);
                URL.revokeObjectURL(fileURL);
            }, function (error) { return observer.error(error); }, function () { return observer.complete(); });
        });
        return dataObservable.pipe(share());
    };
    OntimizeExportService.decorators = [
        { type: Injectable }
    ];
    OntimizeExportService.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    return OntimizeExportService;
}(OntimizeBaseService));
export { OntimizeExportService };
//# sourceMappingURL=data:application/json;base64,