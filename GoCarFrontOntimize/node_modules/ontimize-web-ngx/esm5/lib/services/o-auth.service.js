import * as tslib_1 from "tslib";
import { Injectable, Injector } from '@angular/core';
import { Router } from '@angular/router';
import { combineLatest, from, Observable } from 'rxjs';
import { AppConfig } from '../config/app-config';
import { Codes } from '../util/codes';
import { AuthService } from './auth.service';
import { LoginStorageService } from './login-storage.service';
import { OntimizeService } from './ontimize/ontimize.service';
import { PermissionsService } from './permissions/permissions.service';
import { ORemoteConfigurationService } from './remote-config.service';
var OntimizeAuthService = (function (_super) {
    tslib_1.__extends(OntimizeAuthService, _super);
    function OntimizeAuthService(injector) {
        var _this = _super.call(this, injector) || this;
        _this.injector = injector;
        _this._config = _this.injector.get(AppConfig).getConfiguration();
        _this.router = _this.injector.get(Router);
        _this.loginStorageService = _this.injector.get(LoginStorageService);
        var sessionInfo = _this.loginStorageService.getSessionInfo();
        if (sessionInfo && sessionInfo.id && sessionInfo.user && sessionInfo.user.length > 0) {
            _this._user = sessionInfo.user;
        }
        return _this;
    }
    Object.defineProperty(OntimizeAuthService.prototype, "user", {
        get: function () {
            return this._user;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OntimizeAuthService.prototype, "localStorageKey", {
        get: function () {
            return this.loginStorageService._localStorageKey;
        },
        enumerable: true,
        configurable: true
    });
    OntimizeAuthService.prototype.configureOntimizeAuthService = function (config) {
        this.ontService = this.injector.get(OntimizeService);
        var servConf = {};
        servConf[Codes.SESSION_KEY] = this.loginStorageService.getSessionInfo();
        this.ontService.configureService(servConf);
    };
    OntimizeAuthService.prototype.retrieveAuthService = function () {
        var _this = this;
        return new Promise(function (resolve) {
            if (_this.ontService !== undefined) {
                resolve(_this.ontService);
            }
            else {
                _this.configureOntimizeAuthService(_this._config);
                resolve(_this.ontService);
            }
        });
    };
    OntimizeAuthService.prototype.login = function (user, password) {
        var _this = this;
        this._user = user;
        var dataObservable = new Observable(function (observer) {
            _this.retrieveAuthService().then(function (service) {
                service.startsession(user, password).subscribe(function (resp) {
                    _this.onLoginSuccess(resp);
                    var permissionsService = _this.injector.get(PermissionsService);
                    var remoteConfigService = _this.injector.get(ORemoteConfigurationService);
                    var pendingArray = [];
                    pendingArray.push(permissionsService.getUserPermissionsAsPromise());
                    pendingArray.push(remoteConfigService.initialize());
                    combineLatest(pendingArray).subscribe(function () {
                        observer.next();
                        observer.complete();
                    });
                }, function (error) {
                    _this.onLoginError(error);
                    observer.error(error);
                });
            });
        });
        return from(dataObservable.toPromise());
    };
    OntimizeAuthService.prototype.onLoginSuccess = function (sessionId) {
        var session = {
            user: this._user,
            id: sessionId
        };
        this.loginStorageService.storeSessionInfo(session);
        this.onLogin.next(session);
    };
    OntimizeAuthService.prototype.onLoginError = function (error) {
        this.dialogService.alert('ERROR', 'MESSAGES.ERROR_LOGIN');
    };
    OntimizeAuthService.prototype.logout = function () {
        var _this = this;
        this.onLogout.next(null);
        var sessionInfo = this.loginStorageService.getSessionInfo();
        var dataObservable = new Observable(function (innerObserver) {
            _this.retrieveAuthService().then(function (service) {
                service.endsession(sessionInfo.user, sessionInfo.id).subscribe(function (resp) {
                    var remoteConfigService = _this.injector.get(ORemoteConfigurationService);
                    remoteConfigService.finalize().subscribe(function () {
                        _this.onLogoutSuccess(resp);
                        innerObserver.next();
                        innerObserver.complete();
                    });
                }, function (error) {
                    _this.onLogoutError(error);
                    innerObserver.error(error);
                });
            });
        });
        return from(dataObservable.toPromise());
    };
    OntimizeAuthService.prototype.onLogoutSuccess = function (sessionId) {
        if (sessionId === 0) {
            this.clearSessionData();
            this.redirectLogin(false);
        }
    };
    OntimizeAuthService.prototype.onLogoutError = function (error) {
        console.error('Error on logout');
        this.clearSessionData();
        this.redirectLogin(false);
    };
    OntimizeAuthService.prototype.clearSessionData = function () {
        this.loginStorageService.sessionExpired();
    };
    OntimizeAuthService.prototype.isLoggedIn = function () {
        return this.loginStorageService.isLoggedIn();
    };
    OntimizeAuthService.prototype.getSessionInfo = function () {
        return this.loginStorageService.getSessionInfo();
    };
    OntimizeAuthService.prototype.storeSessionInfo = function (info) {
        this.loginStorageService.storeSessionInfo(info);
    };
    OntimizeAuthService.prototype.redirectLogin = function (sessionExpired) {
        if (sessionExpired === void 0) { sessionExpired = false; }
        var arg = {};
        arg[Codes.SESSION_EXPIRED_KEY] = sessionExpired;
        var extras = {};
        extras[Codes.QUERY_PARAMS] = arg;
        this.router.navigate([Codes.LOGIN_ROUTE], extras);
    };
    OntimizeAuthService.decorators = [
        { type: Injectable }
    ];
    OntimizeAuthService.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    return OntimizeAuthService;
}(AuthService));
export { OntimizeAuthService };
//# sourceMappingURL=data:application/json;base64,