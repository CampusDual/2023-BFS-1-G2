import { Injectable, Injector } from '@angular/core';
import { NavigationEnd, Router } from '@angular/router';
import { ReplaySubject } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
var OModulesInfoService = (function () {
    function OModulesInfoService(injector, router) {
        this.injector = injector;
        this.router = router;
        this.subject = new ReplaySubject();
        this.router = this.injector.get(Router);
    }
    OModulesInfoService.prototype.getModuleChangeObservable = function () {
        var _this = this;
        this.router.events
            .pipe(filter(function (e) { return e instanceof NavigationEnd; }), map(function () {
            var route = _this.router.routerState.root;
            var routeTitle = '';
            while (route.firstChild) {
                route = route.firstChild;
            }
            if (route.snapshot.data['oAppHeaderTitle']) {
                routeTitle = route.snapshot.data['oAppHeaderTitle'];
            }
            return routeTitle;
        }))
            .subscribe(function (title) {
            if (title) {
                _this.subject.next(title);
            }
            else {
                _this.subject.next("");
            }
        });
        return this.subject.asObservable();
    };
    OModulesInfoService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    OModulesInfoService.ctorParameters = function () { return [
        { type: Injector },
        { type: Router }
    ]; };
    OModulesInfoService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function OModulesInfoService_Factory() { return new OModulesInfoService(i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i1.Router)); }, token: OModulesInfoService, providedIn: "root" });
    return OModulesInfoService;
}());
export { OModulesInfoService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1tb2R1bGVzLWluZm8uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL29udGltaXplLXdlYi1uZ3gvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvby1tb2R1bGVzLWluZm8uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRCxPQUFPLEVBQWtCLGFBQWEsRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN4RSxPQUFPLEVBQWMsYUFBYSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2pELE9BQU8sRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7OztBQUU3QztJQU1FLDZCQUNZLFFBQWtCLEVBQ2xCLE1BQWM7UUFEZCxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQ2xCLFdBQU0sR0FBTixNQUFNLENBQVE7UUFIbEIsWUFBTyxHQUFHLElBQUksYUFBYSxFQUFVLENBQUM7UUFLNUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUUxQyxDQUFDO0lBRUQsdURBQXlCLEdBQXpCO1FBQUEsaUJBeUJDO1FBdkJDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTTthQUNmLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLFlBQVksYUFBYSxFQUExQixDQUEwQixDQUFDLEVBQzNDLEdBQUcsQ0FBQztZQUNGLElBQUksS0FBSyxHQUFtQixLQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUM7WUFDekQsSUFBSSxVQUFVLEdBQUcsRUFBRSxDQUFDO1lBQ3BCLE9BQU8sS0FBTSxDQUFDLFVBQVUsRUFBRTtnQkFDeEIsS0FBSyxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUM7YUFDMUI7WUFDRCxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEVBQUU7Z0JBQzFDLFVBQVUsR0FBRyxLQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO2FBQ3REO1lBQ0QsT0FBTyxVQUFVLENBQUM7UUFDcEIsQ0FBQyxDQUFDLENBQUM7YUFDSixTQUFTLENBQUMsVUFBQyxLQUFhO1lBQ3ZCLElBQUksS0FBSyxFQUFFO2dCQUNULEtBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQzFCO2lCQUNJO2dCQUNILEtBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBO2FBQ3RCO1FBQ0gsQ0FBQyxDQUFDLENBQUE7UUFFSixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDckMsQ0FBQzs7Z0JBdkNGLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7OztnQkFQb0IsUUFBUTtnQkFDVyxNQUFNOzs7OEJBRDlDO0NBNkNDLEFBeENELElBd0NDO1NBckNZLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZSwgTmF2aWdhdGlvbkVuZCwgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFJlcGxheVN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGZpbHRlciwgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBPTW9kdWxlc0luZm9TZXJ2aWNlIHtcblxuICBwcml2YXRlIHN1YmplY3QgPSBuZXcgUmVwbGF5U3ViamVjdDxzdHJpbmc+KCk7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCBpbmplY3RvcjogSW5qZWN0b3IsXG4gICAgcHJvdGVjdGVkIHJvdXRlcjogUm91dGVyLFxuICApIHtcbiAgICB0aGlzLnJvdXRlciA9IHRoaXMuaW5qZWN0b3IuZ2V0KFJvdXRlcik7XG5cbiAgfVxuXG4gIGdldE1vZHVsZUNoYW5nZU9ic2VydmFibGUoKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcblxuICAgIHRoaXMucm91dGVyLmV2ZW50c1xuICAgICAgLnBpcGUoZmlsdGVyKGUgPT4gZSBpbnN0YW5jZW9mIE5hdmlnYXRpb25FbmQpLFxuICAgICAgICBtYXAoKCkgPT4ge1xuICAgICAgICAgIGxldCByb3V0ZTogQWN0aXZhdGVkUm91dGUgPSB0aGlzLnJvdXRlci5yb3V0ZXJTdGF0ZS5yb290O1xuICAgICAgICAgIGxldCByb3V0ZVRpdGxlID0gJyc7XG4gICAgICAgICAgd2hpbGUgKHJvdXRlIS5maXJzdENoaWxkKSB7XG4gICAgICAgICAgICByb3V0ZSA9IHJvdXRlLmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyb3V0ZS5zbmFwc2hvdC5kYXRhWydvQXBwSGVhZGVyVGl0bGUnXSkge1xuICAgICAgICAgICAgcm91dGVUaXRsZSA9IHJvdXRlIS5zbmFwc2hvdC5kYXRhWydvQXBwSGVhZGVyVGl0bGUnXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJvdXRlVGl0bGU7XG4gICAgICAgIH0pKVxuICAgICAgLnN1YnNjcmliZSgodGl0bGU6IHN0cmluZykgPT4ge1xuICAgICAgICBpZiAodGl0bGUpIHtcbiAgICAgICAgICB0aGlzLnN1YmplY3QubmV4dCh0aXRsZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdGhpcy5zdWJqZWN0Lm5leHQoXCJcIilcbiAgICAgICAgfVxuICAgICAgfSlcblxuICAgIHJldHVybiB0aGlzLnN1YmplY3QuYXNPYnNlcnZhYmxlKCk7XG4gIH1cbn1cbiJdfQ==