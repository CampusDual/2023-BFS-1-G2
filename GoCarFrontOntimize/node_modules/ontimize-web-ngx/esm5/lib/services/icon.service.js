import { Injectable, Injector } from '@angular/core';
import { OSafePipe } from '../pipes/o-safe.pipe';
import { Util } from '../util/util';
import * as i0 from "@angular/core";
var IconService = (function () {
    function IconService(injector) {
        this.injector = injector;
        this._iconPosition = IconService.DEFAULT_ICON_POSITION;
        this.oSafePipe = new OSafePipe(this.injector);
    }
    Object.defineProperty(IconService.prototype, "iconPosition", {
        get: function () {
            return this._iconPosition;
        },
        set: function (value) {
            this._iconPosition = value;
        },
        enumerable: true,
        configurable: true
    });
    IconService.prototype.getIconValue = function (value, args) {
        var iconPosition = args ? args.iconPosition : undefined;
        if (!Util.isDefined(iconPosition)) {
            iconPosition = this._iconPosition;
        }
        var iconValue = value;
        var icon = "<mat-icon class='mat-24 mat-icon notranslate material-icons mat-icon-no-color' role='img' aria-hidden='true'>" + args.icon + "</mat-icon>";
        switch (iconPosition) {
            case 'left':
                iconValue = icon + iconValue;
                break;
            case 'right':
                iconValue = iconValue + icon;
                break;
        }
        return this.oSafePipe.transform(iconValue, 'html');
    };
    IconService.DEFAULT_ICON_POSITION = 'left';
    IconService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    IconService.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    IconService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function IconService_Factory() { return new IconService(i0.ɵɵinject(i0.INJECTOR)); }, token: IconService, providedIn: "root" });
    return IconService;
}());
export { IconService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vb250aW1pemUtd2ViLW5neC8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9pY29uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFckQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7O0FBRXBDO0lBU0UscUJBQXNCLFFBQWtCO1FBQWxCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDdEMsSUFBSSxDQUFDLGFBQWEsR0FBRyxXQUFXLENBQUMscUJBQXFCLENBQUM7UUFDdkQsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUE7SUFDL0MsQ0FBQztJQUVELHNCQUFJLHFDQUFZO2FBQWhCO1lBQ0UsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDO1FBQzVCLENBQUM7YUFFRCxVQUFpQixLQUFhO1lBQzVCLElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO1FBQzdCLENBQUM7OztPQUpBO0lBTUQsa0NBQVksR0FBWixVQUFhLEtBQVUsRUFBRSxJQUFTO1FBQ2hDLElBQUksWUFBWSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO1FBQ3hELElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxFQUFFO1lBQ2pDLFlBQVksR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDO1NBQ25DO1FBQ0QsSUFBSSxTQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ3RCLElBQUksSUFBSSxHQUFHLCtHQUErRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsYUFBYSxDQUFDO1FBQ3ZKLFFBQVEsWUFBWSxFQUFFO1lBQ3BCLEtBQUssTUFBTTtnQkFDVCxTQUFTLEdBQUcsSUFBSSxHQUFHLFNBQVMsQ0FBQztnQkFDN0IsTUFBTTtZQUNSLEtBQUssT0FBTztnQkFDVixTQUFTLEdBQUcsU0FBUyxHQUFHLElBQUksQ0FBQztnQkFDN0IsTUFBTTtTQUNUO1FBQ0QsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDckQsQ0FBQztJQWxDYSxpQ0FBcUIsR0FBRyxNQUFNLENBQUM7O2dCQUo5QyxVQUFVLFNBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzs7Z0JBUG9CLFFBQVE7OztzQkFBN0I7Q0E2Q0MsQUF4Q0QsSUF3Q0M7U0FyQ1ksV0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTYWZlSHRtbCB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0IHsgT1NhZmVQaXBlIH0gZnJvbSAnLi4vcGlwZXMvby1zYWZlLnBpcGUnO1xuaW1wb3J0IHsgVXRpbCB9IGZyb20gJy4uL3V0aWwvdXRpbCc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIEljb25TZXJ2aWNlIHtcbiAgcHVibGljIHN0YXRpYyBERUZBVUxUX0lDT05fUE9TSVRJT04gPSAnbGVmdCc7XG5cbiAgcHJvdGVjdGVkIF9pY29uUG9zaXRpb246IHN0cmluZztcbiAgcHJvdGVjdGVkIG9TYWZlUGlwZTogT1NhZmVQaXBlO1xuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBpbmplY3RvcjogSW5qZWN0b3IpIHtcbiAgICB0aGlzLl9pY29uUG9zaXRpb24gPSBJY29uU2VydmljZS5ERUZBVUxUX0lDT05fUE9TSVRJT047XG4gICAgdGhpcy5vU2FmZVBpcGUgPSBuZXcgT1NhZmVQaXBlKHRoaXMuaW5qZWN0b3IpXG4gIH1cblxuICBnZXQgaWNvblBvc2l0aW9uKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2ljb25Qb3NpdGlvbjtcbiAgfVxuXG4gIHNldCBpY29uUG9zaXRpb24odmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX2ljb25Qb3NpdGlvbiA9IHZhbHVlO1xuICB9XG5cbiAgZ2V0SWNvblZhbHVlKHZhbHVlOiBhbnksIGFyZ3M6IGFueSk6IFNhZmVIdG1sIHtcbiAgICBsZXQgaWNvblBvc2l0aW9uID0gYXJncyA/IGFyZ3MuaWNvblBvc2l0aW9uIDogdW5kZWZpbmVkO1xuICAgIGlmICghVXRpbC5pc0RlZmluZWQoaWNvblBvc2l0aW9uKSkge1xuICAgICAgaWNvblBvc2l0aW9uID0gdGhpcy5faWNvblBvc2l0aW9uO1xuICAgIH1cbiAgICBsZXQgaWNvblZhbHVlID0gdmFsdWU7XG4gICAgbGV0IGljb24gPSBcIjxtYXQtaWNvbiBjbGFzcz0nbWF0LTI0IG1hdC1pY29uIG5vdHJhbnNsYXRlIG1hdGVyaWFsLWljb25zIG1hdC1pY29uLW5vLWNvbG9yJyByb2xlPSdpbWcnIGFyaWEtaGlkZGVuPSd0cnVlJz5cIiArIGFyZ3MuaWNvbiArIFwiPC9tYXQtaWNvbj5cIjtcbiAgICBzd2l0Y2ggKGljb25Qb3NpdGlvbikge1xuICAgICAgY2FzZSAnbGVmdCc6XG4gICAgICAgIGljb25WYWx1ZSA9IGljb24gKyBpY29uVmFsdWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICBpY29uVmFsdWUgPSBpY29uVmFsdWUgKyBpY29uO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMub1NhZmVQaXBlLnRyYW5zZm9ybShpY29uVmFsdWUsICdodG1sJyk7XG4gIH1cblxufVxuIl19