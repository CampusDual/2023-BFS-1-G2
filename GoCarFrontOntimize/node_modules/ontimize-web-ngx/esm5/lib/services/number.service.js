import { Injectable, Injector } from '@angular/core';
import { Util } from '../util/util';
import { OTranslateService } from './translate/o-translate.service';
import * as i0 from "@angular/core";
var NumberService = (function () {
    function NumberService(injector) {
        var _this = this;
        this.injector = injector;
        this.translateService = this.injector.get(OTranslateService);
        this.minDecimalDigits = NumberService.DEFAULT_DECIMAL_DIGITS;
        this.maxDecimalDigits = NumberService.DEFAULT_DECIMAL_DIGITS;
        this.locale = this.translateService.getCurrentLang();
        this.translateService.onLanguageChanged.subscribe(function () {
            return _this.locale = _this.translateService.getCurrentLang();
        });
    }
    NumberService.prototype.getIntegerValue = function (value, args) {
        var grouping = args ? args.grouping : undefined;
        if (!Util.isDefined(value)) {
            return value;
        }
        var thousandSeparator = args ? args.thousandSeparator : undefined;
        var locale = args ? args.locale : undefined;
        var intValue = parseInt(value, 10);
        if (isNaN(intValue)) {
            return void 0;
        }
        var formattedIntValue;
        if (Util.isDefined(locale) || !Util.isDefined(thousandSeparator)) {
            formattedIntValue = new Intl.NumberFormat(Util.isDefined(locale) ? locale : this.locale).format(intValue);
        }
        else {
            formattedIntValue = String(intValue).toString().replace(/\B(?=(\d{3})+(?!\d))/g, thousandSeparator);
        }
        return formattedIntValue;
    };
    NumberService.prototype.getRealValue = function (value, args) {
        if (!Util.isDefined(value)) {
            return value;
        }
        var locale = args ? args.locale : undefined;
        var thousandSeparator = args ? args.thousandSeparator : undefined;
        var decimalSeparator = args ? args.decimalSeparator : undefined;
        var grouping = args ? args.grouping : false;
        var minDecimalDigits = args ? args.minDecimalDigits : this.minDecimalDigits;
        var maxDecimalDigits = args ? args.maxDecimalDigits : this.maxDecimalDigits;
        var formattedRealValue = value;
        var useIntlNumberFormat = Util.isDefined(locale) || (!Util.isDefined(thousandSeparator) || !Util.isDefined(decimalSeparator));
        if (useIntlNumberFormat) {
            formattedRealValue = args.truncate ? this.truncate(value, maxDecimalDigits) : null;
            if (!Util.isDefined(formattedRealValue)) {
                var formatterArgs = {
                    minimumFractionDigits: minDecimalDigits,
                    maximumFractionDigits: maxDecimalDigits,
                    useGrouping: grouping
                };
                formattedRealValue = new Intl.NumberFormat(Util.isDefined(locale) ? locale : this.locale, formatterArgs).format(value);
            }
        }
        else {
            formattedRealValue = this.parseRealValue(value, maxDecimalDigits, thousandSeparator, decimalSeparator, grouping);
        }
        return formattedRealValue;
    };
    NumberService.prototype.getPercentValue = function (value, args) {
        var valueBase = args ? args.valueBase : undefined;
        var parsedValue = value;
        switch (valueBase) {
            case 100:
                break;
            case 1:
            default:
                parsedValue = parsedValue * 100;
                break;
        }
        var formattedPercentValue = this.getRealValue(parsedValue, args) + ' %';
        return formattedPercentValue;
    };
    NumberService.prototype.truncate = function (value, maxDecimals) {
        var stringValue = String(value);
        var splittedValue = stringValue.split('.');
        var decimalsLength = Util.isDefined(splittedValue[1]) ? splittedValue[1].length : null;
        if (decimalsLength > maxDecimals) {
            return stringValue.slice(0, splittedValue[0].length + 1 + maxDecimals);
        }
        return null;
    };
    NumberService.prototype.parseRealValue = function (value, maxDecimalDigits, thousandSeparator, decimalSeparator, grouping) {
        var result = value;
        var realValue = parseFloat(value);
        if (!isNaN(realValue)) {
            result = String(realValue);
            var tmpStr = realValue.toFixed(maxDecimalDigits);
            tmpStr = tmpStr.replace('.', decimalSeparator);
            if (grouping) {
                var parts = tmpStr.split(decimalSeparator);
                if (parts.length > 0) {
                    parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, thousandSeparator);
                    result = parts.join(decimalSeparator);
                }
            }
            else {
                result = tmpStr;
            }
        }
        return result;
    };
    NumberService.DEFAULT_DECIMAL_DIGITS = 2;
    NumberService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    NumberService.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    NumberService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NumberService_Factory() { return new NumberService(i0.ɵɵinject(i0.INJECTOR)); }, token: NumberService, providedIn: "root" });
    return NumberService;
}());
export { NumberService };
//# sourceMappingURL=data:application/json;base64,