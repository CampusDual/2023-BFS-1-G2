import * as tslib_1 from "tslib";
import { DefaultServiceComponentStateClass } from './o-component-state.class';
import { Util } from '../../util';
var OTableComponentStateClass = (function (_super) {
    tslib_1.__extends(OTableComponentStateClass, _super);
    function OTableComponentStateClass() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this['grouped-column-types'] = [];
        return _this;
    }
    Object.defineProperty(OTableComponentStateClass.prototype, "filterBuilderValues", {
        get: function () {
            return this['filter-builder-values'];
        },
        set: function (value) {
            this['filter-builder-values'] = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableComponentStateClass.prototype, "selectColumnVisible", {
        get: function () {
            return this['select-column-visible'];
        },
        set: function (value) {
            this['select-column-visible'] = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableComponentStateClass.prototype, "quickFilterValue", {
        get: function () {
            return this['filter'];
        },
        set: function (value) {
            this['filter'] = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableComponentStateClass.prototype, "columnsDisplay", {
        get: function () {
            return this['oColumns-display'];
        },
        set: function (value) {
            this['oColumns-display'] = value;
        },
        enumerable: true,
        configurable: true
    });
    OTableComponentStateClass.prototype.getColumnDisplay = function (oCol) {
        return (this.columnsDisplay || []).find(function (col) { return col.attr === oCol.attr; });
    };
    Object.defineProperty(OTableComponentStateClass.prototype, "initialConfiguration", {
        get: function () {
            return this['initial-configuration'];
        },
        set: function (value) {
            this['initial-configuration'] = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableComponentStateClass.prototype, "sortColumns", {
        get: function () {
            return this['sort-columns'];
        },
        set: function (value) {
            this['sort-columns'] = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableComponentStateClass.prototype, "groupedColumnTypes", {
        get: function () {
            return this['grouped-column-types'];
        },
        set: function (value) {
            this['grouped-column-types'] = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableComponentStateClass.prototype, "filterColumns", {
        get: function () {
            return this['filter-columns'];
        },
        set: function (value) {
            this['filter-columns'] = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableComponentStateClass.prototype, "filterColumnActiveByDefault", {
        get: function () {
            return this['filter-column-active-by-default'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableComponentStateClass.prototype, "groupedColumns", {
        get: function () {
            return this['grouped-columns'];
        },
        set: function (value) {
            this['grouped-columns'] = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableComponentStateClass.prototype, "columnValueFilters", {
        get: function () {
            return this['column-value-filters'] || [];
        },
        set: function (value) {
            this['column-value-filters'] = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableComponentStateClass.prototype, "storedFilters", {
        get: function () {
            return this['user-stored-filters'] || [];
        },
        enumerable: true,
        configurable: true
    });
    OTableComponentStateClass.prototype.addStoredFilter = function (filter) {
        if (!Util.isDefined(this['user-stored-filters'])) {
            this['user-stored-filters'] = [];
        }
        this.storedFilters.push(filter);
    };
    OTableComponentStateClass.prototype.deleteStoredFilter = function (filterName) {
        var index = this.storedFilters.findIndex(function (item) { return item.name === filterName; });
        if (index >= 0) {
            this.storedFilters.splice(index, 1);
        }
    };
    OTableComponentStateClass.prototype.getStoredFilter = function (filterName) {
        var result;
        var filter = this.storedFilters.find(function (item) { return item.name === filterName; });
        if (filter) {
            result = filter['stored-filter'];
        }
        return result;
    };
    OTableComponentStateClass.prototype.applyFilter = function (filterName) {
        var filter = this.getStoredFilter(filterName);
        if (filter) {
            this.columnValueFilters = filter['column-value-filters'];
            this.quickFilterValue = filter['filter'];
            this.filterCaseSensitive = filter['filter-case-sensitive'];
            this.filterBuilderValues = filter['filter-builder-values'];
            this.oColumns = filter['oColumns'];
        }
    };
    Object.defineProperty(OTableComponentStateClass.prototype, "storedConfigurations", {
        get: function () {
            return this['user-stored-configurations'] || [];
        },
        enumerable: true,
        configurable: true
    });
    OTableComponentStateClass.prototype.addStoredConfiguration = function (configuration) {
        if (!Util.isDefined(this['user-stored-configurations'])) {
            this['user-stored-configurations'] = [];
        }
        this.storedConfigurations.push(configuration);
    };
    OTableComponentStateClass.prototype.deleteStoredConfiguration = function (configurationName) {
        var index = this.storedConfigurations.findIndex(function (item) { return item.name === configurationName; });
        if (index >= 0) {
            this.storedConfigurations.splice(index, 1);
        }
    };
    OTableComponentStateClass.prototype.getStoredConfiguration = function (configurationName) {
        return this.storedConfigurations.find(function (item) { return item.name === configurationName; });
    };
    OTableComponentStateClass.prototype.applyConfiguration = function (configurationName) {
        var configuration = this.getStoredConfiguration(configurationName);
        if (configuration) {
            var properties = configuration['stored-properties'] || [];
            var conf = configuration['stored-configuration'];
            this.copyPropertiesFromConfiguration(properties, conf);
        }
    };
    OTableComponentStateClass.prototype.reset = function (pageable) {
        var result = {
            'user-stored-filters': this.storedFilters,
            'user-stored-configurations': this.storedConfigurations
        };
        if (pageable) {
            result['totalQueryRecordsNumber'] = this.totalQueryRecordsNumber;
        }
        result['currentPage'] = 0;
        Object.assign(this, {});
        Object.assign(this, result);
    };
    OTableComponentStateClass.prototype.copyPropertiesFromConfiguration = function (properties, configuration) {
        var _this = this;
        properties.forEach(function (property) {
            switch (property) {
                case 'sort-columns':
                    _this.sortColumns = configuration['sort-columns'];
                    break;
                case 'oColumns-display':
                    _this.columnsDisplay = configuration['oColumns-display'];
                    _this.selectColumnVisible = configuration['select-column-visible'];
                    break;
                case 'quick-filter':
                case 'columns-filter':
                    _this.columnValueFilters = configuration['column-value-filters'];
                    break;
                case 'grouped-columns':
                    _this.groupedColumns = configuration['grouped-columns'];
                    break;
                case 'page':
                    _this.currentPage = configuration['currentPage'];
                    _this.totalQueryRecordsNumber = configuration['totalQueryRecordsNumber'];
                    _this.queryRecordOffset = configuration['queryRecordOffset'];
                    _this.queryRows = configuration['query-rows'];
                    break;
                case 'filter-builder':
                    _this.filterBuilderValues = configuration['filter-builder'];
                    break;
            }
        });
    };
    return OTableComponentStateClass;
}(DefaultServiceComponentStateClass));
export { OTableComponentStateClass };
//# sourceMappingURL=data:application/json;base64,