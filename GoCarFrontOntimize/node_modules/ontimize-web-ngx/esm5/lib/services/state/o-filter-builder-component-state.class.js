import * as tslib_1 from "tslib";
import { Util } from '../../util';
import { DefaultComponentStateClass } from './o-component-state.class';
var OFilterBuilderComponentStateClass = (function (_super) {
    tslib_1.__extends(OFilterBuilderComponentStateClass, _super);
    function OFilterBuilderComponentStateClass() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(OFilterBuilderComponentStateClass.prototype, "storedFilterBuilders", {
        get: function () {
            return this['stored-filter-builders'] || [];
        },
        set: function (value) {
            this['stored-filter-builders'] = value;
        },
        enumerable: true,
        configurable: true
    });
    OFilterBuilderComponentStateClass.prototype.addStoredFilter = function (filter) {
        if (!Util.isDefined(this['stored-filter-builders'])) {
            this['stored-filter-builders'] = [];
        }
        this.storedFilterBuilders.push(filter);
    };
    OFilterBuilderComponentStateClass.prototype.deleteStoredFilter = function (filterName) {
        var index = this.storedFilterBuilders.findIndex(function (item) { return item.name === filterName; });
        if (index >= 0) {
            this.storedFilterBuilders.splice(index, 1);
        }
    };
    OFilterBuilderComponentStateClass.prototype.applyFilter = function (filterName) {
        var filter = this.getStoredFilter(filterName);
        if (filter) {
            this.filterBuilderValues = filter;
        }
    };
    OFilterBuilderComponentStateClass.prototype.getStoredFilter = function (filterName) {
        var result = [];
        var filter = this.storedFilterBuilders.find(function (item) { return item.name === filterName; });
        if (Util.isDefined(filter)) {
            result = filter['filter-builder-values'];
        }
        return result;
    };
    return OFilterBuilderComponentStateClass;
}(DefaultComponentStateClass));
export { OFilterBuilderComponentStateClass };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1maWx0ZXItYnVpbGRlci1jb21wb25lbnQtc3RhdGUuY2xhc3MuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9vbnRpbWl6ZS13ZWItbmd4LyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3N0YXRlL28tZmlsdGVyLWJ1aWxkZXItY29tcG9uZW50LXN0YXRlLmNsYXNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRXZFO0lBQXVELDZEQUEwQjtJQUFqRjs7SUEwQ0EsQ0FBQztJQXJDQyxzQkFBSSxtRUFBb0I7YUFBeEI7WUFDRSxPQUFPLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUM5QyxDQUFDO2FBRUQsVUFBeUIsS0FBNkI7WUFDcEQsSUFBSSxDQUFDLHdCQUF3QixDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQ3pDLENBQUM7OztPQUpBO0lBTUQsMkRBQWUsR0FBZixVQUFnQixNQUE0QjtRQUMxQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxFQUFFO1lBQ25ELElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxHQUFHLEVBQUUsQ0FBQztTQUNyQztRQUNELElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVELDhEQUFrQixHQUFsQixVQUFtQixVQUFrQjtRQUNuQyxJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsU0FBUyxDQUFDLFVBQUMsSUFBMEIsSUFBSyxPQUFBLElBQUksQ0FBQyxJQUFJLEtBQUssVUFBVSxFQUF4QixDQUF3QixDQUFDLENBQUM7UUFDNUcsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1lBQ2QsSUFBSSxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDNUM7SUFDSCxDQUFDO0lBQ0QsdURBQVcsR0FBWCxVQUFZLFVBQWtCO1FBQzVCLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDaEQsSUFBSSxNQUFNLEVBQUU7WUFDVixJQUFJLENBQUMsbUJBQW1CLEdBQUcsTUFBTSxDQUFDO1NBQ25DO0lBQ0gsQ0FBQztJQUVELDJEQUFlLEdBQWYsVUFBZ0IsVUFBa0I7UUFDaEMsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ2hCLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsVUFBQyxJQUEwQixJQUFLLE9BQUEsSUFBSSxDQUFDLElBQUksS0FBSyxVQUFVLEVBQXhCLENBQXdCLENBQUMsQ0FBQztRQUN4RyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDMUIsTUFBTSxHQUFHLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1NBQzFDO1FBQ0QsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUVILHdDQUFDO0FBQUQsQ0FBQyxBQTFDRCxDQUF1RCwwQkFBMEIsR0EwQ2hGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT0ZpbHRlckJ1aWxkZXJTdGF0dXMsIE9GaWx0ZXJCdWlsZGVyVmFsdWVzIH0gZnJvbSAnLi4vLi4vdHlwZXMvby1maWx0ZXItYnVpbGRlci12YWx1ZXMudHlwZSc7XG5pbXBvcnQgeyBVdGlsIH0gZnJvbSAnLi4vLi4vdXRpbCc7XG5pbXBvcnQgeyBEZWZhdWx0Q29tcG9uZW50U3RhdGVDbGFzcyB9IGZyb20gJy4vby1jb21wb25lbnQtc3RhdGUuY2xhc3MnO1xuXG5leHBvcnQgY2xhc3MgT0ZpbHRlckJ1aWxkZXJDb21wb25lbnRTdGF0ZUNsYXNzIGV4dGVuZHMgRGVmYXVsdENvbXBvbmVudFN0YXRlQ2xhc3Mge1xuXG4gIC8vIHN0b3JlZCBmaWx0ZXJzIGJ1aWxkZXIgdmFsdWVzXG4gIGZpbHRlckJ1aWxkZXJWYWx1ZXM6IE9GaWx0ZXJCdWlsZGVyVmFsdWVzW107XG5cbiAgZ2V0IHN0b3JlZEZpbHRlckJ1aWxkZXJzKCk6IE9GaWx0ZXJCdWlsZGVyU3RhdHVzW10ge1xuICAgIHJldHVybiB0aGlzWydzdG9yZWQtZmlsdGVyLWJ1aWxkZXJzJ10gfHwgW107XG4gIH1cblxuICBzZXQgc3RvcmVkRmlsdGVyQnVpbGRlcnModmFsdWU6IE9GaWx0ZXJCdWlsZGVyU3RhdHVzW10pIHtcbiAgICB0aGlzWydzdG9yZWQtZmlsdGVyLWJ1aWxkZXJzJ10gPSB2YWx1ZTtcbiAgfVxuXG4gIGFkZFN0b3JlZEZpbHRlcihmaWx0ZXI6IE9GaWx0ZXJCdWlsZGVyU3RhdHVzKSB7XG4gICAgaWYgKCFVdGlsLmlzRGVmaW5lZCh0aGlzWydzdG9yZWQtZmlsdGVyLWJ1aWxkZXJzJ10pKSB7XG4gICAgICB0aGlzWydzdG9yZWQtZmlsdGVyLWJ1aWxkZXJzJ10gPSBbXTtcbiAgICB9XG4gICAgdGhpcy5zdG9yZWRGaWx0ZXJCdWlsZGVycy5wdXNoKGZpbHRlcik7XG4gIH1cblxuICBkZWxldGVTdG9yZWRGaWx0ZXIoZmlsdGVyTmFtZTogc3RyaW5nKSB7XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLnN0b3JlZEZpbHRlckJ1aWxkZXJzLmZpbmRJbmRleCgoaXRlbTogT0ZpbHRlckJ1aWxkZXJTdGF0dXMpID0+IGl0ZW0ubmFtZSA9PT0gZmlsdGVyTmFtZSk7XG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgIHRoaXMuc3RvcmVkRmlsdGVyQnVpbGRlcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gIH1cbiAgYXBwbHlGaWx0ZXIoZmlsdGVyTmFtZTogc3RyaW5nKSB7XG4gICAgY29uc3QgZmlsdGVyID0gdGhpcy5nZXRTdG9yZWRGaWx0ZXIoZmlsdGVyTmFtZSk7XG4gICAgaWYgKGZpbHRlcikge1xuICAgICAgdGhpcy5maWx0ZXJCdWlsZGVyVmFsdWVzID0gZmlsdGVyO1xuICAgIH1cbiAgfVxuXG4gIGdldFN0b3JlZEZpbHRlcihmaWx0ZXJOYW1lOiBzdHJpbmcpOiBPRmlsdGVyQnVpbGRlclZhbHVlc1tdIHtcbiAgICBsZXQgcmVzdWx0ID0gW107XG4gICAgY29uc3QgZmlsdGVyID0gdGhpcy5zdG9yZWRGaWx0ZXJCdWlsZGVycy5maW5kKChpdGVtOiBPRmlsdGVyQnVpbGRlclN0YXR1cykgPT4gaXRlbS5uYW1lID09PSBmaWx0ZXJOYW1lKTtcbiAgICBpZiAoVXRpbC5pc0RlZmluZWQoZmlsdGVyKSkge1xuICAgICAgcmVzdWx0ID0gZmlsdGVyWydmaWx0ZXItYnVpbGRlci12YWx1ZXMnXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG59XG4iXX0=