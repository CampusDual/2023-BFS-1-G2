import * as tslib_1 from "tslib";
import { Injectable, Injector } from '@angular/core';
import { Util } from '../../util';
import { LocalStorageService } from '../local-storage.service';
import { DefaultComponentStateClass, DefaultServiceComponentStateClass } from './o-component-state.class';
var AbstractComponentStateService = (function () {
    function AbstractComponentStateService(injector) {
        this.injector = injector;
        this.localStorageService = injector.get(LocalStorageService);
    }
    AbstractComponentStateService.prototype.initialize = function (comp) {
        this.component = comp;
        if (Util.isDefined(this.state)) {
            this.initializeState(this.state);
        }
    };
    AbstractComponentStateService.prototype.initializeState = function (state) {
        if (Util.isDefined(this.state) &&
            ((Util.isDefined(this.component.storeState) && this.component.storeState
                ||
                    !Util.isDefined(this.component.storeState)))) {
            state.setData(this.localStorageService.getComponentStorage(this.component, this.component.getRouteKey()));
        }
    };
    AbstractComponentStateService.decorators = [
        { type: Injectable }
    ];
    AbstractComponentStateService.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    return AbstractComponentStateService;
}());
export { AbstractComponentStateService };
var DefaultComponentStateService = (function (_super) {
    tslib_1.__extends(DefaultComponentStateService, _super);
    function DefaultComponentStateService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DefaultComponentStateService.prototype.initialize = function (comp) {
        this.state = new DefaultComponentStateClass();
        _super.prototype.initialize.call(this, comp);
    };
    DefaultComponentStateService.decorators = [
        { type: Injectable }
    ];
    return DefaultComponentStateService;
}(AbstractComponentStateService));
export { DefaultComponentStateService };
var DefaultServiceComponentStateService = (function (_super) {
    tslib_1.__extends(DefaultServiceComponentStateService, _super);
    function DefaultServiceComponentStateService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DefaultServiceComponentStateService.prototype.initialize = function (comp) {
        this.state = new DefaultServiceComponentStateClass();
        _super.prototype.initialize.call(this, comp);
    };
    DefaultServiceComponentStateService.decorators = [
        { type: Injectable }
    ];
    return DefaultServiceComponentStateService;
}(AbstractComponentStateService));
export { DefaultServiceComponentStateService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1jb21wb25lbnQtc3RhdGUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL29udGltaXplLXdlYi1uZ3gvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvc3RhdGUvby1jb21wb25lbnQtc3RhdGUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHckQsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLFlBQVksQ0FBQztBQUNsQyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUMvRCxPQUFPLEVBQStCLDBCQUEwQixFQUFFLGlDQUFpQyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFFdkk7SUFRRSx1Q0FBc0IsUUFBa0I7UUFBbEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUN0QyxJQUFJLENBQUMsbUJBQW1CLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBc0IsbUJBQW1CLENBQUMsQ0FBQztJQUNwRixDQUFDO0lBRU0sa0RBQVUsR0FBakIsVUFBa0IsSUFBTztRQUN2QixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztRQUN0QixJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQzlCLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ2xDO0lBQ0gsQ0FBQztJQUVNLHVEQUFlLEdBQXRCLFVBQXVCLEtBQVE7UUFDN0IsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7WUFDNUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVU7O29CQUV0RSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQzlDO1lBQ0EsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUMzRztJQUNILENBQUM7O2dCQTNCRixVQUFVOzs7Z0JBUFUsUUFBUTs7SUFtQzdCLG9DQUFDO0NBQUEsQUE1QkQsSUE0QkM7U0EzQnFCLDZCQUE2QjtBQTZCbkQ7SUFDa0Qsd0RBQWlGO0lBRG5JOztJQU9BLENBQUM7SUFKQyxpREFBVSxHQUFWLFVBQVcsSUFBNEI7UUFDckMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLDBCQUEwQixFQUFFLENBQUM7UUFDOUMsaUJBQU0sVUFBVSxZQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3pCLENBQUM7O2dCQU5GLFVBQVU7O0lBT1gsbUNBQUM7Q0FBQSxBQVBELENBQ2tELDZCQUE2QixHQU05RTtTQU5ZLDRCQUE0QjtBQVF6QztJQUN5RCwrREFBd0Y7SUFEako7O0lBT0EsQ0FBQztJQUpDLHdEQUFVLEdBQVYsVUFBVyxJQUE0QjtRQUNyQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksaUNBQWlDLEVBQUUsQ0FBQztRQUNyRCxpQkFBTSxVQUFVLFlBQUMsSUFBSSxDQUFDLENBQUM7SUFDekIsQ0FBQzs7Z0JBTkYsVUFBVTs7SUFPWCwwQ0FBQztDQUFBLEFBUEQsQ0FDeUQsNkJBQTZCLEdBTXJGO1NBTlksbUNBQW1DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgSUxvY2FsU3RvcmFnZUNvbXBvbmVudCB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvbG9jYWwtc3RvcmFnZS1jb21wb25lbnQuaW50ZXJmYWNlJztcbmltcG9ydCB7IFV0aWwgfSBmcm9tICcuLi8uLi91dGlsJztcbmltcG9ydCB7IExvY2FsU3RvcmFnZVNlcnZpY2UgfSBmcm9tICcuLi9sb2NhbC1zdG9yYWdlLnNlcnZpY2UnO1xuaW1wb3J0IHsgQWJzdHJhY3RDb21wb25lbnRTdGF0ZUNsYXNzLCBEZWZhdWx0Q29tcG9uZW50U3RhdGVDbGFzcywgRGVmYXVsdFNlcnZpY2VDb21wb25lbnRTdGF0ZUNsYXNzIH0gZnJvbSAnLi9vLWNvbXBvbmVudC1zdGF0ZS5jbGFzcyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBYnN0cmFjdENvbXBvbmVudFN0YXRlU2VydmljZTxTIGV4dGVuZHMgQWJzdHJhY3RDb21wb25lbnRTdGF0ZUNsYXNzLCBDIGV4dGVuZHMgSUxvY2FsU3RvcmFnZUNvbXBvbmVudCA9IGFueT57XG5cbiAgcHJvdGVjdGVkIGxvY2FsU3RvcmFnZVNlcnZpY2U6IExvY2FsU3RvcmFnZVNlcnZpY2U7XG5cbiAgcHJvdGVjdGVkIGNvbXBvbmVudDogQztcbiAgcHVibGljIHN0YXRlOiBTO1xuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBpbmplY3RvcjogSW5qZWN0b3IpIHtcbiAgICB0aGlzLmxvY2FsU3RvcmFnZVNlcnZpY2UgPSBpbmplY3Rvci5nZXQ8TG9jYWxTdG9yYWdlU2VydmljZT4oTG9jYWxTdG9yYWdlU2VydmljZSk7XG4gIH1cblxuICBwdWJsaWMgaW5pdGlhbGl6ZShjb21wOiBDKSB7XG4gICAgdGhpcy5jb21wb25lbnQgPSBjb21wO1xuICAgIGlmIChVdGlsLmlzRGVmaW5lZCh0aGlzLnN0YXRlKSkge1xuICAgICAgdGhpcy5pbml0aWFsaXplU3RhdGUodGhpcy5zdGF0ZSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGluaXRpYWxpemVTdGF0ZShzdGF0ZTogUykge1xuICAgIGlmIChVdGlsLmlzRGVmaW5lZCh0aGlzLnN0YXRlKSAmJlxuICAgICAgKChVdGlsLmlzRGVmaW5lZCh0aGlzLmNvbXBvbmVudC5zdG9yZVN0YXRlKSAmJiB0aGlzLmNvbXBvbmVudC5zdG9yZVN0YXRlXG4gICAgICAgIHx8XG4gICAgICAgICFVdGlsLmlzRGVmaW5lZCh0aGlzLmNvbXBvbmVudC5zdG9yZVN0YXRlKSkpXG4gICAgKSB7XG4gICAgICBzdGF0ZS5zZXREYXRhKHRoaXMubG9jYWxTdG9yYWdlU2VydmljZS5nZXRDb21wb25lbnRTdG9yYWdlKHRoaXMuY29tcG9uZW50LCB0aGlzLmNvbXBvbmVudC5nZXRSb3V0ZUtleSgpKSk7XG4gICAgfVxuICB9XG59XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBEZWZhdWx0Q29tcG9uZW50U3RhdGVTZXJ2aWNlIGV4dGVuZHMgQWJzdHJhY3RDb21wb25lbnRTdGF0ZVNlcnZpY2U8RGVmYXVsdENvbXBvbmVudFN0YXRlQ2xhc3MsIElMb2NhbFN0b3JhZ2VDb21wb25lbnQ+IHtcblxuICBpbml0aWFsaXplKGNvbXA6IElMb2NhbFN0b3JhZ2VDb21wb25lbnQpIHtcbiAgICB0aGlzLnN0YXRlID0gbmV3IERlZmF1bHRDb21wb25lbnRTdGF0ZUNsYXNzKCk7XG4gICAgc3VwZXIuaW5pdGlhbGl6ZShjb21wKTtcbiAgfVxufVxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgRGVmYXVsdFNlcnZpY2VDb21wb25lbnRTdGF0ZVNlcnZpY2UgZXh0ZW5kcyBBYnN0cmFjdENvbXBvbmVudFN0YXRlU2VydmljZTxEZWZhdWx0U2VydmljZUNvbXBvbmVudFN0YXRlQ2xhc3MsIElMb2NhbFN0b3JhZ2VDb21wb25lbnQ+IHtcblxuICBpbml0aWFsaXplKGNvbXA6IElMb2NhbFN0b3JhZ2VDb21wb25lbnQpIHtcbiAgICB0aGlzLnN0YXRlID0gbmV3IERlZmF1bHRTZXJ2aWNlQ29tcG9uZW50U3RhdGVDbGFzcygpO1xuICAgIHN1cGVyLmluaXRpYWxpemUoY29tcCk7XG4gIH1cbn1cbiJdfQ==