import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Codes } from '../../util/codes';
import { Util } from '../../util/util';
import { AbstractComponentStateService } from './o-component-state.service';
import { OTableComponentStateClass } from './o-table-component-state.class';
var OTableComponentStateService = (function (_super) {
    tslib_1.__extends(OTableComponentStateService, _super);
    function OTableComponentStateService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    OTableComponentStateService.prototype.initialize = function (component) {
        this.state = new OTableComponentStateClass();
        _super.prototype.initialize.call(this, component);
    };
    OTableComponentStateService.prototype.initializeState = function (state) {
        _super.prototype.initializeState.call(this, state);
        var initialConfigurationRawObj = state.initialConfiguration || {};
        state.initialConfiguration = new OTableComponentStateClass();
        state.initialConfiguration.setData(initialConfigurationRawObj);
    };
    OTableComponentStateService.prototype.refreshSelection = function () {
        this.state.selection = this.getSelectionState();
    };
    OTableComponentStateService.prototype.getDataToStore = function () {
        var dataToStore = {};
        var propertiesKeys = [
            'sort-columns',
            'oColumns-display',
            'columns-filter',
            'quick-filter',
            'page',
            'selection',
            'initial-configuration',
            'filter-columns',
            'filter-column-active',
            'grouped-columns',
            'grouped-column-types',
            'user-stored-filters',
            'user-stored-configurations'
        ];
        Object.assign(dataToStore, this.getTablePropertiesToStore(propertiesKeys));
        return dataToStore;
    };
    OTableComponentStateService.prototype.storeFilter = function (filter) {
        var newFilter = { name: filter.name, description: filter.description };
        var storedFilter = {};
        Object.assign(storedFilter, this.getColumnFiltersState());
        Object.assign(storedFilter, this.getColumnsQuickFilterState());
        Object.assign(storedFilter, this.getFilterBuilderState());
        newFilter['stored-filter'] = storedFilter;
        this.state.addStoredFilter(newFilter);
    };
    OTableComponentStateService.prototype.storeConfiguration = function (configurationAgs, tableProperties) {
        var newConfiguration = {};
        this.component.storePaginationState = true;
        var storedConfiguration = this.getTablePropertiesToStore(tableProperties);
        this.component.storePaginationState = false;
        newConfiguration['stored-configuration'] = storedConfiguration;
        Object.assign(newConfiguration, configurationAgs);
        newConfiguration['stored-properties'] = tableProperties;
        this.state.addStoredConfiguration(newConfiguration);
    };
    OTableComponentStateService.prototype.getTablePropertiesToStore = function (properties) {
        var _this = this;
        var result = {};
        properties.forEach(function (prop) {
            Object.assign(result, _this.getTablePropertyToStore(prop));
        });
        return result;
    };
    OTableComponentStateService.prototype.getTablePropertyToStore = function (property) {
        var result = {};
        switch (property) {
            case 'sort-columns':
                result = this.getSortState();
                break;
            case 'oColumns-display':
                result = this.getColumnsDisplayState();
                break;
            case 'quick-filter':
                result = this.getColumnsQuickFilterState();
                break;
            case 'columns-filter':
                result = this.getColumnFiltersState();
                break;
            case 'page':
                result = this.getPageState();
                break;
            case 'selection':
                result['selection'] = this.getSelectionState();
                break;
            case 'initial-configuration':
                result = this.getInitialConfigurationState();
                break;
            case 'filter-column-active':
                result['filter-column-active'] = this.component.isColumnFiltersActive;
                break;
            case 'filter-columns':
                result['filter-columns'] = this.component.filterColumns;
                break;
            case 'grouped-columns':
                result['grouped-columns'] = this.component.groupedColumnsArray;
                break;
            case 'grouped-column-types':
                result['grouped-column-types'] = this.component.groupedColumnTypes;
                break;
            case 'user-stored-filters':
                result['user-stored-filters'] = this.state.storedFilters;
                break;
            case 'user-stored-configurations':
                result['user-stored-configurations'] = this.state.storedConfigurations;
                break;
            case 'filter-builder':
                if (this.component.filterBuilder) {
                    result['filter-builder'] = this.component.filterBuilder.getFilterValues();
                }
                break;
        }
        return result;
    };
    OTableComponentStateService.prototype.getColumnsDisplayState = function () {
        var oColumnsData = [];
        this.component.oTableOptions.columns.forEach(function (oCol) {
            oColumnsData.push({
                attr: oCol.attr,
                visible: oCol.visible,
                width: oCol.getWidthToStore()
            });
        });
        return {
            'oColumns-display': oColumnsData,
            'select-column-visible': this.component.oTableOptions.selectColumn.visible
        };
    };
    OTableComponentStateService.prototype.getColumnsQuickFilterState = function () {
        var tableOptions = this.component.oTableOptions;
        var oColumnsData = [];
        tableOptions.columns.forEach(function (oCol) {
            oColumnsData.push({
                attr: oCol.attr,
                searchable: oCol.searchable,
                searching: oCol.searching
            });
        });
        return {
            'oColumns': oColumnsData,
            'filter-case-sensitive': tableOptions.filterCaseSensitive,
            'filter': this.component.oTableQuickFilterComponent ? this.component.oTableQuickFilterComponent.value : ''
        };
    };
    OTableComponentStateService.prototype.getFilterBuilderState = function () {
        var result = {};
        if (this.component.filterBuilder) {
            var filterBuilder = this.component.filterBuilder.getFilterValues();
            if (!Util.isObjectEmpty(filterBuilder)) {
                result['filter-builder-values'] = filterBuilder;
            }
        }
        return result;
    };
    OTableComponentStateService.prototype.getColumnFiltersState = function () {
        var result = {};
        if (this.component.dataSource) {
            var columnValueFilters = this.component.dataSource.getColumnValueFilters();
            if (columnValueFilters.length > 0) {
                result['column-value-filters'] = columnValueFilters;
            }
        }
        return result;
    };
    OTableComponentStateService.prototype.getPageState = function () {
        var result = {
            'query-rows': this.component.matpaginator ? this.component.matpaginator.pageSize : ''
        };
        if (this.component.currentPage > 0 && this.component.storePaginationState) {
            result.currentPage = this.component.currentPage;
        }
        if (this.component.pageable && this.component.storePaginationState) {
            result.totalQueryRecordsNumber = this.component.state.totalQueryRecordsNumber;
            result.queryRecordOffset = Math.max((this.component.state.queryRecordOffset - this.component.dataSource.renderedData.length), (this.component.state.queryRecordOffset - this.component.queryRows));
        }
        return result;
    };
    OTableComponentStateService.prototype.getSelectionState = function () {
        var selection = [];
        if (this.component && this.component.keepSelectedItems) {
            var tableKeys_1 = this.component.getKeys();
            this.component.getSelectedItems().forEach(function (item) {
                var data = {};
                tableKeys_1.forEach(function (key) {
                    data[key] = item[key];
                });
                selection.push(data);
            });
        }
        return selection;
    };
    OTableComponentStateService.prototype.getInitialConfigurationState = function () {
        var _this = this;
        var oColumnsData = [];
        Util.parseArray(this.component.visibleColumns, true).forEach(function (columnAttr) {
            var oCol = _this.component.getOColumn(columnAttr);
            oColumnsData.push({
                attr: oCol.attr,
                visible: true,
                width: oCol.definition ? oCol.definition.originalWidth : undefined
            });
        });
        return {
            'initial-configuration': {
                'oColumns-display': oColumnsData,
                'sort-columns': this.component.sortColumns,
                'select-column-visible': this.component.oTableOptions.selectColumn.visible,
                'filter-case-sensitive': this.component.filterCaseSensitive,
                'query-rows': this.component.originalQueryRows,
                'filter-column-active-by-default': this.component.filterColumnActiveByDefault,
                'filter-columns': this.component.originalFilterColumns,
                'grouped-columns': this.component.originalGroupedColumnsArray
            }
        };
    };
    OTableComponentStateService.prototype.getSortState = function () {
        var sortColumns = [];
        this.component.sort.getSortColumns().forEach(function (sortData) {
            sortColumns.push(sortData.id + Codes.COLUMNS_ALIAS_SEPARATOR + sortData.direction);
        });
        return {
            'sort-columns': sortColumns.join(Codes.ARRAY_INPUT_SEPARATOR)
        };
    };
    OTableComponentStateService.decorators = [
        { type: Injectable }
    ];
    return OTableComponentStateService;
}(AbstractComponentStateService));
export { OTableComponentStateService };
//# sourceMappingURL=data:application/json;base64,