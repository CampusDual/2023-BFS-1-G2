import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Codes } from '../../util/codes';
import { Util } from '../../util/util';
import { AbstractComponentStateService } from './o-component-state.service';
import { OListComponentStateClass } from './o-list-component-state.class';
var OListComponentStateService = (function (_super) {
    tslib_1.__extends(OListComponentStateService, _super);
    function OListComponentStateService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    OListComponentStateService.prototype.initialize = function (component) {
        this.state = new OListComponentStateClass();
        _super.prototype.initialize.call(this, component);
    };
    OListComponentStateService.prototype.initializeState = function (state) {
        _super.prototype.initializeState.call(this, state);
    };
    OListComponentStateService.prototype.getDataToStore = function () {
        var dataToStore = Object.assign({}, this.state);
        dataToStore['query-rows'] = this.component.queryRows;
        if (!this.component.storePaginationState) {
            delete dataToStore['queryRecordOffset'];
        }
        if (this.component.quickFilter && Util.isDefined(this.component.quickFilterComponent)) {
            dataToStore['quickFilterActiveColumns'] = this.component.quickFilterComponent.getActiveColumns().join(Codes.ARRAY_INPUT_SEPARATOR);
        }
        dataToStore['filter-case-sensitive'] = this.component.isFilterCaseSensitive();
        dataToStore.selection = this.state.selection;
        return dataToStore;
    };
    OListComponentStateService.prototype.refreshSelection = function () {
        this.state.selection = this.getSelectionState();
    };
    OListComponentStateService.prototype.getSelectionState = function () {
        var selection = [];
        if (this.component) {
            var keys_1 = this.component.getKeys();
            this.component.getSelectedItems().forEach(function (item) {
                var data = {};
                keys_1.forEach(function (key) {
                    data[key] = item[key];
                });
                selection.push(data);
            });
        }
        return selection;
    };
    OListComponentStateService.decorators = [
        { type: Injectable }
    ];
    return OListComponentStateService;
}(AbstractComponentStateService));
export { OListComponentStateService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1saXN0LWNvbXBvbmVudC1zdGF0ZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vb250aW1pemUtd2ViLW5neC8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9zdGF0ZS9vLWxpc3QtY29tcG9uZW50LXN0YXRlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0MsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ3pDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN2QyxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUM1RSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUcxRTtJQUNnRCxzREFBdUU7SUFEdkg7O0lBNkNBLENBQUM7SUExQ0MsK0NBQVUsR0FBVixVQUFXLFNBQXlCO1FBQ2xDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSx3QkFBd0IsRUFBRSxDQUFDO1FBQzVDLGlCQUFNLFVBQVUsWUFBQyxTQUFTLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBRUQsb0RBQWUsR0FBZixVQUFnQixLQUErQjtRQUM3QyxpQkFBTSxlQUFlLFlBQUMsS0FBSyxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVELG1EQUFjLEdBQWQ7UUFDRSxJQUFJLFdBQVcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDaEQsV0FBVyxDQUFDLFlBQVksQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDO1FBQ3JELElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLG9CQUFvQixFQUFFO1lBQ3hDLE9BQU8sV0FBVyxDQUFDLG1CQUFtQixDQUFDLENBQUM7U0FDekM7UUFDRCxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFO1lBQ3JGLFdBQVcsQ0FBQywwQkFBMEIsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsb0JBQW9CLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLHFCQUFxQixDQUFDLENBQUM7U0FDcEk7UUFDRCxXQUFXLENBQUMsdUJBQXVCLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLHFCQUFxQixFQUFFLENBQUM7UUFDOUUsV0FBVyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQztRQUM3QyxPQUFPLFdBQVcsQ0FBQztJQUNyQixDQUFDO0lBRUQscURBQWdCLEdBQWhCO1FBQ0UsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7SUFDbEQsQ0FBQztJQUVTLHNEQUFpQixHQUEzQjtRQUNFLElBQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQztRQUNyQixJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFFbEIsSUFBTSxNQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUN0QyxJQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLENBQUMsT0FBTyxDQUFDLFVBQUEsSUFBSTtnQkFDNUMsSUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDO2dCQUNoQixNQUFJLENBQUMsT0FBTyxDQUFDLFVBQUEsR0FBRztvQkFDZCxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUN4QixDQUFDLENBQUMsQ0FBQztnQkFDSCxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3ZCLENBQUMsQ0FBQyxDQUFDO1NBQ0o7UUFDRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDOztnQkE1Q0YsVUFBVTs7SUE2Q1gsaUNBQUM7Q0FBQSxBQTdDRCxDQUNnRCw2QkFBNkIsR0E0QzVFO1NBNUNZLDBCQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgT0xpc3RDb21wb25lbnQgfSBmcm9tICcuLi8uLi9jb21wb25lbnRzL2xpc3Qvby1saXN0LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBDb2RlcyB9IGZyb20gJy4uLy4uL3V0aWwvY29kZXMnO1xuaW1wb3J0IHsgVXRpbCB9IGZyb20gJy4uLy4uL3V0aWwvdXRpbCc7XG5pbXBvcnQgeyBBYnN0cmFjdENvbXBvbmVudFN0YXRlU2VydmljZSB9IGZyb20gJy4vby1jb21wb25lbnQtc3RhdGUuc2VydmljZSc7XG5pbXBvcnQgeyBPTGlzdENvbXBvbmVudFN0YXRlQ2xhc3MgfSBmcm9tICcuL28tbGlzdC1jb21wb25lbnQtc3RhdGUuY2xhc3MnO1xuXG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBPTGlzdENvbXBvbmVudFN0YXRlU2VydmljZSBleHRlbmRzIEFic3RyYWN0Q29tcG9uZW50U3RhdGVTZXJ2aWNlPE9MaXN0Q29tcG9uZW50U3RhdGVDbGFzcywgT0xpc3RDb21wb25lbnQ+IHtcblxuICBpbml0aWFsaXplKGNvbXBvbmVudDogT0xpc3RDb21wb25lbnQpIHtcbiAgICB0aGlzLnN0YXRlID0gbmV3IE9MaXN0Q29tcG9uZW50U3RhdGVDbGFzcygpO1xuICAgIHN1cGVyLmluaXRpYWxpemUoY29tcG9uZW50KTtcbiAgfVxuXG4gIGluaXRpYWxpemVTdGF0ZShzdGF0ZTogT0xpc3RDb21wb25lbnRTdGF0ZUNsYXNzKSB7XG4gICAgc3VwZXIuaW5pdGlhbGl6ZVN0YXRlKHN0YXRlKTtcbiAgfVxuXG4gIGdldERhdGFUb1N0b3JlKCk6IGFueSB7XG4gICAgbGV0IGRhdGFUb1N0b3JlID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5zdGF0ZSk7XG4gICAgZGF0YVRvU3RvcmVbJ3F1ZXJ5LXJvd3MnXSA9IHRoaXMuY29tcG9uZW50LnF1ZXJ5Um93cztcbiAgICBpZiAoIXRoaXMuY29tcG9uZW50LnN0b3JlUGFnaW5hdGlvblN0YXRlKSB7XG4gICAgICBkZWxldGUgZGF0YVRvU3RvcmVbJ3F1ZXJ5UmVjb3JkT2Zmc2V0J107XG4gICAgfVxuICAgIGlmICh0aGlzLmNvbXBvbmVudC5xdWlja0ZpbHRlciAmJiBVdGlsLmlzRGVmaW5lZCh0aGlzLmNvbXBvbmVudC5xdWlja0ZpbHRlckNvbXBvbmVudCkpIHtcbiAgICAgIGRhdGFUb1N0b3JlWydxdWlja0ZpbHRlckFjdGl2ZUNvbHVtbnMnXSA9IHRoaXMuY29tcG9uZW50LnF1aWNrRmlsdGVyQ29tcG9uZW50LmdldEFjdGl2ZUNvbHVtbnMoKS5qb2luKENvZGVzLkFSUkFZX0lOUFVUX1NFUEFSQVRPUik7XG4gICAgfVxuICAgIGRhdGFUb1N0b3JlWydmaWx0ZXItY2FzZS1zZW5zaXRpdmUnXSA9IHRoaXMuY29tcG9uZW50LmlzRmlsdGVyQ2FzZVNlbnNpdGl2ZSgpO1xuICAgIGRhdGFUb1N0b3JlLnNlbGVjdGlvbiA9IHRoaXMuc3RhdGUuc2VsZWN0aW9uO1xuICAgIHJldHVybiBkYXRhVG9TdG9yZTtcbiAgfVxuXG4gIHJlZnJlc2hTZWxlY3Rpb24oKSB7XG4gICAgdGhpcy5zdGF0ZS5zZWxlY3Rpb24gPSB0aGlzLmdldFNlbGVjdGlvblN0YXRlKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0U2VsZWN0aW9uU3RhdGUoKTogYW55W10ge1xuICAgIGNvbnN0IHNlbGVjdGlvbiA9IFtdO1xuICAgIGlmICh0aGlzLmNvbXBvbmVudCkge1xuICAgICAgLy8gc3RvcmluZyBzZWxlY3RlZCBpdGVtcyBrZXlzIHZhbHVlc1xuICAgICAgY29uc3Qga2V5cyA9IHRoaXMuY29tcG9uZW50LmdldEtleXMoKTtcbiAgICAgIHRoaXMuY29tcG9uZW50LmdldFNlbGVjdGVkSXRlbXMoKS5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgICBjb25zdCBkYXRhID0ge307XG4gICAgICAgIGtleXMuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgIGRhdGFba2V5XSA9IGl0ZW1ba2V5XTtcbiAgICAgICAgfSk7XG4gICAgICAgIHNlbGVjdGlvbi5wdXNoKGRhdGEpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBzZWxlY3Rpb247XG4gIH1cbn1cblxuXG4iXX0=