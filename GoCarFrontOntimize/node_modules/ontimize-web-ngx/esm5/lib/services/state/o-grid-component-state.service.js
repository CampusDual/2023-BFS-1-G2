import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Codes } from '../../util/codes';
import { Util } from '../../util/util';
import { AbstractComponentStateService } from './o-component-state.service';
import { OGridComponentStateClass } from './o-grid-component-state.class';
var OGridComponentStateService = (function (_super) {
    tslib_1.__extends(OGridComponentStateService, _super);
    function OGridComponentStateService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    OGridComponentStateService.prototype.initialize = function (component) {
        this.state = new OGridComponentStateClass();
        _super.prototype.initialize.call(this, component);
    };
    OGridComponentStateService.prototype.initializeState = function (state) {
        _super.prototype.initializeState.call(this, state);
    };
    OGridComponentStateService.prototype.getDataToStore = function () {
        var dataToStore = Object.assign({}, this.state);
        dataToStore['query-rows'] = this.component.queryRows;
        dataToStore['currentPage'] = this.component.currentPage;
        if (this.component.storePaginationState) {
            dataToStore['queryRecordOffset'] = Math.max((this.state.queryRecordOffset - this.component.dataArray.length), (this.state.queryRecordOffset - this.component.queryRows));
        }
        else {
            delete dataToStore['queryRecordOffset'];
        }
        if (Util.isDefined(this.component.sortColumnOrder)) {
            dataToStore['sort-column'] = this.component.sortColumnOrder.columnName + Codes.COLUMNS_ALIAS_SEPARATOR +
                (this.component.sortColumnOrder.ascendent ? Codes.ASC_SORT : Codes.DESC_SORT);
        }
        dataToStore['filter-case-sensitive'] = this.component.isFilterCaseSensitive();
        if (this.component.quickFilter && Util.isDefined(this.component.quickFilterComponent)) {
            dataToStore['quickFilterActiveColumns'] = this.component.quickFilterComponent.getActiveColumns().join(Codes.ARRAY_INPUT_SEPARATOR);
        }
        return dataToStore;
    };
    OGridComponentStateService.decorators = [
        { type: Injectable }
    ];
    return OGridComponentStateService;
}(AbstractComponentStateService));
export { OGridComponentStateService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1ncmlkLWNvbXBvbmVudC1zdGF0ZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vb250aW1pemUtd2ViLW5neC8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9zdGF0ZS9vLWdyaWQtY29tcG9uZW50LXN0YXRlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0MsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ3pDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN2QyxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUM1RSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUUxRTtJQUNnRCxzREFBdUU7SUFEdkg7O0lBc0NBLENBQUM7SUFuQ0MsK0NBQVUsR0FBVixVQUFXLFNBQXlCO1FBQ2xDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSx3QkFBd0IsRUFBRSxDQUFDO1FBQzVDLGlCQUFNLFVBQVUsWUFBQyxTQUFTLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBRUQsb0RBQWUsR0FBZixVQUFnQixLQUErQjtRQUM3QyxpQkFBTSxlQUFlLFlBQUMsS0FBSyxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVELG1EQUFjLEdBQWQ7UUFDRSxJQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbEQsV0FBVyxDQUFDLFlBQVksQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDO1FBQ3JELFdBQVcsQ0FBQyxhQUFhLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQztRQUV4RCxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsb0JBQW9CLEVBQUU7WUFDdkMsV0FBVyxDQUFDLG1CQUFtQixDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FDekMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUNoRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FDMUQsQ0FBQztTQUNIO2FBQU07WUFDTCxPQUFPLFdBQVcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1NBQ3pDO1FBRUQsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLEVBQUU7WUFDbEQsV0FBVyxDQUFDLGFBQWEsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUMsdUJBQXVCO2dCQUNwRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQ2pGO1FBQ0QsV0FBVyxDQUFDLHVCQUF1QixDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO1FBRTlFLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLG9CQUFvQixDQUFDLEVBQUU7WUFDckYsV0FBVyxDQUFDLDBCQUEwQixDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMscUJBQXFCLENBQUMsQ0FBQztTQUNwSTtRQUNELE9BQU8sV0FBVyxDQUFDO0lBQ3JCLENBQUM7O2dCQXBDRixVQUFVOztJQXNDWCxpQ0FBQztDQUFBLEFBdENELENBQ2dELDZCQUE2QixHQXFDNUU7U0FyQ1ksMEJBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBPR3JpZENvbXBvbmVudCB9IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvZ3JpZC9vLWdyaWQuY29tcG9uZW50JztcbmltcG9ydCB7IENvZGVzIH0gZnJvbSAnLi4vLi4vdXRpbC9jb2Rlcyc7XG5pbXBvcnQgeyBVdGlsIH0gZnJvbSAnLi4vLi4vdXRpbC91dGlsJztcbmltcG9ydCB7IEFic3RyYWN0Q29tcG9uZW50U3RhdGVTZXJ2aWNlIH0gZnJvbSAnLi9vLWNvbXBvbmVudC1zdGF0ZS5zZXJ2aWNlJztcbmltcG9ydCB7IE9HcmlkQ29tcG9uZW50U3RhdGVDbGFzcyB9IGZyb20gJy4vby1ncmlkLWNvbXBvbmVudC1zdGF0ZS5jbGFzcyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBPR3JpZENvbXBvbmVudFN0YXRlU2VydmljZSBleHRlbmRzIEFic3RyYWN0Q29tcG9uZW50U3RhdGVTZXJ2aWNlPE9HcmlkQ29tcG9uZW50U3RhdGVDbGFzcywgT0dyaWRDb21wb25lbnQ+IHtcblxuICBpbml0aWFsaXplKGNvbXBvbmVudDogT0dyaWRDb21wb25lbnQpIHtcbiAgICB0aGlzLnN0YXRlID0gbmV3IE9HcmlkQ29tcG9uZW50U3RhdGVDbGFzcygpO1xuICAgIHN1cGVyLmluaXRpYWxpemUoY29tcG9uZW50KTtcbiAgfVxuXG4gIGluaXRpYWxpemVTdGF0ZShzdGF0ZTogT0dyaWRDb21wb25lbnRTdGF0ZUNsYXNzKSB7XG4gICAgc3VwZXIuaW5pdGlhbGl6ZVN0YXRlKHN0YXRlKTtcbiAgfVxuXG4gIGdldERhdGFUb1N0b3JlKCk6IGFueSB7XG4gICAgY29uc3QgZGF0YVRvU3RvcmUgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLnN0YXRlKTtcbiAgICBkYXRhVG9TdG9yZVsncXVlcnktcm93cyddID0gdGhpcy5jb21wb25lbnQucXVlcnlSb3dzO1xuICAgIGRhdGFUb1N0b3JlWydjdXJyZW50UGFnZSddID0gdGhpcy5jb21wb25lbnQuY3VycmVudFBhZ2U7XG5cbiAgICBpZiAodGhpcy5jb21wb25lbnQuc3RvcmVQYWdpbmF0aW9uU3RhdGUpIHtcbiAgICAgIGRhdGFUb1N0b3JlWydxdWVyeVJlY29yZE9mZnNldCddID0gTWF0aC5tYXgoXG4gICAgICAgICh0aGlzLnN0YXRlLnF1ZXJ5UmVjb3JkT2Zmc2V0IC0gdGhpcy5jb21wb25lbnQuZGF0YUFycmF5Lmxlbmd0aCksXG4gICAgICAgICh0aGlzLnN0YXRlLnF1ZXJ5UmVjb3JkT2Zmc2V0IC0gdGhpcy5jb21wb25lbnQucXVlcnlSb3dzKVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIGRhdGFUb1N0b3JlWydxdWVyeVJlY29yZE9mZnNldCddO1xuICAgIH1cblxuICAgIGlmIChVdGlsLmlzRGVmaW5lZCh0aGlzLmNvbXBvbmVudC5zb3J0Q29sdW1uT3JkZXIpKSB7XG4gICAgICBkYXRhVG9TdG9yZVsnc29ydC1jb2x1bW4nXSA9IHRoaXMuY29tcG9uZW50LnNvcnRDb2x1bW5PcmRlci5jb2x1bW5OYW1lICsgQ29kZXMuQ09MVU1OU19BTElBU19TRVBBUkFUT1IgK1xuICAgICAgICAodGhpcy5jb21wb25lbnQuc29ydENvbHVtbk9yZGVyLmFzY2VuZGVudCA/IENvZGVzLkFTQ19TT1JUIDogQ29kZXMuREVTQ19TT1JUKTtcbiAgICB9XG4gICAgZGF0YVRvU3RvcmVbJ2ZpbHRlci1jYXNlLXNlbnNpdGl2ZSddID0gdGhpcy5jb21wb25lbnQuaXNGaWx0ZXJDYXNlU2Vuc2l0aXZlKCk7XG5cbiAgICBpZiAodGhpcy5jb21wb25lbnQucXVpY2tGaWx0ZXIgJiYgVXRpbC5pc0RlZmluZWQodGhpcy5jb21wb25lbnQucXVpY2tGaWx0ZXJDb21wb25lbnQpKSB7XG4gICAgICBkYXRhVG9TdG9yZVsncXVpY2tGaWx0ZXJBY3RpdmVDb2x1bW5zJ10gPSB0aGlzLmNvbXBvbmVudC5xdWlja0ZpbHRlckNvbXBvbmVudC5nZXRBY3RpdmVDb2x1bW5zKCkuam9pbihDb2Rlcy5BUlJBWV9JTlBVVF9TRVBBUkFUT1IpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YVRvU3RvcmU7XG4gIH1cblxufVxuXG5cbiJdfQ==