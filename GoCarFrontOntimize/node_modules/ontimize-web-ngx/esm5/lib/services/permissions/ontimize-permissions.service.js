import * as tslib_1 from "tslib";
import { Injectable, Injector } from '@angular/core';
import { Observable } from 'rxjs';
import { share } from 'rxjs/operators';
import { Codes } from '../../util/codes';
import { Util } from '../../util/util';
import { OntimizeBasePermissionsService } from './ontimize-base-permissions-service.class';
var OntimizePermissionsService = (function (_super) {
    tslib_1.__extends(OntimizePermissionsService, _super);
    function OntimizePermissionsService(injector) {
        var _this = _super.call(this, injector) || this;
        _this.injector = injector;
        _this.entity = '';
        return _this;
    }
    OntimizePermissionsService.prototype.getDefaultServiceConfiguration = function () {
        var servConfig = {};
        servConfig[Codes.SESSION_KEY] = this.authService.getSessionInfo();
        return servConfig;
    };
    OntimizePermissionsService.prototype.configureService = function (permissionsConfig) {
        var config = this.getDefaultServiceConfiguration();
        this._urlBase = config.urlBase ? config.urlBase : this._appConfig.apiEndpoint;
        this._user = config.session ? config.session.user : '';
        if (Util.isDefined(permissionsConfig)) {
            if (permissionsConfig.entity !== undefined) {
                this.entity = permissionsConfig.entity;
            }
            if (permissionsConfig.keyColumn !== undefined) {
                this.keyColumn = permissionsConfig.keyColumn;
            }
            if (permissionsConfig.valueColumn !== undefined) {
                this.valueColumn = permissionsConfig.valueColumn;
            }
        }
    };
    OntimizePermissionsService.prototype.loadPermissions = function () {
        var kv = {};
        kv[this.keyColumn] = this._user;
        var av = [this.valueColumn];
        var url = this._urlBase + '/query';
        var options = {
            headers: this.buildHeaders()
        };
        var body = JSON.stringify({
            user: this._user,
            sessionid: this.authService.getSessionInfo().id,
            type: 1,
            entity: this.entity,
            kv: kv,
            av: av
        });
        var self = this;
        var dataObservable = new Observable(function (_innerObserver) {
            self.httpClient.post(url, body, options).subscribe(function (res) {
                var permissions = {};
                if ((res.code === Codes.ONTIMIZE_SUCCESSFUL_CODE) && Util.isDefined(res.data)) {
                    var response = res.data;
                    if ((response.length === 1) && Util.isObject(response[0])) {
                        var permissionsResp = response[0];
                        try {
                            permissions = permissionsResp.hasOwnProperty(self.valueColumn) ? JSON.parse(permissionsResp[self.valueColumn]) : {};
                        }
                        catch (e) {
                            console.warn('[OntimizePermissionsService: permissions parsing failed]');
                        }
                    }
                }
                _innerObserver.next(permissions);
            }, function (error) {
                _innerObserver.error(error);
            }, function () { return _innerObserver.complete(); });
        });
        return dataObservable.pipe(share());
    };
    OntimizePermissionsService.decorators = [
        { type: Injectable }
    ];
    OntimizePermissionsService.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    return OntimizePermissionsService;
}(OntimizeBasePermissionsService));
export { OntimizePermissionsService };
//# sourceMappingURL=data:application/json;base64,