import * as tslib_1 from "tslib";
import { TranslateHttpLoader } from '@ngx-translate/http-loader';
import { combineLatest, Observable, of } from 'rxjs';
import { catchError, map, share } from 'rxjs/operators';
import { AppConfig } from '../../config/app-config';
import { Codes } from '../../util/codes';
import { OTranslateService } from './o-translate.service';
var OTranslateHttpLoader = (function (_super) {
    tslib_1.__extends(OTranslateHttpLoader, _super);
    function OTranslateHttpLoader(httpClient, prefix, suffix, injector) {
        if (prefix === void 0) { prefix = OTranslateService.ASSETS_PATH; }
        if (suffix === void 0) { suffix = OTranslateService.ASSETS_EXTENSION; }
        var _this = _super.call(this, httpClient, prefix, suffix) || this;
        _this.injector = injector;
        _this.appConfig = _this.injector.get(AppConfig);
        _this.httpClient = httpClient;
        return _this;
    }
    OTranslateHttpLoader.prototype.getAssetsPath = function () {
        return this.prefix;
    };
    OTranslateHttpLoader.prototype.getAssetsExtension = function () {
        return this.suffix;
    };
    OTranslateHttpLoader.prototype.getLocalTranslation = function (lang) {
        var innerObserver;
        var dataObservable = new Observable(function (observer) { return innerObserver = observer; }).pipe(share());
        _super.prototype.getTranslation.call(this, lang)
            .subscribe(function (res) {
            innerObserver.next(res);
            innerObserver.complete();
        }, function (error) {
            innerObserver.next(undefined);
        }, function () { return innerObserver.complete(); });
        return dataObservable;
    };
    OTranslateHttpLoader.prototype.getTranslation = function (lang) {
        var translationOrigins = [];
        translationOrigins.push(this.getLocalTranslation(lang));
        if (this.appConfig.useRemoteBundle()) {
            translationOrigins.push(this.getRemoteBundle(lang));
        }
        var innerObserver;
        var dataObservable = new Observable(function (observer) { return innerObserver = observer; }).pipe(share());
        combineLatest(translationOrigins).subscribe(function (res) {
            var staticBundle = res[0] || {};
            var remoteBundle = res[1] || {};
            var allBundles = Object.assign(staticBundle, remoteBundle);
            innerObserver.next(allBundles);
        });
        return dataObservable;
    };
    OTranslateHttpLoader.prototype.getRemoteBundle = function (lang) {
        var _this = this;
        var bundleEndpoint = this.appConfig.getBundleEndpoint();
        if (!bundleEndpoint) {
            return of([]);
        }
        var url = bundleEndpoint + '?lang=' + lang;
        return this.httpClient.get(url).pipe(map(function (resp) {
            if (resp.code === Codes.ONTIMIZE_SUCCESSFUL_CODE) {
                return _this.parseBundleResponse(resp.data);
            }
            return resp;
        }), catchError(function (err) {
            console.log('Remote Bundle service is not available', err);
            return of([]);
        }));
    };
    OTranslateHttpLoader.prototype.parseBundleResponse = function (data) {
        var result = {};
        if (data) {
            data.forEach(function (item) {
                result[item[OTranslateHttpLoader.BUNDLE_KEY]] = item[OTranslateHttpLoader.BUNDLE_VALUE];
            });
        }
        return result;
    };
    OTranslateHttpLoader.BUNDLE_KEY = 'key';
    OTranslateHttpLoader.BUNDLE_VALUE = 'value';
    return OTranslateHttpLoader;
}(TranslateHttpLoader));
export { OTranslateHttpLoader };
//# sourceMappingURL=data:application/json;base64,