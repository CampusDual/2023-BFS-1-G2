import { Directive, ElementRef, Injector, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import { O_MAT_ERROR_OPTIONS } from '../services/factories';
import { Codes } from '../util/codes';
import { Util } from '../util/util';
var OMatErrorDirective = (function () {
    function OMatErrorDirective(element, templateRef, viewContainer, injector) {
        this.element = element;
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.injector = injector;
        try {
            this.errorOptions = this.injector.get(O_MAT_ERROR_OPTIONS) || {};
        }
        catch (e) {
            this.errorOptions = {};
        }
        if (!Util.isDefined(this.errorOptions.type)) {
            this.errorOptions.type = Codes.O_MAT_ERROR_STANDARD;
        }
    }
    Object.defineProperty(OMatErrorDirective.prototype, "oMatError", {
        set: function (val) {
            var _this = this;
            if (val) {
                this.viewContainer.createEmbeddedView(this.templateRef);
                if (this.errorOptions.type === Codes.O_MAT_ERROR_LITE) {
                    setTimeout(function () {
                        try {
                            _this.text = _this.element.nativeElement.parentElement.getElementsByTagName('mat-error')[0].textContent;
                        }
                        catch (e) {
                            _this.text = undefined;
                        }
                        _this.viewContainer.clear();
                    }, 0);
                }
            }
            else {
                this.text = undefined;
                this.viewContainer.clear();
            }
        },
        enumerable: true,
        configurable: true
    });
    OMatErrorDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[oMatError]'
                },] }
    ];
    OMatErrorDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: Injector }
    ]; };
    OMatErrorDirective.propDecorators = {
        oMatError: [{ type: Input }]
    };
    return OMatErrorDirective;
}());
export { OMatErrorDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1tYXQtZXJyb3IuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vb250aW1pemUtd2ViLW5neC8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL28tbWF0LWVycm9yLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV0RyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUU1RCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFcEM7SUFPRSw0QkFDVSxPQUFtQixFQUNuQixXQUE2QixFQUM3QixhQUErQixFQUMvQixRQUFrQjtRQUhsQixZQUFPLEdBQVAsT0FBTyxDQUFZO1FBQ25CLGdCQUFXLEdBQVgsV0FBVyxDQUFrQjtRQUM3QixrQkFBYSxHQUFiLGFBQWEsQ0FBa0I7UUFDL0IsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUUxQixJQUFJO1lBQ0YsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUNsRTtRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1YsSUFBSSxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUM7U0FDeEI7UUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQzNDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxvQkFBcUMsQ0FBQztTQUN0RTtJQUNILENBQUM7SUFFRCxzQkFDSSx5Q0FBUzthQURiLFVBQ2MsR0FBRztZQURqQixpQkFrQkM7WUFoQkMsSUFBSSxHQUFHLEVBQUU7Z0JBQ1AsSUFBSSxDQUFDLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7Z0JBQ3hELElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEtBQUssS0FBSyxDQUFDLGdCQUFnQixFQUFFO29CQUNyRCxVQUFVLENBQUM7d0JBQ1QsSUFBSTs0QkFDRixLQUFJLENBQUMsSUFBSSxHQUFHLEtBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxvQkFBb0IsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUM7eUJBQ3ZHO3dCQUFDLE9BQU8sQ0FBQyxFQUFFOzRCQUNWLEtBQUksQ0FBQyxJQUFJLEdBQUcsU0FBUyxDQUFBO3lCQUN0Qjt3QkFDRCxLQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO29CQUM3QixDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7aUJBQ047YUFDRjtpQkFBTTtnQkFDTCxJQUFJLENBQUMsSUFBSSxHQUFHLFNBQVMsQ0FBQztnQkFDdEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQzthQUM1QjtRQUNILENBQUM7OztPQUFBOztnQkF6Q0YsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxhQUFhO2lCQUN4Qjs7O2dCQVRtQixVQUFVO2dCQUFtQixXQUFXO2dCQUFFLGdCQUFnQjtnQkFBOUMsUUFBUTs7OzRCQThCckMsS0FBSzs7SUFtQlIseUJBQUM7Q0FBQSxBQTFDRCxJQTBDQztTQXZDWSxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEluamVjdG9yLCBJbnB1dCwgVGVtcGxhdGVSZWYsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgT19NQVRfRVJST1JfT1BUSU9OUyB9IGZyb20gJy4uL3NlcnZpY2VzL2ZhY3Rvcmllcyc7XG5pbXBvcnQgeyBPTWF0RXJyb3JPcHRpb25zLCBPTWF0RXJyb3JUeXBlIH0gZnJvbSAnLi4vdHlwZXMvby1tYXQtZXJyb3IudHlwZSc7XG5pbXBvcnQgeyBDb2RlcyB9IGZyb20gJy4uL3V0aWwvY29kZXMnO1xuaW1wb3J0IHsgVXRpbCB9IGZyb20gJy4uL3V0aWwvdXRpbCc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tvTWF0RXJyb3JdJ1xufSlcbmV4cG9ydCBjbGFzcyBPTWF0RXJyb3JEaXJlY3RpdmUge1xuICBwdWJsaWMgdGV4dDogc3RyaW5nO1xuICBwcml2YXRlIGVycm9yT3B0aW9uczogT01hdEVycm9yT3B0aW9ucztcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGVsZW1lbnQ6IEVsZW1lbnRSZWYsXG4gICAgcHJpdmF0ZSB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55PixcbiAgICBwcml2YXRlIHZpZXdDb250YWluZXI6IFZpZXdDb250YWluZXJSZWYsXG4gICAgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3JcbiAgKSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuZXJyb3JPcHRpb25zID0gdGhpcy5pbmplY3Rvci5nZXQoT19NQVRfRVJST1JfT1BUSU9OUykgfHwge307XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhpcy5lcnJvck9wdGlvbnMgPSB7fTtcbiAgICB9XG4gICAgaWYgKCFVdGlsLmlzRGVmaW5lZCh0aGlzLmVycm9yT3B0aW9ucy50eXBlKSkge1xuICAgICAgdGhpcy5lcnJvck9wdGlvbnMudHlwZSA9IENvZGVzLk9fTUFUX0VSUk9SX1NUQU5EQVJEIGFzIE9NYXRFcnJvclR5cGU7XG4gICAgfVxuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IG9NYXRFcnJvcih2YWwpIHtcbiAgICBpZiAodmFsKSB7XG4gICAgICB0aGlzLnZpZXdDb250YWluZXIuY3JlYXRlRW1iZWRkZWRWaWV3KHRoaXMudGVtcGxhdGVSZWYpO1xuICAgICAgaWYgKHRoaXMuZXJyb3JPcHRpb25zLnR5cGUgPT09IENvZGVzLk9fTUFUX0VSUk9SX0xJVEUpIHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMudGV4dCA9IHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LnBhcmVudEVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ21hdC1lcnJvcicpWzBdLnRleHRDb250ZW50O1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRoaXMudGV4dCA9IHVuZGVmaW5lZFxuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLnZpZXdDb250YWluZXIuY2xlYXIoKTtcbiAgICAgICAgfSwgMClcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy50ZXh0ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy52aWV3Q29udGFpbmVyLmNsZWFyKCk7XG4gICAgfVxuICB9XG59XG4iXX0=