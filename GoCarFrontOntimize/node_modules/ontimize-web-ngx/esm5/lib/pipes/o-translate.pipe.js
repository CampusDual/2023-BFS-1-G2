import { ChangeDetectorRef, Injector, NgModule, Pipe } from '@angular/core';
import { OTranslateService } from '../services/translate/o-translate.service';
import { Util } from '../util/util';
var OTranslatePipe = (function () {
    function OTranslatePipe(injector) {
        this.injector = injector;
        this.value = '';
        this._ref = this.injector.get(ChangeDetectorRef);
        this.oTranslateService = this.injector.get(OTranslateService);
    }
    OTranslatePipe.prototype.ngOnDestroy = function () {
        this._dispose();
    };
    OTranslatePipe.prototype.transform = function (text, args) {
        var _this = this;
        if (!text || text.length === 0) {
            return text;
        }
        if (Util.equals(text, this.lastKey) && Util.equals(args, this.lastParams)) {
            return this.value;
        }
        this.lastKey = text;
        this.lastParams = args;
        this.updateValue(text);
        this._dispose();
        if (!this.onLanguageChanged) {
            this.onLanguageChanged = this.oTranslateService.onLanguageChanged.subscribe(function (lang) {
                if (_this.lastKey) {
                    _this.lastKey = null;
                    _this.updateValue(text);
                }
            });
        }
        return this.value;
    };
    OTranslatePipe.prototype.updateValue = function (key) {
        var args = Util.isDefined(this.lastParams) ? this.lastParams.values || [] : [];
        var res = this.oTranslateService.get(key, args);
        this.value = res !== undefined ? res : key;
        this.lastKey = key;
        this._ref.markForCheck();
    };
    OTranslatePipe.prototype._dispose = function () {
        if (typeof this.onLanguageChanged !== 'undefined') {
            this.onLanguageChanged.unsubscribe();
            this.onLanguageChanged = undefined;
        }
    };
    OTranslatePipe.decorators = [
        { type: Pipe, args: [{
                    name: 'oTranslate',
                    pure: false
                },] }
    ];
    OTranslatePipe.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    return OTranslatePipe;
}());
export { OTranslatePipe };
var OTranslateModule = (function () {
    function OTranslateModule() {
    }
    OTranslateModule.forRoot = function () {
        return {
            ngModule: OTranslateModule,
            providers: []
        };
    };
    OTranslateModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [OTranslatePipe],
                    imports: [],
                    exports: [OTranslatePipe]
                },] }
    ];
    return OTranslateModule;
}());
export { OTranslateModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby10cmFuc2xhdGUucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL29udGltaXplLXdlYi1uZ3gvIiwic291cmNlcyI6WyJsaWIvcGlwZXMvby10cmFuc2xhdGUucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsaUJBQWlCLEVBQ2pCLFFBQVEsRUFFUixRQUFRLEVBRVIsSUFBSSxFQUdMLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBQzlFLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFNcEM7SUFlRSx3QkFBc0IsUUFBa0I7UUFBbEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQVRqQyxVQUFLLEdBQVcsRUFBRSxDQUFDO1FBVXhCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQW9CLGlCQUE0QyxDQUFDLENBQUM7UUFDL0YsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFvQixpQkFBNEMsQ0FBQyxDQUFDO0lBQzlHLENBQUM7SUFFTSxvQ0FBVyxHQUFsQjtRQUNFLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNsQixDQUFDO0lBRU0sa0NBQVMsR0FBaEIsVUFBaUIsSUFBWSxFQUFFLElBQTZCO1FBQTVELGlCQWdDQztRQS9CQyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQzlCLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFHRCxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDekUsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO1NBQ25CO1FBR0QsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7UUFHcEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7UUFHdkIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUd2QixJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFHaEIsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtZQUMzQixJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxVQUFBLElBQUk7Z0JBQzlFLElBQUksS0FBSSxDQUFDLE9BQU8sRUFBRTtvQkFDaEIsS0FBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7b0JBQ3BCLEtBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7aUJBQ3hCO1lBQ0gsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUNELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDO0lBRU0sb0NBQVcsR0FBbEIsVUFBbUIsR0FBVztRQUM1QixJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFFakYsSUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDbEQsSUFBSSxDQUFDLEtBQUssR0FBRyxHQUFHLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztRQUMzQyxJQUFJLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQztRQUNuQixJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFFUyxpQ0FBUSxHQUFsQjtRQUNFLElBQUksT0FBTyxJQUFJLENBQUMsaUJBQWlCLEtBQUssV0FBVyxFQUFFO1lBQ2pELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNyQyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsU0FBUyxDQUFDO1NBQ3BDO0lBQ0gsQ0FBQzs7Z0JBeEVGLElBQUksU0FBQztvQkFDSixJQUFJLEVBQUUsWUFBWTtvQkFDbEIsSUFBSSxFQUFFLEtBQUs7aUJBQ1o7OztnQkFuQkMsUUFBUTs7SUEwRlYscUJBQUM7Q0FBQSxBQTFFRCxJQTBFQztTQXRFWSxjQUFjO0FBd0UzQjtJQUFBO0lBWUEsQ0FBQztJQU5lLHdCQUFPLEdBQXJCO1FBQ0UsT0FBTztZQUNMLFFBQVEsRUFBRSxnQkFBZ0I7WUFDMUIsU0FBUyxFQUFFLEVBQUU7U0FDZCxDQUFDO0lBQ0osQ0FBQzs7Z0JBWEYsUUFBUSxTQUFDO29CQUNSLFlBQVksRUFBRSxDQUFDLGNBQWMsQ0FBQztvQkFDOUIsT0FBTyxFQUFFLEVBQUU7b0JBQ1gsT0FBTyxFQUFFLENBQUMsY0FBYyxDQUFDO2lCQUMxQjs7SUFRRCx1QkFBQztDQUFBLEFBWkQsSUFZQztTQVBZLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBJbmplY3RvcixcbiAgTW9kdWxlV2l0aFByb3ZpZGVycyxcbiAgTmdNb2R1bGUsXG4gIE9uRGVzdHJveSxcbiAgUGlwZSxcbiAgUGlwZVRyYW5zZm9ybSxcbiAgVHlwZVxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgT1RyYW5zbGF0ZVNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy90cmFuc2xhdGUvby10cmFuc2xhdGUuc2VydmljZSc7XG5pbXBvcnQgeyBVdGlsIH0gZnJvbSAnLi4vdXRpbC91dGlsJztcblxuZXhwb3J0IGludGVyZmFjZSBJVHJhbnNsYXRlUGlwZUFyZ3VtZW50IHtcbiAgdmFsdWVzPzogYW55W107XG59XG5cbkBQaXBlKHtcbiAgbmFtZTogJ29UcmFuc2xhdGUnLFxuICBwdXJlOiBmYWxzZSAvLyByZXF1aXJlZCB0byB1cGRhdGUgdGhlIHZhbHVlIHdoZW4gdGhlIHByb21pc2UgaXMgcmVzb2x2ZWRcbn0pXG5leHBvcnQgY2xhc3MgT1RyYW5zbGF0ZVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtLCBPbkRlc3Ryb3kge1xuXG4gIHB1YmxpYyB2YWx1ZTogc3RyaW5nID0gJyc7XG4gIHB1YmxpYyBsYXN0S2V5OiBzdHJpbmc7XG4gIHB1YmxpYyBsYXN0UGFyYW1zOiBhbnk7XG5cbiAgcHVibGljIG9uTGFuZ3VhZ2VDaGFuZ2VkOiBhbnk7IC8vIENoYW5nZSB0aGlzIGZyb20gRXZlbnRFbWl0dGVyPGFueT4gdG8gYW55IGJlY2F1c2UgRXJyb3I6IFR5cGUgJ1N1YnNjcmlwdGlvbicgaXMgbWlzc2luZyB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXMgZnJvbSB0eXBlICdFdmVudEVtaXR0ZXI8YW55Pic6IGVtaXQsIHN1YnNjcmliZSwgb2JzZXJ2ZXJzLCBpc1N0b3BwZWQsIGFuZCAxNSBtb3JlLlxuXG4gIHByb3RlY3RlZCBvVHJhbnNsYXRlU2VydmljZTogT1RyYW5zbGF0ZVNlcnZpY2U7XG4gIHByb3RlY3RlZCBfcmVmOiBDaGFuZ2VEZXRlY3RvclJlZjtcblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgaW5qZWN0b3I6IEluamVjdG9yKSB7XG4gICAgdGhpcy5fcmVmID0gdGhpcy5pbmplY3Rvci5nZXQ8Q2hhbmdlRGV0ZWN0b3JSZWY+KENoYW5nZURldGVjdG9yUmVmIGFzIFR5cGU8Q2hhbmdlRGV0ZWN0b3JSZWY+KTtcbiAgICB0aGlzLm9UcmFuc2xhdGVTZXJ2aWNlID0gdGhpcy5pbmplY3Rvci5nZXQ8T1RyYW5zbGF0ZVNlcnZpY2U+KE9UcmFuc2xhdGVTZXJ2aWNlIGFzIFR5cGU8T1RyYW5zbGF0ZVNlcnZpY2U+KTtcbiAgfVxuXG4gIHB1YmxpYyBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLl9kaXNwb3NlKCk7XG4gIH1cblxuICBwdWJsaWMgdHJhbnNmb3JtKHRleHQ6IHN0cmluZywgYXJncz86IElUcmFuc2xhdGVQaXBlQXJndW1lbnQpOiBzdHJpbmcge1xuICAgIGlmICghdGV4dCB8fCB0ZXh0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRleHQ7XG4gICAgfVxuXG4gICAgLy8gaWYgd2UgYXNrIGFub3RoZXIgdGltZSBmb3IgdGhlIHNhbWUga2V5LCByZXR1cm4gdGhlIGxhc3QgdmFsdWVcbiAgICBpZiAoVXRpbC5lcXVhbHModGV4dCwgdGhpcy5sYXN0S2V5KSAmJiBVdGlsLmVxdWFscyhhcmdzLCB0aGlzLmxhc3RQYXJhbXMpKSB7XG4gICAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgICB9XG5cbiAgICAvLyBzdG9yZSB0aGUgcXVlcnksIGluIGNhc2UgaXQgY2hhbmdlc1xuICAgIHRoaXMubGFzdEtleSA9IHRleHQ7XG5cbiAgICAvLyBzdG9yZSB0aGUgcGFyYW1zLCBpbiBjYXNlIHRoZXkgY2hhbmdlXG4gICAgdGhpcy5sYXN0UGFyYW1zID0gYXJncztcblxuICAgIC8vIHNldCB0aGUgdmFsdWVcbiAgICB0aGlzLnVwZGF0ZVZhbHVlKHRleHQpO1xuXG4gICAgLy8gaWYgdGhlcmUgaXMgYSBzdWJzY3JpcHRpb24gdG8gb25MYW5ndWFnZUNoYW5nZWQsIGNsZWFuIGl0XG4gICAgdGhpcy5fZGlzcG9zZSgpO1xuXG4gICAgLy8gc3Vic2NyaWJlIHRvIG9uTGFuZ3VhZ2VDaGFuZ2VkIGV2ZW50LCBpbiBjYXNlIHRoZSBsYW5ndWFnZSBjaGFuZ2VzXG4gICAgaWYgKCF0aGlzLm9uTGFuZ3VhZ2VDaGFuZ2VkKSB7XG4gICAgICB0aGlzLm9uTGFuZ3VhZ2VDaGFuZ2VkID0gdGhpcy5vVHJhbnNsYXRlU2VydmljZS5vbkxhbmd1YWdlQ2hhbmdlZC5zdWJzY3JpYmUobGFuZyA9PiB7XG4gICAgICAgIGlmICh0aGlzLmxhc3RLZXkpIHtcbiAgICAgICAgICB0aGlzLmxhc3RLZXkgPSBudWxsOyAvLyB3ZSB3YW50IHRvIG1ha2Ugc3VyZSBpdCBkb2Vzbid0IHJldHVybiB0aGUgc2FtZSB2YWx1ZSB1bnRpbCBpdCdzIGJlZW4gdXBkYXRlZFxuICAgICAgICAgIHRoaXMudXBkYXRlVmFsdWUodGV4dCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgfVxuXG4gIHB1YmxpYyB1cGRhdGVWYWx1ZShrZXk6IHN0cmluZyk6IHZvaWQge1xuICAgIGNvbnN0IGFyZ3MgPSBVdGlsLmlzRGVmaW5lZCh0aGlzLmxhc3RQYXJhbXMpID8gdGhpcy5sYXN0UGFyYW1zLnZhbHVlcyB8fCBbXSA6IFtdO1xuXG4gICAgY29uc3QgcmVzID0gdGhpcy5vVHJhbnNsYXRlU2VydmljZS5nZXQoa2V5LCBhcmdzKTtcbiAgICB0aGlzLnZhbHVlID0gcmVzICE9PSB1bmRlZmluZWQgPyByZXMgOiBrZXk7XG4gICAgdGhpcy5sYXN0S2V5ID0ga2V5O1xuICAgIHRoaXMuX3JlZi5tYXJrRm9yQ2hlY2soKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBfZGlzcG9zZSgpOiB2b2lkIHtcbiAgICBpZiAodHlwZW9mIHRoaXMub25MYW5ndWFnZUNoYW5nZWQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzLm9uTGFuZ3VhZ2VDaGFuZ2VkLnVuc3Vic2NyaWJlKCk7XG4gICAgICB0aGlzLm9uTGFuZ3VhZ2VDaGFuZ2VkID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuXG59XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW09UcmFuc2xhdGVQaXBlXSxcbiAgaW1wb3J0czogW10sXG4gIGV4cG9ydHM6IFtPVHJhbnNsYXRlUGlwZV1cbn0pXG5leHBvcnQgY2xhc3MgT1RyYW5zbGF0ZU1vZHVsZSB7XG4gIHB1YmxpYyBzdGF0aWMgZm9yUm9vdCgpOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IE9UcmFuc2xhdGVNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtdXG4gICAgfTtcbiAgfVxufVxuIl19