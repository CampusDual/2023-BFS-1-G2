import { Component, ComponentFactoryResolver, ElementRef, forwardRef, Inject, Injector, Renderer2, ViewChild, ViewEncapsulation } from '@angular/core';
import { Router } from '@angular/router';
import { BehaviorSubject, Observable } from 'rxjs';
import { OFormLayoutManagerComponent } from '../../../layouts/form-layout/o-form-layout-manager.component';
import { DialogService } from '../../../services/dialog.service';
import { Codes } from '../../../util/codes';
import { Util } from '../../../util/util';
import { OFormLayoutManagerContentDirective } from '../directives/o-form-layout-manager-content.directive';
export var DEFAULT_INPUTS_O_FORM_LAYOUT_SPLIT_PANE = [
    'options'
];
export var DEFAULT_OUTPUTS_O_FORM_LAYOUT_SPLIT_PANE = [];
var OFormLayoutSplitPaneComponent = (function () {
    function OFormLayoutSplitPaneComponent(injector, elementRef, componentFactoryResolver, renderer, formLayoutManager) {
        this.injector = injector;
        this.elementRef = elementRef;
        this.componentFactoryResolver = componentFactoryResolver;
        this.renderer = renderer;
        this.formLayoutManager = formLayoutManager;
        this.showLoading = new BehaviorSubject(false);
        this.router = this.injector.get(Router);
        this.dialogService = injector.get(DialogService);
    }
    Object.defineProperty(OFormLayoutSplitPaneComponent.prototype, "options", {
        set: function (value) {
            if (Util.isDefined(value) && Object.keys(value).length === 0) {
                this._options = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OFormLayoutSplitPaneComponent.prototype, "state", {
        get: function () {
            return this.formLayoutManager.state;
        },
        enumerable: true,
        configurable: true
    });
    OFormLayoutSplitPaneComponent.prototype.ngOnInit = function () {
        if (this.mainWrapper && this.mainWrapper.nativeElement) {
            this.setOption(this.mainWrapper.nativeElement, 'mainWidth', 'width');
            this.setOption(this.mainWrapper.nativeElement, 'mainMaxWidth', 'max-width');
            this.setOption(this.mainWrapper.nativeElement, 'mainMinWidth', 'min-width');
        }
        if (this.detailWrapper && this.detailWrapper.nativeElement) {
            this.setOption(this.detailWrapper.nativeElement, 'detailWidth', 'width');
            this.setOption(this.detailWrapper.nativeElement, 'detailMaxWidth', 'max-width');
            this.setOption(this.detailWrapper.nativeElement, 'detailMinWidth', 'min-width');
        }
    };
    OFormLayoutSplitPaneComponent.prototype.ngAfterViewInit = function () {
        this.initializeComponentState();
    };
    OFormLayoutSplitPaneComponent.prototype.setOption = function (el, optionName, propertyName) {
        if (Util.isDefined(this._options[optionName])) {
            this.renderer.setStyle(el, propertyName, this._options[optionName]);
        }
    };
    OFormLayoutSplitPaneComponent.prototype.getFormCacheData = function () {
        return this.data;
    };
    OFormLayoutSplitPaneComponent.prototype.setModifiedState = function (formAttr, modified, confirmExit) {
        this.data.innerFormsInfo[formAttr] = {
            modified: modified,
            confirmOnExit: confirmExit
        };
    };
    OFormLayoutSplitPaneComponent.prototype.setDetailComponent = function (compData) {
        this.data = compData;
        this.createComponent();
    };
    OFormLayoutSplitPaneComponent.prototype.onResizeEnd = function (property, event, el) {
        this.renderer.addClass(el, 'resized');
        this.renderer.setStyle(el, property, event.rectangle[property] + "px");
    };
    OFormLayoutSplitPaneComponent.prototype.createComponent = function () {
        if (!this.data) {
            this.contentDirective.viewContainerRef.clear();
            return;
        }
        var componentFactory = this.componentFactoryResolver.resolveComponentFactory(this.data.component);
        if (this.contentDirective && componentFactory) {
            var viewContainerRef = this.contentDirective.viewContainerRef;
            viewContainerRef.clear();
            viewContainerRef.createComponent(componentFactory);
        }
    };
    OFormLayoutSplitPaneComponent.prototype.getDataToStore = function () {
        return this.data;
    };
    OFormLayoutSplitPaneComponent.prototype.getParams = function () {
        return Util.isDefined(this.data) ? this.data.params : undefined;
    };
    OFormLayoutSplitPaneComponent.prototype.initializeComponentState = function () {
        var _this = this;
        if (this.formLayoutManager) {
            this.formLayoutManager.setAsActiveFormLayoutManager();
        }
        if (Util.isDefined(this.state.url)) {
            this.showLoading.next(true);
            var extras = {};
            extras[Codes.QUERY_PARAMS] = this.state.queryParams;
            this.router.navigate([this.state.url], extras).then(function () {
                _this.showLoading.next(false);
            });
        }
    };
    OFormLayoutSplitPaneComponent.prototype.updateActiveData = function (data) {
        if (Util.isDefined(this.data)) {
            this.data = Object.assign(this.data, data);
        }
    };
    OFormLayoutSplitPaneComponent.prototype.getRouteOfActiveItem = function () {
        var route = [];
        if (Util.isDefined(this.data)) {
            var urlSegments = this.data.urlSegments || [];
            urlSegments.forEach(function (segment) {
                route.push(segment.path);
            });
            return route;
        }
        return route;
    };
    OFormLayoutSplitPaneComponent.prototype.isMainComponent = function (comp) {
        return this.mainWrapper && this.mainWrapper.nativeElement
            && comp.elementRef && this.mainWrapper.nativeElement.contains(comp.elementRef.nativeElement);
    };
    OFormLayoutSplitPaneComponent.prototype.openDetail = function (detail) {
        this.setDetailComponent(detail);
    };
    OFormLayoutSplitPaneComponent.prototype.closeDetail = function () {
        this.setDetailComponent(null);
    };
    OFormLayoutSplitPaneComponent.prototype.updateNavigation = function (data, keysValues, insertionMode) {
    };
    OFormLayoutSplitPaneComponent.prototype.canAddDetailComponent = function () {
        var _this = this;
        if (!Util.isDefined(this.data) || !this.formLayoutManager.hasToConfirmExit(this.data)) {
            return true;
        }
        return new Observable(function (observer) {
            _this.dialogService.confirm('CONFIRM', 'MESSAGES.FORM_CHANGES_WILL_BE_LOST').then(function (res) {
                observer.next(res);
                observer.complete();
            });
        });
    };
    OFormLayoutSplitPaneComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-form-layout-split-pane',
                    template: "\n  <div fxLayout=\"row\" class=\"o-split-pane-row-wrapper\">\n    <div #mainWrapper fxFlex fxLayout=\"row\" class=\"o-split-pane-main-content\">\n      <ng-content></ng-content>\n    </div>\n\n    <div #detailWrapper class=\"o-split-pane-content-wrapper mwlResizable\" mwlResizable [enableGhostResize]=\"true\"\n      (resizeEnd)=\"onResizeEnd('width', $event, detailWrapper)\">\n\n      <div class=\"o-split-pane-resize-handle\" mwlResizeHandle [resizeEdges]=\"{ left: true }\">\n        <div class=\"o-split-pane-resize-border\">\n          <div></div>\n        </div>\n      </div>\n\n      <div class=\"o-split-pane-secondary-content\" fxLayout=\"column\" fxLayoutAlign=\"center stretch\" fxFlex>\n        <ng-template o-form-layout-manager-content></ng-template>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"showLoading | async\" class=\"spinner-container\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n    <mat-progress-spinner mode=\"indeterminate\" strokeWidth=\"3\"></mat-progress-spinner>\n  </div>\n",
                    inputs: DEFAULT_INPUTS_O_FORM_LAYOUT_SPLIT_PANE,
                    outputs: DEFAULT_OUTPUTS_O_FORM_LAYOUT_SPLIT_PANE,
                    encapsulation: ViewEncapsulation.None,
                    host: {
                        '[class.o-form-layout-split-pane]': 'true'
                    },
                    styles: [".o-form-layout-split-pane .o-split-pane-row-wrapper{height:100%}.o-form-layout-split-pane .o-split-pane-content-wrapper{z-index:1000;min-width:15%}.o-form-layout-split-pane .o-split-pane-content-wrapper>.o-split-pane-resize-handle{width:8px;position:relative;cursor:col-resize}.o-form-layout-split-pane .o-split-pane-content-wrapper>.o-split-pane-resize-handle>.o-split-pane-resize-border{position:absolute;height:100%;width:2px;left:3px;background-color:#929292}.o-form-layout-split-pane .o-split-pane-content-wrapper>.o-split-pane-resize-handle>.o-split-pane-resize-border>div{width:4px;height:32px;position:absolute;top:calc(50% - 16px);left:-1px;background-color:#666}.o-form-layout-split-pane .o-split-pane-content-wrapper:not(.resized){width:50%}.o-form-layout-split-pane .mwlResizable{box-sizing:border-box}.o-form-layout-split-pane .o-split-pane-secondary-content{padding:0 8px;overflow:auto}.o-form-layout-split-pane .o-split-pane-secondary-content>*{height:100%}.o-form-layout-split-pane .spinner-container{position:absolute;top:0;left:0;right:0;bottom:0;z-index:500;visibility:visible;opacity:1;transition:opacity .25s linear}"]
                }] }
    ];
    OFormLayoutSplitPaneComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: ElementRef },
        { type: ComponentFactoryResolver },
        { type: Renderer2 },
        { type: OFormLayoutManagerComponent, decorators: [{ type: Inject, args: [forwardRef(function () { return OFormLayoutManagerComponent; }),] }] }
    ]; };
    OFormLayoutSplitPaneComponent.propDecorators = {
        contentDirective: [{ type: ViewChild, args: [OFormLayoutManagerContentDirective, { static: false },] }],
        mainWrapper: [{ type: ViewChild, args: ['mainWrapper', { read: ElementRef, static: false },] }],
        detailWrapper: [{ type: ViewChild, args: ['detailWrapper', { read: ElementRef, static: false },] }]
    };
    return OFormLayoutSplitPaneComponent;
}());
export { OFormLayoutSplitPaneComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1mb3JtLWxheW91dC1zcGxpdC1wYW5lLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL29udGltaXplLXdlYi1uZ3gvIiwic291cmNlcyI6WyJsaWIvbGF5b3V0cy9mb3JtLWxheW91dC9zcGxpdC1wYW5lL28tZm9ybS1sYXlvdXQtc3BsaXQtcGFuZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUVMLFNBQVMsRUFDVCx3QkFBd0IsRUFDeEIsVUFBVSxFQUNWLFVBQVUsRUFDVixNQUFNLEVBQ04sUUFBUSxFQUVSLFNBQVMsRUFDVCxTQUFTLEVBQ1QsaUJBQWlCLEVBQ2xCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUV6QyxPQUFPLEVBQUUsZUFBZSxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUluRCxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSw4REFBOEQsQ0FBQztBQUMzRyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFHakUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzVDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUMxQyxPQUFPLEVBQUUsa0NBQWtDLEVBQUUsTUFBTSx1REFBdUQsQ0FBQztBQUUzRyxNQUFNLENBQUMsSUFBTSx1Q0FBdUMsR0FBRztJQUNyRCxTQUFTO0NBQ1YsQ0FBQztBQUVGLE1BQU0sQ0FBQyxJQUFNLHdDQUF3QyxHQUFHLEVBQ3ZELENBQUM7QUFFRjtJQXFDRSx1Q0FDWSxRQUFrQixFQUNsQixVQUFzQixFQUN0Qix3QkFBa0QsRUFDckQsUUFBbUIsRUFDb0MsaUJBQThDO1FBSmxHLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDbEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUN0Qiw2QkFBd0IsR0FBeEIsd0JBQXdCLENBQTBC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QVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsMEJBQTBCO29CQUNwQywrZ0NBQXdEO29CQUV4RCxNQUFNLEVBQUUsdUNBQXVDO29CQUMvQyxPQUFPLEVBQUUsd0NBQXdDO29CQUNqRCxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtvQkFDckMsSUFBSSxFQUFFO3dCQUNKLGtDQUFrQyxFQUFFLE1BQU07cUJBQzNDOztpQkFDRjs7O2dCQXJDQyxRQUFRO2dCQUhSLFVBQVU7Z0JBRFYsd0JBQXdCO2dCQU14QixTQUFTO2dCQVVGLDJCQUEyQix1QkF5RC9CLE1BQU0sU0FBQyxVQUFVLENBQUMsY0FBTSxPQUFBLDJCQUEyQixFQUEzQixDQUEyQixDQUFDOzs7bUNBeEJ0RCxTQUFTLFNBQUMsa0NBQWtDLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFOzhCQUcvRCxTQUFTLFNBQUMsYUFBYSxFQUFFLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFO2dDQUc1RCxTQUFTLFNBQUMsZUFBZSxFQUFFLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFOztJQTJKakUsb0NBQUM7Q0FBQSxBQW5MRCxJQW1MQztTQXhLWSw2QkFBNkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBZnRlclZpZXdJbml0LFxuICBDb21wb25lbnQsXG4gIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgRWxlbWVudFJlZixcbiAgZm9yd2FyZFJlZixcbiAgSW5qZWN0LFxuICBJbmplY3RvcixcbiAgT25Jbml0LFxuICBSZW5kZXJlcjIsXG4gIFZpZXdDaGlsZCxcbiAgVmlld0VuY2Fwc3VsYXRpb25cbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgUmVzaXplRXZlbnQgfSBmcm9tICdhbmd1bGFyLXJlc2l6YWJsZS1lbGVtZW50JztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBJTGF5b3V0TWFuYWdlckNvbXBvbmVudCB9IGZyb20gJy4uLy4uLy4uL2ludGVyZmFjZXMvbGF5b3V0LW1hbmFnZXItY29tcG9uZW50LmludGVyZmFjZSc7XG5pbXBvcnQgeyBPRm9ybUxheW91dE1hbmFnZXJNb2RlIH0gZnJvbSAnLi4vLi4vLi4vaW50ZXJmYWNlcy9vLWZvcm0tbGF5b3V0LW1hbmFnZXItbW9kZS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgT0Zvcm1MYXlvdXRNYW5hZ2VyQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vLi4vbGF5b3V0cy9mb3JtLWxheW91dC9vLWZvcm0tbGF5b3V0LW1hbmFnZXIuY29tcG9uZW50JztcbmltcG9ydCB7IERpYWxvZ1NlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9zZXJ2aWNlcy9kaWFsb2cuc2VydmljZSc7XG5pbXBvcnQgeyBPRm9ybUxheW91dE1hbmFnZXJDb21wb25lbnRTdGF0ZUNsYXNzIH0gZnJvbSAnLi4vLi4vLi4vc2VydmljZXMvc3RhdGUvby1mb3JtLWxheW91dC1tYW5hZ2VyLWNvbXBvbmVudC1zdGF0ZS5jbGFzcyc7XG5pbXBvcnQgeyBGb3JtTGF5b3V0RGV0YWlsQ29tcG9uZW50RGF0YSB9IGZyb20gJy4uLy4uLy4uL3R5cGVzL2Zvcm0tbGF5b3V0LWRldGFpbC1jb21wb25lbnQtZGF0YS50eXBlJztcbmltcG9ydCB7IENvZGVzIH0gZnJvbSAnLi4vLi4vLi4vdXRpbC9jb2Rlcyc7XG5pbXBvcnQgeyBVdGlsIH0gZnJvbSAnLi4vLi4vLi4vdXRpbC91dGlsJztcbmltcG9ydCB7IE9Gb3JtTGF5b3V0TWFuYWdlckNvbnRlbnREaXJlY3RpdmUgfSBmcm9tICcuLi9kaXJlY3RpdmVzL28tZm9ybS1sYXlvdXQtbWFuYWdlci1jb250ZW50LmRpcmVjdGl2ZSc7XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX0lOUFVUU19PX0ZPUk1fTEFZT1VUX1NQTElUX1BBTkUgPSBbXG4gICdvcHRpb25zJ1xuXTtcblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfT1VUUFVUU19PX0ZPUk1fTEFZT1VUX1NQTElUX1BBTkUgPSBbXG5dO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdvLWZvcm0tbGF5b3V0LXNwbGl0LXBhbmUnLFxuICB0ZW1wbGF0ZVVybDogJy4vby1mb3JtLWxheW91dC1zcGxpdC1wYW5lLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vby1mb3JtLWxheW91dC1zcGxpdC1wYW5lLmNvbXBvbmVudC5zY3NzJ10sXG4gIGlucHV0czogREVGQVVMVF9JTlBVVFNfT19GT1JNX0xBWU9VVF9TUExJVF9QQU5FLFxuICBvdXRwdXRzOiBERUZBVUxUX09VVFBVVFNfT19GT1JNX0xBWU9VVF9TUExJVF9QQU5FLFxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICBob3N0OiB7XG4gICAgJ1tjbGFzcy5vLWZvcm0tbGF5b3V0LXNwbGl0LXBhbmVdJzogJ3RydWUnXG4gIH1cbn0pXG5leHBvcnQgY2xhc3MgT0Zvcm1MYXlvdXRTcGxpdFBhbmVDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQsIE9Gb3JtTGF5b3V0TWFuYWdlck1vZGUge1xuXG4gIGRhdGE6IEZvcm1MYXlvdXREZXRhaWxDb21wb25lbnREYXRhO1xuICBwdWJsaWMgc2hvd0xvYWRpbmcgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+KGZhbHNlKTtcblxuICBwcm90ZWN0ZWQgcm91dGVyOiBSb3V0ZXI7XG5cbiAgQFZpZXdDaGlsZChPRm9ybUxheW91dE1hbmFnZXJDb250ZW50RGlyZWN0aXZlLCB7IHN0YXRpYzogZmFsc2UgfSlcbiAgY29udGVudERpcmVjdGl2ZTogT0Zvcm1MYXlvdXRNYW5hZ2VyQ29udGVudERpcmVjdGl2ZTtcblxuICBAVmlld0NoaWxkKCdtYWluV3JhcHBlcicsIHsgcmVhZDogRWxlbWVudFJlZiwgc3RhdGljOiBmYWxzZSB9KVxuICBwcm90ZWN0ZWQgbWFpbldyYXBwZXI6IEVsZW1lbnRSZWY7XG5cbiAgQFZpZXdDaGlsZCgnZGV0YWlsV3JhcHBlcicsIHsgcmVhZDogRWxlbWVudFJlZiwgc3RhdGljOiBmYWxzZSB9KVxuICBwcm90ZWN0ZWQgZGV0YWlsV3JhcHBlcjogRWxlbWVudFJlZjtcblxuICBwcm90ZWN0ZWQgX29wdGlvbnM6IGFueTtcblxuICBwdWJsaWMgc2V0IG9wdGlvbnModmFsdWU6IGFueSkge1xuICAgIGlmIChVdGlsLmlzRGVmaW5lZCh2YWx1ZSkgJiYgT2JqZWN0LmtleXModmFsdWUpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy5fb3B0aW9ucyA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBkaWFsb2dTZXJ2aWNlOiBEaWFsb2dTZXJ2aWNlO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCBpbmplY3RvcjogSW5qZWN0b3IsXG4gICAgcHJvdGVjdGVkIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgcHJvdGVjdGVkIGNvbXBvbmVudEZhY3RvcnlSZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxuICAgIHB1YmxpYyByZW5kZXJlcjogUmVuZGVyZXIyLFxuICAgIEBJbmplY3QoZm9yd2FyZFJlZigoKSA9PiBPRm9ybUxheW91dE1hbmFnZXJDb21wb25lbnQpKSBwdWJsaWMgZm9ybUxheW91dE1hbmFnZXI6IE9Gb3JtTGF5b3V0TWFuYWdlckNvbXBvbmVudFxuICApIHtcbiAgICB0aGlzLnJvdXRlciA9IHRoaXMuaW5qZWN0b3IuZ2V0KFJvdXRlcik7XG4gICAgdGhpcy5kaWFsb2dTZXJ2aWNlID0gaW5qZWN0b3IuZ2V0KERpYWxvZ1NlcnZpY2UpO1xuICB9XG5cbiAgZ2V0IHN0YXRlKCk6IE9Gb3JtTGF5b3V0TWFuYWdlckNvbXBvbmVudFN0YXRlQ2xhc3Mge1xuICAgIHJldHVybiB0aGlzLmZvcm1MYXlvdXRNYW5hZ2VyLnN0YXRlO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgaWYgKHRoaXMubWFpbldyYXBwZXIgJiYgdGhpcy5tYWluV3JhcHBlci5uYXRpdmVFbGVtZW50KSB7XG4gICAgICB0aGlzLnNldE9wdGlvbih0aGlzLm1haW5XcmFwcGVyLm5hdGl2ZUVsZW1lbnQsICdtYWluV2lkdGgnLCAnd2lkdGgnKTtcbiAgICAgIHRoaXMuc2V0T3B0aW9uKHRoaXMubWFpbldyYXBwZXIubmF0aXZlRWxlbWVudCwgJ21haW5NYXhXaWR0aCcsICdtYXgtd2lkdGgnKTtcbiAgICAgIHRoaXMuc2V0T3B0aW9uKHRoaXMubWFpbldyYXBwZXIubmF0aXZlRWxlbWVudCwgJ21haW5NaW5XaWR0aCcsICdtaW4td2lkdGgnKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuZGV0YWlsV3JhcHBlciAmJiB0aGlzLmRldGFpbFdyYXBwZXIubmF0aXZlRWxlbWVudCkge1xuICAgICAgdGhpcy5zZXRPcHRpb24odGhpcy5kZXRhaWxXcmFwcGVyLm5hdGl2ZUVsZW1lbnQsICdkZXRhaWxXaWR0aCcsICd3aWR0aCcpO1xuICAgICAgdGhpcy5zZXRPcHRpb24odGhpcy5kZXRhaWxXcmFwcGVyLm5hdGl2ZUVsZW1lbnQsICdkZXRhaWxNYXhXaWR0aCcsICdtYXgtd2lkdGgnKTtcbiAgICAgIHRoaXMuc2V0T3B0aW9uKHRoaXMuZGV0YWlsV3JhcHBlci5uYXRpdmVFbGVtZW50LCAnZGV0YWlsTWluV2lkdGgnLCAnbWluLXdpZHRoJyk7XG4gICAgfVxuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMuaW5pdGlhbGl6ZUNvbXBvbmVudFN0YXRlKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgc2V0T3B0aW9uKGVsOiBhbnksIG9wdGlvbk5hbWU6IHN0cmluZywgcHJvcGVydHlOYW1lOiBzdHJpbmcpIHtcbiAgICBpZiAoVXRpbC5pc0RlZmluZWQodGhpcy5fb3B0aW9uc1tvcHRpb25OYW1lXSkpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUoZWwsIHByb3BlcnR5TmFtZSwgdGhpcy5fb3B0aW9uc1tvcHRpb25OYW1lXSk7XG4gICAgfVxuICB9XG5cbiAgZ2V0Rm9ybUNhY2hlRGF0YSgpOiBGb3JtTGF5b3V0RGV0YWlsQ29tcG9uZW50RGF0YSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YTtcbiAgfVxuXG4gIHNldE1vZGlmaWVkU3RhdGUoZm9ybUF0dHI6IHN0cmluZywgbW9kaWZpZWQ6IGJvb2xlYW4sIGNvbmZpcm1FeGl0OiBib29sZWFuKSB7XG4gICAgdGhpcy5kYXRhLmlubmVyRm9ybXNJbmZvW2Zvcm1BdHRyXSA9IHtcbiAgICAgIG1vZGlmaWVkOiBtb2RpZmllZCxcbiAgICAgIGNvbmZpcm1PbkV4aXQ6IGNvbmZpcm1FeGl0XG4gICAgfTtcbiAgfVxuXG4gIHNldERldGFpbENvbXBvbmVudChjb21wRGF0YTogRm9ybUxheW91dERldGFpbENvbXBvbmVudERhdGEpIHtcbiAgICB0aGlzLmRhdGEgPSBjb21wRGF0YTtcbiAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xuICB9XG5cbiAgb25SZXNpemVFbmQocHJvcGVydHk6IHN0cmluZywgZXZlbnQ6IFJlc2l6ZUV2ZW50LCBlbDogYW55KTogdm9pZCB7XG4gICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyhlbCwgJ3Jlc2l6ZWQnKTtcbiAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKGVsLCBwcm9wZXJ0eSwgYCR7ZXZlbnQucmVjdGFuZ2xlW3Byb3BlcnR5XX1weGApO1xuICB9XG5cbiAgcHJvdGVjdGVkIGNyZWF0ZUNvbXBvbmVudCgpIHtcbiAgICBpZiAoIXRoaXMuZGF0YSkge1xuICAgICAgdGhpcy5jb250ZW50RGlyZWN0aXZlLnZpZXdDb250YWluZXJSZWYuY2xlYXIoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgY29tcG9uZW50RmFjdG9yeSA9IHRoaXMuY29tcG9uZW50RmFjdG9yeVJlc29sdmVyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KHRoaXMuZGF0YS5jb21wb25lbnQpO1xuICAgIGlmICh0aGlzLmNvbnRlbnREaXJlY3RpdmUgJiYgY29tcG9uZW50RmFjdG9yeSkge1xuICAgICAgY29uc3Qgdmlld0NvbnRhaW5lclJlZiA9IHRoaXMuY29udGVudERpcmVjdGl2ZS52aWV3Q29udGFpbmVyUmVmO1xuICAgICAgdmlld0NvbnRhaW5lclJlZi5jbGVhcigpO1xuICAgICAgdmlld0NvbnRhaW5lclJlZi5jcmVhdGVDb21wb25lbnQoY29tcG9uZW50RmFjdG9yeSk7XG4gICAgfVxuICB9XG5cbiAgZ2V0RGF0YVRvU3RvcmUoKTogYW55IHtcbiAgICByZXR1cm4gdGhpcy5kYXRhO1xuICB9XG5cbiAgZ2V0UGFyYW1zKCk6IGFueSB7XG4gICAgcmV0dXJuIFV0aWwuaXNEZWZpbmVkKHRoaXMuZGF0YSkgPyB0aGlzLmRhdGEucGFyYW1zIDogdW5kZWZpbmVkO1xuICB9XG5cbiAgaW5pdGlhbGl6ZUNvbXBvbmVudFN0YXRlKCkge1xuICAgIGlmICh0aGlzLmZvcm1MYXlvdXRNYW5hZ2VyKSB7XG4gICAgICB0aGlzLmZvcm1MYXlvdXRNYW5hZ2VyLnNldEFzQWN0aXZlRm9ybUxheW91dE1hbmFnZXIoKTtcbiAgICB9XG4gICAgaWYgKFV0aWwuaXNEZWZpbmVkKHRoaXMuc3RhdGUudXJsKSkge1xuICAgICAgdGhpcy5zaG93TG9hZGluZy5uZXh0KHRydWUpO1xuICAgICAgY29uc3QgZXh0cmFzID0ge307XG4gICAgICBleHRyYXNbQ29kZXMuUVVFUllfUEFSQU1TXSA9IHRoaXMuc3RhdGUucXVlcnlQYXJhbXM7XG5cbiAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFt0aGlzLnN0YXRlLnVybF0sIGV4dHJhcykudGhlbigoKSA9PiB7XG4gICAgICAgIHRoaXMuc2hvd0xvYWRpbmcubmV4dChmYWxzZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICB1cGRhdGVBY3RpdmVEYXRhKGRhdGE6IGFueSkge1xuICAgIGlmIChVdGlsLmlzRGVmaW5lZCh0aGlzLmRhdGEpKSB7XG4gICAgICB0aGlzLmRhdGEgPSBPYmplY3QuYXNzaWduKHRoaXMuZGF0YSwgZGF0YSk7XG4gICAgfVxuICB9XG5cbiAgZ2V0Um91dGVPZkFjdGl2ZUl0ZW0oKTogYW55W10ge1xuICAgIGNvbnN0IHJvdXRlID0gW107XG4gICAgaWYgKFV0aWwuaXNEZWZpbmVkKHRoaXMuZGF0YSkpIHtcbiAgICAgIGNvbnN0IHVybFNlZ21lbnRzID0gdGhpcy5kYXRhLnVybFNlZ21lbnRzIHx8IFtdO1xuICAgICAgdXJsU2VnbWVudHMuZm9yRWFjaCgoc2VnbWVudCkgPT4ge1xuICAgICAgICByb3V0ZS5wdXNoKHNlZ21lbnQucGF0aCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByb3V0ZTtcbiAgICB9XG4gICAgcmV0dXJuIHJvdXRlO1xuICB9XG5cbiAgaXNNYWluQ29tcG9uZW50KGNvbXA6IElMYXlvdXRNYW5hZ2VyQ29tcG9uZW50KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMubWFpbldyYXBwZXIgJiYgdGhpcy5tYWluV3JhcHBlci5uYXRpdmVFbGVtZW50XG4gICAgICAmJiBjb21wLmVsZW1lbnRSZWYgJiYgdGhpcy5tYWluV3JhcHBlci5uYXRpdmVFbGVtZW50LmNvbnRhaW5zKGNvbXAuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50KTtcbiAgfVxuXG4gIG9wZW5EZXRhaWwoZGV0YWlsOiBGb3JtTGF5b3V0RGV0YWlsQ29tcG9uZW50RGF0YSkge1xuICAgIHRoaXMuc2V0RGV0YWlsQ29tcG9uZW50KGRldGFpbCk7XG4gIH1cblxuICBjbG9zZURldGFpbCgpIHtcbiAgICB0aGlzLnNldERldGFpbENvbXBvbmVudChudWxsKTtcbiAgfVxuXG4gIHVwZGF0ZU5hdmlnYXRpb24oZGF0YTogYW55LCBrZXlzVmFsdWVzOiBhbnksIGluc2VydGlvbk1vZGU/OiBib29sZWFuKSB7XG4gICAgLy8gTm90aGluZyB0byBkb1xuICB9XG5cbiAgY2FuQWRkRGV0YWlsQ29tcG9uZW50KCk6IGJvb2xlYW4gfCBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgICBpZiAoIVV0aWwuaXNEZWZpbmVkKHRoaXMuZGF0YSkgfHwgIXRoaXMuZm9ybUxheW91dE1hbmFnZXIuaGFzVG9Db25maXJtRXhpdCh0aGlzLmRhdGEpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUob2JzZXJ2ZXIgPT4ge1xuICAgICAgdGhpcy5kaWFsb2dTZXJ2aWNlLmNvbmZpcm0oJ0NPTkZJUk0nLCAnTUVTU0FHRVMuRk9STV9DSEFOR0VTX1dJTExfQkVfTE9TVCcpLnRoZW4ocmVzID0+IHtcbiAgICAgICAgb2JzZXJ2ZXIubmV4dChyZXMpO1xuICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufVxuIl19