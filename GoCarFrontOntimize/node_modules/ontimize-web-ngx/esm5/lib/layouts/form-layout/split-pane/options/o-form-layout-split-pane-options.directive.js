import { Directive, Input } from '@angular/core';
import { OFormLayoutManagerComponent } from '../../o-form-layout-manager.component';
var OFormLayoutSplitPaneOptionsDirective = (function () {
    function OFormLayoutSplitPaneOptionsDirective(formLayoutManager) {
        this.formLayoutManager = formLayoutManager;
    }
    OFormLayoutSplitPaneOptionsDirective.prototype.ngOnChanges = function () {
        if (this.formLayoutManager) {
            this.formLayoutManager.addSplitPaneOptions(this.getOptions());
        }
    };
    OFormLayoutSplitPaneOptionsDirective.prototype.getOptions = function () {
        var result = {
            mainWidth: this.mainWidth,
            mainMaxWidth: this.mainMaxWidth,
            mainMinWidth: this.mainMinWidth,
            detailWidth: this.detailWidth,
            detailMaxWidth: this.detailMaxWidth,
            detailMinWidth: this.detailMinWidth
        };
        Object.keys(result).forEach(function (key) { return result[key] == null ? delete result[key] : {}; });
        return result;
    };
    OFormLayoutSplitPaneOptionsDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'o-form-layout-split-pane-options, o-form-layout-manager[mode="split-pane"]'
                },] }
    ];
    OFormLayoutSplitPaneOptionsDirective.ctorParameters = function () { return [
        { type: OFormLayoutManagerComponent }
    ]; };
    OFormLayoutSplitPaneOptionsDirective.propDecorators = {
        mainWidth: [{ type: Input, args: ['main-width',] }],
        mainMaxWidth: [{ type: Input, args: ['main-max-width',] }],
        mainMinWidth: [{ type: Input, args: ['main-min-width',] }],
        detailWidth: [{ type: Input, args: ['detail-width',] }],
        detailMaxWidth: [{ type: Input, args: ['detail-max-width',] }],
        detailMinWidth: [{ type: Input, args: ['detail-min-width',] }]
    };
    return OFormLayoutSplitPaneOptionsDirective;
}());
export { OFormLayoutSplitPaneOptionsDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1mb3JtLWxheW91dC1zcGxpdC1wYW5lLW9wdGlvbnMuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vb250aW1pemUtd2ViLW5neC8iLCJzb3VyY2VzIjpbImxpYi9sYXlvdXRzL2Zvcm0tbGF5b3V0L3NwbGl0LXBhbmUvb3B0aW9ucy9vLWZvcm0tbGF5b3V0LXNwbGl0LXBhbmUtb3B0aW9ucy5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFakQsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFFcEY7SUFLRSw4Q0FBc0IsaUJBQThDO1FBQTlDLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBNkI7SUFBSSxDQUFDO0lBRXpFLDBEQUFXLEdBQVg7UUFDRSxJQUFJLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtZQUMxQixJQUFJLENBQUMsaUJBQWlCLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7U0FDL0Q7SUFDSCxDQUFDO0lBU0QseURBQVUsR0FBVjtRQUNFLElBQU0sTUFBTSxHQUFHO1lBQ2IsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTO1lBQ3pCLFlBQVksRUFBRSxJQUFJLENBQUMsWUFBWTtZQUMvQixZQUFZLEVBQUUsSUFBSSxDQUFDLFlBQVk7WUFDL0IsV0FBVyxFQUFFLElBQUksQ0FBQyxXQUFXO1lBQzdCLGNBQWMsRUFBRSxJQUFJLENBQUMsY0FBYztZQUNuQyxjQUFjLEVBQUUsSUFBSSxDQUFDLGNBQWM7U0FDcEMsQ0FBQTtRQUVELE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBN0MsQ0FBNkMsQ0FBQyxDQUFDO1FBQ2xGLE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7O2dCQWhDRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLDRFQUE0RTtpQkFDdkY7OztnQkFKUSwyQkFBMkI7Ozs0QkFlakMsS0FBSyxTQUFDLFlBQVk7K0JBQ2xCLEtBQUssU0FBQyxnQkFBZ0I7K0JBQ3RCLEtBQUssU0FBQyxnQkFBZ0I7OEJBQ3RCLEtBQUssU0FBQyxjQUFjO2lDQUNwQixLQUFLLFNBQUMsa0JBQWtCO2lDQUN4QixLQUFLLFNBQUMsa0JBQWtCOztJQWUzQiwyQ0FBQztDQUFBLEFBakNELElBaUNDO1NBOUJZLG9DQUFvQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgT0Zvcm1MYXlvdXRNYW5hZ2VyQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vby1mb3JtLWxheW91dC1tYW5hZ2VyLmNvbXBvbmVudCc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ28tZm9ybS1sYXlvdXQtc3BsaXQtcGFuZS1vcHRpb25zLCBvLWZvcm0tbGF5b3V0LW1hbmFnZXJbbW9kZT1cInNwbGl0LXBhbmVcIl0nXG59KVxuZXhwb3J0IGNsYXNzIE9Gb3JtTGF5b3V0U3BsaXRQYW5lT3B0aW9uc0RpcmVjdGl2ZSB7XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGZvcm1MYXlvdXRNYW5hZ2VyOiBPRm9ybUxheW91dE1hbmFnZXJDb21wb25lbnQpIHsgfVxuXG4gIG5nT25DaGFuZ2VzKCkge1xuICAgIGlmICh0aGlzLmZvcm1MYXlvdXRNYW5hZ2VyKSB7XG4gICAgICB0aGlzLmZvcm1MYXlvdXRNYW5hZ2VyLmFkZFNwbGl0UGFuZU9wdGlvbnModGhpcy5nZXRPcHRpb25zKCkpO1xuICAgIH1cbiAgfVxuXG4gIEBJbnB1dCgnbWFpbi13aWR0aCcpIG1haW5XaWR0aDogbnVtYmVyIHwgc3RyaW5nO1xuICBASW5wdXQoJ21haW4tbWF4LXdpZHRoJykgbWFpbk1heFdpZHRoOiBudW1iZXIgfCBzdHJpbmc7XG4gIEBJbnB1dCgnbWFpbi1taW4td2lkdGgnKSBtYWluTWluV2lkdGg6IG51bWJlciB8IHN0cmluZztcbiAgQElucHV0KCdkZXRhaWwtd2lkdGgnKSBkZXRhaWxXaWR0aDogbnVtYmVyIHwgc3RyaW5nO1xuICBASW5wdXQoJ2RldGFpbC1tYXgtd2lkdGgnKSBkZXRhaWxNYXhXaWR0aDogbnVtYmVyIHwgc3RyaW5nO1xuICBASW5wdXQoJ2RldGFpbC1taW4td2lkdGgnKSBkZXRhaWxNaW5XaWR0aDogbnVtYmVyIHwgc3RyaW5nO1xuXG4gIGdldE9wdGlvbnMoKSB7XG4gICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgbWFpbldpZHRoOiB0aGlzLm1haW5XaWR0aCxcbiAgICAgIG1haW5NYXhXaWR0aDogdGhpcy5tYWluTWF4V2lkdGgsXG4gICAgICBtYWluTWluV2lkdGg6IHRoaXMubWFpbk1pbldpZHRoLFxuICAgICAgZGV0YWlsV2lkdGg6IHRoaXMuZGV0YWlsV2lkdGgsXG4gICAgICBkZXRhaWxNYXhXaWR0aDogdGhpcy5kZXRhaWxNYXhXaWR0aCxcbiAgICAgIGRldGFpbE1pbldpZHRoOiB0aGlzLmRldGFpbE1pbldpZHRoXG4gICAgfVxuICAgIC8vIERlbGV0aW5nIHVuZGVmaW5lZCBwcm9wZXJ0aWVzXG4gICAgT2JqZWN0LmtleXMocmVzdWx0KS5mb3JFYWNoKGtleSA9PiByZXN1bHRba2V5XSA9PSBudWxsID8gZGVsZXRlIHJlc3VsdFtrZXldIDoge30pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn1cbiJdfQ==