import { ContentChild, Directive, Input, TemplateRef } from '@angular/core';
import { BooleanConverter, NumberConverter } from '../../../../decorators/input-converter';
import { OFormLayoutManagerComponent } from '../../o-form-layout-manager.component';
var OFormLayoutTabGroupOptionsDirective = (function () {
    function OFormLayoutTabGroupOptionsDirective(formLayoutManager) {
        this.formLayoutManager = formLayoutManager;
        this._disableAnimation = true;
        this.iconPosition = 'left';
    }
    OFormLayoutTabGroupOptionsDirective.prototype.ngOnChanges = function () {
        if (this.formLayoutManager) {
            this.formLayoutManager.addTabGroupOptions(this.getOptions());
        }
    };
    Object.defineProperty(OFormLayoutTabGroupOptionsDirective.prototype, "disableAnimation", {
        set: function (value) {
            this._disableAnimation = BooleanConverter(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OFormLayoutTabGroupOptionsDirective.prototype, "maxTabs", {
        set: function (value) {
            this._maxTabs = NumberConverter(value);
        },
        enumerable: true,
        configurable: true
    });
    OFormLayoutTabGroupOptionsDirective.prototype.getOptions = function () {
        var result = {
            backgroundColor: this.backgroundColor,
            color: this.color,
            headerPosition: this.headerPosition,
            disableAnimation: this._disableAnimation,
            icon: this.icon,
            iconPosition: this.iconPosition,
            titleDataOrigin: this.titleDataOrigin,
            title: this.title,
            labelColumns: this.labelColumns,
            separator: this.separator,
            maxTabs: this._maxTabs
        };
        Object.keys(result).forEach(function (key) { return result[key] == null ? delete result[key] : {}; });
        return result;
    };
    OFormLayoutTabGroupOptionsDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'o-form-layout-tabgroup-options, o-form-layout-manager[mode="tab"]'
                },] }
    ];
    OFormLayoutTabGroupOptionsDirective.ctorParameters = function () { return [
        { type: OFormLayoutManagerComponent }
    ]; };
    OFormLayoutTabGroupOptionsDirective.propDecorators = {
        backgroundColor: [{ type: Input, args: ['background-color',] }],
        color: [{ type: Input }],
        disableAnimation: [{ type: Input, args: ['disable-animation',] }],
        headerPosition: [{ type: Input, args: ['header-position',] }],
        icon: [{ type: Input }],
        iconPosition: [{ type: Input, args: ['icon-position',] }],
        titleDataOrigin: [{ type: Input, args: ['title-data-origin',] }],
        title: [{ type: Input }],
        labelColumns: [{ type: Input, args: ['label-columns',] }],
        separator: [{ type: Input }],
        maxTabs: [{ type: Input, args: ['max-tabs',] }],
        templateMatTabLabel: [{ type: ContentChild, args: [TemplateRef, { static: false },] }]
    };
    return OFormLayoutTabGroupOptionsDirective;
}());
export { OFormLayoutTabGroupOptionsDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1mb3JtLWxheW91dC10YWJncm91cC1vcHRpb25zLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL29udGltaXplLXdlYi1uZ3gvIiwic291cmNlcyI6WyJsaWIvbGF5b3V0cy9mb3JtLWxheW91dC90YWJncm91cC9vcHRpb25zL28tZm9ybS1sYXlvdXQtdGFiZ3JvdXAtb3B0aW9ucy5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUc1RSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsZUFBZSxFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDM0YsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFFcEY7SUFLRSw2Q0FBc0IsaUJBQThDO1FBQTlDLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBNkI7UUFjMUQsc0JBQWlCLEdBQVksSUFBSSxDQUFDO1FBYXJDLGlCQUFZLEdBQXFCLE1BQU0sQ0FBQztJQTNCeUIsQ0FBQztJQUV6RSx5REFBVyxHQUFYO1FBQ0UsSUFBSSxJQUFJLENBQUMsaUJBQWlCLEVBQUU7WUFDMUIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO1NBQzlEO0lBQ0gsQ0FBQztJQVNELHNCQUNJLGlFQUFnQjthQURwQixVQUNxQixLQUFjO1lBQ2pDLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNuRCxDQUFDOzs7T0FBQTtJQXdCRCxzQkFDVyx3REFBTzthQURsQixVQUNtQixLQUFhO1lBQzlCLElBQUksQ0FBQyxRQUFRLEdBQUcsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3pDLENBQUM7OztPQUFBO0lBS0Qsd0RBQVUsR0FBVjtRQUNFLElBQU0sTUFBTSxHQUFHO1lBQ2IsZUFBZSxFQUFFLElBQUksQ0FBQyxlQUFlO1lBQ3JDLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztZQUNqQixjQUFjLEVBQUUsSUFBSSxDQUFDLGNBQWM7WUFDbkMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLGlCQUFpQjtZQUN4QyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7WUFDZixZQUFZLEVBQUUsSUFBSSxDQUFDLFlBQVk7WUFDL0IsZUFBZSxFQUFFLElBQUksQ0FBQyxlQUFlO1lBQ3JDLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztZQUNqQixZQUFZLEVBQUUsSUFBSSxDQUFDLFlBQVk7WUFDL0IsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTO1lBQ3pCLE9BQU8sRUFBRSxJQUFJLENBQUMsUUFBUTtTQUN2QixDQUFBO1FBRUQsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUE3QyxDQUE2QyxDQUFDLENBQUM7UUFDbEYsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQzs7Z0JBeEVGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsbUVBQW1FO2lCQUM5RTs7O2dCQUpRLDJCQUEyQjs7O2tDQWVqQyxLQUFLLFNBQUMsa0JBQWtCO3dCQUd4QixLQUFLO21DQUlMLEtBQUssU0FBQyxtQkFBbUI7aUNBS3pCLEtBQUssU0FBQyxpQkFBaUI7dUJBR3ZCLEtBQUs7K0JBR0wsS0FBSyxTQUFDLGVBQWU7a0NBR3JCLEtBQUssU0FBQyxtQkFBbUI7d0JBR3pCLEtBQUs7K0JBR0wsS0FBSyxTQUFDLGVBQWU7NEJBR3JCLEtBQUs7MEJBSUwsS0FBSyxTQUFDLFVBQVU7c0NBS2hCLFlBQVksU0FBQyxXQUFXLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFOztJQXFCOUMsMENBQUM7Q0FBQSxBQXpFRCxJQXlFQztTQXRFWSxtQ0FBbUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb250ZW50Q2hpbGQsIERpcmVjdGl2ZSwgSW5wdXQsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNYXRUYWJIZWFkZXJQb3NpdGlvbiwgVGhlbWVQYWxldHRlIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwnO1xuXG5pbXBvcnQgeyBCb29sZWFuQ29udmVydGVyLCBOdW1iZXJDb252ZXJ0ZXIgfSBmcm9tICcuLi8uLi8uLi8uLi9kZWNvcmF0b3JzL2lucHV0LWNvbnZlcnRlcic7XG5pbXBvcnQgeyBPRm9ybUxheW91dE1hbmFnZXJDb21wb25lbnQgfSBmcm9tICcuLi8uLi9vLWZvcm0tbGF5b3V0LW1hbmFnZXIuY29tcG9uZW50JztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnby1mb3JtLWxheW91dC10YWJncm91cC1vcHRpb25zLCBvLWZvcm0tbGF5b3V0LW1hbmFnZXJbbW9kZT1cInRhYlwiXSdcbn0pXG5leHBvcnQgY2xhc3MgT0Zvcm1MYXlvdXRUYWJHcm91cE9wdGlvbnNEaXJlY3RpdmUge1xuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBmb3JtTGF5b3V0TWFuYWdlcjogT0Zvcm1MYXlvdXRNYW5hZ2VyQ29tcG9uZW50KSB7IH1cblxuICBuZ09uQ2hhbmdlcygpIHtcbiAgICBpZiAodGhpcy5mb3JtTGF5b3V0TWFuYWdlcikge1xuICAgICAgdGhpcy5mb3JtTGF5b3V0TWFuYWdlci5hZGRUYWJHcm91cE9wdGlvbnModGhpcy5nZXRPcHRpb25zKCkpO1xuICAgIH1cbiAgfVxuXG4gIEBJbnB1dCgnYmFja2dyb3VuZC1jb2xvcicpXG4gIHB1YmxpYyBiYWNrZ3JvdW5kQ29sb3I6IFRoZW1lUGFsZXR0ZTtcblxuICBASW5wdXQoKVxuICBwdWJsaWMgY29sb3I6IFRoZW1lUGFsZXR0ZTtcblxuICBwcm90ZWN0ZWQgX2Rpc2FibGVBbmltYXRpb246IGJvb2xlYW4gPSB0cnVlO1xuICBASW5wdXQoJ2Rpc2FibGUtYW5pbWF0aW9uJylcbiAgc2V0IGRpc2FibGVBbmltYXRpb24odmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9kaXNhYmxlQW5pbWF0aW9uID0gQm9vbGVhbkNvbnZlcnRlcih2YWx1ZSk7XG4gIH1cblxuICBASW5wdXQoJ2hlYWRlci1wb3NpdGlvbicpXG4gIHB1YmxpYyBoZWFkZXJQb3NpdGlvbjogTWF0VGFiSGVhZGVyUG9zaXRpb247XG5cbiAgQElucHV0KClcbiAgcHVibGljIGljb246IHN0cmluZztcblxuICBASW5wdXQoJ2ljb24tcG9zaXRpb24nKVxuICBwdWJsaWMgaWNvblBvc2l0aW9uOiAnbGVmdCcgfCAncmlnaHQnID0gJ2xlZnQnO1xuXG4gIEBJbnB1dCgndGl0bGUtZGF0YS1vcmlnaW4nKVxuICBwdWJsaWMgdGl0bGVEYXRhT3JpZ2luOiBzdHJpbmc7XG5cbiAgQElucHV0KClcbiAgcHVibGljIHRpdGxlOiBzdHJpbmc7XG5cbiAgQElucHV0KCdsYWJlbC1jb2x1bW5zJylcbiAgcHVibGljIGxhYmVsQ29sdW1uczogc3RyaW5nO1xuXG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBzZXBhcmF0b3I6IHN0cmluZztcblxuICBwcm90ZWN0ZWQgX21heFRhYnM6IG51bWJlcjtcbiAgQElucHV0KCdtYXgtdGFicycpXG4gIHB1YmxpYyBzZXQgbWF4VGFicyh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5fbWF4VGFicyA9IE51bWJlckNvbnZlcnRlcih2YWx1ZSk7XG4gIH1cblxuICBAQ29udGVudENoaWxkKFRlbXBsYXRlUmVmLCB7IHN0YXRpYzogZmFsc2UgfSlcbiAgdGVtcGxhdGVNYXRUYWJMYWJlbDogVGVtcGxhdGVSZWY8YW55PjtcblxuICBnZXRPcHRpb25zKCk6IE9iamVjdCB7XG4gICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGlzLmJhY2tncm91bmRDb2xvcixcbiAgICAgIGNvbG9yOiB0aGlzLmNvbG9yLFxuICAgICAgaGVhZGVyUG9zaXRpb246IHRoaXMuaGVhZGVyUG9zaXRpb24sXG4gICAgICBkaXNhYmxlQW5pbWF0aW9uOiB0aGlzLl9kaXNhYmxlQW5pbWF0aW9uLFxuICAgICAgaWNvbjogdGhpcy5pY29uLFxuICAgICAgaWNvblBvc2l0aW9uOiB0aGlzLmljb25Qb3NpdGlvbixcbiAgICAgIHRpdGxlRGF0YU9yaWdpbjogdGhpcy50aXRsZURhdGFPcmlnaW4sXG4gICAgICB0aXRsZTogdGhpcy50aXRsZSxcbiAgICAgIGxhYmVsQ29sdW1uczogdGhpcy5sYWJlbENvbHVtbnMsXG4gICAgICBzZXBhcmF0b3I6IHRoaXMuc2VwYXJhdG9yLFxuICAgICAgbWF4VGFiczogdGhpcy5fbWF4VGFic1xuICAgIH1cbiAgICAvLyBEZWxldGluZyB1bmRlZmluZWQgcHJvcGVydGllc1xuICAgIE9iamVjdC5rZXlzKHJlc3VsdCkuZm9yRWFjaChrZXkgPT4gcmVzdWx0W2tleV0gPT0gbnVsbCA/IGRlbGV0ZSByZXN1bHRba2V5XSA6IHt9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59XG4iXX0=