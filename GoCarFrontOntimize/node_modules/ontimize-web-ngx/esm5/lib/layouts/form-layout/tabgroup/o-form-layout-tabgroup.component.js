import { Component, ComponentFactoryResolver, ElementRef, EventEmitter, forwardRef, Inject, Injector, QueryList, ViewChild, ViewChildren, ViewContainerRef, ViewEncapsulation } from '@angular/core';
import { MatTabGroup } from '@angular/material';
import { Router } from '@angular/router';
import { BehaviorSubject, Subject, Subscription } from 'rxjs';
import { DialogService } from '../../../services/dialog.service';
import { Codes } from '../../../util/codes';
import { Util } from '../../../util/util';
import { OFormLayoutManagerContentDirective } from '../directives/o-form-layout-manager-content.directive';
import { OFormLayoutManagerComponent } from '../o-form-layout-manager.component';
export var DEFAULT_INPUTS_O_FORM_LAYOUT_TABGROUP = [
    'title',
    'options'
];
export var DEFAULT_OUTPUTS_O_FORM_LAYOUT_TABGROUP = [
    'onMainTabSelected',
    'onSelectedTabChange',
    'onCloseTab'
];
var OFormLayoutTabGroupComponent = (function () {
    function OFormLayoutTabGroupComponent(injector, componentFactoryResolver, location, elementRef, formLayoutManager) {
        this.injector = injector;
        this.componentFactoryResolver = componentFactoryResolver;
        this.location = location;
        this.elementRef = elementRef;
        this.formLayoutManager = formLayoutManager;
        this.data = [];
        this.showLoading = new BehaviorSubject(false);
        this.subscriptions = new Subscription();
        this.onMainTabSelected = new EventEmitter();
        this.onSelectedTabChange = new EventEmitter();
        this.onCloseTab = new EventEmitter();
        this.updateTabComponentsState = new Subject();
        this.tabsModificationsCache = [];
        this.dialogService = injector.get(DialogService);
        this.router = this.injector.get(Router);
    }
    Object.defineProperty(OFormLayoutTabGroupComponent.prototype, "state", {
        get: function () {
            return this.formLayoutManager.state;
        },
        enumerable: true,
        configurable: true
    });
    OFormLayoutTabGroupComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.initializeComponentState();
        this.subscriptions.add(this.tabsDirectives.changes.subscribe(function (changes) {
            if (_this.tabsDirectives.length) {
                var tabItem = _this.tabsDirectives.last;
                var tabData = _this.data[tabItem.index];
                if (tabData && !tabData.rendered) {
                    _this.createTabComponent(tabData, tabItem);
                }
            }
        }));
    };
    OFormLayoutTabGroupComponent.prototype.ngOnDestroy = function () {
        if (this.subscriptions) {
            this.subscriptions.unsubscribe();
        }
    };
    Object.defineProperty(OFormLayoutTabGroupComponent.prototype, "mainTabTitle", {
        get: function () {
            return (this.options.title || this.title || 'LAYOUT_MANANGER.MAIN_TAB_LABEL');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OFormLayoutTabGroupComponent.prototype, "disableAnimation", {
        get: function () {
            return this.options && this.options.disableAnimation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OFormLayoutTabGroupComponent.prototype, "headerPosition", {
        get: function () {
            var headerPosition;
            if (this.options && this.options.headerPosition) {
                headerPosition = this.options.headerPosition;
            }
            return headerPosition;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OFormLayoutTabGroupComponent.prototype, "color", {
        get: function () {
            var color;
            if (this.options && this.options.color) {
                color = this.options.color;
            }
            return color;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OFormLayoutTabGroupComponent.prototype, "backgroundColor", {
        get: function () {
            var backgroundColor;
            if (this.options && this.options.backgroundColor) {
                backgroundColor = this.options.backgroundColor;
            }
            return backgroundColor;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OFormLayoutTabGroupComponent.prototype, "templateMatTabLabel", {
        get: function () {
            var templateMatTabLabel;
            if (this.options && this.options.templateMatTabLabel) {
                templateMatTabLabel = this.options.templateMatTabLabel;
            }
            return templateMatTabLabel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OFormLayoutTabGroupComponent.prototype, "icon", {
        get: function () {
            var icon;
            if (this.options && this.options.icon) {
                icon = this.options.icon;
            }
            return icon;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OFormLayoutTabGroupComponent.prototype, "isIconPositionLeft", {
        get: function () {
            return this.options && this.options.iconPosition === 'left';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OFormLayoutTabGroupComponent.prototype, "maxTabs", {
        get: function () {
            var maxTabs;
            if (this.options && this.options.maxTabs) {
                maxTabs = this.options.maxTabs;
            }
            return maxTabs;
        },
        enumerable: true,
        configurable: true
    });
    OFormLayoutTabGroupComponent.prototype.addTab = function (compData) {
        var addNewComp = true;
        if (compData.insertionMode) {
            var alreadyExistingInsertionTab = Util.isDefined(this.data.find(function (item) { return item.insertionMode; }));
            addNewComp = !alreadyExistingInsertionTab;
        }
        var newCompParams = compData.params;
        if (addNewComp) {
            this.data.forEach(function (comp) {
                var currParams = comp.params || {};
                var someDiffParams = true;
                if (Object.keys(currParams).length > 0) {
                    someDiffParams = Object.keys(currParams).some(function (key) { return currParams[key] != newCompParams[key]; });
                }
                addNewComp = addNewComp && someDiffParams;
            });
        }
        if (addNewComp) {
            this.data.push(compData);
        }
        else {
            this.reloadTab(compData);
        }
    };
    OFormLayoutTabGroupComponent.prototype.reloadTab = function (compData) {
        var compIndex = -1;
        var compParams = compData.params;
        this.data.forEach(function (comp, i) {
            var currParams = comp.params || {};
            var sameParams = Util.isEquivalent(currParams, compParams);
            if (sameParams) {
                compIndex = i;
            }
        });
        if (compIndex >= 0) {
            this.tabGroup.selectedIndex = (compIndex + 1);
        }
    };
    OFormLayoutTabGroupComponent.prototype.onTabSelectChange = function (arg) {
        if (this.formLayoutManager && this.tabGroup.selectedIndex === 0) {
            this.formLayoutManager.updateIfNeeded();
            this.onMainTabSelected.emit();
        }
        var isLoading = this.showLoading.getValue();
        if (isLoading && Util.isDefined(this.state) && Util.isDefined(this.state.tabsData) &&
            arg.index === this.state.tabsData.length - 1) {
            this.tabGroup.selectedIndex = this.state.selectedIndex;
            this.showLoading.next(false);
        }
        if (!isLoading) {
            this.onSelectedTabChange.emit({
                data: this.data[this.tabGroup.selectedIndex - 1],
                index: this.tabGroup.selectedIndex,
                previousIndex: this.previousSelectedIndex
            });
        }
        this.previousSelectedIndex = this.tabGroup.selectedIndex;
    };
    OFormLayoutTabGroupComponent.prototype.closeTab = function (index, options) {
        var _this = this;
        if (!this.formLayoutManager) {
            return;
        }
        var tabData = this.data[index];
        var onCloseTabAccepted = new EventEmitter();
        this.subscriptions.add(onCloseTabAccepted.asObservable().subscribe(function (res) {
            if (res) {
                _this.data.splice(index, 1);
                _this.onCloseTab.emit({
                    data: tabData,
                    index: index + 1
                });
            }
        }));
        if (Util.isDefined(tabData) && this.formLayoutManager.hasToConfirmExit(tabData, options)) {
            this.dialogService.confirm('CONFIRM', 'MESSAGES.FORM_CHANGES_WILL_BE_LOST').then(function (res) {
                onCloseTabAccepted.emit(res);
            });
        }
        else {
            onCloseTabAccepted.emit(true);
        }
    };
    OFormLayoutTabGroupComponent.prototype.createTabComponent = function (tabData, content) {
        var component = tabData.component;
        var componentFactory = this.componentFactoryResolver.resolveComponentFactory(component);
        var viewContainerRef = content.viewContainerRef;
        viewContainerRef.clear();
        viewContainerRef.createComponent(componentFactory);
        tabData.rendered = true;
    };
    OFormLayoutTabGroupComponent.prototype.getFormCacheData = function () {
        return this.data.length > 0 ? this.data[this.data.length - 1] : undefined;
    };
    OFormLayoutTabGroupComponent.prototype.getRouteOfActiveItem = function () {
        var route = [];
        if (this.data.length && this.tabGroup.selectedIndex > 0) {
            var urlSegments = this.data[this.tabGroup.selectedIndex - 1].urlSegments || [];
            urlSegments.forEach(function (segment) {
                route.push(segment.path);
            });
            return route;
        }
        return route;
    };
    OFormLayoutTabGroupComponent.prototype.setModifiedState = function (formAttr, modified, confirmExit) {
        if (this.tabGroup.selectedIndex > 0) {
            var selectedData = this.data[this.tabGroup.selectedIndex - 1];
            if (Util.isDefined(selectedData)) {
                selectedData.innerFormsInfo[formAttr] = {
                    modified: modified,
                    confirmOnExit: confirmExit
                };
            }
        }
    };
    OFormLayoutTabGroupComponent.prototype.updateNavigation = function (data, keysValues, insertionMode) {
        var index;
        if (insertionMode) {
            index = this.data.findIndex(function (item) { return item.insertionMode !== false; });
        }
        else {
            index = this.data.findIndex(function (item) { return Object.keys(keysValues).every(function (key) { return keysValues[key] == item.params[key]; }); });
        }
        if (index >= 0) {
            var label = this.formLayoutManager.getLabelFromData(data);
            this.tabGroup.selectedIndex = (index + 1);
            label = label.length ? label : this.formLayoutManager.getLabelFromUrlParams(this.data[index].params);
            this.data[index].label = label;
            this.data[index].insertionMode = insertionMode;
            if (Object.keys(data).length > 0) {
                this.data[index].formDataByLabelColumns = this.formLayoutManager.getFormDataFromLabelColumns(data);
            }
        }
    };
    OFormLayoutTabGroupComponent.prototype.updateActiveData = function (data) {
        var index = this.tabGroup.selectedIndex - 1;
        if (Util.isDefined(this.data[index])) {
            this.data[index] = Object.assign(this.data[index], data);
        }
    };
    OFormLayoutTabGroupComponent.prototype.getDataToStore = function () {
        var tabsData = this.data
            .filter(function (data) { return !data.insertionMode; })
            .map(function (data) { return ({
            params: data.params,
            queryParams: data.queryParams,
            urlSegments: data.urlSegments,
            url: data.url,
            label: data.label,
            insertionMode: data.insertionMode
        }); });
        return {
            tabsData: tabsData,
            selectedIndex: this.tabGroup.selectedIndex
        };
    };
    OFormLayoutTabGroupComponent.prototype.initializeComponentState = function () {
        var _this = this;
        if (!Util.isDefined(this.state) || !Util.isDefined(this.state.tabsData)) {
            return;
        }
        this.state.tabsData = this.state.tabsData.filter(function (tabData) { return !tabData.insertionMode; });
        if (this.state.tabsData.length >= 1 && (this.state.tabsData[0].url || '').length > 0) {
            this.showLoading.next(true);
            var extras = {};
            extras[Codes.QUERY_PARAMS] = this.state.tabsData[0].queryParams;
            extras[Codes.QUERY_PARAMS][Codes.INSERTION_MODE] = "" + this.state.tabsData[0].insertionMode;
            if (this.formLayoutManager) {
                this.formLayoutManager.setAsActiveFormLayoutManager();
            }
            this.router.navigate([this.state.tabsData[0].url], extras).then(function () {
                if (_this.data[0] && _this.data[0].component && _this.state.tabsData.length > 1) {
                    setTimeout(function () {
                        _this.createTabsFromState();
                    }, 0);
                }
                else {
                    _this.showLoading.next(false);
                }
            });
        }
    };
    OFormLayoutTabGroupComponent.prototype.createTabsFromState = function () {
        var _this = this;
        var tabComponent = this.data[0].component;
        var stateTabsData = this.state.tabsData.slice(1);
        if (stateTabsData.length > 0) {
            stateTabsData.forEach(function (tabData) {
                setTimeout(function () {
                    var newDetailData = _this.createDetailComponent(tabComponent, tabData);
                    _this.data.push(newDetailData);
                }, 0);
            });
        }
        else {
            this.showLoading.next(false);
        }
    };
    OFormLayoutTabGroupComponent.prototype.createDetailComponent = function (component, paramsObj) {
        var newDetailComp = {
            params: paramsObj.params,
            queryParams: paramsObj.queryParams,
            urlSegments: paramsObj.urlSegments,
            component: component,
            url: paramsObj.url,
            id: Util.randomNumber().toString(),
            label: paramsObj.label,
            innerFormsInfo: {}
        };
        return newDetailComp;
    };
    OFormLayoutTabGroupComponent.prototype.getParams = function () {
        return Util.isDefined(this.data[0]) ? this.data[0].params : undefined;
    };
    OFormLayoutTabGroupComponent.prototype.isMainComponent = function (comp) {
        var firstTab = this.elementRef.nativeElement.getElementsByTagName('mat-tab-body')[0];
        return firstTab && comp.elementRef && firstTab.contains(comp.elementRef.nativeElement);
    };
    OFormLayoutTabGroupComponent.prototype.openDetail = function (detail) {
        this.addTab(detail);
    };
    OFormLayoutTabGroupComponent.prototype.closeDetail = function (options) {
        this.closeTab(this.tabGroup.selectedIndex - 1, options);
    };
    OFormLayoutTabGroupComponent.prototype.canAddDetailComponent = function () {
        var maxReached = (this.data.length + 1) >= this.maxTabs;
        if (maxReached) {
            this.dialogService.info('INFO', 'LAYOUT_MANANGER.MAX_TABS_NUMBER_REACHED');
        }
        return !maxReached;
    };
    OFormLayoutTabGroupComponent.prototype.isTabDataModified = function (tabData) {
        return Object.keys(tabData.innerFormsInfo).some(function (formAttr) { return tabData.innerFormsInfo[formAttr].modified; });
    };
    OFormLayoutTabGroupComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-form-layout-tabgroup',
                    inputs: DEFAULT_INPUTS_O_FORM_LAYOUT_TABGROUP,
                    outputs: DEFAULT_OUTPUTS_O_FORM_LAYOUT_TABGROUP,
                    template: "<mat-tab-group #tabGroup oTabGroup=\"ontimize\" fxFill (selectedTabChange)=\"onTabSelectChange($event)\" [color]=\"color\"\n  [backgroundColor]=\"backgroundColor\" [headerPosition]=\"headerPosition\" [@.disabled]=\"disableAnimation\">\n  <mat-tab label=\"{{ mainTabTitle | oTranslate }}\">\n    <ng-content></ng-content>\n  </mat-tab>\n  <mat-tab *ngFor=\"let tabData of data; let i = index\">\n    <ng-template mat-tab-label>\n      <span class=\"tab-label\" [class.modified]=\"isTabDataModified(tabData)\">\n        <ng-container *ngIf=\"icon && isIconPositionLeft\">\n          <mat-icon>{{ icon }}</mat-icon>\n        </ng-container>\n        <ng-container *ngIf=\"templateMatTabLabel && tabData.formDataByLabelColumns && !tabData.insertionMode \">\n          <ng-container *ngTemplateOutlet=\"templateMatTabLabel;context:{$implicit:tabData.formDataByLabelColumns}\">\n          </ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"!templateMatTabLabel || tabData.insertionMode\">\n          {{ tabData.label }}\n        </ng-container>\n        <ng-container *ngIf=\"icon && !isIconPositionLeft\">\n          <mat-icon>{{ icon }}</mat-icon>\n        </ng-container>\n        <span class=\"gradient-layer\"></span>\n      </span>\n      <mat-icon (click)=\"closeTab(i)\" svgIcon=\"ontimize:close\"></mat-icon>\n    </ng-template>\n    <ng-template o-form-layout-manager-content [index]=\"i\"></ng-template>\n  </mat-tab>\n</mat-tab-group>\n<div *ngIf=\"showLoading | async\" class=\"spinner-container\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n  <mat-progress-spinner mode=\"indeterminate\" strokeWidth=\"3\"></mat-progress-spinner>\n</div>",
                    encapsulation: ViewEncapsulation.None,
                    host: {
                        '[class.o-form-layout-tabgroup]': 'true'
                    },
                    styles: [".o-form-layout-tabgroup .mat-tab-group .mat-tab-label span.tab-label{width:100%;max-width:120px;text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.o-form-layout-tabgroup .mat-tab-group .mat-tab-label span.tab-label.modified{font-weight:700}.o-form-layout-tabgroup .mat-tab-group .mat-tab-label span.tab-label.modified:after{content:'*'}.o-form-layout-tabgroup .mat-tab-group .mat-tab-label .mat-icon{height:14px;width:14px;font-size:8px;margin-left:6px;vertical-align:middle}.o-form-layout-tabgroup .mat-tab-group .mat-tab-body-wrapper{flex:1 1 auto}.o-form-layout-tabgroup .mat-tab-group o-form-toolbar{padding:0;top:0!important}.o-form-layout-tabgroup .mat-tab-group o-form-toolbar .mat-toolbar{box-shadow:none;border-radius:0}.o-form-layout-tabgroup .spinner-container{position:absolute;top:0;left:0;right:0;bottom:0;z-index:500;visibility:visible;opacity:1;transition:opacity .25s linear}"]
                }] }
    ];
    OFormLayoutTabGroupComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: ComponentFactoryResolver },
        { type: ViewContainerRef },
        { type: ElementRef },
        { type: OFormLayoutManagerComponent, decorators: [{ type: Inject, args: [forwardRef(function () { return OFormLayoutManagerComponent; }),] }] }
    ]; };
    OFormLayoutTabGroupComponent.propDecorators = {
        tabGroup: [{ type: ViewChild, args: ['tabGroup', { static: false },] }],
        tabsDirectives: [{ type: ViewChildren, args: [OFormLayoutManagerContentDirective,] }]
    };
    return OFormLayoutTabGroupComponent;
}());
export { OFormLayoutTabGroupComponent };
//# sourceMappingURL=data:application/json;base64,