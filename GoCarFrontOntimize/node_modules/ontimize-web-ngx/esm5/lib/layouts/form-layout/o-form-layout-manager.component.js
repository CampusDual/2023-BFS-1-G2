import * as tslib_1 from "tslib";
import { Component, ElementRef, EventEmitter, HostListener, Injector, Optional, SkipSelf, ViewChild } from '@angular/core';
import { MatDialog } from '@angular/material';
import { ActivatedRoute, Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { InputConverter } from '../../decorators/input-converter';
import { ComponentStateServiceProvider, O_COMPONENT_STATE_SERVICE } from '../../services/factories';
import { LocalStorageService } from '../../services/local-storage.service';
import { NavigationService } from '../../services/navigation.service';
import { OFormLayoutManagerService } from '../../services/o-form-layout-manager.service';
import { AbstractComponentStateService } from '../../services/state/o-component-state.service';
import { OFormLayoutManagerComponentStateService } from '../../services/state/o-form-layout-manager-component-state.service';
import { OTranslateService } from '../../services/translate/o-translate.service';
import { Codes } from '../../util/codes';
import { Util } from '../../util/util';
import { OFormLayoutDialogComponent } from './dialog/o-form-layout-dialog.component';
import { CanActivateFormLayoutChildGuard } from './guards/o-form-layout-can-activate-child.guard';
export var DEFAULT_INPUTS_O_FORM_LAYOUT_MANAGER = [
    'oattr: attr',
    'mode',
    'storeState: store-state',
    'title',
    'labelColumns: label-columns',
    'separator',
    'titleDataOrigin: title-data-origin',
    'dialogWidth: dialog-width',
    'dialogMinWidth: dialog-min-width',
    'dialogMaxWidth: dialog-max-width',
    'dialogHeight: dialog-height',
    'dialogMinHeight: dialog-min-height',
    'dialogMaxHeight dialog-max-height',
    'dialogClass: dialog-class'
];
export var DEFAULT_OUTPUTS_O_FORM_LAYOUT_MANAGER = [
    'onMainTabSelected',
    'onSelectedTabChange',
    'onCloseTab'
];
var OFormLayoutManagerComponent = (function () {
    function OFormLayoutManagerComponent(injector, router, actRoute, dialog, elRef, parentFormLayoutManager) {
        var _this = this;
        this.injector = injector;
        this.router = router;
        this.actRoute = actRoute;
        this.dialog = dialog;
        this.elRef = elRef;
        this.parentFormLayoutManager = parentFormLayoutManager;
        this.OFormLayoutManagerComponent = OFormLayoutManagerComponent;
        this._mode = OFormLayoutManagerComponent.DIALOG_MODE;
        this._separator = ' ';
        this.storeState = true;
        this.dialogClass = '';
        this.onMainTabSelected = new EventEmitter();
        this.onSelectedTabChange = new EventEmitter();
        this.onCloseTab = new EventEmitter();
        this._labelColsArray = [];
        this._tabGroupOptions = {};
        this._dialogOptions = {};
        this._splitPaneOptions = {};
        this.addingGuard = false;
        this._markForUpdate = false;
        this.onTriggerUpdate = new EventEmitter();
        this.subscription = new Subscription();
        this.oFormLayoutManagerService = this.injector.get(OFormLayoutManagerService);
        this.localStorageService = this.injector.get(LocalStorageService);
        this.translateService = this.injector.get(OTranslateService);
        this.navigationService = this.injector.get(NavigationService);
        this.componentStateService = this.injector.get(AbstractComponentStateService);
        if (this.storeState) {
            this.subscription.add(this.localStorageService.onRouteChange.subscribe(function (res) {
                _this.updateStateStorage();
            }));
        }
    }
    Object.defineProperty(OFormLayoutManagerComponent.prototype, "mode", {
        get: function () {
            return this._mode;
        },
        set: function (value) {
            var availableModeValues = [OFormLayoutManagerComponent.DIALOG_MODE, OFormLayoutManagerComponent.TAB_MODE, OFormLayoutManagerComponent.SPLIT_PANE_MODE];
            this._mode = (value || '').toLowerCase();
            if (availableModeValues.indexOf(this._mode) === -1) {
                this._mode = OFormLayoutManagerComponent.DIALOG_MODE;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OFormLayoutManagerComponent.prototype, "separator", {
        get: function () {
            return this._separator;
        },
        set: function (value) {
            this._separator = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OFormLayoutManagerComponent.prototype, "labelColumns", {
        get: function () {
            return this._labelColumns;
        },
        set: function (value) {
            this._labelColumns = value;
            this._labelColsArray = Util.parseArray(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OFormLayoutManagerComponent.prototype, "labelColsArray", {
        get: function () {
            return this._labelColsArray;
        },
        set: function (value) {
            this._labelColsArray = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OFormLayoutManagerComponent.prototype, "tabGroupOptions", {
        get: function () {
            return this._tabGroupOptions;
        },
        enumerable: true,
        configurable: true
    });
    OFormLayoutManagerComponent.prototype.addTabGroupOptions = function (value) {
        Object.assign(this._tabGroupOptions, value);
        if (value.hasOwnProperty('labelColumns')) {
            this.labelColsArray = Util.parseArray(value['labelColumns']);
        }
        if (value.hasOwnProperty('separator')) {
            this.separator = value['separator'];
        }
    };
    Object.defineProperty(OFormLayoutManagerComponent.prototype, "dialogOptions", {
        get: function () {
            return this._dialogOptions;
        },
        enumerable: true,
        configurable: true
    });
    OFormLayoutManagerComponent.prototype.addDialogOptions = function (value) {
        Object.assign(this._dialogOptions, value);
        if (value.hasOwnProperty('labelColumns')) {
            this.labelColsArray = Util.parseArray(value['labelColumns']);
        }
        if (value.hasOwnProperty('separator')) {
            this.separator = value['separator'];
        }
    };
    Object.defineProperty(OFormLayoutManagerComponent.prototype, "splitPaneOptions", {
        get: function () {
            return this._splitPaneOptions;
        },
        enumerable: true,
        configurable: true
    });
    OFormLayoutManagerComponent.prototype.addSplitPaneOptions = function (value) {
        Object.assign(this._splitPaneOptions, value);
    };
    Object.defineProperty(OFormLayoutManagerComponent.prototype, "state", {
        get: function () {
            return this.componentStateService.state;
        },
        enumerable: true,
        configurable: true
    });
    OFormLayoutManagerComponent.prototype.ngOnInit = function () {
        this.addActivateChildGuard();
        if (!Util.isDefined(this.oattr)) {
            this.oattr = (this.title || '') + this.mode;
            console.warn('o-form-layout-manager must have an unique attr');
        }
        this.oFormLayoutManagerService.registerFormLayoutManager(this);
        if (this.storeState) {
            this.componentStateService.initialize(this);
        }
    };
    OFormLayoutManagerComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        setTimeout(function () {
            if (_this.elRef) {
                _this.elRef.nativeElement.removeAttribute('title');
            }
        });
    };
    OFormLayoutManagerComponent.prototype.ngOnDestroy = function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
        this.oFormLayoutManagerService.removeFormLayoutManager(this);
        this.destroyActivateChildGuard();
    };
    OFormLayoutManagerComponent.prototype.getAttribute = function () {
        return this.oattr;
    };
    OFormLayoutManagerComponent.prototype.getComponentKey = function () {
        return 'OFormLayoutManagerComponent_' + this.oattr;
    };
    OFormLayoutManagerComponent.prototype.getRouteKey = function () {
        var route = this.router.url;
        this.actRoute.params.subscribe(function (params) {
            Object.keys(params).forEach(function (key) {
                route = route.replace(params[key], key);
            });
        });
        return route;
    };
    OFormLayoutManagerComponent.prototype.getDataToStore = function () {
        var compRef = this.getLayoutModeComponent();
        return Util.isDefined(compRef) ? compRef.getDataToStore() : {};
    };
    OFormLayoutManagerComponent.prototype.beforeunloadHandler = function () {
        this.updateStateStorage();
    };
    OFormLayoutManagerComponent.prototype.getLabelFromUrlParams = function (urlParams) {
        var _this = this;
        var label = '';
        var keys = Object.keys(urlParams);
        keys.forEach(function (param, i) {
            label += urlParams[param] + ((i < keys.length - 1) ? _this.separator : '');
        });
        return label;
    };
    OFormLayoutManagerComponent.prototype.getFormDataFromLabelColumns = function (data) {
        var _this = this;
        var formData = {};
        Object.keys(data).forEach(function (x) {
            if (_this.labelColsArray.indexOf(x) > -1) {
                formData[x] = data[x];
            }
        });
        return formData;
    };
    OFormLayoutManagerComponent.prototype.addActivateChildGuard = function () {
        var routeConfig = this.getParentActRouteRoute();
        if (Util.isDefined(routeConfig)) {
            var canActivateChildArray = (routeConfig.canActivateChild || []);
            var previouslyAdded = false;
            for (var i = 0, len = canActivateChildArray.length; i < len; i++) {
                var guardChild = this.injector.get(CanActivateFormLayoutChildGuard);
                previouslyAdded = (canActivateChildArray[i] === guardChild.constructor);
                if (previouslyAdded) {
                    break;
                }
            }
            if (!previouslyAdded) {
                this.addingGuard = true;
                canActivateChildArray.push(CanActivateFormLayoutChildGuard);
                routeConfig.canActivateChild = canActivateChildArray;
            }
        }
    };
    OFormLayoutManagerComponent.prototype.destroyActivateChildGuard = function () {
        if (!this.addingGuard) {
            return;
        }
        this.oFormLayoutManagerService.activeFormLayoutManager = undefined;
        var routeConfig = this.getParentActRouteRoute();
        if (Util.isDefined(routeConfig)) {
            for (var i = (routeConfig.canActivateChild || []).length - 1; i >= 0; i--) {
                var guardChild = this.injector.get(CanActivateFormLayoutChildGuard);
                if (routeConfig.canActivateChild[i] === guardChild.constructor) {
                    routeConfig.canActivateChild.splice(i, 1);
                    break;
                }
            }
        }
    };
    OFormLayoutManagerComponent.prototype.isDialogMode = function () {
        return this.mode === OFormLayoutManagerComponent.DIALOG_MODE;
    };
    OFormLayoutManagerComponent.prototype.isTabMode = function () {
        return this.mode === OFormLayoutManagerComponent.TAB_MODE;
    };
    OFormLayoutManagerComponent.prototype.isSplitPaneMode = function () {
        return this.mode === OFormLayoutManagerComponent.SPLIT_PANE_MODE;
    };
    OFormLayoutManagerComponent.prototype.addDetailComponent = function (childRoute, url) {
        var newDetailComp = {
            params: childRoute.params,
            queryParams: childRoute.queryParams,
            urlSegments: childRoute.url,
            component: childRoute.routeConfig.component,
            url: url,
            id: Util.randomNumber().toString(),
            label: '',
            innerFormsInfo: {},
            insertionMode: childRoute.queryParams[Codes.INSERTION_MODE] === 'true'
        };
        if (this.isDialogMode()) {
            this.openFormLayoutDialog(newDetailComp);
        }
        else {
            var compRef = this.getLayoutModeComponent();
            if (Util.isDefined(compRef)) {
                compRef.openDetail(newDetailComp);
            }
        }
    };
    OFormLayoutManagerComponent.prototype.closeDetail = function (options) {
        var compRef = this.getLayoutModeComponent();
        if (Util.isDefined(compRef)) {
            compRef.closeDetail(options);
        }
    };
    OFormLayoutManagerComponent.prototype.openFormLayoutDialog = function (detailComp) {
        var _this = this;
        var cssclass = ['o-form-layout-dialog-overlay'];
        if (this.dialogClass) {
            cssclass.push(this.dialogClass);
        }
        var dialogOptions = (this.dialogOptions || {});
        var dialogConfig = {
            data: {
                data: detailComp,
                layoutManagerComponent: this,
                title: dialogOptions.title || this.title,
            },
            width: dialogOptions.width || this.dialogWidth,
            minWidth: dialogOptions.minWidth || this.dialogMinWidth,
            maxWidth: dialogOptions.maxWidth || this.dialogMaxWidth,
            height: dialogOptions.height || this.dialogHeight,
            minHeight: dialogOptions.minHeight || this.dialogMinHeight,
            maxHeight: dialogOptions.maxHeight || this.dialogMaxHeight,
            disableClose: dialogOptions.disableClose || true,
            panelClass: dialogOptions.class || cssclass
        };
        if (this.dialogOptions) {
            dialogConfig.closeOnNavigation = this.dialogOptions.closeOnNavigation;
            dialogConfig.backdropClass = this.dialogOptions.backdropClass;
            dialogConfig.position = this.dialogOptions.position;
            dialogConfig.disableClose = this.dialogOptions.disableClose;
        }
        this.dialogRef = this.dialog.open(OFormLayoutDialogComponent, dialogConfig);
        this.dialogRef.afterClosed().subscribe(function () {
            if (_this.markForUpdate) {
                _this.updateIfNeeded();
            }
            else {
                _this.reloadMainComponents();
            }
        });
    };
    OFormLayoutManagerComponent.prototype.getFormCacheData = function () {
        var compRef = this.getLayoutModeComponent();
        return Util.isDefined(compRef) ? compRef.getFormCacheData() : undefined;
    };
    OFormLayoutManagerComponent.prototype.setModifiedState = function (formAttr, modified, confirmExit) {
        var compRef = this.getLayoutModeComponent();
        if (Util.isDefined(compRef)) {
            compRef.setModifiedState(formAttr, modified, confirmExit);
        }
    };
    OFormLayoutManagerComponent.prototype.getLabelFromData = function (data) {
        var _this = this;
        var label = '';
        var isDataDefined = Util.isDefined(data);
        if (isDataDefined && data.hasOwnProperty('new_tab_title')) {
            label = this.translateService.get(data.new_tab_title);
        }
        else if (isDataDefined && this.labelColsArray.length !== 0) {
            this.labelColsArray.forEach(function (col, idx) {
                if (data[col] !== undefined) {
                    label += data[col] + ((idx < _this.labelColsArray.length - 1) ? _this.separator : '');
                }
            });
        }
        return label;
    };
    OFormLayoutManagerComponent.prototype.updateNavigation = function (data, keysValues, insertionMode) {
        var compRef = this.getLayoutModeComponent();
        if (Util.isDefined(compRef)) {
            compRef.updateNavigation(data, keysValues, insertionMode);
        }
    };
    OFormLayoutManagerComponent.prototype.updateActiveData = function (data) {
        var compRef = this.getLayoutModeComponent();
        if (Util.isDefined(compRef)) {
            compRef.updateActiveData(data);
        }
    };
    OFormLayoutManagerComponent.prototype.getRouteOfActiveItem = function () {
        var compRef = this.getLayoutModeComponent();
        return Util.isDefined(compRef) ? compRef.getRouteOfActiveItem() : [];
    };
    OFormLayoutManagerComponent.prototype.isMainComponent = function (comp) {
        if (this.isDialogMode()) {
            return !comp.oFormLayoutDialog;
        }
        var compRef = this.getLayoutModeComponent();
        return Util.isDefined(compRef) && compRef.isMainComponent(comp);
    };
    OFormLayoutManagerComponent.prototype.getRouteForComponent = function (comp) {
        var result = [];
        if (this.parentFormLayoutManager) {
            var parentRoute = this.parentFormLayoutManager.getRouteForComponent(comp);
            if (parentRoute && parentRoute.length > 0) {
                result.push.apply(result, tslib_1.__spread(parentRoute));
            }
        }
        if (!this.isMainComponent(comp)) {
            var activeRoute = this.getRouteOfActiveItem();
            if (activeRoute && activeRoute.length > 0) {
                result.push.apply(result, tslib_1.__spread(activeRoute));
            }
        }
        return result;
    };
    OFormLayoutManagerComponent.prototype.setAsActiveFormLayoutManager = function () {
        this.oFormLayoutManagerService.activeFormLayoutManager = this;
    };
    OFormLayoutManagerComponent.prototype.reloadMainComponents = function () {
        this.onTriggerUpdate.emit();
    };
    OFormLayoutManagerComponent.prototype.allowToUpdateNavigation = function (formAttr) {
        return (this.isTabMode() && Util.isDefined(this.oTabGroup) && Util.isDefined(this.titleDataOrigin)) ?
            this.titleDataOrigin === formAttr :
            true;
    };
    OFormLayoutManagerComponent.prototype.updateStateStorage = function () {
        if (!this.localStorageService || !this.storeState) {
            return;
        }
        var isTabMode = this.isTabMode() && Util.isDefined(this.oTabGroup);
        var isSplitPaneMode = this.isSplitPaneMode() && Util.isDefined(this.oSplitPane);
        if (isTabMode || isSplitPaneMode) {
            this.localStorageService.updateComponentStorage(this, this.getRouteKey());
        }
    };
    OFormLayoutManagerComponent.prototype.getParentActRouteRoute = function () {
        var actRoute = this.actRoute;
        while (actRoute.parent !== undefined && actRoute.parent !== null) {
            if (actRoute.routeConfig.children || actRoute.routeConfig.loadChildren) {
                break;
            }
            actRoute = actRoute.parent;
        }
        return actRoute.routeConfig;
    };
    OFormLayoutManagerComponent.prototype.updateIfNeeded = function () {
        if (this.markForUpdate) {
            this.markForUpdate = false;
            this.onTriggerUpdate.emit();
        }
    };
    OFormLayoutManagerComponent.prototype.getParams = function () {
        var compRef = this.getLayoutModeComponent();
        return Util.isDefined(compRef) ? compRef.getParams() : undefined;
    };
    Object.defineProperty(OFormLayoutManagerComponent.prototype, "markForUpdate", {
        get: function () {
            return this._markForUpdate;
        },
        set: function (arg) {
            this._markForUpdate = arg;
            if (this.isSplitPaneMode()) {
                this.updateIfNeeded();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OFormLayoutManagerComponent.prototype, "ignoreCanDeactivate", {
        get: function () {
            return !this.isSplitPaneMode();
        },
        enumerable: true,
        configurable: true
    });
    OFormLayoutManagerComponent.prototype.getLayoutModeComponent = function () {
        var compRef;
        if (this.isTabMode() && Util.isDefined(this.oTabGroup)) {
            compRef = this.oTabGroup;
        }
        else if (this.isDialogMode() && Util.isDefined(this.dialogRef)) {
            compRef = this.dialogRef.componentInstance;
        }
        else if (this.isSplitPaneMode() && Util.isDefined(this.oSplitPane)) {
            compRef = this.oSplitPane;
        }
        return compRef;
    };
    OFormLayoutManagerComponent.prototype.allowNavigation = function () {
        return !this.isTabMode();
    };
    OFormLayoutManagerComponent.prototype.canAddDetailComponent = function () {
        var compRef = this.getLayoutModeComponent();
        return Util.wrapIntoObservable(Util.isDefined(compRef) ? compRef.canAddDetailComponent() : true);
    };
    OFormLayoutManagerComponent.prototype.hasToConfirmExit = function (data, options) {
        if (Util.isDefined(options) && options.exitWithoutConfirmation) {
            return false;
        }
        var formsAttr = Object.keys(data.innerFormsInfo);
        var result = false;
        if (formsAttr.length > 0) {
            formsAttr.forEach(function (formAttr) {
                if (!result) {
                    var formData = data.innerFormsInfo[formAttr];
                    result = formData.confirmOnExit && formData.modified;
                }
            });
        }
        return result;
    };
    OFormLayoutManagerComponent.DIALOG_MODE = 'dialog';
    OFormLayoutManagerComponent.TAB_MODE = 'tab';
    OFormLayoutManagerComponent.SPLIT_PANE_MODE = 'split-pane';
    OFormLayoutManagerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-form-layout-manager',
                    inputs: DEFAULT_INPUTS_O_FORM_LAYOUT_MANAGER,
                    outputs: DEFAULT_OUTPUTS_O_FORM_LAYOUT_MANAGER,
                    template: "<ng-container [ngSwitch]=\"mode\">\n  <ng-container *ngSwitchCase=\"OFormLayoutManagerComponent.TAB_MODE\">\n    <o-form-layout-tabgroup #tabGroup [title]=\"title\" (onMainTabSelected)=\"onMainTabSelected.emit($event)\"\n      (onSelectedTabChange)=\"onSelectedTabChange.emit($event)\" (onCloseTab)=\"onCloseTab.emit($event)\"\n      [options]=\"tabGroupOptions\">\n      <ng-content *ngTemplateOutlet=\"contentBlock\"></ng-content>\n    </o-form-layout-tabgroup>\n  </ng-container>\n\n  <ng-container *ngSwitchCase=\"OFormLayoutManagerComponent.SPLIT_PANE_MODE\">\n    <o-form-layout-split-pane #splitPane [options]=\"splitPaneOptions\">\n      <ng-content *ngTemplateOutlet=\"contentBlock\"></ng-content>\n    </o-form-layout-split-pane>\n  </ng-container>\n\n  <ng-container *ngSwitchCase=\"OFormLayoutManagerComponent.DIALOG_MODE\">\n    <ng-content *ngTemplateOutlet=\"contentBlock\"></ng-content>\n  </ng-container>\n</ng-container>\n\n\n<ng-template #contentBlock>\n  <ng-content></ng-content>\n</ng-template>",
                    providers: [
                        ComponentStateServiceProvider,
                        { provide: O_COMPONENT_STATE_SERVICE, useClass: OFormLayoutManagerComponentStateService },
                    ],
                    host: {
                        '[class.o-form-layout-manager]': 'true'
                    },
                    styles: [".o-form-layout-manager{height:100%}"]
                }] }
    ];
    OFormLayoutManagerComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: Router },
        { type: ActivatedRoute },
        { type: MatDialog },
        { type: ElementRef },
        { type: OFormLayoutManagerComponent, decorators: [{ type: SkipSelf }, { type: Optional }] }
    ]; };
    OFormLayoutManagerComponent.propDecorators = {
        oTabGroup: [{ type: ViewChild, args: ['tabGroup', { static: false },] }],
        oSplitPane: [{ type: ViewChild, args: ['splitPane', { static: false },] }],
        beforeunloadHandler: [{ type: HostListener, args: ['window:beforeunload', [],] }]
    };
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OFormLayoutManagerComponent.prototype, "storeState", void 0);
    return OFormLayoutManagerComponent;
}());
export { OFormLayoutManagerComponent };
//# sourceMappingURL=data:application/json;base64,