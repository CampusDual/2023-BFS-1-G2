import { Util } from '../util';
import * as lpn from 'google-libphonenumber';
var EMAIL_REGEXP = /^[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?$/;
var DNI_PATTERN = '^(([0-9]{8})([-]?)([a-zA-Z]{1}))$';
var NIE_PATTERN = '^(([x-zX-Z]{1})([-]?)([0-9]{7})([-]?)([a-zA-Z]{1}))$';
var DNI_CHECK = 'TRWAGMYFPDXBNJZSQVHLCKET';
var NUMBERS = '0123456789';
export var TWELVE_HOUR_FORMAT_PATTERN = '^(([0-9]|([01]?[0-9])):([0-9]|([0-5][0-9])) *([AaPp][Mm])*)$';
export var TWENTY_FOUR_HOUR_FORMAT_PATTERN = '^([0-9]|([01]?[0-9]|2[0-3])):[0-9]|([0-5][0-9])$';
var OValidators = (function () {
    function OValidators() {
    }
    OValidators.twelveHourFormatValidator = function (control) {
        var regExp = new RegExp(TWELVE_HOUR_FORMAT_PATTERN);
        if (control.value && typeof control.value === 'string' && !regExp.test(control.value)) {
            return { invalidFormatHour: true };
        }
        return {};
    };
    OValidators.twentyFourHourFormatValidator = function (control) {
        var regExp = new RegExp(TWENTY_FOUR_HOUR_FORMAT_PATTERN);
        if (control.value && typeof control.value === 'string' && !regExp.test(control.value)) {
            return { invalidFormatHour: true };
        }
        return {};
    };
    OValidators.emailValidator = function (control) {
        if (control.value && control.value.length > 0 && !EMAIL_REGEXP.test(control.value)) {
            return { invalidEmailAddress: true };
        }
        return {};
    };
    OValidators.phoneValidator = function (control, countryCode) {
        if (!control || !control.value) {
            return {};
        }
        var phoneNumberUtilInstance = lpn.PhoneNumberUtil.getInstance();
        var error = { validatePhoneNumber: { valid: false } };
        var number;
        var isValidForRegion = false;
        try {
            number = phoneNumberUtilInstance.parse(control.value, countryCode);
            if (number) {
                isValidForRegion = phoneNumberUtilInstance.isValidNumberForRegion(number, countryCode);
            }
        }
        catch (e) {
            return error;
        }
        if (control.value && (!number || !isValidForRegion)) {
            return error;
        }
        return {};
    };
    OValidators.nifValidator = function (control) {
        var newValue = control.value;
        var regExp = new RegExp(DNI_PATTERN + '|' + NIE_PATTERN);
        var valueWithoutDashes = '';
        for (var i in newValue) {
            if (newValue[i] !== '-') {
                valueWithoutDashes = valueWithoutDashes + newValue[i];
            }
        }
        if (valueWithoutDashes.length > 1) {
            var firstChar = valueWithoutDashes.charAt(0);
            if (NUMBERS.indexOf(firstChar) !== -1) {
                var number = valueWithoutDashes.substring(0, valueWithoutDashes.length - 1);
                var pos = parseInt(number, 10) % 23;
                var expectedLetter = DNI_CHECK.substring(pos, pos + 1);
                var letter = valueWithoutDashes.charAt(valueWithoutDashes.length - 1);
                var dniLetterError = (expectedLetter !== letter.toUpperCase());
                if (dniLetterError) {
                    return { invalidNIFLetter: true };
                }
                else {
                    if (!regExp.test(valueWithoutDashes)) {
                        return { invalidNIF: true };
                    }
                }
            }
            else {
                if (!regExp.test(valueWithoutDashes)) {
                    return { invalidNIF: true };
                }
            }
        }
        return undefined;
    };
    OValidators.patternValidator = function (regex, key) {
        if (!Util.isDefined(regex)) {
            console.warn('Regex param must be defined in patternValidator ');
        }
        if (!Util.isDefined(key)) {
            console.warn('Validation key param must be defined in patternValidator ');
        }
        var validator = function (control) {
            if (!Util.isDefined(regex) || !Util.isDefined(key) || !control.value) {
                return undefined;
            }
            var valid = regex.test(control.value);
            var result = {};
            if (valid) {
                result = undefined;
            }
            else {
                result[key] = !valid;
            }
            return result;
        };
        return validator;
    };
    return OValidators;
}());
export { OValidators };
//# sourceMappingURL=data:application/json;base64,