import * as tslib_1 from "tslib";
import { SelectionModel } from '@angular/cdk/collections';
import { EventEmitter, forwardRef, NgZone, ViewChild } from '@angular/core';
import { MatPaginator } from '@angular/material';
import { BehaviorSubject } from 'rxjs';
import { OSearchInputComponent } from '../components/input/search-input/o-search-input.component';
import { BooleanConverter, InputConverter } from '../decorators/input-converter';
import { OFormLayoutDialogComponent } from '../layouts/form-layout/dialog/o-form-layout-dialog.component';
import { OFormLayoutManagerComponent } from '../layouts/form-layout/o-form-layout-manager.component';
import { NavigationService } from '../services/navigation.service';
import { PermissionsService } from '../services/permissions/permissions.service';
import { OTranslateService } from '../services/translate/o-translate.service';
import { ObservableWrapper } from '../util/async';
import { Codes } from '../util/codes';
import { FilterExpressionUtils } from '../util/filter-expression.utils';
import { Util } from '../util/util';
import { AbstractOServiceBaseComponent, DEFAULT_INPUTS_O_SERVICE_BASE_COMPONENT } from './o-service-base-component.class';
export var DEFAULT_INPUTS_O_SERVICE_COMPONENT = tslib_1.__spread(DEFAULT_INPUTS_O_SERVICE_BASE_COMPONENT, [
    '_title: title',
    'ovisible: visible',
    'oenabled: enabled',
    'controls',
    'detailMode: detail-mode',
    'detailFormRoute: detail-form-route',
    'recursiveDetail: recursive-detail',
    'detailButtonInRow: detail-button-in-row',
    'detailButtonInRowIcon: detail-button-in-row-icon',
    'editFormRoute: edit-form-route',
    'recursiveEdit: recursive-edit',
    'editButtonInRow: edit-button-in-row',
    'editButtonInRowIcon: edit-button-in-row-icon',
    'insertButton: insert-button',
    'rowHeight : row-height',
    'insertFormRoute: insert-form-route',
    'recursiveInsert: recursive-insert',
    'filterCaseSensitive: filter-case-sensitive',
    'quickFilter: quick-filter',
    'quickFilterPlaceholder: quick-filter-placeholder',
    'paginationControls: pagination-controls',
    'pageSizeOptions: page-size-options',
    'quickFilterAppearance:quick-filter-appearance'
]);
export var DEFAULT_OUTPUTS_O_SERVICE_COMPONENT = [
    'onClick',
    'onDoubleClick',
    'onDataLoaded',
    'onPaginatedDataLoaded',
    'onSearch'
];
var AbstractOServiceComponent = (function (_super) {
    tslib_1.__extends(AbstractOServiceComponent, _super);
    function AbstractOServiceComponent(injector, elRef, form) {
        var _this = _super.call(this, injector) || this;
        _this.elRef = elRef;
        _this.form = form;
        _this.ovisible = true;
        _this.oenabled = true;
        _this.controls = true;
        _this.detailMode = Codes.DETAIL_MODE_CLICK;
        _this.recursiveDetail = false;
        _this.detailButtonInRow = false;
        _this.detailButtonInRowIcon = Codes.DETAIL_ICON;
        _this.recursiveEdit = false;
        _this.editButtonInRow = false;
        _this.editButtonInRowIcon = Codes.EDIT_ICON;
        _this.paginationControls = true;
        _this._rowHeight = Codes.DEFAULT_ROW_HEIGHT;
        _this.rowHeightSubject = new BehaviorSubject(_this._rowHeight);
        _this.rowHeightObservable = _this.rowHeightSubject.asObservable();
        _this.checkViewPortSubject = new BehaviorSubject(false);
        _this.checkViewPortObservable = _this.checkViewPortSubject.asObservable();
        _this.recursiveInsert = false;
        _this._filterCaseSensitive = false;
        _this._quickFilter = true;
        _this.onClick = new EventEmitter();
        _this.onDoubleClick = new EventEmitter();
        _this.onDataLoaded = new EventEmitter();
        _this.onPaginatedDataLoaded = new EventEmitter();
        _this.onSearch = new EventEmitter();
        _this.selection = new SelectionModel(true, []);
        _this.dataResponseArray = [];
        _this._pageSizeOptions = Codes.PAGE_SIZE_OPTIONS;
        _this.clickDelay = 200;
        _this.clickPrevent = false;
        _this._quickFilterAppearance = 'outline';
        _this._currentPage = 0;
        _this.permissionsService = _this.injector.get(PermissionsService);
        _this.translateService = _this.injector.get(OTranslateService);
        _this.navigationService = _this.injector.get(NavigationService);
        try {
            _this.formLayoutManager = _this.injector.get(OFormLayoutManagerComponent);
        }
        catch (e) {
        }
        try {
            _this.oFormLayoutDialog = _this.injector.get(OFormLayoutDialogComponent);
            _this.formLayoutManager = _this.oFormLayoutDialog.formLayoutManager;
        }
        catch (e) {
        }
        return _this;
    }
    Object.defineProperty(AbstractOServiceComponent.prototype, "title", {
        get: function () {
            if (Util.isDefined(this._title)) {
                return this.translateService.get(this._title);
            }
            return this._title;
        },
        set: function (val) {
            this._title = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractOServiceComponent.prototype, "pageSizeOptions", {
        get: function () {
            return this._pageSizeOptions;
        },
        set: function (val) {
            if (!(val instanceof Array)) {
                val = Util.parseArray(String(val)).map(function (a) { return parseInt(a, 10); });
            }
            this._pageSizeOptions = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractOServiceComponent.prototype, "rowHeight", {
        get: function () {
            return this._rowHeight;
        },
        set: function (value) {
            this._rowHeight = value ? value.toLowerCase() : value;
            if (!Codes.isValidRowHeight(this._rowHeight)) {
                this._rowHeight = Codes.DEFAULT_ROW_HEIGHT;
            }
            this.rowHeightSubject.next(this._rowHeight);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractOServiceComponent.prototype, "filterCaseSensitive", {
        get: function () {
            return this._filterCaseSensitive;
        },
        set: function (value) {
            this._filterCaseSensitive = BooleanConverter(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractOServiceComponent.prototype, "quickFilter", {
        get: function () {
            return this._quickFilter;
        },
        set: function (val) {
            var _this = this;
            val = Util.parseBoolean(String(val));
            this._quickFilter = val;
            if (val) {
                setTimeout(function () { return _this.registerQuickFilter(_this.searchInputComponent); }, 0);
            }
        },
        enumerable: true,
        configurable: true
    });
    AbstractOServiceComponent.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        if (this.detailButtonInRow || this.editButtonInRow) {
            this.detailMode = Codes.DETAIL_MODE_NONE;
        }
    };
    AbstractOServiceComponent.prototype.afterViewInit = function () {
        var _this = this;
        this.registerFormLayoutManagerState();
        _super.prototype.afterViewInit.call(this);
        if (this.elRef) {
            this.elRef.nativeElement.removeAttribute('title');
        }
        if (this.formLayoutManager && this.formLayoutManager.isMainComponent(this)) {
            this.onTriggerUpdateSubscription = this.formLayoutManager.onTriggerUpdate.subscribe(function () {
                _this.reloadData();
            });
        }
    };
    AbstractOServiceComponent.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
        if (this.onTriggerUpdateSubscription) {
            this.onTriggerUpdateSubscription.unsubscribe();
        }
        if (this.tabsSubscriptions) {
            this.tabsSubscriptions.unsubscribe();
        }
        if (this.quickFilterSubscription) {
            this.quickFilterSubscription.unsubscribe();
        }
    };
    AbstractOServiceComponent.prototype.isVisible = function () {
        return this.ovisible;
    };
    AbstractOServiceComponent.prototype.hasControls = function () {
        return this.controls;
    };
    AbstractOServiceComponent.prototype.hasTitle = function () {
        return this.title !== undefined;
    };
    AbstractOServiceComponent.prototype.getSelectedItems = function () {
        return this.selection.selected;
    };
    AbstractOServiceComponent.prototype.clearSelection = function () {
        this.selection.clear();
    };
    AbstractOServiceComponent.prototype.setSelected = function (item) {
        if (Util.isDefined(item)) {
            this.selection.toggle(item);
        }
    };
    AbstractOServiceComponent.prototype.navigateToDetail = function (route, qParams, relativeTo) {
        var extras = {
            relativeTo: relativeTo
        };
        if (this.formLayoutManager && this.formLayoutManager.isMainComponent(this)) {
            qParams[Codes.IGNORE_CAN_DEACTIVATE] = this.formLayoutManager.ignoreCanDeactivate;
            this.formLayoutManager.setAsActiveFormLayoutManager();
        }
        extras[Codes.QUERY_PARAMS] = qParams;
        this.router.navigate(route, extras);
    };
    AbstractOServiceComponent.prototype.insertDetail = function () {
        if (this.oFormLayoutDialog) {
            console.warn('Navigation is not available yet in a form layout manager with mode="dialog"');
            return;
        }
        var route = this.getInsertRoute();
        this.addFormLayoutManagerRoute(route);
        if (route.length > 0) {
            var relativeTo = this.recursiveInsert ? this.actRoute.parent : this.actRoute;
            var qParams = {};
            if (this.formLayoutManager && this.formLayoutManager.isTabMode()) {
                qParams[Codes.INSERTION_MODE] = 'true';
            }
            this.navigateToDetail(route, qParams, relativeTo);
        }
    };
    AbstractOServiceComponent.prototype.viewDetail = function (item) {
        var _this = this;
        if (this.oFormLayoutDialog) {
            console.warn('Navigation is not available yet in a form layout manager with mode="dialog"');
            return;
        }
        var route = this.getItemModeRoute(item, 'detailFormRoute');
        this.addFormLayoutManagerRoute(route);
        if (route.length > 0) {
            var qParams_1 = Codes.getIsDetailObject();
            var relativeTo_1 = this.recursiveDetail ? this.actRoute.parent : this.actRoute;
            var zone = this.injector.get(NgZone);
            zone.run(function () {
                return _this.navigateToDetail(route, qParams_1, relativeTo_1);
            });
        }
    };
    AbstractOServiceComponent.prototype.editDetail = function (item) {
        var _this = this;
        if (this.oFormLayoutDialog) {
            console.warn('Navigation is not available yet in a form layout manager with mode="dialog"');
            return;
        }
        var route = this.getItemModeRoute(item, 'editFormRoute');
        this.addFormLayoutManagerRoute(route);
        if (route.length > 0) {
            var qParams_2 = Codes.getIsDetailObject();
            var relativeTo_2 = this.recursiveEdit ? this.actRoute.parent : this.actRoute;
            var zone = this.injector.get(NgZone);
            zone.run(function () {
                return _this.navigateToDetail(route, qParams_2, relativeTo_2);
            });
        }
    };
    AbstractOServiceComponent.prototype.addFormLayoutManagerRoute = function (routeArr) {
        if (this.formLayoutManager && routeArr.length > 0) {
            var compRoute = this.formLayoutManager.getRouteForComponent(this);
            if (compRoute && compRoute.length > 0) {
                routeArr.unshift.apply(routeArr, tslib_1.__spread(compRoute));
            }
        }
    };
    AbstractOServiceComponent.prototype.getEncodedParentKeys = function () {
        var encoded;
        if (Object.keys(this._pKeysEquiv).length > 0) {
            var pKeys = this.getParentKeysValues();
            if (Object.keys(pKeys).length > 0) {
                encoded = Util.encodeParentKeys(pKeys);
            }
        }
        return encoded;
    };
    AbstractOServiceComponent.prototype.getInsertRoute = function () {
        var route = [];
        if (Util.isDefined(this.detailFormRoute)) {
            route.push(this.detailFormRoute);
        }
        var insertRoute = Util.isDefined(this.insertFormRoute) ? this.insertFormRoute : Codes.DEFAULT_INSERT_ROUTE;
        route.push(insertRoute);
        var encodedParentKeys = this.getEncodedParentKeys();
        if (Util.isDefined(encodedParentKeys)) {
            var routeObj = {};
            routeObj[Codes.PARENT_KEYS_KEY] = encodedParentKeys;
            route.push(routeObj);
        }
        if (route.length > 0) {
            this.storeNavigationFormRoutes('insertFormRoute');
        }
        return route;
    };
    AbstractOServiceComponent.prototype.getItemModeRoute = function (item, modeRoute) {
        var result = this.getRouteOfSelectedRow(item);
        if (result.length > 0) {
            if (Util.isDefined(this.detailFormRoute)) {
                result.unshift(this.detailFormRoute);
            }
            if (modeRoute === 'editFormRoute') {
                result.push(this.editFormRoute || Codes.DEFAULT_EDIT_ROUTE);
            }
        }
        if (result.length > 0 && !this.oFormLayoutDialog) {
            this.storeNavigationFormRoutes(modeRoute, this.getQueryConfiguration());
        }
        return result;
    };
    AbstractOServiceComponent.prototype.getQueryConfiguration = function () {
        var result = {
            keysValues: this.getKeysValues()
        };
        if (this.pageable) {
            result = Object.assign({
                serviceType: this.serviceType,
                queryArguments: this.queryArguments,
                entity: this.entity,
                service: this.service,
                queryMethod: this.pageable ? this.paginatedQueryMethod : this.queryMethod,
                totalRecordsNumber: this.getTotalRecordsNumber(),
                queryRows: this.queryRows,
                queryRecordOffset: Math.max(this.state.queryRecordOffset - this.queryRows, 0)
            }, result);
        }
        return result;
    };
    AbstractOServiceComponent.prototype.getRouteOfSelectedRow = function (item) {
        var route = [];
        if (Util.isObject(item)) {
            this.keysArray.forEach(function (key) {
                if (Util.isDefined(item[key])) {
                    route.push(item[key]);
                }
            });
        }
        return route;
    };
    AbstractOServiceComponent.prototype.deleteLocalItems = function () {
        var selectedItems = this.getSelectedItems();
        for (var i = 0; i < selectedItems.length; ++i) {
            var selectedItem = selectedItems[i];
            var selectedItemKv = {};
            for (var k = 0; k < this.keysArray.length; ++k) {
                var key = this.keysArray[k];
                selectedItemKv[key] = selectedItem[key];
            }
            for (var j = this.dataArray.length - 1; j >= 0; --j) {
                var item = this.dataArray[j];
                var itemKv = {};
                for (var k = 0; k < this.keysArray.length; ++k) {
                    var key = this.keysArray[k];
                    itemKv[key] = item[key];
                }
                var found = false;
                for (var k in selectedItemKv) {
                    if (selectedItemKv.hasOwnProperty(k)) {
                        found = itemKv.hasOwnProperty(k) && (selectedItemKv[k] === itemKv[k]);
                    }
                }
                if (found) {
                    this.dataArray.splice(j, 1);
                    break;
                }
            }
        }
        this.clearSelection();
    };
    AbstractOServiceComponent.prototype.reinitialize = function (options) {
        if (options && Object.keys(options).length) {
            var clonedOpts = Object.assign({}, options);
            if (clonedOpts.hasOwnProperty('entity')) {
                this.entity = clonedOpts.entity;
                if (this.oattrFromEntity) {
                    this.oattr = undefined;
                }
                delete clonedOpts.entity;
            }
            for (var prop in clonedOpts) {
                if (clonedOpts.hasOwnProperty(prop)) {
                    this[prop] = clonedOpts[prop];
                }
            }
            this.destroy();
            this.initialize();
        }
    };
    AbstractOServiceComponent.prototype.setFilterBuilder = function (filterBuilder) {
        this.filterBuilder = filterBuilder;
    };
    AbstractOServiceComponent.prototype.getComponentFilter = function (existingFilter) {
        if (existingFilter === void 0) { existingFilter = {}; }
        var filter = _super.prototype.getComponentFilter.call(this, existingFilter);
        var quickFilterExpr = this.getQuickFilterExpression();
        var filterBuilderExpr = this.getFilterBuilderExpression();
        var complexExpr = quickFilterExpr || filterBuilderExpr;
        if (quickFilterExpr && filterBuilderExpr) {
            complexExpr = FilterExpressionUtils.buildComplexExpression(quickFilterExpr, filterBuilderExpr, FilterExpressionUtils.OP_AND);
        }
        if (complexExpr && !Util.isDefined(filter[FilterExpressionUtils.BASIC_EXPRESSION_KEY])) {
            filter[FilterExpressionUtils.BASIC_EXPRESSION_KEY] = complexExpr;
        }
        else if (complexExpr) {
            filter[FilterExpressionUtils.BASIC_EXPRESSION_KEY] =
                FilterExpressionUtils.buildComplexExpression(filter[FilterExpressionUtils.BASIC_EXPRESSION_KEY], complexExpr, FilterExpressionUtils.OP_AND);
        }
        return filter;
    };
    AbstractOServiceComponent.prototype.getQuickFilterExpression = function () {
        if (this.pageable && Util.isDefined(this.quickFilterComponent)) {
            return this.quickFilterComponent.filterExpression;
        }
        return undefined;
    };
    AbstractOServiceComponent.prototype.getFilterBuilderExpression = function () {
        if (Util.isDefined(this.filterBuilder)) {
            return this.filterBuilder.getExpression();
        }
        return undefined;
    };
    AbstractOServiceComponent.prototype.storeNavigationFormRoutes = function (activeMode, queryConf) {
        var mainFormLayoutComp = this.formLayoutManager ? Util.isDefined(this.formLayoutManager.isMainComponent(this)) : undefined;
        this.navigationService.storeFormRoutes({
            mainFormLayoutManagerComponent: mainFormLayoutComp,
            isMainNavigationComponent: true,
            detailFormRoute: this.detailFormRoute,
            editFormRoute: this.editFormRoute,
            insertFormRoute: Util.isDefined(this.insertFormRoute) ? this.insertFormRoute : Codes.DEFAULT_INSERT_ROUTE
        }, activeMode, queryConf);
    };
    AbstractOServiceComponent.prototype.saveDataNavigationInLocalStorage = function () {
    };
    AbstractOServiceComponent.prototype.getKeysValues = function () {
        var data = this.dataArray;
        var self = this;
        return data.map(function (row) {
            var obj = {};
            self.keysArray.forEach(function (key) {
                if (row[key] !== undefined) {
                    obj[key] = row[key];
                }
            });
            return obj;
        });
    };
    AbstractOServiceComponent.prototype.getRouteKey = function () {
        var route = '';
        if (this.formLayoutManager && !this.formLayoutManager.isMainComponent(this)) {
            route = this.router.url;
            var params = this.formLayoutManager.getParams();
            if (params) {
                route += '/' + (Object.keys(params).join('/'));
            }
        }
        else {
            route = _super.prototype.getRouteKey.call(this);
        }
        return route;
    };
    Object.defineProperty(AbstractOServiceComponent.prototype, "elementRef", {
        get: function () {
            return this.elRef;
        },
        enumerable: true,
        configurable: true
    });
    AbstractOServiceComponent.prototype.showCaseSensitiveCheckbox = function () {
        return !this.pageable;
    };
    AbstractOServiceComponent.prototype.registerQuickFilter = function (arg) {
        var _this = this;
        var quickFilter = arg;
        if (Util.isDefined(this.quickFilterComponent)) {
            return;
        }
        this.quickFilterComponent = quickFilter;
        if (Util.isDefined(this.quickFilterComponent)) {
            this.quickFilterSubscription = this.quickFilterComponent.onSearch.subscribe(function (val) {
                _this.onSearch.emit(val);
                _this.filterData(val);
            });
            if (Util.isDefined(this.state)) {
                if ((this.state.quickFilterValue || '').length > 0) {
                    this.quickFilterComponent.setValue(this.state.quickFilterValue, {
                        emitEvent: true
                    });
                }
            }
        }
    };
    AbstractOServiceComponent.prototype.isFilterCaseSensitive = function () {
        var useQuickFilterValue = Util.isDefined(this.quickFilterComponent) && this.showCaseSensitiveCheckbox();
        if (useQuickFilterValue) {
            return this.quickFilterComponent.filterCaseSensitive;
        }
        return this.filterCaseSensitive;
    };
    AbstractOServiceComponent.prototype.configureFilterValue = function (value) {
        var returnVal = value;
        if (value && value.length > 0) {
            if (!value.startsWith('*')) {
                returnVal = '*' + returnVal;
            }
            if (!value.endsWith('*')) {
                returnVal = returnVal + '*';
            }
        }
        return returnVal;
    };
    AbstractOServiceComponent.prototype.getQuickFilterValue = function () {
        var result = '';
        if (Util.isDefined(this.quickFilterComponent)) {
            return this.quickFilterComponent.getValue() || '';
        }
        return result;
    };
    AbstractOServiceComponent.prototype.getQuickFilterColumns = function () {
        var result = this.quickFilterColArray;
        if (Util.isDefined(this.quickFilterComponent)) {
            result = this.quickFilterComponent.getActiveColumns();
        }
        return result;
    };
    AbstractOServiceComponent.prototype.filterData = function (value, loadMore) {
        value = Util.isDefined(value) ? value : Util.isDefined(this.quickFilterComponent) ? this.quickFilterComponent.getValue() : void 0;
        if (Util.isDefined(this.state) && Util.isDefined(value)) {
            this.state.quickFilterValue = value;
        }
        if (this.pageable) {
            var queryArgs = {
                offset: 0,
                length: this.queryRows,
                replace: true
            };
            this.queryData(void 0, queryArgs);
            return;
        }
        if (this.dataResponseArray && this.dataResponseArray.length > 0) {
            var filteredData = this.dataResponseArray.slice(0);
            filteredData = this.getQuickFilterDataFromArray(value, filteredData);
            filteredData = this.getSortedDataFromArray(filteredData);
            filteredData = this.getPaginationDataFromArray(filteredData);
            this.setDataArray(filteredData);
        }
        else {
            this.setDataArray(this.dataResponseArray);
        }
    };
    AbstractOServiceComponent.prototype.getQuickFilterDataFromArray = function (quickfilter, dataArray) {
        var result = dataArray;
        if (quickfilter && quickfilter.length > 0) {
            var caseSensitive_1 = this.isFilterCaseSensitive();
            var quickFilterColumns_1 = this.getQuickFilterColumns();
            var regExpStr_1 = new RegExp(Util.escapeSpecialCharacter(Util.normalizeString(quickfilter, !caseSensitive_1)));
            result = dataArray.filter(function (item) {
                return quickFilterColumns_1.some(function (col) { return regExpStr_1.test(Util.normalizeString(item[col] + '', !caseSensitive_1)); });
            });
        }
        return result;
    };
    AbstractOServiceComponent.prototype.getSortedDataFromArray = function (dataArray) {
        return dataArray;
    };
    AbstractOServiceComponent.prototype.setData = function (data, sqlTypes, replace) {
        if (!Util.isArray(data)) {
            this.setDataArray([]);
        }
        else {
            this.dataResponseArray = this.parseResponseArray(data, replace);
            if (this.pageable) {
                this.setDataArray(this.dataResponseArray);
            }
            else {
                this.filterData();
            }
        }
        if (this.pageable) {
            ObservableWrapper.callEmit(this.onPaginatedDataLoaded, data);
        }
        ObservableWrapper.callEmit(this.onDataLoaded, this.dataResponseArray);
    };
    AbstractOServiceComponent.prototype.parseResponseArray = function (data, replace) {
        return data;
    };
    AbstractOServiceComponent.prototype.registerFormLayoutManagerState = function () {
        var _this = this;
        if (this.storeState && this.formLayoutManager && this.formLayoutManager.isTabMode() && this.formLayoutManager.oTabGroup) {
            if (!Util.isDefined(this.formLayoutManagerTabIndex)) {
                this.formLayoutManagerTabIndex = this.formLayoutManager.oTabGroup.data.length;
            }
            var updateComponentStateSubject_1 = this.formLayoutManager.oTabGroup.updateTabComponentsState;
            this.tabsSubscriptions = this.formLayoutManager.onSelectedTabChange.subscribe(function (arg) {
                if (_this.formLayoutManagerTabIndex === arg.previousIndex) {
                    _this.updateStateStorage();
                    _this.alreadyStored = false;
                    if (arg.index !== 0) {
                        updateComponentStateSubject_1.next(arg);
                    }
                }
                _this.checkViewPortSubject.next(true);
            });
            this.tabsSubscriptions.add(updateComponentStateSubject_1.subscribe(function (arg) {
                if (_this.formLayoutManagerTabIndex === arg.index) {
                    _this.componentStateService.initialize(_this);
                    _this.applyDefaultConfiguration();
                }
            }));
            this.tabsSubscriptions.add(this.formLayoutManager.onCloseTab.subscribe(function (arg) {
                if (_this.formLayoutManagerTabIndex === arg.index) {
                    _this.updateStateStorage();
                }
            }));
        }
    };
    AbstractOServiceComponent.prototype.applyDefaultConfiguration = function () {
    };
    AbstractOServiceComponent.prototype.onChangePage = function (e) {
        if (!this.pageable) {
            this.currentPage = e.pageIndex;
            this.queryRows = e.pageSize;
            this.filterData();
            return;
        }
        var goingBack = e.pageIndex < this.currentPage;
        this.currentPage = e.pageIndex;
        var pageSize = e.pageSize;
        var oldQueryRows = this.queryRows;
        var changingPageSize = (oldQueryRows !== pageSize);
        this.queryRows = pageSize;
        var newStartRecord;
        var queryLength;
        if (goingBack || changingPageSize) {
            newStartRecord = (this.currentPage * this.queryRows);
            queryLength = this.queryRows;
        }
        else {
            newStartRecord = Math.max(this.state.queryRecordOffset, (this.currentPage * this.queryRows));
            var newEndRecord = Math.min(newStartRecord + this.queryRows, this.state.totalQueryRecordsNumber);
            queryLength = Math.min(this.queryRows, newEndRecord - newStartRecord);
        }
        var queryArgs = {
            offset: newStartRecord,
            length: queryLength,
            replace: true
        };
        this.queryData(void 0, queryArgs);
    };
    Object.defineProperty(AbstractOServiceComponent.prototype, "currentPage", {
        get: function () {
            return this._currentPage;
        },
        set: function (val) {
            this._currentPage = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractOServiceComponent.prototype, "totalRecords", {
        get: function () {
            if (this.pageable) {
                return this.getTotalRecordsNumber();
            }
            return this.dataResponseArray.length;
        },
        enumerable: true,
        configurable: true
    });
    AbstractOServiceComponent.prototype.getPaginationDataFromArray = function (dataArray) {
        var result;
        if (this.paginationControls) {
            result = dataArray.splice(this.currentPage * this.queryRows, this.queryRows);
        }
        else {
            result = dataArray.splice(0, this.queryRows * (this.currentPage + 1));
        }
        return result;
    };
    AbstractOServiceComponent.prototype.handleItemClick = function (item) {
        var _this = this;
        this.clickTimer = setTimeout(function () {
            if (!_this.clickPrevent) {
                _this.itemClickDone(item);
            }
            _this.clickPrevent = false;
        }, this.clickDelay);
    };
    AbstractOServiceComponent.prototype.itemClickDone = function (item) {
        if (!this.oenabled) {
            return;
        }
        var data = item.getItemData();
        if (this.detailMode === Codes.DETAIL_MODE_CLICK) {
            this.saveDataNavigationInLocalStorage();
            this.viewDetail(data);
        }
        this.onClick.emit(data);
    };
    AbstractOServiceComponent.prototype.handleItemDblClick = function (item) {
        clearTimeout(this.clickTimer);
        this.clickPrevent = true;
        this.itemDblClickDone(item);
    };
    AbstractOServiceComponent.prototype.itemDblClickDone = function (item) {
        if (!this.oenabled) {
            return;
        }
        var data = item.getItemData();
        if (Codes.isDoubleClickMode(this.detailMode)) {
            this.saveDataNavigationInLocalStorage();
            this.viewDetail(data);
        }
        this.onDoubleClick.emit(data);
    };
    Object.defineProperty(AbstractOServiceComponent.prototype, "quickFilterAppearance", {
        get: function () {
            return this._quickFilterAppearance;
        },
        set: function (value) {
            var values = ['legacy', 'standard', 'fill', 'outline'];
            if (values.indexOf(value) === -1) {
                console.warn('The quick-filter-appearance attribute is undefined so the outline value will be used');
                value = 'outline';
            }
            this._quickFilterAppearance = value;
        },
        enumerable: true,
        configurable: true
    });
    AbstractOServiceComponent.prototype.getSqlTypesOfKeys = function () {
        var sqlTypes = this.getSqlTypes();
        var sqlTypesArg = {};
        if (Util.isDefined(sqlTypes)) {
            this.keysArray.forEach(function (key) {
                sqlTypesArg[key] = sqlTypes[key];
            });
        }
        return sqlTypesArg;
    };
    AbstractOServiceComponent.propDecorators = {
        matpaginator: [{ type: ViewChild, args: [MatPaginator, { static: false },] }],
        searchInputComponent: [{ type: ViewChild, args: [(forwardRef(function () { return OSearchInputComponent; })), { static: false },] }]
    };
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], AbstractOServiceComponent.prototype, "ovisible", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], AbstractOServiceComponent.prototype, "oenabled", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], AbstractOServiceComponent.prototype, "controls", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], AbstractOServiceComponent.prototype, "recursiveDetail", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], AbstractOServiceComponent.prototype, "detailButtonInRow", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], AbstractOServiceComponent.prototype, "recursiveEdit", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], AbstractOServiceComponent.prototype, "editButtonInRow", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], AbstractOServiceComponent.prototype, "insertButton", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], AbstractOServiceComponent.prototype, "paginationControls", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], AbstractOServiceComponent.prototype, "recursiveInsert", void 0);
    return AbstractOServiceComponent;
}(AbstractOServiceBaseComponent));
export { AbstractOServiceComponent };
var OServiceComponent = (function (_super) {
    tslib_1.__extends(OServiceComponent, _super);
    function OServiceComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return OServiceComponent;
}(AbstractOServiceComponent));
export { OServiceComponent };
//# sourceMappingURL=data:application/json;base64,