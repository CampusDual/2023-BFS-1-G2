import { Injectable } from '@angular/core';
import { combineLatest } from 'rxjs';
import { BooleanConverter } from '../../../decorators/input-converter';
import { Codes } from '../../../util/codes';
import { Util } from '../../../util/util';
import { OFormConfirmExitService } from '../navigation/o-form-confirm-exit.service';
var CanDeactivateFormGuard = (function () {
    function CanDeactivateFormGuard(oFormConfirmExitService) {
        this.oFormConfirmExitService = oFormConfirmExitService;
        this.oForms = {};
    }
    CanDeactivateFormGuard.prototype.canDeactivate = function (component, curr, state, future) {
        var _this = this;
        if (BooleanConverter(future.root.queryParams[Codes.IGNORE_CAN_DEACTIVATE])) {
            return true;
        }
        if (Object.keys(this.oForms).length) {
            return new Promise(function (resolve) {
                var arr = Object.keys(_this.oForms).map(function (key) { return Util.wrapIntoObservable(_this.oForms[key].canDeactivate()); });
                combineLatest(arr).subscribe(function (res) {
                    resolve(res.every(function (value) { return value; }));
                });
            });
        }
        return true;
    };
    CanDeactivateFormGuard.prototype.addForm = function (form) {
        this.oForms[form.oattr] = form;
    };
    CanDeactivateFormGuard.prototype.removeForm = function (form) {
        delete this.oForms[form.oattr];
    };
    CanDeactivateFormGuard.CLASSNAME = 'CanDeactivateFormGuard';
    CanDeactivateFormGuard.decorators = [
        { type: Injectable }
    ];
    CanDeactivateFormGuard.ctorParameters = function () { return [
        { type: OFormConfirmExitService }
    ]; };
    return CanDeactivateFormGuard;
}());
export { CanDeactivateFormGuard };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1mb3JtLWNhbi1kZWFjdGl2YXRlLmd1YXJkLmpzIiwic291cmNlUm9vdCI6Im5nOi8vb250aW1pemUtd2ViLW5neC8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2Zvcm0vZ3VhcmRzL28tZm9ybS1jYW4tZGVhY3RpdmF0ZS5ndWFyZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxhQUFhLEVBQXNDLE1BQU0sTUFBTSxDQUFDO0FBRXpFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUM1QyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDMUMsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFPcEY7SUFNRSxnQ0FBc0IsdUJBQWdEO1FBQWhELDRCQUF1QixHQUF2Qix1QkFBdUIsQ0FBeUI7UUFGNUQsV0FBTSxHQUFzQyxFQUFFLENBQUM7SUFFaUIsQ0FBQztJQUUzRSw4Q0FBYSxHQUFiLFVBQWMsU0FBaUMsRUFBRSxJQUE0QixFQUFFLEtBQTBCLEVBQUUsTUFBMkI7UUFBdEksaUJBY0M7UUFaQyxJQUFJLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLEVBQUU7WUFDMUUsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUNELElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxFQUFFO1lBQ25DLE9BQU8sSUFBSSxPQUFPLENBQUMsVUFBQyxPQUFPO2dCQUN6QixJQUFNLEdBQUcsR0FBMEIsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQUMsR0FBRyxJQUFLLE9BQUEsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEtBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsYUFBYSxFQUFFLENBQUMsRUFBekQsQ0FBeUQsQ0FBQyxDQUFDO2dCQUNwSSxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLFVBQUEsR0FBRztvQkFDOUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsVUFBQSxLQUFLLElBQUksT0FBQSxLQUFLLEVBQUwsQ0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDckMsQ0FBQyxDQUFDLENBQUM7WUFDTCxDQUFDLENBQUMsQ0FBQztTQUNKO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsd0NBQU8sR0FBUCxVQUFRLElBQW9CO1FBQzFCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQztJQUNqQyxDQUFDO0lBRUQsMkNBQVUsR0FBVixVQUFXLElBQW9CO1FBQzdCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDakMsQ0FBQztJQTVCYSxnQ0FBUyxHQUFHLHdCQUF3QixDQUFDOztnQkFGcEQsVUFBVTs7O2dCQVBGLHVCQUF1Qjs7SUFzQ2hDLDZCQUFDO0NBQUEsQUEvQkQsSUErQkM7U0E5Qlksc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNQcm9taXNlIH0gZnJvbSAnQGFuZ3VsYXIvY29tcGlsZXIvc3JjL3V0aWwnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgQ2FuRGVhY3RpdmF0ZSwgUm91dGVyU3RhdGVTbmFwc2hvdCB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBjb21iaW5lTGF0ZXN0LCBmcm9tLCBpc09ic2VydmFibGUsIE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IEJvb2xlYW5Db252ZXJ0ZXIgfSBmcm9tICcuLi8uLi8uLi9kZWNvcmF0b3JzL2lucHV0LWNvbnZlcnRlcic7XG5pbXBvcnQgeyBDb2RlcyB9IGZyb20gJy4uLy4uLy4uL3V0aWwvY29kZXMnO1xuaW1wb3J0IHsgVXRpbCB9IGZyb20gJy4uLy4uLy4uL3V0aWwvdXRpbCc7XG5pbXBvcnQgeyBPRm9ybUNvbmZpcm1FeGl0U2VydmljZSB9IGZyb20gJy4uL25hdmlnYXRpb24vby1mb3JtLWNvbmZpcm0tZXhpdC5zZXJ2aWNlJztcbmltcG9ydCB7IE9Gb3JtQ29tcG9uZW50IH0gZnJvbSAnLi4vby1mb3JtLmNvbXBvbmVudCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2FuQ29tcG9uZW50RGVhY3RpdmF0ZSB7XG4gIGNhbkRlYWN0aXZhdGU6ICgpID0+IE9ic2VydmFibGU8Ym9vbGVhbj4gfCBQcm9taXNlPGJvb2xlYW4+IHwgYm9vbGVhbjtcbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENhbkRlYWN0aXZhdGVGb3JtR3VhcmQgaW1wbGVtZW50cyBDYW5EZWFjdGl2YXRlPENhbkNvbXBvbmVudERlYWN0aXZhdGU+IHtcbiAgcHVibGljIHN0YXRpYyBDTEFTU05BTUUgPSAnQ2FuRGVhY3RpdmF0ZUZvcm1HdWFyZCc7XG5cbiAgcHJvdGVjdGVkIG9Gb3JtczogeyBba2V5OiBzdHJpbmddOiBPRm9ybUNvbXBvbmVudCB9ID0ge307XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIG9Gb3JtQ29uZmlybUV4aXRTZXJ2aWNlOiBPRm9ybUNvbmZpcm1FeGl0U2VydmljZSkgeyB9XG5cbiAgY2FuRGVhY3RpdmF0ZShjb21wb25lbnQ6IENhbkNvbXBvbmVudERlYWN0aXZhdGUsIGN1cnI6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QsIHN0YXRlOiBSb3V0ZXJTdGF0ZVNuYXBzaG90LCBmdXR1cmU6IFJvdXRlclN0YXRlU25hcHNob3QpXG4gICAgOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHwgUHJvbWlzZTxib29sZWFuPiB8IGJvb2xlYW4ge1xuICAgIGlmIChCb29sZWFuQ29udmVydGVyKGZ1dHVyZS5yb290LnF1ZXJ5UGFyYW1zW0NvZGVzLklHTk9SRV9DQU5fREVBQ1RJVkFURV0pKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKE9iamVjdC5rZXlzKHRoaXMub0Zvcm1zKS5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICBjb25zdCBhcnI6IE9ic2VydmFibGU8Ym9vbGVhbj5bXSA9IE9iamVjdC5rZXlzKHRoaXMub0Zvcm1zKS5tYXAoKGtleSkgPT4gVXRpbC53cmFwSW50b09ic2VydmFibGUodGhpcy5vRm9ybXNba2V5XS5jYW5EZWFjdGl2YXRlKCkpKTtcbiAgICAgICAgY29tYmluZUxhdGVzdChhcnIpLnN1YnNjcmliZShyZXMgPT4ge1xuICAgICAgICAgIHJlc29sdmUocmVzLmV2ZXJ5KHZhbHVlID0+IHZhbHVlKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgYWRkRm9ybShmb3JtOiBPRm9ybUNvbXBvbmVudCkge1xuICAgIHRoaXMub0Zvcm1zW2Zvcm0ub2F0dHJdID0gZm9ybTtcbiAgfVxuXG4gIHJlbW92ZUZvcm0oZm9ybTogT0Zvcm1Db21wb25lbnQpIHtcbiAgICBkZWxldGUgdGhpcy5vRm9ybXNbZm9ybS5vYXR0cl07XG4gIH1cbn1cblxuIl19