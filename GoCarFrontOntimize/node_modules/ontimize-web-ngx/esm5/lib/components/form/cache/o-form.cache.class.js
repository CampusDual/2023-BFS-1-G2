import { EventEmitter } from '@angular/core';
import { Util } from '../../../util/util';
var OFormCacheClass = (function () {
    function OFormCacheClass(form) {
        this.form = form;
        this.initialDataCache = {};
        this.valueChangesStack = [];
        this._componentsSubscritpions = {};
        this.blockCaching = false;
        this.initializedCache = false;
        this.onCacheStateChanges = new EventEmitter();
        this.changedFormControls = [];
    }
    OFormCacheClass.prototype.updateFormDataCache = function () {
        this.formDataCache = this.form.getRegisteredFieldsValues();
    };
    OFormCacheClass.prototype.addChangeToStack = function (comp) {
        var currentValue = comp.getFormControl().value;
        this.valueChangesStack.push({
            attr: comp.getAttribute(),
            value: currentValue
        });
        this.onCacheStateChanges.emit();
    };
    OFormCacheClass.prototype.registerComponentCaching = function (comp) {
        var _this = this;
        var attr = comp.getAttribute();
        var listenTo = this.form.detectChangesOnBlur ? comp.onValueChange : comp.onChange;
        if (!Util.isDefined(listenTo)) {
            return;
        }
        this._componentsSubscritpions[attr] = listenTo.subscribe(function () {
            if (_this.initializedCache && !_this.blockCaching && _this.hasComponentChanged(attr, comp)) {
                if (_this.changedFormControls.indexOf(attr) === -1) {
                    _this.changedFormControls.push(attr);
                }
                _this.updateFormDataCache();
                _this.addChangeToStack(comp);
            }
        });
    };
    OFormCacheClass.prototype.getCachedValue = function (attr) {
        if (this.formDataCache && this.formDataCache.hasOwnProperty(attr)) {
            return this.formDataCache[attr];
        }
        return undefined;
    };
    OFormCacheClass.prototype.destroy = function () {
        var _this = this;
        Object.keys(this._componentsSubscritpions).forEach(function (attr) {
            var subs = _this._componentsSubscritpions[attr];
            subs.unsubscribe();
        });
        this._componentsSubscritpions = {};
        this.formDataCache = undefined;
        this.changedFormControls = [];
    };
    OFormCacheClass.prototype.removeUndefinedProperties = function (arg) {
        Object.keys(arg).forEach(function (key) {
            if (arg[key] === undefined) {
                delete arg[key];
            }
        });
        return arg;
    };
    OFormCacheClass.prototype.registerCache = function () {
        var initialCache = this.form.getRegisteredFieldsValues();
        this.removeUndefinedProperties(initialCache);
        this.initializeCache(initialCache);
        this.formDataCache = initialCache;
        var components = this.form.getComponents();
        var self = this;
        Object.keys(components).forEach(function (attr) {
            var comp = components[attr];
            if (comp.isAutomaticRegistering()) {
                self.registerComponentCaching(comp);
            }
        });
    };
    OFormCacheClass.prototype.initializeCache = function (val) {
        this.initialDataCache = val;
        this.valueChangesStack = [];
        this.onCacheStateChanges.emit();
        this.initializedCache = true;
        this.changedFormControls = [];
    };
    OFormCacheClass.prototype.getInitialDataCache = function () {
        return this.initialDataCache;
    };
    OFormCacheClass.prototype.getDataCache = function () {
        return this.formDataCache;
    };
    OFormCacheClass.prototype.restartCache = function () {
        this.formDataCache = undefined;
        this.initializeCache({});
        this.initializedCache = false;
        this.onCacheStateChanges.emit();
    };
    OFormCacheClass.prototype.setCacheSnapshot = function () {
        this.initializeCache(this.getDataCache());
    };
    OFormCacheClass.prototype.undoLastChange = function () {
        var lastElement = this.valueChangesStack[this.valueChangesStack.length - 1];
        if (lastElement) {
            var lastCacheValue = this.getCacheLastValue(lastElement.attr);
            var lastValue = (lastCacheValue !== null) ? lastCacheValue : this.initialDataCache[lastElement.attr];
            this.undoComponentValue(lastElement.attr, lastValue);
            this.updateFormDataCache();
            this.onCacheStateChanges.emit();
        }
    };
    OFormCacheClass.prototype.undoComponentValue = function (attr, val) {
        this.blockCaching = true;
        var comp = this.form.getFieldReference(attr);
        if (comp) {
            comp.setValue(val);
        }
        this.blockCaching = false;
    };
    OFormCacheClass.prototype.hasComponentChanged = function (attr, comp) {
        var currentValue = comp.getFormControl().value;
        var cache = this.formDataCache || this.initialDataCache;
        return (currentValue !== cache[attr]);
    };
    OFormCacheClass.prototype.getCacheLastValue = function (attr) {
        this.updateChangesStack(attr);
        var result = null;
        for (var i = this.valueChangesStack.length - 1; i >= 0; i--) {
            var current = this.valueChangesStack[i];
            if (current.attr === attr) {
                result = current.value;
                break;
            }
        }
        return result;
    };
    OFormCacheClass.prototype.updateChangesStack = function (attr) {
        var index;
        for (var i = this.valueChangesStack.length - 1; i >= 0; i--) {
            var current = this.valueChangesStack[i];
            if (current.attr === attr) {
                index = i;
                break;
            }
        }
        if (index !== undefined) {
            for (var i = index; i >= 0; i--) {
                var prev = this.valueChangesStack[i - 1];
                var current = this.valueChangesStack[i];
                if (current.attr === attr) {
                    this.valueChangesStack.splice(i, 1);
                    if (!prev || prev.attr === attr) {
                        continue;
                    }
                    else {
                        break;
                    }
                }
            }
        }
        if (this.valueChangesStack.length === 0) {
            this.onCacheStateChanges.emit();
        }
    };
    Object.defineProperty(OFormCacheClass.prototype, "isCacheStackEmpty", {
        get: function () {
            return (this.valueChangesStack.length === 0);
        },
        enumerable: true,
        configurable: true
    });
    OFormCacheClass.prototype.isInitialStateChanged = function (ignoreAttrs) {
        if (ignoreAttrs === void 0) { ignoreAttrs = []; }
        var initialCache = Object.assign({}, this.initialDataCache);
        var currentCache;
        if (this.formDataCache) {
            currentCache = Object.assign({}, this.formDataCache);
            this.removeUndefinedProperties(currentCache);
        }
        else {
            return false;
        }
        var initialKeys = Object.keys(initialCache);
        var currentKeys = currentCache ? Object.keys(currentCache) : initialKeys;
        if (ignoreAttrs.length) {
            initialKeys = initialKeys.filter(function (key) { return !ignoreAttrs.includes(key); });
            currentKeys = currentKeys.filter(function (key) { return !ignoreAttrs.includes(key); });
            ignoreAttrs.forEach(function (key) { return delete initialCache[key]; });
        }
        if (currentKeys.length === 0) {
            return false;
        }
        if (initialKeys.length !== currentKeys.length) {
            return true;
        }
        if (ignoreAttrs.length) {
            initialKeys = initialKeys.filter(function (key) { return !ignoreAttrs.includes(key); });
            ignoreAttrs.forEach(function (key) { return delete initialCache[key]; });
        }
        var res = false;
        for (var i = 0, len = initialKeys.length; i < len; i++) {
            var key = initialKeys[i];
            res = (initialCache[key] !== currentCache[key]);
            if (res) {
                break;
            }
        }
        return res;
    };
    OFormCacheClass.prototype.getChangedFormControlsAttr = function () {
        return this.changedFormControls;
    };
    return OFormCacheClass;
}());
export { OFormCacheClass };
//# sourceMappingURL=data:application/json;base64,