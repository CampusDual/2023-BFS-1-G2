import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Component, ElementRef, EventEmitter, Injector, NgZone, ViewChild, ViewEncapsulation } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { BehaviorSubject, combineLatest, Observable } from 'rxjs';
import { InputConverter } from '../../decorators/input-converter';
import { DialogService } from '../../services/dialog.service';
import { OntimizeServiceProvider } from '../../services/factories';
import { NavigationService } from '../../services/navigation.service';
import { OntimizeService } from '../../services/ontimize/ontimize.service';
import { PermissionsService } from '../../services/permissions/permissions.service';
import { SnackBarService } from '../../services/snackbar.service';
import { Codes } from '../../util/codes';
import { SQLTypes } from '../../util/sqltypes';
import { Util } from '../../util/util';
import { OFormContainerComponent } from '../form-container/o-form-container.component';
import { OFormControl } from '../input/o-form-control.class';
import { OFormCacheClass } from './cache/o-form.cache.class';
import { CanDeactivateFormGuard } from './guards/o-form-can-deactivate.guard';
import { OFormNavigationClass } from './navigation/o-form.navigation.class';
import { OFormValue } from './o-form-value';
import { OFormMessageService } from './services/o-form-message.service';
export var DEFAULT_INPUTS_O_FORM = [
    'showHeader: show-header',
    'headerMode: header-mode',
    'headerPosition: header-position',
    'labelheader: label-header',
    'labelHeaderAlign: label-header-align',
    'headeractions: header-actions',
    'showHeaderActionsText: show-header-actions-text',
    'entity',
    'keys',
    'columns',
    'service',
    'stayInRecordAfterEdit: stay-in-record-after-edit',
    'afterInsertMode: after-insert-mode',
    'serviceType : service-type',
    'queryOnInit : query-on-init',
    'parentKeys: parent-keys',
    'queryMethod: query-method',
    'insertMethod: insert-method',
    'updateMethod: update-method',
    'deleteMethod: delete-method',
    'layoutDirection: layout-direction',
    'layoutAlign: layout-align',
    'editableDetail: editable-detail',
    'keysSqlTypes: keys-sql-types',
    'undoButton: undo-button',
    'showHeaderNavigation: show-header-navigation',
    'oattr:attr',
    'includeBreadcrumb: include-breadcrumb',
    'detectChangesOnBlur: detect-changes-on-blur',
    'confirmExit: confirm-exit',
    'ignoreOnExit: ignore-on-exit',
    'queryFallbackFunction: query-fallback-function',
    'ignoreDefaultNavigation: ignore-default-navigation',
    'messageServiceType : message-service-type',
];
export var DEFAULT_OUTPUTS_O_FORM = [
    'onDataLoaded',
    'beforeCloseDetail',
    'beforeGoEditMode',
    'onFormModeChange',
    'onInsert',
    'onUpdate',
    'onDelete',
    'beforeInsertMode',
    'beforeUpdateMode',
    'beforeInitialMode',
    'onInsertMode',
    'onUpdateMode',
    'onInitialMode',
    'onCancel'
];
var OFormComponent = (function () {
    function OFormComponent(router, actRoute, zone, cd, injector, elRef) {
        this.router = router;
        this.actRoute = actRoute;
        this.zone = zone;
        this.cd = cd;
        this.injector = injector;
        this.elRef = elRef;
        this.showHeader = true;
        this.headerMode = 'floating';
        this.headerPosition = 'top';
        this.labelheader = '';
        this.labelHeaderAlign = 'center';
        this.headeractions = '';
        this.showHeaderActionsText = 'yes';
        this.keys = '';
        this.columns = '';
        this.stayInRecordAfterEdit = false;
        this.afterInsertMode = 'close';
        this.queryOnInit = true;
        this.queryMethod = Codes.QUERY_METHOD;
        this.insertMethod = Codes.INSERT_METHOD;
        this.updateMethod = Codes.UPDATE_METHOD;
        this.deleteMethod = Codes.DELETE_METHOD;
        this._layoutDirection = OFormComponent.DEFAULT_LAYOUT_DIRECTION;
        this._layoutAlign = 'start stretch';
        this.editableDetail = true;
        this.undoButton = true;
        this.showHeaderNavigation = false;
        this.oattr = '';
        this.includeBreadcrumb = false;
        this.detectChangesOnBlur = true;
        this.confirmExit = true;
        this.ignoreDefaultNavigation = false;
        this.isDetailForm = false;
        this.keysArray = [];
        this.colsArray = [];
        this._pKeysEquiv = {};
        this.keysSqlTypesArray = [];
        this.onDataLoaded = new EventEmitter();
        this.beforeCloseDetail = new EventEmitter();
        this.beforeGoEditMode = new EventEmitter();
        this.beforeInsertMode = new EventEmitter();
        this.beforeUpdateMode = new EventEmitter();
        this.beforeInitialMode = new EventEmitter();
        this.onInsertMode = new EventEmitter();
        this.onUpdateMode = new EventEmitter();
        this.onInitialMode = new EventEmitter();
        this.onFormModeChange = new EventEmitter();
        this.onInsert = new EventEmitter();
        this.onUpdate = new EventEmitter();
        this.onDelete = new EventEmitter();
        this.onCancel = new EventEmitter();
        this.loadingSubject = new BehaviorSubject(false);
        this.loading = this.loadingSubject.asObservable();
        this.formData = {};
        this.navigationData = [];
        this.currentIndex = 0;
        this.mode = OFormComponent.Mode().INITIAL;
        this._components = {};
        this._compSQLTypes = {};
        this.onFormInitStream = new EventEmitter();
        this.ignoreFormCacheKeys = [];
        this.formCache = new OFormCacheClass(this);
        this.formNavigation = new OFormNavigationClass(this.injector, this, this.router, this.actRoute);
        this.dialogService = injector.get(DialogService);
        this.navigationService = injector.get(NavigationService);
        this.snackBarService = injector.get(SnackBarService);
        this.permissionsService = this.injector.get(PermissionsService);
        var self = this;
        this.reloadStream = combineLatest([
            self.onFormInitStream.asObservable(),
            self.formNavigation.navigationStream.asObservable()
        ]);
        this.reloadStreamSubscription = this.reloadStream.subscribe(function (valArr) {
            if (Util.isArray(valArr) && valArr.length === 2 && !self.isInInsertMode()) {
                var valArrValues = valArr[0] === true && valArr[1] === true;
                if (self.queryOnInit && valArrValues) {
                    self.reload(true);
                }
                else {
                    self.initializeFields();
                }
            }
        });
        try {
            this.formContainer = injector.get(OFormContainerComponent);
            this.formContainer.setForm(this);
        }
        catch (e) {
        }
    }
    Object.defineProperty(OFormComponent.prototype, "ignoreOnExit", {
        get: function () {
            return this._ignoreOnExit;
        },
        set: function (val) {
            if (typeof val === 'string') {
                val = Util.parseArray(val, true);
            }
            this._ignoreOnExit = val;
        },
        enumerable: true,
        configurable: true
    });
    OFormComponent.Mode = function () {
        var m;
        (function (m) {
            m[m["QUERY"] = 0] = "QUERY";
            m[m["INSERT"] = 1] = "INSERT";
            m[m["UPDATE"] = 2] = "UPDATE";
            m[m["INITIAL"] = 3] = "INITIAL";
        })(m || (m = {}));
        return m;
    };
    OFormComponent.prototype.registerFormComponent = function (comp) {
        if (comp) {
            var attr = comp.getAttribute();
            if (attr && attr.length > 0) {
                if (!comp.isAutomaticRegistering()) {
                    return;
                }
                if (this._components.hasOwnProperty(attr)) {
                    comp.repeatedAttr = true;
                    console.error('There is already a component registered in the form with the attr: ' + attr);
                    return;
                }
                this._components[attr] = comp;
                if (this.formParentKeysValues && this.formParentKeysValues[attr] !== undefined) {
                    var val = this.formParentKeysValues[attr];
                    this._components[attr].setValue(val, {
                        emitModelToViewChange: false,
                        emitEvent: false
                    });
                }
                var cachedValue = this.formCache.getCachedValue(attr);
                if (Util.isDefined(cachedValue) && this.getDataValues() && this._components.hasOwnProperty(attr)) {
                    this._components[attr].setValue(cachedValue, {
                        emitModelToViewChange: false,
                        emitEvent: false
                    });
                }
            }
        }
    };
    OFormComponent.prototype.registerSQLTypeFormComponent = function (comp) {
        if (comp.repeatedAttr) {
            return;
        }
        if (comp) {
            var type = comp.getSQLType();
            var attr = comp.getAttribute();
            if (type !== SQLTypes.OTHER && attr && attr.length > 0 && this.ignoreFormCacheKeys.indexOf(attr) === -1) {
                this._compSQLTypes[attr] = type;
            }
        }
    };
    OFormComponent.prototype.registerFormControlComponent = function (comp) {
        if (comp.repeatedAttr) {
            return;
        }
        if (comp) {
            var attr = comp.getAttribute();
            if (attr && attr.length > 0) {
                var control = comp.getControl();
                if (control) {
                    this.formGroup.registerControl(attr, control);
                    if (!comp.isAutomaticRegistering()) {
                        this.ignoreFormCacheKeys.push(comp.getAttribute());
                    }
                }
            }
        }
    };
    OFormComponent.prototype.unregisterFormComponent = function (comp) {
        if (comp) {
            var attr = comp.getAttribute();
            if (attr && attr.length > 0 && this._components.hasOwnProperty(attr)) {
                delete this._components[attr];
            }
        }
    };
    OFormComponent.prototype.unregisterFormControlComponent = function (comp) {
        if (comp && comp.isAutomaticRegistering()) {
            var control = comp.getControl();
            var attr = comp.getAttribute();
            if (control && attr && attr.length > 0) {
                this.formGroup.removeControl(attr);
            }
        }
    };
    OFormComponent.prototype.unregisterSQLTypeFormComponent = function (comp) {
        if (comp) {
            var attr = comp.getAttribute();
            if (attr && attr.length > 0) {
                delete this._compSQLTypes[attr];
            }
        }
    };
    OFormComponent.prototype.registerToolbar = function (fToolbar) {
        if (fToolbar) {
            this._formToolbar = fToolbar;
            this._formToolbar.isDetail = this.isDetailForm;
        }
    };
    OFormComponent.prototype.getComponents = function () {
        return this._components;
    };
    OFormComponent.prototype.load = function () {
        var self = this;
        var zone = this.injector.get(NgZone);
        var loadObservable = new Observable(function (observer) {
            var timer = window.setTimeout(function () {
                observer.next(true);
            }, 250);
            return function () {
                window.clearTimeout(timer);
                zone.run(function () {
                    self.loadingSubject.next(false);
                });
            };
        });
        var subscription = loadObservable.subscribe(function (val) {
            zone.run(function () {
                self.loadingSubject.next(val);
            });
        });
        return subscription;
    };
    OFormComponent.prototype.getDataValue = function (attr) {
        if (this.isInInsertMode()) {
            var urlParams = this.formNavigation.getFilterFromUrlParams();
            var val = this.formGroup.value[attr] || urlParams[attr];
            return new OFormValue(val);
        }
        else if (this.isInInitialMode() && !this.isEditableDetail()) {
            var data = this.formData;
            if (data && data.hasOwnProperty(attr)) {
                return data[attr];
            }
        }
        else if (this.isInUpdateMode() || this.isEditableDetail()) {
            if (this.formData && Object.keys(this.formData).length > 0) {
                var val = this.formCache.getCachedValue(attr);
                if (this.formGroup.dirty && val) {
                    if (val instanceof OFormValue) {
                        return val;
                    }
                    return new OFormValue(val);
                }
                else {
                    var data = this.formData;
                    if (data && data.hasOwnProperty(attr)) {
                        return data[attr];
                    }
                }
            }
        }
        return new OFormValue();
    };
    OFormComponent.prototype.getDataValues = function () {
        return this.formData;
    };
    OFormComponent.prototype.clearData = function () {
        var filter = this.formNavigation.getFilterFromUrlParams();
        this.formGroup.reset({}, {
            emitEvent: false
        });
        this.setData(filter);
    };
    OFormComponent.prototype.canDeactivate = function () {
        var readOnly = this.isInInitialMode() && !this.isEditableDetail();
        var cancelledEdition = this.isInUpdateMode() && this._formToolbar && !this._formToolbar.editMode;
        if (readOnly || cancelledEdition) {
            return true;
        }
        if (!this.confirmExit) {
            return true;
        }
        var canDiscardChanges = this.canDiscardChanges;
        this.canDiscardChanges = false;
        return canDiscardChanges || this.showConfirmDiscardChanges();
    };
    OFormComponent.prototype.showConfirmDiscardChanges = function () {
        return this.formNavigation.showConfirmDiscardChanges(this.ignoreOnExit);
    };
    OFormComponent.prototype.executeToolbarAction = function (action, options) {
        switch (action) {
            case Codes.BACK_ACTION:
                this.back(options);
                break;
            case Codes.CLOSE_DETAIL_ACTION:
                this.closeDetail(options);
                break;
            case Codes.RELOAD_ACTION:
                this.reload(true);
                break;
            case Codes.GO_INSERT_ACTION:
                this.goInsertMode(options);
                break;
            case Codes.INSERT_ACTION:
                this.insert();
                break;
            case Codes.GO_EDIT_ACTION:
                this.goEditMode();
                break;
            case Codes.EDIT_ACTION:
                this.update();
                break;
            case Codes.UNDO_LAST_CHANGE_ACTION:
                this.undo();
                break;
            case Codes.DELETE_ACTION: return this.delete();
            default: break;
        }
        return undefined;
    };
    OFormComponent.prototype.ngOnInit = function () {
        this.addDeactivateGuard();
        this.formGroup = new FormGroup({});
        this.formNavigation.initialize();
        this.initialize();
    };
    OFormComponent.prototype.addDeactivateGuard = function () {
        if (!this.actRoute || !this.actRoute.routeConfig) {
            return;
        }
        this.deactivateGuard = this.injector.get(CanDeactivateFormGuard);
        this.deactivateGuard.addForm(this);
        var canDeactivateArray = (this.actRoute.routeConfig.canDeactivate || []);
        var previouslyAdded = false;
        for (var i = 0, len = canDeactivateArray.length; i < len; i++) {
            previouslyAdded = ((canDeactivateArray[i].hasOwnProperty('CLASSNAME') && canDeactivateArray[i].CLASSNAME) === OFormComponent.guardClassName);
            if (previouslyAdded) {
                break;
            }
        }
        if (!previouslyAdded) {
            canDeactivateArray.push(this.deactivateGuard.constructor);
            this.actRoute.routeConfig.canDeactivate = canDeactivateArray;
        }
    };
    OFormComponent.prototype.destroyDeactivateGuard = function () {
        try {
            if (!this.deactivateGuard || !this.actRoute || !this.actRoute.routeConfig || !this.actRoute.routeConfig.canDeactivate) {
                return;
            }
            this.deactivateGuard.removeForm(this);
            for (var i = this.actRoute.routeConfig.canDeactivate.length - 1; i >= 0; i--) {
                if (this.actRoute.routeConfig.canDeactivate[i].name === OFormComponent.guardClassName) {
                    this.actRoute.routeConfig.canDeactivate.splice(i, 1);
                    break;
                }
            }
            if (this.actRoute.routeConfig.canDeactivate.length === 0) {
                delete this.actRoute.routeConfig.canDeactivate;
            }
        }
        catch (e) {
        }
    };
    OFormComponent.prototype.hasDeactivateGuard = function () {
        return Util.isDefined(this.deactivateGuard);
    };
    OFormComponent.prototype.initialize = function () {
        var self = this;
        if (this.headeractions === 'all') {
            this.headeractions = 'R;I;U;D';
        }
        this.keysArray = Util.parseArray(this.keys, true);
        this.colsArray = Util.parseArray(this.columns, true);
        var pkArray = Util.parseArray(this.parentKeys);
        this._pKeysEquiv = Util.parseParentKeysEquivalences(pkArray);
        this.keysSqlTypesArray = Util.parseArray(this.keysSqlTypes);
        this.configureService();
        this.formNavigation.subscribeToQueryParams();
        this.formNavigation.subscribeToUrlParams();
        this.formNavigation.subscribeToUrl();
        this.formNavigation.subscribeToCacheChanges();
        if (this.navigationService) {
            this.navigationService.onVisibleChange(function (visible) {
                self.showHeader = visible;
            });
        }
        this.mode = OFormComponent.Mode().INITIAL;
        this.permissions = this.permissionsService.getFormPermissions(this.oattr, this.actRoute);
        if (typeof this.queryFallbackFunction !== 'function') {
            this.queryFallbackFunction = undefined;
        }
    };
    OFormComponent.prototype.reinitialize = function (options) {
        if (options && Object.keys(options).length) {
            var clonedOpts = Object.assign({}, options);
            for (var prop in clonedOpts) {
                if (clonedOpts.hasOwnProperty(prop)) {
                    this[prop] = clonedOpts[prop];
                }
            }
            this.destroy();
            this.initialize();
        }
    };
    OFormComponent.prototype.configureService = function () {
        var msgConfigureServiceArgs = { injector: this.injector, baseService: OFormMessageService, serviceType: this.messageServiceType };
        this.messageService = Util.configureMessageService(msgConfigureServiceArgs);
        var configureServiceArgs = { injector: this.injector, baseService: OntimizeService, entity: this.entity, service: this.service, serviceType: this.serviceType };
        this.dataService = Util.configureService(configureServiceArgs);
    };
    OFormComponent.prototype.ngOnDestroy = function () {
        this.destroy();
    };
    OFormComponent.prototype.destroy = function () {
        if (this.reloadStreamSubscription) {
            this.reloadStreamSubscription.unsubscribe();
        }
        if (this.querySubscription) {
            this.querySubscription.unsubscribe();
        }
        if (this.loaderSubscription) {
            this.loaderSubscription.unsubscribe();
        }
        this.formCache.destroy();
        this.formNavigation.destroy();
        this.destroyDeactivateGuard();
    };
    OFormComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        setTimeout(function () {
            _this.determinateFormMode();
            _this.onFormInitStream.emit(true);
        }, 0);
    };
    OFormComponent.prototype._setComponentsEditable = function (state) {
        var components = this.getComponents();
        Object.keys(components).forEach(function (compKey) {
            var component = components[compKey];
            component.isReadOnly = !state;
        });
    };
    OFormComponent.prototype.setFormMode = function (mode) {
        switch (mode) {
            case OFormComponent.Mode().INITIAL:
                this.beforeInitialMode.emit();
                this.mode = mode;
                if (this._formToolbar) {
                    this._formToolbar.setInitialMode();
                }
                this._setComponentsEditable(this.isEditableDetail());
                this.onFormModeChange.emit(this.mode);
                this.onInitialMode.emit();
                break;
            case OFormComponent.Mode().INSERT:
                this.beforeInsertMode.emit();
                this.mode = mode;
                if (this._formToolbar) {
                    this._formToolbar.setInsertMode();
                }
                this.clearData();
                this._setComponentsEditable(true);
                this.onFormModeChange.emit(this.mode);
                this.onInsertMode.emit();
                break;
            case OFormComponent.Mode().UPDATE:
                this.beforeUpdateMode.emit();
                this.mode = mode;
                if (this._formToolbar) {
                    this._formToolbar.setEditMode();
                }
                this._setComponentsEditable(true);
                this.onFormModeChange.emit(this.mode);
                this.onUpdateMode.emit();
                break;
            case OFormComponent.Mode().QUERY:
                console.error('Form QUERY mode is not implemented');
                break;
            default:
                break;
        }
    };
    OFormComponent.prototype.setData = function (data) {
        if (Util.isArray(data)) {
            if (data.length > 1) {
                console.warn('[OFormComponent] Form data has more than a single record. Storing empty data');
            }
            var currentData = data.length === 1 ? data[0] : {};
            this._updateFormData(this.toFormValueData(currentData));
            this._emitData(currentData);
        }
        else if (Util.isObject(data)) {
            this._updateFormData(this.toFormValueData(data));
            this._emitData(data);
        }
        else {
            console.warn('Form has received not supported service data. Supported data are Array or Object');
            this._updateFormData({});
        }
    };
    OFormComponent.prototype._setData = function (data) {
        console.warn('Method `OFormComponent._setData` is deprecated and will be removed in the furute. Use `setData` instead');
        this.setData(data);
    };
    OFormComponent.prototype._emitData = function (data) {
        this.onDataLoaded.emit(data);
    };
    OFormComponent.prototype._backAction = function () {
        console.warn('Method `OFormComponent._backAction` is deprecated and will be removed in the furute. Use `back` instead');
        this.back();
    };
    OFormComponent.prototype.back = function (options) {
        var allOptions = Object.assign(options || {}, { ignoreNavigation: this.ignoreDefaultNavigation });
        this.formNavigation.navigateBack(allOptions);
    };
    OFormComponent.prototype._closeDetailAction = function (options) {
        console.warn('Method `OFormComponent._closeDetailAction` is deprecated and will be removed in the furute. Use `closeDetail` instead');
        this.closeDetail(options);
    };
    OFormComponent.prototype.closeDetail = function (options) {
        options = Util.isDefined(options) ? options : {};
        options.ignoreNavigation = this.ignoreDefaultNavigation;
        this.formNavigation.closeDetailAction(options);
    };
    OFormComponent.prototype._stayInRecordAfterInsert = function (insertedKeys) {
        this.formNavigation.stayInRecordAfterInsert(insertedKeys);
    };
    OFormComponent.prototype._reloadAction = function (useFilter) {
        if (useFilter === void 0) { useFilter = false; }
        console.warn('Method `OFormComponent._reloadAction` is deprecated and will be removed in the furute. Use `reload` instead');
        this.reload(useFilter);
    };
    OFormComponent.prototype.reload = function (useFilter) {
        if (useFilter === void 0) { useFilter = false; }
        var filter = {};
        if (useFilter) {
            filter = this.getCurrentKeysValues();
        }
        this.queryData(filter);
    };
    OFormComponent.prototype._goInsertMode = function (options) {
        console.warn('Method `OFormComponent._goInsertMode` is deprecated and will be removed in the furute. Use `goInsertMode` instead');
        this.goInsertMode(options);
    };
    OFormComponent.prototype.goInsertMode = function (options) {
        this.formNavigation.goInsertMode(options);
    };
    OFormComponent.prototype._clearFormAfterInsert = function () {
        this.clearData();
        this._setComponentsEditable(true);
    };
    OFormComponent.prototype._clearAndCloseFormAfterInsert = function () {
        var closeOpts = { exitWithoutConfirmation: true };
        this.closeDetail(closeOpts);
    };
    OFormComponent.prototype._insertAction = function () {
        console.warn('Method `OFormComponent._insertAction` is deprecated and will be removed in the furute. Use `insert` instead');
        this.insert();
    };
    OFormComponent.prototype.insert = function () {
        var _this = this;
        Object.keys(this.formGroup.controls).forEach(function (control) {
            _this.formGroup.controls[control].markAsTouched();
        });
        if (!this.formGroup.valid) {
            this.dialogService.alert(this.messageService.getValidationErrorDialogTitle(), this.messageService.getValidationError());
            return;
        }
        var self = this;
        var values = this.getAttributesValuesToInsert();
        var sqlTypes = this.getAttributesSQLTypes();
        this.insertData(values, sqlTypes).subscribe(function (resp) {
            self.postCorrectInsert(resp);
            self.formCache.setCacheSnapshot();
            self.markFormLayoutManagerToUpdate();
            if (self.afterInsertMode === 'detail') {
                self._stayInRecordAfterInsert(resp);
            }
            else if (self.afterInsertMode === 'new') {
                _this._clearFormAfterInsert();
            }
            else if (self.afterInsertMode === 'close') {
                _this._clearAndCloseFormAfterInsert();
            }
            else {
                self.closeDetail();
            }
        }, function (error) {
            self.postIncorrectInsert(error);
        });
    };
    OFormComponent.prototype._goEditMode = function () {
        console.warn('Method `OFormComponent._goEditMode` is deprecated and will be removed in the furute. Use `goEditMode` instead');
        this.goEditMode();
    };
    OFormComponent.prototype.goEditMode = function () {
        this.formNavigation.goEditMode();
    };
    OFormComponent.prototype._editAction = function () {
        console.warn('Method `OFormComponent._editAction` is deprecated and will be removed in the furute. Use `update` instead');
        this.update();
    };
    OFormComponent.prototype.update = function () {
        var _this = this;
        Object.keys(this.formGroup.controls).forEach(function (control) {
            _this.formGroup.controls[control].markAsTouched();
        });
        if (!this.formGroup.valid) {
            this.dialogService.alert('ERROR', this.messageService.getValidationError());
            return;
        }
        var self = this;
        var filter = this.getKeysValues();
        var values = this.getAttributesValuesToUpdate();
        var sqlTypes = this.getAttributesSQLTypes();
        if (Object.keys(values).length === 0) {
            this.dialogService.alert('INFO', this.messageService.getNothingToUpdateMessage());
            return;
        }
        this.updateData(filter, values, sqlTypes).subscribe(function (resp) {
            self.postCorrectUpdate(resp);
            self.formCache.setCacheSnapshot();
            self.markFormLayoutManagerToUpdate();
            if (self.stayInRecordAfterEdit) {
                self.reload(true);
            }
            else {
                self.closeDetail();
            }
        }, function (error) {
            self.postIncorrectUpdate(error);
        });
    };
    OFormComponent.prototype._deleteAction = function () {
        console.warn('Method `OFormComponent._deleteAction` is deprecated and will be removed in the furute. Use `delete` instead');
        return this.delete();
    };
    OFormComponent.prototype.delete = function () {
        var filter = this.getKeysValues();
        return this.deleteData(filter);
    };
    OFormComponent.prototype.queryData = function (filter) {
        var _this = this;
        if (!Util.isDefined(this.dataService)) {
            console.warn('OFormComponent: no service configured! aborting query');
            return;
        }
        if (!Util.isDefined(filter) || Object.keys(filter).length === 0) {
            console.warn('OFormComponent: no filter configured! aborting query');
            return;
        }
        this.formCache.restartCache();
        this.clearComponentsOldValue();
        if (this.querySubscription) {
            this.querySubscription.unsubscribe();
        }
        if (this.loaderSubscription) {
            this.loaderSubscription.unsubscribe();
        }
        this.loaderSubscription = this.load();
        var av = this.getAttributesToQuery();
        var sqlTypes = this.getAttributesSQLTypes();
        this.querySubscription = this.dataService[this.queryMethod](filter, av, this.entity, sqlTypes)
            .subscribe(function (resp) {
            if (resp.isSuccessful()) {
                _this.setData(resp.data);
            }
            else {
                _this._updateFormData({});
                _this.dialogService.alert('ERROR', _this.messageService.getQueryErrorMessage());
                console.error('ERROR: ' + resp.message);
            }
            _this.loaderSubscription.unsubscribe();
        }, function (err) {
            console.error(err);
            _this._updateFormData({});
            if (Util.isDefined(_this.queryFallbackFunction)) {
                _this.queryFallbackFunction(err);
            }
            else if (err && err.statusText) {
                _this.dialogService.alert('ERROR', err.statusText);
            }
            else {
                _this.dialogService.alert('ERROR', _this.messageService.getQueryErrorMessage());
            }
            _this.loaderSubscription.unsubscribe();
        });
    };
    OFormComponent.prototype.getAttributesToQuery = function () {
        var attributes = [];
        if (this.keysArray && this.keysArray.length > 0) {
            attributes.push.apply(attributes, tslib_1.__spread(this.keysArray));
        }
        var components = this.getComponents();
        Object.keys(components).forEach(function (item) {
            if (attributes.indexOf(item) < 0 &&
                components[item].isAutomaticRegistering() && components[item].isAutomaticBinding()) {
                attributes.push(item);
            }
        });
        var dataCache = this.formCache.getDataCache();
        if (dataCache) {
            Object.keys(dataCache).forEach(function (item) {
                if (item !== undefined && attributes.indexOf(item) === -1) {
                    attributes.push(item);
                }
            });
        }
        attributes = attributes.concat(this.colsArray.filter(function (col) { return attributes.indexOf(col) < 0; }));
        return attributes;
    };
    OFormComponent.prototype.insertData = function (values, sqlTypes) {
        var _this = this;
        if (this.loaderSubscription) {
            this.loaderSubscription.unsubscribe();
        }
        this.loaderSubscription = this.load();
        var self = this;
        var observable = new Observable(function (observer) {
            _this.dataService[_this.insertMethod](values, _this.entity, sqlTypes).subscribe(function (resp) {
                if (resp.isSuccessful()) {
                    observer.next(resp.data);
                    observer.complete();
                }
                else {
                    observer.error(resp.message);
                }
                self.loaderSubscription.unsubscribe();
            }, function (err) {
                observer.error(err);
                self.loaderSubscription.unsubscribe();
            });
        });
        return observable;
    };
    OFormComponent.prototype.getAttributesValuesToInsert = function () {
        var attrValues = {};
        if (this.formParentKeysValues) {
            Object.assign(attrValues, this.formParentKeysValues);
        }
        return Object.assign(attrValues, this.getRegisteredFieldsValues());
    };
    OFormComponent.prototype.getAttributesSQLTypes = function () {
        var _this = this;
        var types = {};
        this.keysSqlTypesArray.forEach(function (kst, i) { return types[_this.keysArray[i]] = SQLTypes.getSQLTypeValue(kst); });
        if (this._compSQLTypes && Object.keys(this._compSQLTypes).length > 0) {
            Object.assign(types, this._compSQLTypes);
        }
        return types;
    };
    OFormComponent.prototype.updateData = function (filter, values, sqlTypes) {
        var _this = this;
        if (this.loaderSubscription) {
            this.loaderSubscription.unsubscribe();
        }
        this.loaderSubscription = this.load();
        var self = this;
        var observable = new Observable(function (observer) {
            _this.dataService[_this.updateMethod](filter, values, _this.entity, sqlTypes).subscribe(function (resp) {
                if (resp.isSuccessful()) {
                    observer.next(resp.data);
                    observer.complete();
                }
                else {
                    observer.error(resp.message);
                }
                self.loaderSubscription.unsubscribe();
            }, function (err) {
                observer.error(err);
                self.loaderSubscription.unsubscribe();
            });
        });
        return observable;
    };
    OFormComponent.prototype.getAttributesValuesToUpdate = function () {
        var values = {};
        var self = this;
        var changedAttrs = this.formCache.getChangedFormControlsAttr();
        Object.keys(this.formGroup.controls).filter(function (controlName) {
            return self.ignoreFormCacheKeys.indexOf(controlName) === -1 &&
                changedAttrs.indexOf(controlName) !== -1;
        }).forEach(function (item) {
            var control = self.formGroup.controls[item];
            if (control instanceof OFormControl) {
                values[item] = control.getValue();
            }
            else {
                values[item] = control.value;
            }
            if (values[item] === undefined) {
                values[item] = null;
            }
        });
        return values;
    };
    OFormComponent.prototype.deleteData = function (filter) {
        var _this = this;
        if (this.loaderSubscription) {
            this.loaderSubscription.unsubscribe();
        }
        this.loaderSubscription = this.load();
        var self = this;
        var observable = new Observable(function (observer) {
            _this.canDiscardChanges = true;
            _this.dataService[_this.deleteMethod](filter, _this.entity).subscribe(function (resp) {
                if (resp.isSuccessful()) {
                    self.formCache.setCacheSnapshot();
                    self.markFormLayoutManagerToUpdate();
                    self.postCorrectDelete(resp);
                    observer.next(resp.data);
                    observer.complete();
                }
                else {
                    self.postIncorrectDelete(resp);
                    observer.error(resp.message);
                }
                self.loaderSubscription.unsubscribe();
            }, function (err) {
                self.postIncorrectDelete(err);
                observer.error(err);
                self.loaderSubscription.unsubscribe();
            });
        });
        return observable;
    };
    OFormComponent.prototype.toJSONData = function (data) {
        if (!data) {
            data = {};
        }
        var valueData = {};
        Object.keys(data).forEach(function (item) {
            valueData[item] = data[item].value;
        });
        return valueData;
    };
    OFormComponent.prototype.toFormValueData = function (data) {
        if (data && Util.isArray(data)) {
            var valueData_1 = [];
            var self_1 = this;
            data.forEach(function (item) {
                valueData_1.push(self_1.objectToFormValueData(item));
            });
            return valueData_1;
        }
        else if (data && Util.isObject(data)) {
            return this.objectToFormValueData(data);
        }
        return undefined;
    };
    OFormComponent.prototype.getKeysValues = function () {
        var filter = {};
        var currentRecord = this.formData;
        if (!this.keysArray) {
            return filter;
        }
        this.keysArray.forEach(function (key) {
            if (currentRecord[key] !== undefined) {
                var currentData = currentRecord[key];
                if (currentData instanceof OFormValue) {
                    currentData = currentData.value;
                }
                filter[key] = currentData;
            }
        });
        return filter;
    };
    OFormComponent.prototype.isInQueryMode = function () {
        return this.mode === OFormComponent.Mode().QUERY;
    };
    OFormComponent.prototype.isInInsertMode = function () {
        return this.mode === OFormComponent.Mode().INSERT;
    };
    OFormComponent.prototype.isInUpdateMode = function () {
        return this.mode === OFormComponent.Mode().UPDATE;
    };
    OFormComponent.prototype.isInInitialMode = function () {
        return this.mode === OFormComponent.Mode().INITIAL;
    };
    OFormComponent.prototype.setQueryMode = function () {
        this.setFormMode(OFormComponent.Mode().QUERY);
    };
    OFormComponent.prototype.setInsertMode = function () {
        this.setFormMode(OFormComponent.Mode().INSERT);
    };
    OFormComponent.prototype.setUpdateMode = function () {
        this.setFormMode(OFormComponent.Mode().UPDATE);
    };
    OFormComponent.prototype.setInitialMode = function () {
        this.setFormMode(OFormComponent.Mode().INITIAL);
    };
    OFormComponent.prototype.registerDynamicFormComponent = function (dynamicForm) {
        if (!Util.isDefined(dynamicForm)) {
            return;
        }
        var self = this;
        this.dynamicFormSubscription = dynamicForm.render.subscribe(function (res) {
            if (res) {
                self.refreshComponentsEditableState();
                if (!self.isInInsertMode() && self.queryOnInit) {
                    self.reload(true);
                }
                if (self.formParentKeysValues) {
                    Object.keys(self.formParentKeysValues).forEach(function (parentKey) {
                        var value = self.formParentKeysValues[parentKey];
                        var comp = self.getFieldReference(parentKey);
                        if (Util.isFormDataComponent(comp) && comp.isAutomaticBinding()) {
                            comp.setValue(value, {
                                emitModelToViewChange: false,
                                emitEvent: false
                            });
                        }
                    });
                }
            }
        });
    };
    OFormComponent.prototype.unregisterDynamicFormComponent = function (dynamicForm) {
        if (dynamicForm && this.dynamicFormSubscription) {
            this.dynamicFormSubscription.unsubscribe();
        }
    };
    OFormComponent.prototype.getRequiredComponents = function () {
        var requiredCompontents = {};
        var components = this.getComponents();
        if (components) {
            Object.keys(components).forEach(function (key) {
                var comp = components[key];
                var attr = comp.getAttribute();
                if (comp.isRequired && attr && attr.length > 0) {
                    requiredCompontents[attr] = comp;
                }
            });
        }
        return requiredCompontents;
    };
    Object.defineProperty(OFormComponent.prototype, "layoutDirection", {
        get: function () {
            return this._layoutDirection;
        },
        set: function (val) {
            var parsedVal = (val || '').toLowerCase();
            this._layoutDirection = ['row', 'column', 'row-reverse', 'column-reverse'].indexOf(parsedVal) !== -1 ? parsedVal : OFormComponent.DEFAULT_LAYOUT_DIRECTION;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OFormComponent.prototype, "layoutAlign", {
        get: function () {
            return this._layoutAlign;
        },
        set: function (val) {
            this._layoutAlign = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OFormComponent.prototype, "showFloatingToolbar", {
        get: function () {
            return this.showHeader && this.headerMode === 'floating';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OFormComponent.prototype, "showNotFloatingToolbar", {
        get: function () {
            return this.showHeader && this.headerMode !== 'floating';
        },
        enumerable: true,
        configurable: true
    });
    OFormComponent.prototype.isEditableDetail = function () {
        return this.editableDetail;
    };
    OFormComponent.prototype.isInitialStateChanged = function (ignoreAttrs) {
        if (ignoreAttrs === void 0) { ignoreAttrs = []; }
        return this.formCache.isInitialStateChanged(ignoreAttrs);
    };
    OFormComponent.prototype._undoLastChangeAction = function () {
        console.warn('Method `OFormComponent._undoLastChangeAction` is deprecated and will be removed in the furute. Use `undo` instead');
        this.undo();
    };
    OFormComponent.prototype.undo = function () {
        this.formCache.undoLastChange();
    };
    Object.defineProperty(OFormComponent.prototype, "isCacheStackEmpty", {
        get: function () {
            return this.formCache.isCacheStackEmpty;
        },
        enumerable: true,
        configurable: true
    });
    OFormComponent.prototype.undoKeyboardPressed = function () {
        this.formCache.undoLastChange();
    };
    OFormComponent.prototype.getFormToolbar = function () {
        return this._formToolbar;
    };
    OFormComponent.prototype.getFormManager = function () {
        return this.formNavigation.formLayoutManager;
    };
    OFormComponent.prototype.getFormNavigation = function () {
        return this.formNavigation;
    };
    OFormComponent.prototype.getFormCache = function () {
        return this.formCache;
    };
    OFormComponent.prototype.getUrlParam = function (arg) {
        return this.getFormNavigation().getUrlParams()[arg];
    };
    OFormComponent.prototype.getUrlParams = function () {
        return this.getFormNavigation().getUrlParams();
    };
    OFormComponent.prototype.setUrlParamsAndReload = function (val) {
        this.formNavigation.setUrlParams(val);
        this.reload(true);
    };
    OFormComponent.prototype.getRegisteredFieldsValues = function () {
        var values = {};
        var components = this.getComponents();
        var self = this;
        var componentsKeys = Object.keys(components).filter(function (key) { return self.ignoreFormCacheKeys.indexOf(key) === -1; });
        componentsKeys.forEach(function (compKey) {
            var comp = components[compKey];
            values[compKey] = comp.getValue();
        });
        return values;
    };
    OFormComponent.prototype.getFieldValue = function (attr) {
        var value = null;
        var comp = this.getFieldReference(attr);
        if (comp) {
            value = comp.getValue();
        }
        return value;
    };
    OFormComponent.prototype.getFieldValues = function (attrs) {
        var _this = this;
        var arr = {};
        attrs.forEach(function (key) { return arr[key] = _this.getFieldValue(key); });
        return arr;
    };
    OFormComponent.prototype.setFieldValue = function (attr, value, options) {
        var comp = this.getFieldReference(attr);
        if (comp) {
            comp.setValue(value, options);
        }
    };
    OFormComponent.prototype.setFieldValues = function (values, options) {
        for (var key in values) {
            if (values.hasOwnProperty(key)) {
                this.setFieldValue(key, values[key], options);
            }
        }
    };
    OFormComponent.prototype.clearFieldValue = function (attr, options) {
        var comp = this.getFieldReference(attr);
        if (comp) {
            comp.clearValue(options);
        }
    };
    OFormComponent.prototype.clearFieldValues = function (attrs, options) {
        var self = this;
        attrs.forEach(function (key) {
            self.clearFieldValue(key, options);
        });
    };
    OFormComponent.prototype.getFieldReference = function (attr) {
        return this._components[attr];
    };
    OFormComponent.prototype.getFieldReferences = function (attrs) {
        var arr = {};
        var self = this;
        attrs.forEach(function (key) {
            arr[key] = self.getFieldReference(key);
        });
        return arr;
    };
    OFormComponent.prototype.getFormComponentPermissions = function (attr) {
        var permissions;
        if (Util.isDefined(this.permissions)) {
            permissions = (this.permissions.components || []).find(function (comp) { return comp.attr === attr; });
        }
        return permissions;
    };
    OFormComponent.prototype.getActionsPermissions = function () {
        var permissions;
        if (Util.isDefined(this.permissions)) {
            permissions = (this.permissions.actions || []);
        }
        return permissions;
    };
    OFormComponent.prototype.determinateFormMode = function () {
        var _this = this;
        var urlSegments = this.formNavigation.getUrlSegments();
        if (urlSegments.length > 0) {
            var segment = urlSegments[urlSegments.length - 1];
            this.determinateModeFromUrlSegment(segment);
        }
        else if (this.actRoute.parent) {
            this.actRoute.parent.url.subscribe(function (segments) {
                var segment = segments[segments.length - 1];
                _this.determinateModeFromUrlSegment(segment);
            });
        }
        else {
            this.setFormMode(OFormComponent.Mode().INITIAL);
        }
        this.stayInRecordAfterEdit = this.stayInRecordAfterEdit || this.isEditableDetail();
    };
    OFormComponent.prototype.determinateModeFromUrlSegment = function (segment) {
        var _path = segment ? segment.path : '';
        if (this.isInsertModePath(_path)) {
            this.setInsertMode();
            return;
        }
        else if (this.isUpdateModePath(_path)) {
            this.setUpdateMode();
        }
        else {
            this.setInitialMode();
        }
    };
    OFormComponent.prototype._updateFormData = function (newFormData) {
        var _this = this;
        var self = this;
        this.zone.run(function () {
            _this.formData = newFormData;
            var components = _this.getComponents();
            if (components) {
                Object.keys(components).forEach(function (key) {
                    var comp = components[key];
                    if (Util.isFormDataComponent(comp)) {
                        try {
                            if (comp.isAutomaticBinding()) {
                                comp.data = self.getDataValue(key);
                            }
                        }
                        catch (error) {
                            console.error(error);
                        }
                    }
                });
                self.initializeFields();
            }
        });
    };
    OFormComponent.prototype.initializeFields = function () {
        var _this = this;
        Object.keys(this.formGroup.controls).forEach(function (control) {
            _this.formGroup.controls[control].markAsPristine();
        });
        this.formCache.registerCache();
        this.formNavigation.updateNavigation();
    };
    OFormComponent.prototype.clearComponentsOldValue = function () {
        var components = this.getComponents();
        var self = this;
        var componentsKeys = Object.keys(components).filter(function (key) { return self.ignoreFormCacheKeys.indexOf(key) === -1; });
        componentsKeys.forEach(function (compKey) {
            var comp = components[compKey];
            comp.oldValue = undefined;
            comp.getFormControl().setValue(undefined);
        });
    };
    OFormComponent.prototype.postCorrectInsert = function (result) {
        this.snackBarService.open(this.messageService.getInsertSuccessMessage(), { icon: 'check_circle' });
        this.onInsert.emit(result);
    };
    OFormComponent.prototype.postIncorrectInsert = function (result) {
        this.showError('insert', result);
    };
    OFormComponent.prototype.postIncorrectDelete = function (result) {
        this.showError('delete', result);
    };
    OFormComponent.prototype.postIncorrectUpdate = function (result) {
        this.showError('update', result);
    };
    OFormComponent.prototype.postCorrectUpdate = function (result) {
        this.snackBarService.open(this.messageService.getUpdateSuccessMessage(), { icon: 'check_circle' });
        this.onUpdate.emit(result);
    };
    OFormComponent.prototype.postCorrectDelete = function (result) {
        this.snackBarService.open(this.messageService.getDeleteSuccessMessage(), { icon: 'check_circle' });
        this.onDelete.emit(result);
    };
    OFormComponent.prototype.markFormLayoutManagerToUpdate = function () {
        var formLayoutManager = this.getFormManager();
        if (Util.isDefined(formLayoutManager)) {
            formLayoutManager.markForUpdate = true;
        }
    };
    OFormComponent.prototype.objectToFormValueData = function (data) {
        if (data === void 0) { data = {}; }
        var valueData = {};
        Object.keys(data).forEach(function (item) {
            valueData[item] = new OFormValue(data[item]);
        });
        return valueData;
    };
    OFormComponent.prototype.getCurrentKeysValues = function () {
        return this.formNavigation.getCurrentKeysValues();
    };
    OFormComponent.prototype.refreshComponentsEditableState = function () {
        switch (this.mode) {
            case OFormComponent.Mode().INITIAL:
                this._setComponentsEditable(this.isEditableDetail());
                break;
            case OFormComponent.Mode().INSERT:
            case OFormComponent.Mode().UPDATE:
                this._setComponentsEditable(true);
                break;
            default:
                break;
        }
    };
    OFormComponent.prototype.isInsertModePath = function (path) {
        var navData = this.navigationService.getLastItem();
        return Util.isDefined(navData) ? path === navData.getInsertFormRoute() : Codes.DEFAULT_INSERT_ROUTE === path;
    };
    OFormComponent.prototype.isUpdateModePath = function (path) {
        var navData = this.navigationService.getPreviousRouteData();
        return Util.isDefined(navData) && path === navData.getEditFormRoute();
    };
    OFormComponent.prototype.showError = function (operation, result) {
        if (result && typeof result !== 'object') {
            this.dialogService.alert('ERROR', result);
        }
        else {
            var message = '';
            switch (operation) {
                case 'update':
                    message = this.messageService.getUpdateErrorMessage();
                    break;
                case 'insert':
                    message = this.messageService.getInsertErrorMessage();
                    break;
                case 'delete':
                    message = this.messageService.getDeleteErrorMessage();
                    break;
            }
            this.dialogService.alert('ERROR', message);
        }
    };
    OFormComponent.DEFAULT_LAYOUT_DIRECTION = 'column';
    OFormComponent.guardClassName = 'CanDeactivateFormGuard';
    OFormComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-form',
                    providers: [
                        OntimizeServiceProvider,
                        OFormMessageService
                    ],
                    template: "<ng-template #customFormToolbarButtons>\n  <ng-content select=\"[o-form-toolbar-buttons]\"></ng-content>\n</ng-template>\n\n<o-form-toolbar *ngIf=\"showFloatingToolbar && headerPosition==='top'\" [label-header]=\"labelheader\" [label-header-align]=\"labelHeaderAlign\"\n  [header-actions]=\"headeractions\" [show-header-navigation]=\"showHeaderNavigation\" [show-header-actions-text]=\"showHeaderActionsText\"\n  (onCancel)=\"onCancel.emit($event)\" layout-padding>\n  <div o-custom-form-toolbar-buttons-wrapper fxLayout=\"row\" fxLayoutAlign=\"end center\">\n    <ng-container *ngTemplateOutlet=\"customFormToolbarButtons\"></ng-container>\n  </div>\n</o-form-toolbar>\n\n<ng-host oKeyboardListener keyboardKeys=\"17;90\" (onKeysPressed)=\"undoKeyboardPressed()\" class=\"scrolling o-scroll\">\n  <div fxFlex=\"grow\">\n    <o-form-toolbar *ngIf=\"showNotFloatingToolbar && headerPosition==='top'\" [label-header]=\"labelheader\" [label-header-align]=\"labelHeaderAlign\"\n      [header-actions]=\"headeractions\" [show-header-navigation]=\"showHeaderNavigation\" [show-header-actions-text]=\"showHeaderActionsText\"\n      (onCancel)=\"onCancel.emit($event)\" layout-padding>\n      <div o-custom-form-toolbar-buttons-wrapper fxLayout=\"row\" fxLayoutAlign=\"end center\">\n        <div o-custom-form-toolbar-buttons-wrapper fxLayout=\"row\" fxLayoutAlign=\"end center\">\n          <ng-container *ngTemplateOutlet=\"customFormToolbarButtons\"></ng-container>\n        </div>\n      </div>\n    </o-form-toolbar>\n\n    <form #innerForm [formGroup]=\"formGroup\" class=\"inner-form\" [class.form-no-toolbar]=\"!showHeader\" autocomplete=\"off\" autocorrect=\"off\"\n      autocapitalize=\"off\" spellcheck=\"false\">\n      <div *ngIf=\"loading | async\" class=\"progress-bar-container\">\n        <mat-progress-bar mode=\"indeterminate\"></mat-progress-bar>\n      </div>\n      <div layout-padding [fxLayout]=\"layoutDirection\" [fxLayoutAlign]=\"layoutAlign\" class=\"o-form-content-wrapper\">\n        <ng-content></ng-content>\n      </div>\n    </form>\n\n    <o-form-toolbar *ngIf=\"showNotFloatingToolbar && headerPosition==='bottom'\" [label-header]=\"labelheader\" [label-header-align]=\"labelHeaderAlign\"\n      [header-actions]=\"headeractions\" [show-header-navigation]=\"showHeaderNavigation\" [show-header-actions-text]=\"showHeaderActionsText\"\n      (onCancel)=\"onCancel.emit($event)\" layout-padding>\n      <div o-custom-form-toolbar-buttons-wrapper fxLayout=\"row\" fxLayoutAlign=\"end center\">\n        <ng-container *ngTemplateOutlet=\"customFormToolbarButtons\"></ng-container>\n      </div>\n    </o-form-toolbar>\n  </div>\n</ng-host>\n\n<o-form-toolbar *ngIf=\"showFloatingToolbar && headerPosition==='bottom'\" [label-header]=\"labelheader\" [label-header-align]=\"labelHeaderAlign\"\n  [header-actions]=\"headeractions\" [show-header-navigation]=\"showHeaderNavigation\" [show-header-actions-text]=\"showHeaderActionsText\"\n  (onCancel)=\"onCancel.emit($event)\" layout-padding>\n  <div o-custom-form-toolbar-buttons-wrapper fxLayout=\"row\" fxLayoutAlign=\"end center\">\n    <ng-container *ngTemplateOutlet=\"customFormToolbarButtons\"></ng-container>\n  </div>\n</o-form-toolbar>\n",
                    inputs: DEFAULT_INPUTS_O_FORM,
                    outputs: DEFAULT_OUTPUTS_O_FORM,
                    encapsulation: ViewEncapsulation.None,
                    host: {
                        '[class.o-form]': 'true'
                    },
                    styles: [".o-form{display:flex;flex:auto;flex-direction:column;max-height:100%}.o-form .scrolling{display:flex;flex:auto;overflow-y:auto;flex-direction:column}.o-form.fill-form form.inner-form{height:100%}.o-form form.inner-form{display:flex;flex:auto;flex-direction:column;max-height:100%}.o-form form.inner-form .progress-bar-container{padding:8px}.o-form form.form-no-toolbar{top:0}.o-form form .o-form-content-wrapper{height:100%;width:100%;box-sizing:border-box}"]
                }] }
    ];
    OFormComponent.ctorParameters = function () { return [
        { type: Router },
        { type: ActivatedRoute },
        { type: NgZone },
        { type: ChangeDetectorRef },
        { type: Injector },
        { type: ElementRef }
    ]; };
    OFormComponent.propDecorators = {
        innerFormEl: [{ type: ViewChild, args: ['innerForm', { static: false },] }]
    };
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OFormComponent.prototype, "showHeader", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OFormComponent.prototype, "stayInRecordAfterEdit", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OFormComponent.prototype, "queryOnInit", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OFormComponent.prototype, "editableDetail", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OFormComponent.prototype, "undoButton", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OFormComponent.prototype, "showHeaderNavigation", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OFormComponent.prototype, "includeBreadcrumb", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OFormComponent.prototype, "detectChangesOnBlur", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OFormComponent.prototype, "confirmExit", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OFormComponent.prototype, "ignoreDefaultNavigation", void 0);
    return OFormComponent;
}());
export { OFormComponent };
//# sourceMappingURL=data:application/json;base64,