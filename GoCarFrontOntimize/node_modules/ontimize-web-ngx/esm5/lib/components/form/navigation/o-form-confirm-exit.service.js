import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { DialogService } from '../../../services/dialog.service';
import { Util } from '../../../util/util';
import * as i0 from "@angular/core";
import * as i1 from "../../../services/dialog.service";
var OFormConfirmExitService = (function () {
    function OFormConfirmExitService(dialogService) {
        this.dialogService = dialogService;
    }
    OFormConfirmExitService.prototype.subscribeToDiscardChanges = function (form, ignoreAttrs) {
        if (ignoreAttrs === void 0) { ignoreAttrs = []; }
        var subscription;
        if (form.isInitialStateChanged(ignoreAttrs) && this.mustShowConfirmationInForm(form)) {
            subscription = this.getConfirmDialogSubscription(form);
        }
        else {
            var observable = new Observable(function (observer) {
                observer.next(true);
                observer.complete();
            });
            subscription = observable.toPromise();
        }
        return subscription;
    };
    OFormConfirmExitService.prototype.mustShowConfirmationInForm = function (form) {
        return form.isInInsertMode() || form.isInUpdateMode();
    };
    OFormConfirmExitService.prototype.restart = function () {
        this.confirmDialogSubscription = null;
    };
    OFormConfirmExitService.prototype.getConfirmDialogSubscription = function (form) {
        var _this = this;
        if (!Util.isDefined(this.confirmDialogSubscription)) {
            this.confirmDialogSubscription = new Promise(function (resolve) {
                _this.dialogService.confirm(form.messageService.getDiscardChangesConfirmationDialogTitle(), form.messageService.getDiscardChangesConfirmationMessage()).then(function (res) {
                    _this.restart();
                    resolve(res);
                });
            });
        }
        return this.confirmDialogSubscription;
    };
    OFormConfirmExitService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    OFormConfirmExitService.ctorParameters = function () { return [
        { type: DialogService }
    ]; };
    OFormConfirmExitService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function OFormConfirmExitService_Factory() { return new OFormConfirmExitService(i0.ɵɵinject(i1.DialogService)); }, token: OFormConfirmExitService, providedIn: "root" });
    return OFormConfirmExitService;
}());
export { OFormConfirmExitService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1mb3JtLWNvbmZpcm0tZXhpdC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vb250aW1pemUtd2ViLW5neC8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2Zvcm0vbmF2aWdhdGlvbi9vLWZvcm0tY29uZmlybS1leGl0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUNqRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7OztBQUcxQztJQU9FLGlDQUFzQixhQUE0QjtRQUE1QixrQkFBYSxHQUFiLGFBQWEsQ0FBZTtJQUFJLENBQUM7SUFFdkQsMkRBQXlCLEdBQXpCLFVBQTBCLElBQW9CLEVBQUUsV0FBMEI7UUFBMUIsNEJBQUEsRUFBQSxnQkFBMEI7UUFDeEUsSUFBSSxZQUE4QixDQUFDO1FBQ25DLElBQUksSUFBSSxDQUFDLHFCQUFxQixDQUFDLFdBQVcsQ0FBQyxJQUFJLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNwRixZQUFZLEdBQUcsSUFBSSxDQUFDLDRCQUE0QixDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3hEO2FBQU07WUFDTCxJQUFNLFVBQVUsR0FBRyxJQUFJLFVBQVUsQ0FBVSxVQUFBLFFBQVE7Z0JBQ2pELFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3BCLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUN0QixDQUFDLENBQUMsQ0FBQztZQUNILFlBQVksR0FBRyxVQUFVLENBQUMsU0FBUyxFQUFFLENBQUM7U0FDdkM7UUFDRCxPQUFPLFlBQVksQ0FBQztJQUN0QixDQUFDO0lBRVMsNERBQTBCLEdBQXBDLFVBQXFDLElBQW9CO1FBQ3ZELE9BQU8sSUFBSSxDQUFDLGNBQWMsRUFBRSxJQUFJLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUN4RCxDQUFDO0lBRVMseUNBQU8sR0FBakI7UUFDRSxJQUFJLENBQUMseUJBQXlCLEdBQUcsSUFBSSxDQUFDO0lBQ3hDLENBQUM7SUFFUyw4REFBNEIsR0FBdEMsVUFBdUMsSUFBb0I7UUFBM0QsaUJBWUM7UUFYQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMseUJBQXlCLENBQUMsRUFBRTtZQUNuRCxJQUFJLENBQUMseUJBQXlCLEdBQUcsSUFBSSxPQUFPLENBQUMsVUFBQyxPQUFPO2dCQUNuRCxLQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FDeEIsSUFBSSxDQUFDLGNBQWMsQ0FBQyx3Q0FBd0MsRUFBRSxFQUM5RCxJQUFJLENBQUMsY0FBYyxDQUFDLG9DQUFvQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQyxHQUFHO29CQUNuRSxLQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7b0JBQ2YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNmLENBQUMsQ0FBQyxDQUFBO1lBQ04sQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUNELE9BQU8sSUFBSSxDQUFDLHlCQUF5QixDQUFDO0lBQ3hDLENBQUM7O2dCQTNDRixVQUFVLFNBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzs7Z0JBTlEsYUFBYTs7O2tDQUZ0QjtDQWtEQyxBQTVDRCxJQTRDQztTQXpDWSx1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBEaWFsb2dTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vc2VydmljZXMvZGlhbG9nLnNlcnZpY2UnO1xuaW1wb3J0IHsgVXRpbCB9IGZyb20gJy4uLy4uLy4uL3V0aWwvdXRpbCc7XG5pbXBvcnQgeyBPRm9ybUNvbXBvbmVudCB9IGZyb20gJy4uL28tZm9ybS5jb21wb25lbnQnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBPRm9ybUNvbmZpcm1FeGl0U2VydmljZSB7XG5cbiAgcHJvdGVjdGVkIGNvbmZpcm1EaWFsb2dTdWJzY3JpcHRpb246IFByb21pc2U8Ym9vbGVhbj47XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGRpYWxvZ1NlcnZpY2U6IERpYWxvZ1NlcnZpY2UpIHsgfVxuXG4gIHN1YnNjcmliZVRvRGlzY2FyZENoYW5nZXMoZm9ybTogT0Zvcm1Db21wb25lbnQsIGlnbm9yZUF0dHJzOiBzdHJpbmdbXSA9IFtdKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgbGV0IHN1YnNjcmlwdGlvbjogUHJvbWlzZTxib29sZWFuPjtcbiAgICBpZiAoZm9ybS5pc0luaXRpYWxTdGF0ZUNoYW5nZWQoaWdub3JlQXR0cnMpICYmIHRoaXMubXVzdFNob3dDb25maXJtYXRpb25JbkZvcm0oZm9ybSkpIHtcbiAgICAgIHN1YnNjcmlwdGlvbiA9IHRoaXMuZ2V0Q29uZmlybURpYWxvZ1N1YnNjcmlwdGlvbihmb3JtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qgb2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlPGJvb2xlYW4+KG9ic2VydmVyID0+IHtcbiAgICAgICAgb2JzZXJ2ZXIubmV4dCh0cnVlKTtcbiAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgIH0pO1xuICAgICAgc3Vic2NyaXB0aW9uID0gb2JzZXJ2YWJsZS50b1Byb21pc2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgfVxuXG4gIHByb3RlY3RlZCBtdXN0U2hvd0NvbmZpcm1hdGlvbkluRm9ybShmb3JtOiBPRm9ybUNvbXBvbmVudCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBmb3JtLmlzSW5JbnNlcnRNb2RlKCkgfHwgZm9ybS5pc0luVXBkYXRlTW9kZSgpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHJlc3RhcnQoKSB7XG4gICAgdGhpcy5jb25maXJtRGlhbG9nU3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgfVxuXG4gIHByb3RlY3RlZCBnZXRDb25maXJtRGlhbG9nU3Vic2NyaXB0aW9uKGZvcm06IE9Gb3JtQ29tcG9uZW50KTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgaWYgKCFVdGlsLmlzRGVmaW5lZCh0aGlzLmNvbmZpcm1EaWFsb2dTdWJzY3JpcHRpb24pKSB7XG4gICAgICB0aGlzLmNvbmZpcm1EaWFsb2dTdWJzY3JpcHRpb24gPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICB0aGlzLmRpYWxvZ1NlcnZpY2UuY29uZmlybShcbiAgICAgICAgICBmb3JtLm1lc3NhZ2VTZXJ2aWNlLmdldERpc2NhcmRDaGFuZ2VzQ29uZmlybWF0aW9uRGlhbG9nVGl0bGUoKSxcbiAgICAgICAgICBmb3JtLm1lc3NhZ2VTZXJ2aWNlLmdldERpc2NhcmRDaGFuZ2VzQ29uZmlybWF0aW9uTWVzc2FnZSgpKS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVzdGFydCgpO1xuICAgICAgICAgICAgcmVzb2x2ZShyZXMpO1xuICAgICAgICAgIH0pXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY29uZmlybURpYWxvZ1N1YnNjcmlwdGlvbjtcbiAgfVxufVxuXG4iXX0=