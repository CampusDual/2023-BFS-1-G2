import * as tslib_1 from "tslib";
import { ContentChildren, EventEmitter, HostBinding, HostListener, QueryList, ViewChildren } from '@angular/core';
import { FormGroup, Validators } from '@angular/forms';
import { MatError, MatSuffix } from '@angular/material';
import { O_INPUTS_OPTIONS } from '../config/app-config';
import { BooleanConverter, InputConverter } from '../decorators/input-converter';
import { OMatErrorDirective } from '../directives/o-mat-error.directive';
import { O_MAT_ERROR_OPTIONS } from '../services/factories';
import { PermissionsService } from '../services/permissions/permissions.service';
import { OValidatorComponent } from '../shared/components/validation/o-validator.component';
import { Codes } from '../util/codes';
import { PermissionsUtils } from '../util/permissions';
import { SQLTypes } from '../util/sqltypes';
import { Util } from '../util/util';
import { OFormValue } from './form/o-form-value';
import { OFormControl } from './input/o-form-control.class';
import { OBaseComponent } from './o-component.class';
import { OValueChangeEvent } from './o-value-change-event.class';
export var DEFAULT_INPUTS_O_FORM_DATA_COMPONENT = [
    'oattr: attr',
    'olabel: label',
    'floatLabel: float-label',
    'oplaceholder: placeholder',
    'tooltip',
    'tooltipPosition: tooltip-position',
    'tooltipShowDelay: tooltip-show-delay',
    'tooltipHideDelay: tooltip-hide-delay',
    'data',
    'autoBinding: automatic-binding',
    'autoRegistering: automatic-registering',
    'enabled',
    'orequired: required',
    'sqlType: sql-type',
    'width',
    'readOnly: read-only',
    'clearButton: clear-button',
    'angularValidatorsFn: validators',
    'appearance',
    'hideRequiredMarker:hide-required-marker',
    'labelVisible:label-visible',
    'selectAllOnClick:select-all-on-click'
];
export var DEFAULT_OUTPUTS_O_FORM_DATA_COMPONENT = [
    'onChange',
    'onValueChange',
    'onFocus',
    'onBlur'
];
var OFormDataComponent = (function (_super) {
    tslib_1.__extends(OFormDataComponent, _super);
    function OFormDataComponent(form, elRef, injector) {
        var _this = _super.call(this, injector) || this;
        _this.autoBinding = true;
        _this.autoRegistering = true;
        _this.clearButton = false;
        _this.angularValidatorsFn = [];
        _this.hideRequiredMarker = false;
        _this.labelVisible = true;
        _this.selectAllOnClick = false;
        _this.onChange = new EventEmitter();
        _this.onValueChange = new EventEmitter();
        _this.onFocus = new EventEmitter();
        _this.onBlur = new EventEmitter();
        _this.defaultValue = void 0;
        _this._SQLType = SQLTypes.OTHER;
        _this._defaultSQLTypeKey = 'OTHER';
        _this.errorsData = [];
        _this.form = form;
        _this.elRef = elRef;
        _this.permissionsService = _this.injector.get(PermissionsService);
        try {
            _this.errorOptions = _this.injector.get(O_MAT_ERROR_OPTIONS) || {};
        }
        catch (e) {
            _this.errorOptions = {};
        }
        if (!Util.isDefined(_this.errorOptions.type)) {
            _this.errorOptions.type = Codes.O_MAT_ERROR_STANDARD;
        }
        try {
            _this.selectAllOnClick = _this.injector.get(O_INPUTS_OPTIONS).selectAllOnClick;
        }
        catch (e) {
            _this.selectAllOnClick = false;
        }
        return _this;
    }
    Object.defineProperty(OFormDataComponent.prototype, "hostWidth", {
        get: function () {
            return this.width;
        },
        enumerable: true,
        configurable: true
    });
    OFormDataComponent.prototype.handleClick = function () {
        if (this.selectAllOnClick) {
            this.selectValue();
        }
    };
    OFormDataComponent.prototype.ngOnInit = function () {
        this.initialize();
    };
    OFormDataComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (this._matSuffixList) {
            this.setSuffixClass(this._matSuffixList.length);
            this.matSuffixSubscription = this._matSuffixList.changes.subscribe(function () {
                _this.setSuffixClass(_this._matSuffixList.length);
            });
        }
        if (this.validatorChildren) {
            this.validatorsSubscription = this.validatorChildren.changes.subscribe(function () {
                _this.updateValidators();
            });
            if (this.validatorChildren.length > 0) {
                this.updateValidators();
            }
        }
        if (!this.hasEnabledPermission) {
            this.mutationObserver = PermissionsUtils.registerDisabledChangesInDom(this.getMutationObserverTarget(), {
                callback: this.disableFormControl.bind(this)
            });
        }
        this.addOntimizeCustomAppearanceClass();
        try {
            this.oInputsOptions = this.injector.get(O_INPUTS_OPTIONS);
        }
        catch (e) {
            this.oInputsOptions = {};
        }
        Util.parseOInputsOptions(this.elRef, this.oInputsOptions);
    };
    OFormDataComponent.prototype.ngOnDestroy = function () {
        this.destroy();
    };
    OFormDataComponent.prototype.ngOnChanges = function (changes) {
        if (Util.isDefined(changes.angularValidatorsFn)) {
            this.updateValidators();
        }
    };
    OFormDataComponent.prototype.hasEnabledPermission = function () {
        return this.permissions ? this.permissions.enabled : true;
    };
    OFormDataComponent.prototype.hasVisiblePermission = function () {
        return this.permissions ? this.permissions.visible : true;
    };
    OFormDataComponent.prototype.getFormGroup = function () {
        if (this._fGroup) {
            return this._fGroup;
        }
        var formGroup = this.form ? this.form.formGroup : undefined;
        if ((!this.hasEnabledPermission() || !this.hasVisiblePermission()) && !this._fGroup) {
            var group = {};
            group[this.oattr] = this._fControl;
            this._fGroup = new FormGroup(group);
            formGroup = this._fGroup;
        }
        return formGroup;
    };
    OFormDataComponent.prototype.getFormControl = function () {
        return this._fControl;
    };
    OFormDataComponent.prototype.hasError = function (error) {
        return !this.isReadOnly && this._fControl && this._fControl.touched && this._fControl.hasError(error);
    };
    OFormDataComponent.prototype.getErrorValue = function (error, prop) {
        return this._fControl && this._fControl.hasError(error) ? this._fControl.getError(error)[prop] || '' : '';
    };
    OFormDataComponent.prototype.getActiveOErrors = function () {
        var _this = this;
        return this.errorOptions.type === Codes.O_MAT_ERROR_STANDARD
            ? this.errorsData.filter(function (item) { return _this.hasError(item.name); })
            : [];
    };
    OFormDataComponent.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        this.getControl();
        this.parsePermissions();
        if (!Util.isDefined(this.permissions)) {
            if (this.form) {
                this.registerFormListeners();
                this.isReadOnly = !(this.form.isInUpdateMode() || this.form.isInInsertMode() || this.form.isEditableDetail());
            }
            else {
                this.isReadOnly = !this.enabled;
            }
        }
    };
    OFormDataComponent.prototype.destroy = function () {
        this.unregisterFormListeners();
        if (this.matSuffixSubscription) {
            this.matSuffixSubscription.unsubscribe();
        }
        if (this.validatorsSubscription) {
            this.validatorsSubscription.unsubscribe();
        }
        if (this.mutationObserver) {
            this.mutationObserver.disconnect();
        }
        if (this._fControlSubscription) {
            this._fControlSubscription.unsubscribe();
        }
    };
    OFormDataComponent.prototype.registerFormListeners = function () {
        if (this.form) {
            this.form.registerFormComponent(this);
            this.form.registerFormControlComponent(this);
            this.form.registerSQLTypeFormComponent(this);
        }
    };
    OFormDataComponent.prototype.unregisterFormListeners = function () {
        if (this.form) {
            this.form.unregisterFormComponent(this);
            this.form.unregisterFormControlComponent(this);
            this.form.unregisterSQLTypeFormComponent(this);
        }
    };
    Object.defineProperty(OFormDataComponent.prototype, "data", {
        set: function (value) {
            this.setData(value);
        },
        enumerable: true,
        configurable: true
    });
    OFormDataComponent.prototype.setData = function (newValue) {
        var previousValue = this.oldValue;
        this.setFormValue(newValue);
        this.emitOnValueChange(OValueChangeEvent.PROGRAMMATIC_CHANGE, newValue, previousValue);
    };
    OFormDataComponent.prototype.isAutomaticBinding = function () {
        return this.autoBinding;
    };
    OFormDataComponent.prototype.isAutomaticRegistering = function () {
        return this.autoRegistering;
    };
    OFormDataComponent.prototype.getValue = function () {
        if (this.value instanceof OFormValue) {
            if (this.value.value !== undefined) {
                return this.value.value;
            }
        }
        return this.defaultValue;
    };
    OFormDataComponent.prototype.setValue = function (val, options, setDirty) {
        if (options === void 0) { options = {}; }
        if (setDirty === void 0) { setDirty = false; }
        if (!PermissionsUtils.checkEnabledPermission(this.permissions)) {
            return;
        }
        if (this.oldValue !== val) {
            var previousValue = this.oldValue;
            this.setFormValue(val, options, setDirty);
            if (options && options.emitModelToViewValueChange !== false) {
                var changeType = (options.hasOwnProperty('changeType')) ? options.changeType : OValueChangeEvent.PROGRAMMATIC_CHANGE;
                this.emitOnValueChange(changeType, val, previousValue);
            }
        }
    };
    OFormDataComponent.prototype.clearValue = function (options, setDirty) {
        if (setDirty === void 0) { setDirty = false; }
        if (!PermissionsUtils.checkEnabledPermission(this.permissions)) {
            return;
        }
        this.setValue(void 0, options, setDirty);
    };
    OFormDataComponent.prototype.onClickClearValue = function (event) {
        event.stopPropagation();
        event.preventDefault();
        this.clearValue({ changeType: OValueChangeEvent.USER_CHANGE }, true);
    };
    OFormDataComponent.prototype.onChangeEvent = function (arg) {
        var value = this.getValue();
        if (this.oldValue !== value) {
            var previousValue = this.oldValue;
            this.oldValue = value;
            this.emitOnValueChange(OValueChangeEvent.USER_CHANGE, value, previousValue);
        }
    };
    Object.defineProperty(OFormDataComponent.prototype, "showClearButton", {
        get: function () {
            return this.clearButton && !this.isReadOnly && this.enabled && Util.isDefined(this.getValue());
        },
        enumerable: true,
        configurable: true
    });
    OFormDataComponent.prototype.onFormControlChange = function (value) {
        if (!this.value) {
            this.value = new OFormValue();
        }
        this.ensureOFormValue(value);
        this.onChange.emit(value);
    };
    OFormDataComponent.prototype.ensureOFormValue = function (arg) {
        if (arg instanceof OFormValue) {
            this.value = arg;
        }
        else if (Util.isDefined(arg) && !(arg instanceof OFormValue)) {
            var val = this.value || new OFormValue();
            val.value = arg;
            this.value = val;
        }
        else {
            this.value = new OFormValue(this.defaultValue);
        }
    };
    OFormDataComponent.prototype.createFormControl = function (cfg, validators) {
        return new OFormControl(cfg, {
            validators: validators
        }, null);
    };
    OFormDataComponent.prototype.getControl = function () {
        if (!this._fControl) {
            var validators = this.resolveValidators();
            var cfg = {
                value: this.value ? this.value.value : undefined,
                disabled: !this.enabled
            };
            this._fControl = this.createFormControl(cfg, validators);
            this.registerOnFormControlChange();
        }
        return this._fControl;
    };
    OFormDataComponent.prototype.resolveValidators = function () {
        var validators = [];
        this.angularValidatorsFn.forEach(function (fn) {
            validators.push(fn);
        });
        if (this.orequired) {
            validators.push(Validators.required);
        }
        return validators;
    };
    OFormDataComponent.prototype.getSQLType = function () {
        var sqlt = this.sqlType && this.sqlType.length > 0 ? this.sqlType : this._defaultSQLTypeKey;
        this._SQLType = SQLTypes.getSQLTypeValue(sqlt);
        return this._SQLType;
    };
    Object.defineProperty(OFormDataComponent.prototype, "isValid", {
        get: function () {
            if (this._fControl) {
                return this._fControl.valid;
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    OFormDataComponent.prototype.isEmpty = function () {
        if (this.value instanceof OFormValue) {
            if (this.value.value !== undefined) {
                return false;
            }
        }
        return true;
    };
    OFormDataComponent.prototype.setEnabled = function (value) {
        _super.prototype.setEnabled.call(this, value);
        if (this._fControl && this.hasEnabledPermission() && this.hasVisiblePermission()) {
            value ? this._fControl.enable() : this._fControl.disable();
        }
    };
    Object.defineProperty(OFormDataComponent.prototype, "elementRef", {
        get: function () {
            return this.elRef;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OFormDataComponent.prototype, "hasCustomWidth", {
        get: function () {
            return this.width !== undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OFormDataComponent.prototype, "orequired", {
        get: function () {
            return this._orequired;
        },
        set: function (val) {
            var old = this._orequired;
            this._orequired = BooleanConverter(val);
            if (val !== old) {
                this.updateValidators();
            }
        },
        enumerable: true,
        configurable: true
    });
    OFormDataComponent.prototype.innerOnFocus = function (event) {
        if (!this.isReadOnly && this.enabled) {
            this.onFocus.emit(event);
        }
    };
    OFormDataComponent.prototype.innerOnBlur = function (event) {
        if (!this.isReadOnly && this.enabled) {
            this.onBlur.emit(event);
        }
    };
    Object.defineProperty(OFormDataComponent.prototype, "appearance", {
        get: function () {
            return this._appearance;
        },
        set: function (value) {
            var values = ['legacy', 'standard', 'fill', 'outline'];
            if (values.indexOf(value) === -1) {
                value = undefined;
            }
            this._appearance = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OFormDataComponent.prototype, "floatLabel", {
        get: function () {
            if (!this.labelVisible) {
                this.floatLabel = 'never';
            }
            return this._floatLabel;
        },
        set: function (value) {
            var values = ['always', 'never', 'auto'];
            if (values.indexOf(value) === -1) {
                value = 'auto';
            }
            this._floatLabel = value;
        },
        enumerable: true,
        configurable: true
    });
    OFormDataComponent.prototype.selectValue = function () {
        if (!this.enabled || this.isReadOnly) {
            return;
        }
        var inputEl = document.getElementById(this.oattr);
        if (inputEl) {
            inputEl.select();
        }
    };
    OFormDataComponent.prototype.registerOnFormControlChange = function () {
        var _this = this;
        if (this._fControl) {
            this._fControlSubscription = this._fControl.valueChanges.subscribe(function (value) {
                _this.onFormControlChange(value);
            });
        }
    };
    OFormDataComponent.prototype.emitOnValueChange = function (type, newValue, oldValue) {
        var event = new OValueChangeEvent(type, newValue, oldValue, this);
        this.onValueChange.emit(event);
    };
    OFormDataComponent.prototype.setFormValue = function (val, options, setDirty) {
        if (setDirty === void 0) { setDirty = false; }
        this.ensureOFormValue(val);
        if (this._fControl) {
            this.updateOFormControlValue(this.value.value, options, setDirty);
        }
        this.oldValue = this.value.value;
    };
    OFormDataComponent.prototype.updateOFormControlValue = function (value, options, setDirty) {
        if (setDirty === void 0) { setDirty = false; }
        this._fControl.setValue(value, options);
        if (setDirty) {
            this._fControl.markAsDirty();
        }
        if (this._fControl.invalid && !this.form.isInInsertMode()) {
            this._fControl.markAsTouched();
        }
    };
    OFormDataComponent.prototype.updateValidators = function () {
        var _this = this;
        if (!this._fControl) {
            return;
        }
        this._fControl.clearValidators();
        this.errorsData = [];
        var validators = this.resolveValidators();
        if (this.validatorChildren) {
            this.validatorChildren.forEach(function (oValidator) {
                var _a;
                var validatorFunction = oValidator.getValidatorFn();
                if (validatorFunction) {
                    validators.push(validatorFunction);
                }
                var errorsData = oValidator.getErrorsData();
                (_a = _this.errorsData).push.apply(_a, tslib_1.__spread(errorsData));
            });
        }
        this._fControl.setValidators(validators);
    };
    OFormDataComponent.prototype.addOntimizeCustomAppearanceClass = function () {
        try {
            if (this.elRef) {
                var matFormFieldEl = this.elRef.nativeElement.getElementsByTagName('mat-form-field');
                if (matFormFieldEl && matFormFieldEl.length === 1) {
                    matFormFieldEl.item(0).classList.add('mat-form-field-appearance-ontimize');
                }
            }
        }
        catch (e) {
        }
    };
    OFormDataComponent.prototype.getTooltipClass = function () {
        var liteError = this.errorOptions.type === Codes.O_MAT_ERROR_LITE;
        if (!liteError) {
            return _super.prototype.getTooltipClass.call(this);
        }
        var errorClass = Util.isDefined(this._fControl.errors) ? 'o-mat-error' : '';
        return _super.prototype.getTooltipClass.call(this) + " " + errorClass;
    };
    OFormDataComponent.prototype.getTooltipText = function () {
        var _this = this;
        var liteError = this.errorOptions.type === Codes.O_MAT_ERROR_LITE;
        if (liteError && Util.isDefined(this._fControl.errors)) {
            var errorsText = [];
            if (this.oMatErrorChildren && this.oMatErrorChildren.length > 0) {
                errorsText.push.apply(errorsText, tslib_1.__spread(this.oMatErrorChildren
                    .filter(function (oMatError) { return Util.isDefined(oMatError.text); })
                    .map(function (oMatError) { return oMatError.text; })));
            }
            if (this.errorsData && this.errorsData.length > 0) {
                errorsText.push.apply(errorsText, tslib_1.__spread(this.errorsData
                    .filter(function (item) { return _this.hasError(item.name); })
                    .map(function (item) { return item.text; })));
            }
            return errorsText.join('\n');
        }
        return _super.prototype.getTooltipText.call(this);
    };
    OFormDataComponent.prototype.parsePermissions = function () {
        if (!this.form || !Util.isDefined(this.form.oattr)) {
            return;
        }
        var permissions = this.form.getFormComponentPermissions(this.oattr);
        if (!Util.isDefined(permissions)) {
            return;
        }
        if (permissions.visible === false) {
            this.elRef.nativeElement.remove();
            this.destroy();
        }
        else if (permissions.enabled === false) {
            this.enabled = false;
            if (this.form) {
                this.form.registerFormComponent(this);
            }
        }
        this.permissions = permissions;
    };
    OFormDataComponent.prototype.getMutationObserverTarget = function () {
        var result;
        try {
            result = this.elementRef.nativeElement.getElementsByTagName('input').item(0);
        }
        catch (error) {
        }
        return result;
    };
    OFormDataComponent.prototype.setSuffixClass = function (count) {
        var iconFieldEl = this.elRef.nativeElement.getElementsByClassName('icon-field');
        if (iconFieldEl.length === 1) {
            var classList = [].slice.call(iconFieldEl[0].classList);
            classList.forEach(function (className) {
                if (className.startsWith('icon-field-')) {
                    iconFieldEl[0].classList.remove(className);
                }
            });
            if (count > 0) {
                var matSuffixClass = "icon-field-" + count + "-suffix";
                iconFieldEl[0].classList.add(matSuffixClass);
            }
        }
    };
    OFormDataComponent.prototype.disableFormControl = function () {
        var control = this.getFormControl();
        control.disable({
            onlySelf: true,
            emitEvent: false
        });
    };
    OFormDataComponent.propDecorators = {
        hostWidth: [{ type: HostBinding, args: ['style.width',] }],
        handleClick: [{ type: HostListener, args: ['click', [],] }],
        _matSuffixList: [{ type: ViewChildren, args: [MatSuffix,] }],
        validatorChildren: [{ type: ContentChildren, args: [OValidatorComponent,] }],
        oMatErrorChildren: [{ type: ViewChildren, args: [OMatErrorDirective,] }],
        _errorChildren: [{ type: ContentChildren, args: [MatError,] }]
    };
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OFormDataComponent.prototype, "autoBinding", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OFormDataComponent.prototype, "autoRegistering", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OFormDataComponent.prototype, "clearButton", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OFormDataComponent.prototype, "hideRequiredMarker", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OFormDataComponent.prototype, "labelVisible", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OFormDataComponent.prototype, "selectAllOnClick", void 0);
    return OFormDataComponent;
}(OBaseComponent));
export { OFormDataComponent };
//# sourceMappingURL=data:application/json;base64,