import * as tslib_1 from "tslib";
import { Component, ElementRef, Inject, Injector, Optional, ViewEncapsulation } from '@angular/core';
import { MAT_FORM_FIELD_DEFAULT_OPTIONS } from '@angular/material';
import { DEFAULT_INPUTS_O_CONTAINER_COLLAPSIBLE, DEFAULT_OUTPUTS_O_CONTAINER_COLLAPSIBLE, OContainerCollapsibleComponent } from '../o-container-collapsible-component.class';
export var DEFAULT_INPUTS_O_ROW_COLLAPSIBLE = tslib_1.__spread(DEFAULT_INPUTS_O_CONTAINER_COLLAPSIBLE);
export var DEFAULT_OUTPUTS_O_ROW_COLLAPSIBLE = tslib_1.__spread(DEFAULT_OUTPUTS_O_CONTAINER_COLLAPSIBLE);
var ORowCollapsibleComponent = (function (_super) {
    tslib_1.__extends(ORowCollapsibleComponent, _super);
    function ORowCollapsibleComponent(elRef, injector, matFormDefaultOption) {
        var _this = _super.call(this, elRef, injector, matFormDefaultOption) || this;
        _this.elRef = elRef;
        _this.injector = injector;
        _this.matFormDefaultOption = matFormDefaultOption;
        return _this;
    }
    ORowCollapsibleComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-row-collapsible',
                    template: "<mat-expansion-panel #expPanel [expanded]=\"expanded\" class=\"o-container\" (opened)=\"updateInnerHeight(null)\" (closed)=\"updateInnerHeight(0)\">\n  <mat-expansion-panel-header #containerTitle [expandedHeight]=\"expandedHeight\" [collapsedHeight]=\"collapsedHeight\">\n    <mat-panel-title fxLayout=\"row\" fxLayoutAlign=\"start center\" class=\"o-container-title\">\n      <mat-icon *ngIf=\"icon\">{{ icon }}</mat-icon>\n      <span *ngIf=\"title\">{{ title | oTranslate }}</span>\n    </mat-panel-title>\n    <mat-panel-description fxLayout=\"row\" fxLayoutAlign=\"start center\">\n      <span>{{ description | oTranslate }}</span>\n    </mat-panel-description>\n  </mat-expansion-panel-header>\n  <div #containerContent id=\"innerRow\" fxLayout=\"row\" fxLayoutAlign=\"{{ layoutAlign }}\" fxLayoutGap=\"{{ layoutGap }}\"\n    class=\"o-container-scroll o-scroll\" fxFlex=\"grow\">\n    <ng-content></ng-content>\n  </div>\n</mat-expansion-panel>\n<div #oContainerOutline *ngIf=\"isAppearanceOutline()\" [class.o-container-outline-expanded]=\"expPanel.expanded\" class=\"o-container-outline\">\n  <div class=\"o-container-outline-start\"></div>\n  <div class=\"o-container-outline-gap-title\"></div>\n  <div class=\"o-container-outline-gap-empty1\"></div>\n  <div class=\"o-container-outline-gap-description\"></div>\n  <div class=\"o-container-outline-gap-empty2\"></div>\n  <div class=\"o-container-outline-gap-icon\"></div>\n  <div class=\"o-container-outline-end\"></div>\n</div>\n",
                    inputs: DEFAULT_INPUTS_O_ROW_COLLAPSIBLE,
                    outputs: DEFAULT_OUTPUTS_O_ROW_COLLAPSIBLE,
                    encapsulation: ViewEncapsulation.None,
                    host: {
                        '[class.o-row-collapsible]': 'true',
                        '[class.o-appearance-outline]': 'isAppearanceOutline()',
                        '[class.o-appearance-outline-title]': 'hasTitleInAppearanceOutline()'
                    }
                }] }
    ];
    ORowCollapsibleComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Injector },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD_DEFAULT_OPTIONS,] }] }
    ]; };
    return ORowCollapsibleComponent;
}(OContainerCollapsibleComponent));
export { ORowCollapsibleComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1yb3ctY29sbGFwc2libGUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vb250aW1pemUtd2ViLW5neC8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2NvbnRhaW5lci9yb3ctY29sbGFwc2libGUvby1yb3ctY29sbGFwc2libGUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRyxPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUVuRSxPQUFPLEVBQ0wsc0NBQXNDLEVBQ3RDLHVDQUF1QyxFQUN2Qyw4QkFBOEIsRUFDL0IsTUFBTSw0Q0FBNEMsQ0FBQztBQUVwRCxNQUFNLENBQUMsSUFBTSxnQ0FBZ0Msb0JBQ3hDLHNDQUFzQyxDQUMxQyxDQUFDO0FBRUYsTUFBTSxDQUFDLElBQU0saUNBQWlDLG9CQUN6Qyx1Q0FBdUMsQ0FDM0MsQ0FBQztBQUVGO0lBWThDLG9EQUE4QjtJQUUxRSxrQ0FDWSxLQUFpQixFQUNqQixRQUFrQixFQUNrQyxvQkFBb0I7UUFIcEYsWUFLRSxrQkFBTSxLQUFLLEVBQUUsUUFBUSxFQUFFLG9CQUFvQixDQUFDLFNBQzdDO1FBTFcsV0FBSyxHQUFMLEtBQUssQ0FBWTtRQUNqQixjQUFRLEdBQVIsUUFBUSxDQUFVO1FBQ2tDLDBCQUFvQixHQUFwQixvQkFBb0IsQ0FBQTs7SUFHcEYsQ0FBQzs7Z0JBcEJGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsbUJBQW1CO29CQUM3Qiw4OUNBQWlEO29CQUNqRCxNQUFNLEVBQUUsZ0NBQWdDO29CQUN4QyxPQUFPLEVBQUUsaUNBQWlDO29CQUMxQyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtvQkFDckMsSUFBSSxFQUFFO3dCQUNKLDJCQUEyQixFQUFFLE1BQU07d0JBQ25DLDhCQUE4QixFQUFFLHVCQUF1Qjt3QkFDdkQsb0NBQW9DLEVBQUUsK0JBQStCO3FCQUN0RTtpQkFDRjs7O2dCQTVCbUIsVUFBVTtnQkFBVSxRQUFRO2dEQWtDM0MsUUFBUSxZQUFJLE1BQU0sU0FBQyw4QkFBOEI7O0lBS3RELCtCQUFDO0NBQUEsQUF0QkQsQ0FZOEMsOEJBQThCLEdBVTNFO1NBVlksd0JBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBJbmplY3QsIEluamVjdG9yLCBPcHRpb25hbCwgVmlld0VuY2Fwc3VsYXRpb24gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1BVF9GT1JNX0ZJRUxEX0RFRkFVTFRfT1BUSU9OUyB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsJztcblxuaW1wb3J0IHtcbiAgREVGQVVMVF9JTlBVVFNfT19DT05UQUlORVJfQ09MTEFQU0lCTEUsXG4gIERFRkFVTFRfT1VUUFVUU19PX0NPTlRBSU5FUl9DT0xMQVBTSUJMRSxcbiAgT0NvbnRhaW5lckNvbGxhcHNpYmxlQ29tcG9uZW50XG59IGZyb20gJy4uL28tY29udGFpbmVyLWNvbGxhcHNpYmxlLWNvbXBvbmVudC5jbGFzcyc7XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX0lOUFVUU19PX1JPV19DT0xMQVBTSUJMRSA9IFtcbiAgLi4uREVGQVVMVF9JTlBVVFNfT19DT05UQUlORVJfQ09MTEFQU0lCTEVcbl07XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX09VVFBVVFNfT19ST1dfQ09MTEFQU0lCTEUgPSBbXG4gIC4uLkRFRkFVTFRfT1VUUFVUU19PX0NPTlRBSU5FUl9DT0xMQVBTSUJMRVxuXTtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnby1yb3ctY29sbGFwc2libGUnLFxuICB0ZW1wbGF0ZVVybDogJy4vby1yb3ctY29sbGFwc2libGUuY29tcG9uZW50Lmh0bWwnLFxuICBpbnB1dHM6IERFRkFVTFRfSU5QVVRTX09fUk9XX0NPTExBUFNJQkxFLFxuICBvdXRwdXRzOiBERUZBVUxUX09VVFBVVFNfT19ST1dfQ09MTEFQU0lCTEUsXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gIGhvc3Q6IHtcbiAgICAnW2NsYXNzLm8tcm93LWNvbGxhcHNpYmxlXSc6ICd0cnVlJyxcbiAgICAnW2NsYXNzLm8tYXBwZWFyYW5jZS1vdXRsaW5lXSc6ICdpc0FwcGVhcmFuY2VPdXRsaW5lKCknLFxuICAgICdbY2xhc3Muby1hcHBlYXJhbmNlLW91dGxpbmUtdGl0bGVdJzogJ2hhc1RpdGxlSW5BcHBlYXJhbmNlT3V0bGluZSgpJ1xuICB9XG59KVxuZXhwb3J0IGNsYXNzIE9Sb3dDb2xsYXBzaWJsZUNvbXBvbmVudCBleHRlbmRzIE9Db250YWluZXJDb2xsYXBzaWJsZUNvbXBvbmVudCB7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIGVsUmVmOiBFbGVtZW50UmVmLFxuICAgIHByb3RlY3RlZCBpbmplY3RvcjogSW5qZWN0b3IsXG4gICAgQE9wdGlvbmFsKCkgQEluamVjdChNQVRfRk9STV9GSUVMRF9ERUZBVUxUX09QVElPTlMpIHByb3RlY3RlZCBtYXRGb3JtRGVmYXVsdE9wdGlvblxuICApIHtcbiAgICBzdXBlcihlbFJlZiwgaW5qZWN0b3IsIG1hdEZvcm1EZWZhdWx0T3B0aW9uKTtcbiAgfVxuXG59XG4iXX0=