import * as tslib_1 from "tslib";
import { ElementRef, EventEmitter, Inject, Injector, Optional, ViewChild } from '@angular/core';
import { MAT_FORM_FIELD_DEFAULT_OPTIONS, MatExpansionPanel } from '@angular/material';
import { Subscription } from 'rxjs';
import { InputConverter } from '../../decorators/input-converter';
import { DEFAULT_INPUTS_O_CONTAINER, OContainerComponent } from './o-container-component.class';
export var DEFAULT_INPUTS_O_CONTAINER_COLLAPSIBLE = tslib_1.__spread(DEFAULT_INPUTS_O_CONTAINER, [
    'expanded',
    'description',
    'collapsedHeight: collapsed-height',
    'expandedHeight: expanded-height'
]);
export var DEFAULT_OUTPUTS_O_CONTAINER_COLLAPSIBLE = [
    'onClosed',
    'onOpened',
    'onAfterCollapse',
    'onAfterExpand'
];
var OContainerCollapsibleComponent = (function (_super) {
    tslib_1.__extends(OContainerCollapsibleComponent, _super);
    function OContainerCollapsibleComponent(elRef, injector, matFormDefaultOption) {
        var _this = _super.call(this, elRef, injector, matFormDefaultOption) || this;
        _this.elRef = elRef;
        _this.injector = injector;
        _this.matFormDefaultOption = matFormDefaultOption;
        _this.expanded = true;
        _this.collapsedHeight = '37px';
        _this.expandedHeight = '37px';
        _this.onClosed = new EventEmitter();
        _this.onOpened = new EventEmitter();
        _this.onAfterCollapse = new EventEmitter();
        _this.onAfterExpand = new EventEmitter();
        _this.expPanelSubscriptions = new Subscription();
        return _this;
    }
    OContainerCollapsibleComponent.prototype.ngAfterViewInit = function () {
        _super.prototype.ngAfterViewInit.call(this);
        this.updateOutlineGap();
        this.subscribeEventsExpPanel();
    };
    OContainerCollapsibleComponent.prototype.subscribeEventsExpPanel = function () {
        var _this = this;
        this.expPanelSubscriptions.add(this.expPanel.afterCollapse.subscribe(function () { return _this.onAfterCollapse.emit(); }));
        this.expPanelSubscriptions.add(this.expPanel.afterExpand.subscribe(function () { return _this.onAfterExpand.emit(); }));
        this.expPanelSubscriptions.add(this.expPanel.closed.subscribe(function () { return _this.onClosed.emit(); }));
        this.expPanelSubscriptions.add(this.expPanel.opened.subscribe(function () { return _this.onOpened.emit(); }));
    };
    OContainerCollapsibleComponent.prototype.updateOutlineGap = function () {
        if (this.isAppearanceOutline()) {
            var exPanelHeader = this._titleEl ? this._titleEl._element.nativeElement : null;
            if (!this.oContainerOutline) {
                return;
            }
            var containerOutline = this.oContainerOutline.nativeElement;
            var containerOutlineRect = containerOutline.getBoundingClientRect();
            if (containerOutlineRect.width === 0 && containerOutlineRect.height === 0) {
                return;
            }
            var titleEl = exPanelHeader.querySelector('.o-container-title.mat-expansion-panel-header-title');
            var descrEl = exPanelHeader.querySelector('.mat-expansion-panel-header-description');
            var containerStart = containerOutlineRect.left;
            var descrStart = descrEl.getBoundingClientRect().left;
            var titleWidth = 0;
            if (this.hasHeader()) {
                titleWidth += this.icon ? titleEl.querySelector('mat-icon').offsetWidth : 0;
                titleWidth += this.title ? titleEl.querySelector('span').offsetWidth : 0;
                titleWidth = titleWidth === 0 ? 0 : titleWidth + 4;
            }
            var labelStart = titleEl.getBoundingClientRect().left;
            var startWidth = labelStart - containerStart - 2;
            var empty1Width = descrStart - containerStart - titleWidth - 24;
            var descrWidth = this.description ? descrEl.querySelector('span').offsetWidth + 8 : 0;
            var startEls = containerOutline.querySelectorAll('.o-container-outline-start');
            var gapTitleEls = containerOutline.querySelectorAll('.o-container-outline-gap-title');
            var gapEmpty1Els = containerOutline.querySelectorAll('.o-container-outline-gap-empty1');
            var gapDescrEls = containerOutline.querySelectorAll('.o-container-outline-gap-description');
            startEls[0].style.width = startWidth + "px";
            gapTitleEls[0].style.width = titleWidth + "px";
            gapEmpty1Els[0].style.width = empty1Width + "px";
            gapDescrEls[0].style.width = descrWidth + "px";
        }
    };
    OContainerCollapsibleComponent.prototype.registerObserver = function () {
        if (this._titleEl) {
            this.titleObserver.observe(this._titleEl._element.nativeElement, {
                childList: true,
                characterData: true,
                subtree: true
            });
        }
    };
    OContainerCollapsibleComponent.prototype.updateInnerHeight = function (height) {
        if (this.containerContent) {
            this.containerContent.nativeElement.style.height = height;
        }
        if (this.oContainerOutline) {
            this.oContainerOutline.nativeElement.style.height = height;
        }
    };
    OContainerCollapsibleComponent.prototype.ngOnDestroy = function () {
        this.expPanelSubscriptions.unsubscribe();
    };
    OContainerCollapsibleComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Injector },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD_DEFAULT_OPTIONS,] }] }
    ]; };
    OContainerCollapsibleComponent.propDecorators = {
        expPanel: [{ type: ViewChild, args: ['expPanel', { static: false },] }],
        containerContent: [{ type: ViewChild, args: ['containerContent', { static: true },] }],
        oContainerOutline: [{ type: ViewChild, args: ['oContainerOutline', { static: false },] }]
    };
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OContainerCollapsibleComponent.prototype, "expanded", void 0);
    return OContainerCollapsibleComponent;
}(OContainerComponent));
export { OContainerCollapsibleComponent };
//# sourceMappingURL=data:application/json;base64,