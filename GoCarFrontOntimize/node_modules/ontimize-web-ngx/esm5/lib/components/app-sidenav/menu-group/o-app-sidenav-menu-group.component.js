import * as tslib_1 from "tslib";
import { animate, state, style, transition, trigger } from '@angular/animations';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, Injector, ViewEncapsulation, } from '@angular/core';
import { NavigationEnd, Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { InputConverter } from '../../../decorators/input-converter';
import { AppMenuService } from '../../../services/app-menu.service';
import { PermissionsService } from '../../../services/permissions/permissions.service';
import { OTranslateService } from '../../../services/translate/o-translate.service';
import { PermissionsUtils } from '../../../util/permissions';
import { Util } from '../../../util/util';
import { OAppSidenavComponent } from '../o-app-sidenav.component';
export var DEFAULT_INPUTS_O_APP_SIDENAV_MENU_GROUP = [
    'menuGroup : menu-group',
    'sidenavOpened : sidenav-opened',
    'level'
];
export var DEFAULT_OUTPUTS_O_APP_SIDENAV_MENU_GROUP = [
    'onItemClick'
];
var OAppSidenavMenuGroupComponent = (function () {
    function OAppSidenavMenuGroupComponent(injector, elRef, cd) {
        var _this = this;
        this.injector = injector;
        this.elRef = elRef;
        this.cd = cd;
        this.onItemClick = new EventEmitter();
        this.onClickEvent = new EventEmitter();
        this.sidenavSubscription = new Subscription();
        this.sidenavOpened = true;
        this.level = 1;
        this.translateService = this.injector.get(OTranslateService);
        this.appMenuService = this.injector.get(AppMenuService);
        this.permissionsService = this.injector.get(PermissionsService);
        this.sidenav = this.injector.get(OAppSidenavComponent);
        this.router = this.injector.get(Router);
        this.routerSubscription = this.router.events.subscribe(function (event) {
            if (event instanceof NavigationEnd && _this.appMenuService.isRouteItem(_this.menuGroup)) {
                _this.active = _this.appMenuService.isItemActive(_this.menuGroup);
                _this.cd.detectChanges();
            }
        });
    }
    OAppSidenavMenuGroupComponent.prototype.ngOnInit = function () {
        this.parsePermissions();
    };
    OAppSidenavMenuGroupComponent.prototype.ngAfterViewInit = function () {
        if (this.menuGroup.id === 'user-info' && this.sidenav) {
            var self_1 = this;
            this.sidenavSubscription.add(this.sidenav.onSidenavOpenedChange.subscribe(function (opened) {
                self_1.disabled = ((!opened && Util.isDefined(opened)) || (Util.isDefined(self_1.permissions) && self_1.permissions && self_1.permissions.enabled === false));
                self_1.updateContentExpansion();
                self_1.cd.markForCheck();
            }));
        }
        this.updateContentExpansion();
    };
    OAppSidenavMenuGroupComponent.prototype.ngOnDestroy = function () {
        if (this.sidenavSubscription) {
            this.sidenavSubscription.unsubscribe();
        }
        if (this.routerSubscription) {
            this.routerSubscription.unsubscribe();
        }
    };
    OAppSidenavMenuGroupComponent.prototype.parsePermissions = function () {
        this.permissions = this.permissionsService.getMenuPermissions(this.menuGroup.id);
        if (!Util.isDefined(this.permissions)) {
            return;
        }
        this.hidden = this.permissions.visible === false;
        this.disabled = this.permissions.enabled === false;
        if (this.disabled) {
            this.mutationObserver = PermissionsUtils.registerDisabledChangesInDom(this.elRef.nativeElement, {
                checkStringValue: true
            });
        }
    };
    OAppSidenavMenuGroupComponent.prototype.onClick = function () {
        if (this.disabled) {
            return;
        }
        if (this.appMenuService.isMenuGroup(this.menuGroup) ||
            this.appMenuService.isMenuGroupRoute(this.menuGroup) && (!this.menuGroup.opened)) {
            this.toggle();
        }
        this.navigate();
    };
    OAppSidenavMenuGroupComponent.prototype.toggle = function (event) {
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
        this.menuGroup.opened = !this.menuGroup.opened;
        this.appMenuService.onClick.next();
        this.updateContentExpansion();
    };
    OAppSidenavMenuGroupComponent.prototype.navigate = function () {
        if (this.appMenuService.isMenuGroupRoute(this.menuGroup)) {
            var route = this.menuGroup.route;
            if (this.router.url !== route) {
                this.router.navigate([route]);
            }
        }
    };
    OAppSidenavMenuGroupComponent.prototype.updateContentExpansion = function () {
        var isOpened = this.menuGroup && this.menuGroup.opened;
        if (this.menuGroup.id === 'user-info') {
            isOpened = (this.sidenav && this.sidenav.sidenav && this.sidenav.sidenav.opened) && isOpened;
        }
        this.contentExpansion = isOpened ? 'expanded' : 'collapsed';
    };
    Object.defineProperty(OAppSidenavMenuGroupComponent.prototype, "contentExpansion", {
        get: function () {
            return this._contentExpansion;
        },
        set: function (val) {
            this._contentExpansion = val;
            this.cd.detectChanges();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OAppSidenavMenuGroupComponent.prototype, "tooltip", {
        get: function () {
            var result = this.translateService.get(this.menuGroup.name);
            if (Util.isDefined(this.menuGroup.tooltip)) {
                result += ': ' + this.translateService.get(this.menuGroup.tooltip);
            }
            return result;
        },
        enumerable: true,
        configurable: true
    });
    OAppSidenavMenuGroupComponent.prototype.onMenuItemClick = function (e) {
        this.onItemClick.emit(e);
    };
    OAppSidenavMenuGroupComponent.prototype.getClass = function () {
        var className = 'o-app-sidenav-menu-group o-app-sidenav-menu-group-level-' + this.level;
        if (this.menuGroup.class) {
            className += ' ' + this.menuGroup.class;
        }
        return className;
    };
    OAppSidenavMenuGroupComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-app-sidenav-menu-group',
                    inputs: DEFAULT_INPUTS_O_APP_SIDENAV_MENU_GROUP,
                    outputs: DEFAULT_OUTPUTS_O_APP_SIDENAV_MENU_GROUP,
                    template: "<ng-container *ngIf=\"!hidden\">\n  <a mat-button mat-button class=\"o-app-sidenav-item o-app-sidenav-menugroup\" [class.opened]=\"menuGroup.opened\" (click)=\"onClick()\"\n    [class.o-app-sidenav-viewer-sidenav-item-selected]=\"active\">\n    <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxFill>\n      <ng-container *ngIf=\"sidenavOpened\">\n        <mat-icon *ngIf=\"menuGroup.icon\">{{ menuGroup.icon }}</mat-icon>\n        <span class=\"o-app-sidenav-menugroup-title\">{{ menuGroup.name | oTranslate }}</span>\n        <span class=\"fill-remaining\"></span>\n        <ng-container *ngIf=\"appMenuService.isMenuGroupRoute(menuGroup) && menuGroup.opened; else arrowMenuGroupTemplate\">\n          <mat-icon class=\"o-app-sidenav-menugroup-arrow\" svgIcon=\"ontimize:keyboard_arrow_right\" (click)=\"toggle($event)\"></mat-icon>\n        </ng-container>\n        <ng-template #arrowMenuGroupTemplate>\n          <mat-icon class=\"o-app-sidenav-menugroup-arrow\" svgIcon=\"ontimize:keyboard_arrow_right\"></mat-icon>\n        </ng-template>\n      </ng-container>\n      <ng-container *ngIf=\"!sidenavOpened\">\n        <mat-icon [matTooltip]=\"tooltip\" matTooltipClass=\"menugroup-tooltip\" matTooltipPosition=\"right\" *ngIf=\"menuGroup.icon\">{{\n          menuGroup.icon }}</mat-icon>\n      </ng-container>\n    </div>\n  </a>\n\n  <div class=\"o-app-sidenav-menugroup-items-container\">\n    <ul [@contentExpansion]=\"contentExpansion\" class=\"o-app-sidenav-menugroup-ul\">\n      <ng-container *ngFor=\"let menuItem of menuGroup.items\">\n        <o-app-sidenav-menu-item [sidenav-opened]=\"sidenavOpened\" *ngIf=\"!menuItem.items; else menuGroup\" [disabled]=\"disabled\" [menu-item]=\"menuItem\"\n          [menu-item-type]=\"appMenuService.getMenuItemType(menuItem)\" (onClick)=\"onMenuItemClick($event)\">\n        </o-app-sidenav-menu-item>\n        <ng-template #menuGroup>\n          <o-app-sidenav-menu-group [menu-group]=\"menuItem\" [sidenav-opened]=\"sidenavOpened\" [level]=\"level + 1\"\n            *ngIf=\"appMenuService.getMenuItemType(menuItem) === 'group'\" (onItemClick)=\"onMenuItemClick($event)\">\n          </o-app-sidenav-menu-group>\n        </ng-template>\n      </ng-container>\n    </ul>\n  </div>\n</ng-container>\n",
                    encapsulation: ViewEncapsulation.None,
                    animations: [
                        trigger('contentExpansion', [
                            state('collapsed', style({ height: '0px' })),
                            state('expanded', style({ height: '*' })),
                            transition('collapsed => expanded', animate('200ms ease-in')),
                            transition('expanded => collapsed', animate('200ms ease-out'))
                        ])
                    ],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        '[class]': 'getClass()',
                        '[attr.disabled]': 'disabled'
                    },
                    styles: [".o-app-sidenav-menu-group .o-app-sidenav-menugroup.mat-button{min-width:0}.o-app-sidenav-menu-group[disabled=true] .o-app-sidenav-menugroup{cursor:default}.o-app-sidenav-menu-group .mat-tooltip.menugroup-tooltip{margin-left:28px}"]
                }] }
    ];
    OAppSidenavMenuGroupComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OAppSidenavMenuGroupComponent.prototype, "sidenavOpened", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Number)
    ], OAppSidenavMenuGroupComponent.prototype, "level", void 0);
    return OAppSidenavMenuGroupComponent;
}());
export { OAppSidenavMenuGroupComponent };
//# sourceMappingURL=data:application/json;base64,