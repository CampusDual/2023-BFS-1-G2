import * as tslib_1 from "tslib";
import { Component, ElementRef, forwardRef, HostBinding, Inject, Injector, Optional, ViewChild, ViewEncapsulation } from '@angular/core';
import { FormControl, FormGroup } from '@angular/forms';
import { MatDialog } from '@angular/material';
import { InputConverter } from '../../decorators/input-converter';
import { OSafePipe } from '../../pipes/o-safe.pipe';
import { Util } from '../../util/util';
import { OFormValue } from '../form/o-form-value';
import { OFormComponent } from '../form/o-form.component';
import { DEFAULT_INPUTS_O_FORM_DATA_COMPONENT, DEFAULT_OUTPUTS_O_FORM_DATA_COMPONENT, OFormDataComponent } from '../o-form-data-component.class';
import { OFullScreenDialogComponent } from './fullscreen/fullscreen-dialog.component';
export var DEFAULT_INPUTS_O_IMAGE = tslib_1.__spread(DEFAULT_INPUTS_O_FORM_DATA_COMPONENT, [
    'emptyimage: empty-image',
    'notfoundimage: not-found-image',
    'emptyicon: empty-icon',
    'showControls: show-controls',
    'height',
    'autoFit: auto-fit',
    'fullScreenButton: full-screen-button',
    'acceptFileType: accept-file-type',
    'maxFileSize: max-file-size'
]);
export var DEFAULT_OUTPUTS_O_IMAGE = tslib_1.__spread(DEFAULT_OUTPUTS_O_FORM_DATA_COMPONENT);
var OImageComponent = (function (_super) {
    tslib_1.__extends(OImageComponent, _super);
    function OImageComponent(form, elRef, injector) {
        var _this = _super.call(this, form, elRef, injector) || this;
        _this.acceptFileType = 'image/*';
        _this.autoFit = true;
        _this.currentFileName = '';
        _this.showControls = true;
        _this._fullScreenButton = false;
        _this._useEmptyIcon = true;
        _this._useEmptyImage = false;
        _this.src = '';
        _this.oSafe = new OSafePipe(injector);
        _this._defaultSQLTypeKey = 'BASE64';
        _this.dialog = _this.injector.get(MatDialog);
        return _this;
    }
    Object.defineProperty(OImageComponent.prototype, "fullScreenButton", {
        get: function () {
            return this._fullScreenButton;
        },
        set: function (val) {
            val = Util.parseBoolean(String(val));
            this._fullScreenButton = val;
        },
        enumerable: true,
        configurable: true
    });
    OImageComponent.prototype.ngOnInit = function () {
        _super.prototype.ngOnInit.call(this);
        if (this.emptyimage && this.emptyimage.length > 0) {
            this._useEmptyIcon = false;
            this._useEmptyImage = true;
        }
        if (this.emptyicon === undefined && !this._useEmptyImage) {
            this.emptyicon = 'photo';
            this._useEmptyIcon = true;
            this._useEmptyImage = false;
        }
    };
    OImageComponent.prototype.ngOnDestroy = function () {
        _super.prototype.ngOnDestroy.call(this);
    };
    OImageComponent.prototype.ensureOFormValue = function (val) {
        if (val instanceof OFormValue) {
            if (val.value && val.value.bytes) {
                val = val.value.bytes;
            }
            else {
                val = val.value;
            }
        }
        else if (val) {
            if (val.bytes) {
                val = val.bytes;
            }
            else if (Util.isBase64(val) && val.substring(0, 4) === 'data') {
                val = val.substring(val.indexOf('base64') + 7);
            }
        }
        else {
            val = undefined;
        }
        this.value = new OFormValue(val);
        this.src = this.getSrcValue();
    };
    OImageComponent.prototype.isEmpty = function () {
        return !this.getValue() || this.getValue().length === 0;
    };
    OImageComponent.prototype.createFormControl = function (cfg, validators) {
        this._fControl = _super.prototype.createFormControl.call(this, cfg, validators);
        this.stateCtrl = new FormControl(void 0, this.resolveValidators());
        this._fControl.fControlChildren = [this.stateCtrl];
        return this._fControl;
    };
    OImageComponent.prototype.fileChange = function (input) {
        var _this = this;
        if (input.files[0]) {
            var reader = new FileReader();
            reader.addEventListener('load', function (event) {
                var result = event.target['result'];
                if (result && typeof (result) === 'string' && Util.isBase64(result)) {
                    result = result.substring(result.indexOf('base64') + 7);
                }
                _this.setValue(result);
                if (_this._fControl) {
                    _this._fControl.markAsTouched();
                }
                event.stopPropagation();
            }, false);
            if (input.files[0]) {
                reader.readAsDataURL(input.files[0]);
            }
            this.currentFileName = input.files[0].name;
            this.stateCtrl.setValue(this.currentFileName);
        }
    };
    OImageComponent.prototype.notFoundImageUrl = function (event) {
        event.target.src = Util.isDefined(this.notfoundimage) ? this.notfoundimage : '';
    };
    OImageComponent.prototype.getSrcValue = function () {
        if (this.value && this.value.value) {
            if (this.value.value instanceof Object && this.value.value.bytes) {
                var src = '';
                if (this.value.value.bytes.substring(0, 4) === 'data') {
                    src = 'data:image/*;base64,' + this.value.value.bytes.substring(this.value.value.bytes.indexOf('base64') + 7);
                }
                else {
                    src = 'data:image/*;base64,' + this.value.value.bytes;
                }
                return this.oSafe.transform(src, 'url');
            }
            else if (typeof this.value.value === 'string' && Util.isBase64(this.value.value)) {
                var src = '';
                if (this.value.value.substring(0, 4) === 'data') {
                    src = 'data:image/*;base64,' + this.value.value.substring(this.value.value.indexOf('base64') + 7);
                }
                else {
                    src = 'data:image/*;base64,' + this.value.value;
                }
                return this.oSafe.transform(src, 'url');
            }
            if (this.value.value) {
                return this.value.value;
            }
            else {
                return this.emptyimage;
            }
        }
        else if (this.emptyimage) {
            return this.emptyimage;
        }
    };
    OImageComponent.prototype.onClickBlocker = function (evt) {
        evt.stopPropagation();
    };
    OImageComponent.prototype.onClickClearValue = function (e) {
        if (!this.isReadOnly && this.enabled) {
            _super.prototype.onClickClearValue.call(this, e);
            this.fileInput.nativeElement.value = '';
            this.stateCtrl.reset();
            this.currentFileName = '';
        }
        if (this._fControl) {
            this._fControl.markAsTouched();
        }
    };
    OImageComponent.prototype.hasControls = function () {
        return this.showControls;
    };
    OImageComponent.prototype.useEmptyIcon = function () {
        return this._useEmptyIcon && this.isEmpty();
    };
    OImageComponent.prototype.useEmptyImage = function () {
        return this._useEmptyImage && this.isEmpty();
    };
    OImageComponent.prototype.getFormGroup = function () {
        var formGroup = _super.prototype.getFormGroup.call(this);
        if (!formGroup) {
            formGroup = new FormGroup({});
            formGroup.addControl(this.getAttribute(), this.getControl());
        }
        return formGroup;
    };
    Object.defineProperty(OImageComponent.prototype, "hostHeight", {
        get: function () {
            return this.height;
        },
        enumerable: true,
        configurable: true
    });
    OImageComponent.prototype.openFullScreen = function (e) {
        this.dialog.open(OFullScreenDialogComponent, {
            width: '90%',
            height: '90%',
            role: 'dialog',
            disableClose: false,
            panelClass: 'o-image-fullscreen-dialog-cdk-overlay',
            data: this.getSrcValue()
        });
    };
    OImageComponent.prototype.openFileSelector = function (e) {
        if (Util.isDefined(this.fileInput)) {
            this.fileInput.nativeElement.click();
        }
    };
    OImageComponent.prototype.internalFormControl = function () {
        return this.getAttribute() + '_value';
    };
    OImageComponent.prototype.resolveValidators = function () {
        var validators = _super.prototype.resolveValidators.call(this);
        if (Util.isDefined(this.maxFileSize)) {
            validators.push(this.maxFileSizeValidator.bind(this));
        }
        return validators;
    };
    OImageComponent.prototype.setValue = function (val, options, setDirty) {
        if (options === void 0) { options = {}; }
        if (setDirty === void 0) { setDirty = false; }
        _super.prototype.setValue.call(this, val, options, setDirty);
        if (!Util.isDefined(this.getValue()) || !this.currentFileName) {
            this.stateCtrl.reset();
        }
    };
    OImageComponent.prototype.maxFileSizeValidator = function (control) {
        var _this = this;
        if (control.value && control.value.length > 0 && Util.isDefined(this.maxFileSize)) {
            if (!Util.isDefined(this.fileInput.nativeElement.files)) {
                return {};
            }
            if (this.fileInput.nativeElement.files && !Array.from(this.fileInput.nativeElement.files).every(function (file) { return file.size < _this.maxFileSize; })) {
                return {
                    fileSize: {
                        maxFileSize: this.maxFileSize
                    }
                };
            }
        }
        return {};
    };
    OImageComponent.prototype.onFileDropped = function (pFileList) {
        var files = Object.keys(pFileList).map(function (key) { return pFileList[key]; });
        var fileList = this.createFileListItems(files);
        var valid = this.acceptFileType.replace(/\s/g, '').split(',').filter(function (accept) { return new RegExp(accept.replace(/\*/g, '.\*').replace(/\,/g, '|')).test(fileList[0].type); }).length > 0;
        if (valid) {
            this.fileInput.nativeElement.files = fileList;
            this.fileChange(this.fileInput.nativeElement);
        }
    };
    OImageComponent.prototype.createFileListItems = function (files) {
        var b = new ClipboardEvent("").clipboardData || new DataTransfer();
        for (var i = 0, len = files.length; i < len; i++)
            b.items.add(files[i]);
        return b.files;
    };
    OImageComponent.prototype.getFileName = function () {
        return this.currentFileName;
    };
    OImageComponent.prototype.getImageFile = function () {
        if (this.fileInput && this.fileInput.nativeElement.files.length > 0) {
            return this.fileInput.nativeElement.files[0];
        }
        else {
            return void (0);
        }
    };
    OImageComponent.prototype.hasErrorInDragAndDrop = function () {
        return this.getFormControl() && this.getFormControl().touched && this.getFormControl().invalid && !this.hasControls() && this.enabled && !this.isReadOnly;
    };
    OImageComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-image',
                    template: "<div fxLayout=\"column\" [formGroup]=\"getFormGroup()\" [matTooltip]=\"tooltip\" [matTooltipClass]=\"tooltipClass\" [matTooltipPosition]=\"tooltipPosition\"\n  [matTooltipShowDelay]=\"tooltipShowDelay\" [matTooltipHideDelay]=\"tooltipHideDelay\" [class.o-image-auto-fit]=\"autoFit\" class=\"o-image-content\" fxFill>\n\n  <input #input type=\"file\" [disabled]=\"!enabled\" [accept]=\"acceptFileType ? acceptFileType.replace(';',',') : 'image/*'\" readonly\n    (change)=\"fileChange(input)\" class=\"o-image-form-field-hidden\" />\n\n  <mat-form-field *ngIf=\"hasControls()\" class=\"o-image-form-field\">\n    <input type=\"text\" [id]=\"getAttribute()\" [formControlName]=\"getAttribute()\" [placeholder]=\"olabel | oTranslate\" [required]=\"isRequired\" readonly\n      (click)=\"input.click()\" (change)=\"onChangeEvent($event)\" class=\"o-image-form-field-input\">\n    <input matInput readonly (click)=\"input.click()\" [placeholder]=\"olabel | oTranslate\" [required]=\"isRequired\" [formControl]=\"stateCtrl\" />\n\n    <button type=\"button\" *ngIf=\"fullScreenButton\" [disabled]=\"!enabled\" matSuffix mat-icon-button (click)=\"openFullScreen($event)\">\n      <mat-icon svgIcon=\"ontimize:fullscreen\"></mat-icon>\n    </button>\n    <button type=\"button\" [disabled]=\"!enabled\" matSuffix mat-icon-button (click)=\"input.click()\">\n      <mat-icon svgIcon=\"ontimize:folder_open\"></mat-icon>\n    </button>\n    <button type=\"button\" [disabled]=\"!enabled\" matSuffix mat-icon-button (click)=\"onClickClearValue($event)\">\n      <mat-icon svgIcon=\"ontimize:close\"></mat-icon>\n    </button>\n    <ng-container *ngTemplateOutlet=\"errorsTemplate\"></ng-container>\n  </mat-form-field>\n\n  <div fxLayout=\"column\" fxLayoutAlign=\"center center\" class=\"o-image-display-container\"\n    [ngClass]=\"{'o-image-drag-and-drop': isEmpty() , 'o-image-drag-and-drop-required': hasErrorInDragAndDrop() }\" fxLayoutGap=\"15px\" oFileDragAndDrop\n    (onFileDropped)=\"onFileDropped($event)\">\n\n    <button mat-icon-button *ngIf=\"!isEmpty() && !hasControls() && enabled && !isReadOnly\" (click)=\"onClickClearValue($event)\"\n      class=\"o-image-button-remove\">\n      <mat-icon>close</mat-icon>\n    </button>\n\n    <img *ngIf=\"!(isEmpty())\" [src]=\"src\" alt=\"\" (click)=\"openFileSelector()\" (error)=\"notFoundImageUrl($event)\"\n      [ngClass]=\"{'o-image-cursor': !isReadOnly}\" />\n\n    <mat-icon class=\"empty-icon\" [class.mat-disabled]=\"!enabled\" aria-label=\"empty image\" *ngIf=\"useEmptyIcon()\">\n      {{ emptyicon }}\n    </mat-icon>\n\n    <img [src]=\"src\" alt=\"empty image\" *ngIf=\"useEmptyImage()\" />\n\n    <span class=\"mat-body-1\" *ngIf=\"isEmpty()\">{{ 'OIMAGE.TEXT.DROP&DRAG' | oTranslate }}</span>\n\n    <button mat-button color=\"primary\" (click)=\"openFileSelector()\" *ngIf=\"!hasControls() && isEmpty()\">\n      {{ 'OIMAGE.BUTTON.BROWSEFILE' | oTranslate }}\n    </button>\n\n    <ng-container *ngIf=\"!hasControls() && enabled && !isReadOnly\">\n      <ng-container *ngTemplateOutlet=\"errorsTemplate\"> </ng-container>\n    </ng-container>\n  </div>\n  <div *ngIf=\"isReadOnly\" fxFill class=\"read-only-blocker\" (click)=\"onClickBlocker($event)\"></div>\n</div>\n\n<ng-template #errorsTemplate>\n  <mat-error *oMatError=\"hasError('required')\">\n    {{ 'FORM_VALIDATION.REQUIRED' | oTranslate }}\n  </mat-error>\n  <mat-error *oMatError=\"hasError('fileSize')\">\n    {{ 'FORM_VALIDATION.FILE_MAXSIZE' | oTranslate }}: {{ getErrorValue('fileSize', 'maxFileSize') }} bytes\n  </mat-error>\n</ng-template>\n",
                    inputs: DEFAULT_INPUTS_O_IMAGE,
                    outputs: DEFAULT_OUTPUTS_O_IMAGE,
                    encapsulation: ViewEncapsulation.None,
                    host: {
                        '[class.o-image]': 'true'
                    },
                    styles: [".o-image{display:flex;height:inherit}.o-image .o-image-content{position:relative;width:100%}.o-image .o-image-content .o-image-form-field-hidden{display:none}.o-image .o-image-content .o-image-form-field{width:100%}.o-image .o-image-content .o-image-form-field .o-image-form-field-input{display:none;height:0;opacity:0;outline:0;width:0}.o-image .o-image-content .o-image-display-container{margin:16px;text-align:center;padding:1px;border-color:transparent;height:calc(100% - 32px)}.o-image .o-image-content .o-image-display-container.o-image-drag-and-drop-required:not(.o-file-dragging){border-style:solid;border-width:1px}.o-image .o-image-content .o-image-display-container.o-image-drag-and-drop{padding:40px}.o-image .o-image-content .o-image-display-container .o-image-button-remove{position:absolute;right:24px;top:24px;border-radius:50%;width:16px;height:16px;line-height:16px}.o-image .o-image-content .o-image-display-container .o-image-button-remove .mat-icon{width:14px;height:14px;line-height:14px;font-size:14px}.o-image .o-image-content .o-image-display-container .empty-icon.mat-icon{width:42px;height:42px;font-size:42px;display:flex;align-items:center;place-content:center}.o-image .o-image-content .o-image-display-container>img{height:100%;width:100%}.o-image .o-image-content .o-image-display-container>img.o-image-cursor{cursor:pointer}.o-image .o-image-content.o-image-auto-fit .o-image-display-container>img{height:auto;max-height:100%;max-width:100%;object-fit:contain;width:auto}.o-image .o-image-content .read-only-blocker{left:0;right:0;position:absolute;top:0;z-index:2}"]
                }] }
    ];
    OImageComponent.ctorParameters = function () { return [
        { type: OFormComponent, decorators: [{ type: Optional }, { type: Inject, args: [forwardRef(function () { return OFormComponent; }),] }] },
        { type: ElementRef },
        { type: Injector }
    ]; };
    OImageComponent.propDecorators = {
        fileInput: [{ type: ViewChild, args: ['input', { static: false },] }],
        hostHeight: [{ type: HostBinding, args: ['style.height',] }]
    };
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Number)
    ], OImageComponent.prototype, "maxFileSize", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OImageComponent.prototype, "autoFit", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OImageComponent.prototype, "showControls", void 0);
    return OImageComponent;
}(OFormDataComponent));
export { OImageComponent };
//# sourceMappingURL=data:application/json;base64,