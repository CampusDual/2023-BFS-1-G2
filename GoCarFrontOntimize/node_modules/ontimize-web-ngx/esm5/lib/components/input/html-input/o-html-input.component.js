import * as tslib_1 from "tslib";
import { animate, state, style, transition, trigger } from '@angular/animations';
import { ChangeDetectorRef, Component, ElementRef, Injector, ViewChild } from '@angular/core';
import { Validators } from '@angular/forms';
import { MatTab, MatTabGroup } from '@angular/material';
import { NumberConverter } from '../../../decorators/input-converter';
import { OFormComponent } from '../../form/o-form.component';
import { CKEditorComponent } from '../../material/ckeditor/ck-editor.component';
import { DEFAULT_INPUTS_O_FORM_DATA_COMPONENT, OFormDataComponent } from '../../o-form-data-component.class';
export var DEFAULT_INPUTS_O_HTML_INPUT = [
    'oattr: attr',
    'data',
    'autoBinding: automatic-binding',
    'autoRegistering: automatic-registering',
    'orequired: required',
    'minLength: min-length',
    'maxLength: max-length',
    'readOnly: read-only',
    'sqlType: sql-type'
];
export var DEFAULT_OUTPUTS_O_HTML_INPUT = tslib_1.__spread(DEFAULT_INPUTS_O_FORM_DATA_COMPONENT, [
    'onFocus',
    'onBlur'
]);
var OHTMLInputComponent = (function (_super) {
    tslib_1.__extends(OHTMLInputComponent, _super);
    function OHTMLInputComponent(form, elRef, injector) {
        var _this = _super.call(this, form, elRef, injector) || this;
        _this._minLength = -1;
        _this._maxLength = -1;
        _this._subscriptAnimationState = '';
        _this.form = form;
        _this.elRef = elRef;
        _this._changeDetectorRef = _this.injector.get(ChangeDetectorRef);
        try {
            _this.tabGroupContainer = _this.injector.get(MatTabGroup);
            _this.tabContainer = _this.injector.get(MatTab);
        }
        catch (error) {
        }
        return _this;
    }
    OHTMLInputComponent.prototype.ngOnInit = function () {
        var _this = this;
        _super.prototype.ngOnInit.call(this);
        var self = this;
        if (this.form) {
            this.form.beforeCloseDetail.subscribe(function () { return _this.destroyCKEditor(); });
            this.form.beforeUpdateMode.subscribe(function () { return _this.destroyCKEditor(); });
        }
        if (this.tabGroupContainer) {
            this.tabGroupContainer.selectedTabChange.subscribe(function (evt) {
                self.destroyCKEditor();
                if (self.isInActiveTab()) {
                    self.ckEditor.initCKEditor(self.oattr);
                }
            });
        }
    };
    OHTMLInputComponent.prototype.ngAfterViewInit = function () {
        _super.prototype.ngAfterViewInit.call(this);
        this._subscriptAnimationState = 'enter';
        this._changeDetectorRef.detectChanges();
    };
    OHTMLInputComponent.prototype.hasError = function (error) {
        var result = _super.prototype.hasError.call(this, error);
        this._subscriptAnimationState = result ? 'enter' : 'void';
        return result;
    };
    OHTMLInputComponent.prototype.isInActiveTab = function () {
        var result = !(this.tabGroupContainer && this.tabContainer);
        if (!result) {
            var self_1 = this;
            this.tabGroupContainer._tabs.forEach(function (tab, index) {
                if (tab === self_1.tabContainer) {
                    result = (self_1.tabGroupContainer.selectedIndex === index);
                }
            });
        }
        return result;
    };
    OHTMLInputComponent.prototype.resolveValidators = function () {
        var validators = _super.prototype.resolveValidators.call(this);
        if (this.minLength >= 0) {
            validators.push(Validators.minLength(this.minLength));
        }
        if (this.maxLength >= 0) {
            validators.push(Validators.maxLength(this.maxLength));
        }
        return validators;
    };
    OHTMLInputComponent.prototype.clearValue = function () {
        _super.prototype.clearValue.call(this);
        this.ckEditor.instance.updateElement();
        this.ckEditor.instance.setData('');
    };
    OHTMLInputComponent.prototype.destroyCKEditor = function () {
        if (this.ckEditor) {
            this.ckEditor.destroyCKEditor();
        }
    };
    OHTMLInputComponent.prototype.getCKEditor = function () {
        return this.ckEditor.instance;
    };
    Object.defineProperty(OHTMLInputComponent.prototype, "minLength", {
        get: function () {
            return this._minLength;
        },
        set: function (val) {
            var old = this._minLength;
            this._minLength = NumberConverter(val);
            if (val !== old) {
                this.updateValidators();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OHTMLInputComponent.prototype, "maxLength", {
        get: function () {
            return this._maxLength;
        },
        set: function (val) {
            var old = this._maxLength;
            this._maxLength = NumberConverter(val);
            if (val !== old) {
                this.updateValidators();
            }
        },
        enumerable: true,
        configurable: true
    });
    OHTMLInputComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-html-input',
                    template: "<div [formGroup]=\"getFormGroup()\" class=\"mat-form-field mat-form-field\" fxFill>\n  <div class=\"mat-form-field-wrapper mat-form-field-wrapper\">\n    <ck-editor #ckEditor [id]=\"getAttribute()\" [formControlName]=\"getAttribute()\" (focus)=\"innerOnFocus($event)\" (blur)=\"innerOnBlur($event)\" \n    (change)=\"onChangeEvent($event)\"  [required]=\"isRequired\" [readonly]=\"isReadOnly\" class=\"mat-form-field-flex mat-form-field-flex\" fxFill></ck-editor>\n    <div class=\"mat-form-field-subscript-wrapper mat-form-field-subscript-wrapper\">\n      <div class=\"ng-trigger ng-trigger-transitionMessages\" [@transitionMessages]=\"_subscriptAnimationState\">\n        <mat-error *oMatError=\"hasError('required')\">\n          {{ 'FORM_VALIDATION.REQUIRED' | oTranslate }}\n        </mat-error>\n        <mat-error *oMatError=\"hasError('minlength')\">\n          {{ 'FORM_VALIDATION.MIN_LENGTH' | oTranslate }}: {{ getErrorValue('minlength', 'requiredLength') }}\n        </mat-error>\n        <mat-error *oMatError=\"hasError('maxlength')\">\n          {{ 'FORM_VALIDATION.MAX_LENGTH' | oTranslate }}: {{ getErrorValue('maxlength', 'requiredLength') }}\n        </mat-error>\n        <mat-error *ngFor=\"let oError of getActiveOErrors()\"> \n          {{ oError.text | oTranslate }}\n        </mat-error>\n      </div>\n    </div>\n  </div>\n</div>",
                    inputs: DEFAULT_INPUTS_O_HTML_INPUT,
                    outputs: DEFAULT_OUTPUTS_O_HTML_INPUT,
                    animations: [
                        trigger('transitionMessages', [
                            state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),
                            transition('void => enter', [
                                style({ opacity: 0, transform: 'translateY(-100%)' }),
                                animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),
                            ]),
                        ])
                    ],
                    styles: [".mat-form-field-wrapper{position:relative}.mat-form-field-subscript-wrapper{position:absolute;width:100%;overflow:hidden}"]
                }] }
    ];
    OHTMLInputComponent.ctorParameters = function () { return [
        { type: OFormComponent },
        { type: ElementRef },
        { type: Injector }
    ]; };
    OHTMLInputComponent.propDecorators = {
        ckEditor: [{ type: ViewChild, args: ['ckEditor', { static: false },] }]
    };
    return OHTMLInputComponent;
}(OFormDataComponent));
export { OHTMLInputComponent };
//# sourceMappingURL=data:application/json;base64,