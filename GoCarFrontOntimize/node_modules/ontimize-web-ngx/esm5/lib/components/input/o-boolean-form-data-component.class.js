import * as tslib_1 from "tslib";
import { ElementRef, forwardRef, Inject, Injector, Optional } from '@angular/core';
import { Util } from '../../util';
import { OFormValue } from '../form/o-form-value';
import { OFormComponent } from '../form/o-form.component';
import { OFormDataComponent } from '../o-form-data-component.class';
export var DEFAULT_INPUTS_O_BOOLEAN_FORM_DATA = [
    'trueValue: true-value',
    'falseValue: false-value',
    'booleanType: boolean-type'
];
var OBooleanFormDataComponent = (function (_super) {
    tslib_1.__extends(OBooleanFormDataComponent, _super);
    function OBooleanFormDataComponent(form, elRef, injector) {
        var _this = _super.call(this, form, elRef, injector) || this;
        _this.trueValue = true;
        _this.falseValue = false;
        _this.booleanType = 'boolean';
        _this._defaultSQLTypeKey = 'BOOLEAN';
        _this.defaultValue = false;
        return _this;
    }
    OBooleanFormDataComponent.prototype.initialize = function () {
        if (!Util.isDefined(this.sqlType)) {
            switch (this.booleanType) {
                case 'number':
                    this.sqlType = 'INTEGER';
                    break;
                case 'string':
                    this.sqlType = 'VARCHAR';
                    break;
                case 'boolean':
                default:
                    this.sqlType = 'BOOLEAN';
            }
        }
        this.defaultValue = this.falseValue;
        _super.prototype.initialize.call(this);
    };
    OBooleanFormDataComponent.prototype.ensureOFormValue = function (data) {
        this.parseInputs();
        if (data instanceof OFormValue) {
            if (!Util.isDefined(data.value)) {
                data.value = false;
            }
            this.value = new OFormValue(this.parseValueByType(data.value) === this.trueValue);
        }
        else if (typeof data === 'boolean') {
            this.value = new OFormValue(data);
        }
        else {
            this.value = new OFormValue(this.parseValueByType(data) === this.trueValue);
        }
    };
    OBooleanFormDataComponent.prototype.parseValueByType = function (value) {
        var result;
        switch (this.booleanType) {
            case 'string':
                result = value + '';
                break;
            case 'number':
                result = parseInt(value, 10);
                break;
            default:
                result = value;
                break;
        }
        return result;
    };
    OBooleanFormDataComponent.prototype.parseStringInputs = function () {
        if ((this.trueValue || '').length === 0) {
            this.trueValue = undefined;
        }
        if ((this.falseValue || '').length === 0) {
            this.falseValue = undefined;
        }
    };
    OBooleanFormDataComponent.prototype.parseNumberInputs = function () {
        this.trueValue = parseInt(this.trueValue, 10);
        if (isNaN(this.trueValue)) {
            this.trueValue = 1;
        }
        this.falseValue = parseInt(this.falseValue, 10);
        if (isNaN(this.falseValue)) {
            this.falseValue = 0;
        }
    };
    OBooleanFormDataComponent.prototype.parseInputs = function () {
        switch (this.booleanType) {
            case 'string':
                this.parseStringInputs();
                break;
            case 'number':
                this.parseNumberInputs();
                break;
            default:
                this.trueValue = true;
                this.falseValue = false;
                break;
        }
    };
    OBooleanFormDataComponent.prototype.onClickBlocker = function (evt) {
        evt.stopPropagation();
    };
    OBooleanFormDataComponent.ctorParameters = function () { return [
        { type: OFormComponent, decorators: [{ type: Optional }, { type: Inject, args: [forwardRef(function () { return OFormComponent; }),] }] },
        { type: ElementRef },
        { type: Injector }
    ]; };
    return OBooleanFormDataComponent;
}(OFormDataComponent));
export { OBooleanFormDataComponent };
//# sourceMappingURL=data:application/json;base64,