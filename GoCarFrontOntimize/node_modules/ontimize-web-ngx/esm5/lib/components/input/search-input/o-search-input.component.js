import * as tslib_1 from "tslib";
import { Component, ElementRef, EventEmitter, Injector, ViewEncapsulation } from '@angular/core';
import { FormControl, FormGroup } from '@angular/forms';
import { debounceTime, distinctUntilChanged } from 'rxjs/operators';
import { O_INPUTS_OPTIONS } from '../../../config/app-config';
import { InputConverter } from '../../../decorators/input-converter';
import { SnackBarService } from '../../../services/snackbar.service';
import { OTranslateService } from '../../../services/translate/o-translate.service';
import { FilterExpressionUtils } from '../../../util/filter-expression.utils';
import { Util } from '../../../util/util';
export var DEFAULT_INPUTS_O_SEARCH_INPUT = [
    'placeholder',
    'width',
    'floatLabel: float-label',
    'appearance',
    'columns',
    'filterCaseSensitive: filter-case-sensitive',
    'showCaseSensitiveCheckbox: show-case-sensitive-checkbox',
    'showMenu: show-menu'
];
export var DEFAULT_OUTPUTS_O_SEARCH_INPUT = [
    'onSearch'
];
var OSearchInputComponent = (function () {
    function OSearchInputComponent(injector, elRef) {
        this.injector = injector;
        this.elRef = elRef;
        this.onSearch = new EventEmitter();
        this.colArray = [];
        this._placeholder = 'SEARCH';
        this.showCaseSensitiveCheckbox = false;
        this.showMenu = true;
        this._filterCaseSensitive = false;
        this.translateService = this.injector.get(OTranslateService);
        this.snackBarService = this.injector.get(SnackBarService);
        this.formGroup = new FormGroup({});
    }
    Object.defineProperty(OSearchInputComponent.prototype, "placeholder", {
        get: function () {
            return this._placeholder;
        },
        set: function (value) {
            if (Util.isDefined(value)) {
                this._placeholder = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    OSearchInputComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.term = new FormControl();
        this.formGroup.addControl('term', this.term);
        this.term.valueChanges.pipe(debounceTime(400))
            .pipe(distinctUntilChanged()).subscribe(function (term) {
            if (_this.checkActiveColumns()) {
                _this.onSearch.emit(term);
            }
        });
        var colArray = Util.parseArray(this.columns, true);
        colArray.forEach(function (col) {
            _this.colArray.push({
                column: col,
                checked: true
            });
        });
    };
    OSearchInputComponent.prototype.ngAfterViewInit = function () {
        try {
            this.oInputsOptions = this.injector.get(O_INPUTS_OPTIONS);
        }
        catch (e) {
            this.oInputsOptions = {};
        }
        Util.parseOInputsOptions(this.elRef, this.oInputsOptions);
    };
    Object.defineProperty(OSearchInputComponent.prototype, "floatLabel", {
        get: function () {
            return this._floatLabel;
        },
        set: function (value) {
            var values = ['always', 'never', 'auto'];
            if (values.indexOf(value) === -1) {
                value = 'auto';
            }
            this._floatLabel = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OSearchInputComponent.prototype, "appearance", {
        get: function () {
            return this._appearance;
        },
        set: function (value) {
            var values = ['legacy', 'standard', 'fill', 'outline'];
            if (values.indexOf(value) === -1) {
                value = undefined;
            }
            this._appearance = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OSearchInputComponent.prototype, "filterCaseSensitive", {
        get: function () {
            return this._filterCaseSensitive;
        },
        set: function (value) {
            this._filterCaseSensitive = value;
        },
        enumerable: true,
        configurable: true
    });
    OSearchInputComponent.prototype.getFormGroup = function () {
        return this.formGroup;
    };
    OSearchInputComponent.prototype.getValue = function () {
        return this.term.value;
    };
    OSearchInputComponent.prototype.setValue = function (val, options) {
        this.term.setValue(val, options);
    };
    OSearchInputComponent.prototype.getFormControl = function () {
        return this.term;
    };
    Object.defineProperty(OSearchInputComponent.prototype, "hasCustomWidth", {
        get: function () {
            return this.width !== undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OSearchInputComponent.prototype, "showFilterMenu", {
        get: function () {
            return this.showMenu && this.colArray.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    OSearchInputComponent.prototype.isChecked = function (column) {
        return column.checked;
    };
    OSearchInputComponent.prototype.onCheckboxChange = function (column, event) {
        column.checked = event.checked;
    };
    OSearchInputComponent.prototype.onSelectAllChange = function (event) {
        this.colArray.forEach(function (col) {
            col.checked = event.checked;
        });
    };
    OSearchInputComponent.prototype.areAllColumnsChecked = function () {
        var result = true;
        this.colArray.forEach(function (col) {
            result = result && col.checked;
        });
        return result;
    };
    OSearchInputComponent.prototype.getCountColumnsChecked = function () {
        var count = 0;
        this.colArray.forEach(function (col) {
            if (col.checked) {
                count++;
            }
        });
        return count;
    };
    OSearchInputComponent.prototype.onFilterCaseSensitiveChange = function (event) {
        this.filterCaseSensitive = event.checked;
    };
    OSearchInputComponent.prototype.getActiveColumns = function () {
        return this.colArray.filter(function (col) { return col.checked; }).map(function (col) { return col.column; });
    };
    OSearchInputComponent.prototype.setActiveColumns = function (arg) {
        this.colArray.forEach(function (c) {
            c.checked = arg.indexOf(c.column) !== -1;
        });
    };
    OSearchInputComponent.prototype.checkActiveColumns = function () {
        if (this.getActiveColumns().length === 0) {
            this.snackBarService.open('MESSAGES.AVOID_QUERY_WITHOUT_QUICKFILTER_COLUMNS');
            return false;
        }
        return true;
    };
    OSearchInputComponent.prototype.triggerOnSearch = function () {
        var term = this.term.value;
        if (this.checkActiveColumns() && Util.isDefined(term) && term.length > 0) {
            this.onSearch.emit(term);
        }
    };
    OSearchInputComponent.prototype.onMenuClosed = function () {
        this.triggerOnSearch();
    };
    Object.defineProperty(OSearchInputComponent.prototype, "filterExpression", {
        get: function () {
            var termValue = this.getValue();
            if (Util.isDefined(termValue) && termValue.length > 0) {
                var filterCols = this.getActiveColumns();
                if (filterCols.length > 0) {
                    return FilterExpressionUtils.buildArrayExpressionLike(filterCols, termValue);
                }
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    OSearchInputComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-search-input',
                    template: "<form [formGroup]=\"getFormGroup()\">\n  <div class=\"quickFilter\" fxLayout=\"row\">\n    <mat-form-field [appearance]=\"appearance\" floatLabel=\"never\">\n      <mat-icon *ngIf=\"!showFilterMenu\" svgIcon=\"ontimize:search\" matPrefix></mat-icon>\n      <input #term matInput id=\"term\" type=\"search\" formControlName=\"term\">\n      <mat-placeholder class=\"placeholder\">{{ placeholder | oTranslate}}</mat-placeholder>\n      <div *ngIf=\"showFilterMenu\" fxLayout=\"row\" matPrefix>\n        <mat-icon svgIcon=\"ontimize:search\" [matBadge]=\"areAllColumnsChecked()?'':getCountColumnsChecked()\" matBadgeSize=\"small\"></mat-icon>\n        <button mat-icon-button [matMenuTriggerFor]=\"menu\" (menuClosed)=\"onMenuClosed()\" (click)=\"$event.stopPropagation()\">\n          <mat-icon class=\"search-icon\">expand_more</mat-icon>\n        </button>\n      </div>\n\n\n      <mat-menu #menu=\"matMenu\" class=\"o-search-input-menu\">\n        <div fxLayout=\"column\" class=\"checkbox-container\">\n\n          <ng-container *ngIf=\"colArray.length > 1\">\n            <mat-checkbox (click)=\"$event.stopPropagation()\" [checked]=\"areAllColumnsChecked()\" (change)=\"onSelectAllChange($event)\">\n              {{ 'SELECT_ALL' | oTranslate }}</mat-checkbox>\n            <mat-divider></mat-divider>\n          </ng-container>\n\n          <ng-container *ngFor=\"let item of colArray\">\n            <mat-checkbox (click)=\"$event.stopPropagation()\" [checked]=\"isChecked(item)\" (change)=\"onCheckboxChange(item, $event)\">\n              {{ item.column | oTranslate }}\n            </mat-checkbox>\n          </ng-container>\n\n          <ng-container *ngIf=\"showCaseSensitiveCheckbox\">\n            <mat-divider></mat-divider>\n            <mat-checkbox (click)=\"$event.stopPropagation()\" [checked]=\"filterCaseSensitive\" (change)=\"onFilterCaseSensitiveChange($event)\">\n              {{ 'TABLE.FILTER.CASE_SENSITIVE' | oTranslate }}\n            </mat-checkbox>\n          </ng-container>\n        </div>\n      </mat-menu>\n    </mat-form-field>\n  </div>\n</form>\n",
                    inputs: DEFAULT_INPUTS_O_SEARCH_INPUT,
                    outputs: DEFAULT_OUTPUTS_O_SEARCH_INPUT,
                    encapsulation: ViewEncapsulation.None,
                    host: {
                        '[class.o-search-input]': 'true'
                    },
                    styles: [".o-search-input .quickFilter .mat-form-field .mat-form-field-wrapper{padding-bottom:0}.o-search-input .quickFilter .mat-form-field .mat-form-field-wrapper .mat-form-field-flex{padding-top:0;height:32px;line-height:32px}.o-search-input .quickFilter .mat-form-field .mat-form-field-wrapper .mat-form-field-flex .mat-form-field-infix{border-top:0;padding:0 4px;align-self:center}.o-search-input .quickFilter .mat-form-field .mat-form-field-wrapper .mat-form-field-flex .mat-form-field-prefix{align-self:center;display:flex}.o-search-input .quickFilter .mat-form-field .mat-form-field-wrapper .mat-form-field-flex .mat-form-field-prefix div{align-items:center;display:inline-flex;margin:2px 0}.o-search-input .quickFilter .mat-form-field .mat-form-field-wrapper .mat-form-field-flex .mat-form-field-prefix div .mat-badge-content{background-color:#3c8500;width:14px;height:14px;line-height:14px;top:-4px;right:-4px}.o-search-input .quickFilter .mat-form-field .mat-form-field-wrapper .mat-form-field-flex .mat-form-field-prefix div .mat-icon,.o-search-input .quickFilter .mat-form-field .mat-form-field-wrapper .mat-form-field-flex .mat-form-field-prefix div button{margin-right:6px}.o-search-input .quickFilter .mat-form-field .mat-form-field-wrapper .mat-form-field-flex .mat-form-field-prefix div button.mat-icon-button{height:100%;width:auto}.o-search-input .quickFilter .mat-form-field .mat-form-field-wrapper .mat-form-field-flex .mat-form-field-prefix div button.mat-icon-button .mat-button-ripple.mat-ripple,.o-search-input .quickFilter .mat-form-field .mat-form-field-wrapper .mat-form-field-flex .mat-form-field-subscript-wrapper{display:none}.o-search-input .quickFilter .mat-form-field.mat-form-field-appearance-fill .mat-form-field-flex,.o-search-input .quickFilter .mat-form-field.mat-form-field-appearance-legacy .mat-form-field-flex,.o-search-input .quickFilter .mat-form-field.mat-form-field-appearance-standard .mat-form-field-flex{padding-top:0}.o-search-input .quickFilter .mat-form-field.mat-form-field-appearance-fill .mat-form-field-underline,.o-search-input .quickFilter .mat-form-field.mat-form-field-appearance-legacy .mat-form-field-underline,.o-search-input .quickFilter .mat-form-field.mat-form-field-appearance-standard .mat-form-field-underline{bottom:0}.o-search-input .quickFilter .mat-form-field.mat-form-field-appearance-legacy .mat-form-field-label-wrapper{display:flex;align-items:baseline}.o-search-input .quickFilter .mat-form-field.mat-form-field-appearance-legacy .mat-form-field-label-wrapper .mat-form-field-label{padding-left:4px;align-self:center;position:initial}.o-search-input .quickFilter .mat-form-field.mat-form-field-appearance-outline .mat-form-field-wrapper,.o-search-input .quickFilter .mat-form-field.mat-form-field-appearance-outline .mat-form-field-wrapper .mat-form-field-flex{margin:0}.o-search-input .quickFilter .mat-form-field.mat-form-field-appearance-outline .mat-form-field-wrapper .mat-form-field-flex .mat-form-field-outline,.o-search-input .quickFilter .mat-form-field.mat-form-field-appearance-outline .mat-form-field-wrapper .mat-form-field-flex .mat-form-field-prefix{top:0}.o-search-input .quickFilter .mat-form-field.mat-form-field-appearance-outline .mat-form-field-wrapper .mat-form-field-flex .mat-form-field-prefix{border-right:1px solid rgba(0,0,0,.12)}.o-search-input-menu .mat-divider{margin:8px 0}.o-search-input-menu .checkbox-container{padding:6px 12px}.o-search-input-menu .checkbox-container .mat-checkbox-layout{white-space:normal}.o-search-input-menu .checkbox-container .mat-checkbox-layout .mat-checkbox-ripple{display:none}"]
                }] }
    ];
    OSearchInputComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: ElementRef }
    ]; };
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OSearchInputComponent.prototype, "showCaseSensitiveCheckbox", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OSearchInputComponent.prototype, "showMenu", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OSearchInputComponent.prototype, "_filterCaseSensitive", void 0);
    return OSearchInputComponent;
}());
export { OSearchInputComponent };
//# sourceMappingURL=data:application/json;base64,