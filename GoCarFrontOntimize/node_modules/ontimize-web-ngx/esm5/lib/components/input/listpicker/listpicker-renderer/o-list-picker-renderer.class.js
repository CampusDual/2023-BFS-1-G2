import { Util } from '../../../../util';
import { OListPickerComponent } from '../o-list-picker.component';
export var DEFAULT_INPUTS_O_LISTPICKER_RENDERER = [];
var OListPickerCustomRenderer = (function () {
    function OListPickerCustomRenderer(injector) {
        this.injector = injector;
        this.listpickerComponent = this.injector.get(OListPickerComponent);
    }
    OListPickerCustomRenderer.prototype.ngOnInit = function () {
        this.initialize();
    };
    OListPickerCustomRenderer.prototype.initialize = function () {
    };
    OListPickerCustomRenderer.prototype.ngAfterContentInit = function () {
        this.registerRenderer();
    };
    OListPickerCustomRenderer.prototype.registerRenderer = function () {
        this.listpickerComponent.registerRenderer(this);
    };
    OListPickerCustomRenderer.prototype.getListPickerValue = function (record) {
        var _this = this;
        var result = '';
        if (!Util.isDefined(record)) {
            return result;
        }
        this.listpickerComponent.descriptionColArray.forEach(function (col, index) {
            if (Util.isDefined(record[col])) {
                var value = record[col];
                if (_this.componentPipe && _this.pipeArguments != null) {
                    value = _this.componentPipe.transform(value, _this.pipeArguments);
                }
                if (Util.isDefined(value)) {
                    result += value;
                    if (index < _this.listpickerComponent.descriptionColArray.length - 1) {
                        result += _this.listpickerComponent.separator;
                    }
                }
            }
        });
        return result;
    };
    return OListPickerCustomRenderer;
}());
export { OListPickerCustomRenderer };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1saXN0LXBpY2tlci1yZW5kZXJlci5jbGFzcy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL29udGltaXplLXdlYi1uZ3gvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9pbnB1dC9saXN0cGlja2VyL2xpc3RwaWNrZXItcmVuZGVyZXIvby1saXN0LXBpY2tlci1yZW5kZXJlci5jbGFzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDeEMsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFbEUsTUFBTSxDQUFDLElBQU0sb0NBQW9DLEdBQUcsRUFBRSxDQUFDO0FBQ3ZEO0lBT0UsbUNBQXNCLFFBQWtCO1FBQWxCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDdEMsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLENBQUM7SUFDckUsQ0FBQztJQUVNLDRDQUFRLEdBQWY7UUFDRSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDcEIsQ0FBQztJQUVNLDhDQUFVLEdBQWpCO0lBQ0EsQ0FBQztJQUVNLHNEQUFrQixHQUF6QjtRQUNFLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFFTSxvREFBZ0IsR0FBdkI7UUFDRSxJQUFJLENBQUMsbUJBQW1CLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQU9NLHNEQUFrQixHQUF6QixVQUEwQixNQUFXO1FBQXJDLGlCQXFCQztRQXBCQyxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDM0IsT0FBTyxNQUFNLENBQUM7U0FDZjtRQUNELElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsVUFBQyxHQUFHLEVBQUUsS0FBSztZQUM5RCxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7Z0JBQy9CLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDeEIsSUFBSSxLQUFJLENBQUMsYUFBYSxJQUFJLEtBQUksQ0FBQyxhQUFhLElBQUksSUFBSSxFQUFFO29CQUNwRCxLQUFLLEdBQUcsS0FBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLEtBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztpQkFDakU7Z0JBQ0QsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFO29CQUN6QixNQUFNLElBQUksS0FBSyxDQUFDO29CQUVoQixJQUFJLEtBQUssR0FBRyxLQUFJLENBQUMsbUJBQW1CLENBQUMsbUJBQW1CLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTt3QkFDbkUsTUFBTSxJQUFJLEtBQUksQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLENBQUM7cUJBQzlDO2lCQUNGO2FBQ0Y7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFDSCxnQ0FBQztBQUFELENBQUMsQUFyREQsSUFxREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RvciwgT25Jbml0LCBQaXBlVHJhbnNmb3JtLCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBVdGlsIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbCc7XG5pbXBvcnQgeyBPTGlzdFBpY2tlckNvbXBvbmVudCB9IGZyb20gJy4uL28tbGlzdC1waWNrZXIuY29tcG9uZW50JztcblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfSU5QVVRTX09fTElTVFBJQ0tFUl9SRU5ERVJFUiA9IFtdO1xuZXhwb3J0IGNsYXNzIE9MaXN0UGlja2VyQ3VzdG9tUmVuZGVyZXIgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIHB1YmxpYyB0ZW1wbGF0ZXJlZjogVGVtcGxhdGVSZWY8YW55PjtcbiAgcHVibGljIGxpc3RwaWNrZXJDb21wb25lbnQ6IE9MaXN0UGlja2VyQ29tcG9uZW50O1xuXG4gIHByb3RlY3RlZCBwaXBlQXJndW1lbnRzOiBhbnk7XG4gIHByb3RlY3RlZCBjb21wb25lbnRQaXBlOiBQaXBlVHJhbnNmb3JtO1xuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgaW5qZWN0b3I6IEluamVjdG9yKSB7XG4gICAgdGhpcy5saXN0cGlja2VyQ29tcG9uZW50ID0gdGhpcy5pbmplY3Rvci5nZXQoT0xpc3RQaWNrZXJDb21wb25lbnQpO1xuICB9XG5cbiAgcHVibGljIG5nT25Jbml0KCkge1xuICAgIHRoaXMuaW5pdGlhbGl6ZSgpO1xuICB9XG5cbiAgcHVibGljIGluaXRpYWxpemUoKTogdm9pZCB7XG4gIH1cblxuICBwdWJsaWMgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQge1xuICAgIHRoaXMucmVnaXN0ZXJSZW5kZXJlcigpO1xuICB9XG5cbiAgcHVibGljIHJlZ2lzdGVyUmVuZGVyZXIoKTogdm9pZCB7XG4gICAgdGhpcy5saXN0cGlja2VyQ29tcG9uZW50LnJlZ2lzdGVyUmVuZGVyZXIodGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZGlzcGxheWVkIHZhbHVlIGZvciBsaXN0UGlja2VyXG4gICAqIEBwYXJhbSB2YWx1ZSBJbnRlcm5hbCBsaXN0UGlja2VyIHZhbHVlXG4gICovXG5cbiAgcHVibGljIGdldExpc3RQaWNrZXJWYWx1ZShyZWNvcmQ6IGFueSk6IHN0cmluZyB7XG4gICAgbGV0IHJlc3VsdCA9ICcnO1xuICAgIGlmICghVXRpbC5pc0RlZmluZWQocmVjb3JkKSkge1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgdGhpcy5saXN0cGlja2VyQ29tcG9uZW50LmRlc2NyaXB0aW9uQ29sQXJyYXkuZm9yRWFjaCgoY29sLCBpbmRleCkgPT4ge1xuICAgICAgaWYgKFV0aWwuaXNEZWZpbmVkKHJlY29yZFtjb2xdKSkge1xuICAgICAgICBsZXQgdmFsdWUgPSByZWNvcmRbY29sXTtcbiAgICAgICAgaWYgKHRoaXMuY29tcG9uZW50UGlwZSAmJiB0aGlzLnBpcGVBcmd1bWVudHMgIT0gbnVsbCkge1xuICAgICAgICAgIHZhbHVlID0gdGhpcy5jb21wb25lbnRQaXBlLnRyYW5zZm9ybSh2YWx1ZSwgdGhpcy5waXBlQXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoVXRpbC5pc0RlZmluZWQodmFsdWUpKSB7XG4gICAgICAgICAgcmVzdWx0ICs9IHZhbHVlO1xuXG4gICAgICAgICAgaWYgKGluZGV4IDwgdGhpcy5saXN0cGlja2VyQ29tcG9uZW50LmRlc2NyaXB0aW9uQ29sQXJyYXkubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgcmVzdWx0ICs9IHRoaXMubGlzdHBpY2tlckNvbXBvbmVudC5zZXBhcmF0b3I7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufVxuIl19