import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, Injector, TemplateRef, ViewChild } from '@angular/core';
import { OPercentPipe } from '../../../../../pipes/o-percentage.pipe';
import { NumberService } from '../../../../../services/number.service';
import { DEFAULT_INPUTS_O_LISTPICKER_RENDERER_REAL, OListPickerRendererRealComponent } from '../real/o-list-picker-renderer-real.component';
export var DEFAULT_INPUTS_O_LISTPICKER_RENDERER_PERCENTAGE = tslib_1.__spread(DEFAULT_INPUTS_O_LISTPICKER_RENDERER_REAL, [
    'valueBase: value-base'
]);
var OListPickerRendererPercentageComponent = (function (_super) {
    tslib_1.__extends(OListPickerRendererPercentageComponent, _super);
    function OListPickerRendererPercentageComponent(injector) {
        var _this = _super.call(this, injector) || this;
        _this.injector = injector;
        _this.decimalSeparator = '.';
        _this.minDecimalDigits = 0;
        _this.maxDecimalDigits = 0;
        _this.valueBase = 1;
        _this.numberService = _this.injector.get(NumberService);
        _this.setComponentPipe();
        return _this;
    }
    OListPickerRendererPercentageComponent.prototype.setComponentPipe = function () {
        this.componentPipe = new OPercentPipe(this.injector);
    };
    OListPickerRendererPercentageComponent.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        this.pipeArguments = {
            minDecimalDigits: this.minDecimalDigits,
            maxDecimalDigits: this.maxDecimalDigits,
            decimalSeparator: this.decimalSeparator,
            grouping: this.grouping,
            thousandSeparator: this.thousandSeparator,
            valueBase: this.valueBase
        };
    };
    OListPickerRendererPercentageComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-list-picker-renderer-percentage',
                    template: "<ng-template #templateref let-value=\"value\">\n  {{getListPickerValue(value)}}\n</ng-template>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    inputs: DEFAULT_INPUTS_O_LISTPICKER_RENDERER_PERCENTAGE
                }] }
    ];
    OListPickerRendererPercentageComponent.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    OListPickerRendererPercentageComponent.propDecorators = {
        templateref: [{ type: ViewChild, args: ['templateref', { read: TemplateRef, static: true },] }]
    };
    return OListPickerRendererPercentageComponent;
}(OListPickerRendererRealComponent));
export { OListPickerRendererPercentageComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1saXN0LXBpY2tlci1yZW5kZXJlci1wZXJjZW50YWdlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL29udGltaXplLXdlYi1uZ3gvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9pbnB1dC9saXN0cGlja2VyL2xpc3RwaWNrZXItcmVuZGVyZXIvcGVyY2VudGFnZS9vLWxpc3QtcGlja2VyLXJlbmRlcmVyLXBlcmNlbnRhZ2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBVSxXQUFXLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTdHLE9BQU8sRUFBa0QsWUFBWSxFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDdEgsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQ3ZFLE9BQU8sRUFDTCx5Q0FBeUMsRUFDekMsZ0NBQWdDLEVBQ2pDLE1BQU0sK0NBQStDLENBQUM7QUFFdkQsTUFBTSxDQUFDLElBQU0sK0NBQStDLG9CQUN2RCx5Q0FBeUM7SUFDNUMsdUJBQXVCO0VBQ3hCLENBQUM7QUFFRjtJQU00RCxrRUFBZ0M7SUFjMUYsZ0RBQXNCLFFBQWtCO1FBQXhDLFlBQ0Usa0JBQU0sUUFBUSxDQUFDLFNBSWhCO1FBTHFCLGNBQVEsR0FBUixRQUFRLENBQVU7UUFaeEMsc0JBQWdCLEdBQVcsR0FBRyxDQUFDO1FBQy9CLHNCQUFnQixHQUFHLENBQUMsQ0FBQztRQUNyQixzQkFBZ0IsR0FBRyxDQUFDLENBQUM7UUFDckIsZUFBUyxHQUE2QixDQUFDLENBQUM7UUFXdEMsS0FBSSxDQUFDLGFBQWEsR0FBRyxLQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUV0RCxLQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQzs7SUFDMUIsQ0FBQztJQUVELGlFQUFnQixHQUFoQjtRQUNFLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxZQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFRCwyREFBVSxHQUFWO1FBQ0UsaUJBQU0sVUFBVSxXQUFFLENBQUM7UUFDbkIsSUFBSSxDQUFDLGFBQWEsR0FBRztZQUNuQixnQkFBZ0IsRUFBRSxJQUFJLENBQUMsZ0JBQWdCO1lBQ3ZDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxnQkFBZ0I7WUFDdkMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLGdCQUFnQjtZQUN2QyxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7WUFDdkIsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLGlCQUFpQjtZQUN6QyxTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVM7U0FDMUIsQ0FBQztJQUNKLENBQUM7O2dCQXpDRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLG1DQUFtQztvQkFDN0MsNkdBQWlFO29CQUNqRSxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsTUFBTSxFQUFFLCtDQUErQztpQkFDeEQ7OztnQkFuQjRDLFFBQVE7Ozs4QkFnQ2xELFNBQVMsU0FBQyxhQUFhLEVBQUUsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7O0lBeUIvRCw2Q0FBQztDQUFBLEFBM0NELENBTTRELGdDQUFnQyxHQXFDM0Y7U0FyQ1ksc0NBQXNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgSW5qZWN0b3IsIE9uSW5pdCwgVGVtcGxhdGVSZWYsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBJUGVyY2VudFBpcGVBcmd1bWVudCwgT1BlcmNlbnRhZ2VWYWx1ZUJhc2VUeXBlLCBPUGVyY2VudFBpcGUgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9waXBlcy9vLXBlcmNlbnRhZ2UucGlwZSc7XG5pbXBvcnQgeyBOdW1iZXJTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc2VydmljZXMvbnVtYmVyLnNlcnZpY2UnO1xuaW1wb3J0IHtcbiAgREVGQVVMVF9JTlBVVFNfT19MSVNUUElDS0VSX1JFTkRFUkVSX1JFQUwsXG4gIE9MaXN0UGlja2VyUmVuZGVyZXJSZWFsQ29tcG9uZW50XG59IGZyb20gJy4uL3JlYWwvby1saXN0LXBpY2tlci1yZW5kZXJlci1yZWFsLmNvbXBvbmVudCc7XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX0lOUFVUU19PX0xJU1RQSUNLRVJfUkVOREVSRVJfUEVSQ0VOVEFHRSA9IFtcbiAgLi4uREVGQVVMVF9JTlBVVFNfT19MSVNUUElDS0VSX1JFTkRFUkVSX1JFQUwsXG4gICd2YWx1ZUJhc2U6IHZhbHVlLWJhc2UnXG5dO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdvLWxpc3QtcGlja2VyLXJlbmRlcmVyLXBlcmNlbnRhZ2UnLFxuICB0ZW1wbGF0ZVVybDogJy4vby1saXN0LXBpY2tlci1yZW5kZXJlci1wZXJjZW50YWdlLmNvbXBvbmVudC5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIGlucHV0czogREVGQVVMVF9JTlBVVFNfT19MSVNUUElDS0VSX1JFTkRFUkVSX1BFUkNFTlRBR0Vcbn0pXG5leHBvcnQgY2xhc3MgT0xpc3RQaWNrZXJSZW5kZXJlclBlcmNlbnRhZ2VDb21wb25lbnQgZXh0ZW5kcyBPTGlzdFBpY2tlclJlbmRlcmVyUmVhbENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgZGVjaW1hbFNlcGFyYXRvcjogc3RyaW5nID0gJy4nO1xuICBtaW5EZWNpbWFsRGlnaXRzID0gMDtcbiAgbWF4RGVjaW1hbERpZ2l0cyA9IDA7XG4gIHZhbHVlQmFzZTogT1BlcmNlbnRhZ2VWYWx1ZUJhc2VUeXBlID0gMTtcblxuICBwcm90ZWN0ZWQgbnVtYmVyU2VydmljZTogTnVtYmVyU2VydmljZTtcblxuICBwcm90ZWN0ZWQgY29tcG9uZW50UGlwZTogT1BlcmNlbnRQaXBlO1xuICBwcm90ZWN0ZWQgcGlwZUFyZ3VtZW50czogSVBlcmNlbnRQaXBlQXJndW1lbnQ7XG5cbiAgQFZpZXdDaGlsZCgndGVtcGxhdGVyZWYnLCB7IHJlYWQ6IFRlbXBsYXRlUmVmLCBzdGF0aWM6IHRydWUgfSkgcHVibGljIHRlbXBsYXRlcmVmOiBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBpbmplY3RvcjogSW5qZWN0b3IpIHtcbiAgICBzdXBlcihpbmplY3Rvcik7XG4gICAgdGhpcy5udW1iZXJTZXJ2aWNlID0gdGhpcy5pbmplY3Rvci5nZXQoTnVtYmVyU2VydmljZSk7XG5cbiAgICB0aGlzLnNldENvbXBvbmVudFBpcGUoKTtcbiAgfVxuXG4gIHNldENvbXBvbmVudFBpcGUoKSB7XG4gICAgdGhpcy5jb21wb25lbnRQaXBlID0gbmV3IE9QZXJjZW50UGlwZSh0aGlzLmluamVjdG9yKTtcbiAgfVxuXG4gIGluaXRpYWxpemUoKSB7XG4gICAgc3VwZXIuaW5pdGlhbGl6ZSgpO1xuICAgIHRoaXMucGlwZUFyZ3VtZW50cyA9IHtcbiAgICAgIG1pbkRlY2ltYWxEaWdpdHM6IHRoaXMubWluRGVjaW1hbERpZ2l0cyxcbiAgICAgIG1heERlY2ltYWxEaWdpdHM6IHRoaXMubWF4RGVjaW1hbERpZ2l0cyxcbiAgICAgIGRlY2ltYWxTZXBhcmF0b3I6IHRoaXMuZGVjaW1hbFNlcGFyYXRvcixcbiAgICAgIGdyb3VwaW5nOiB0aGlzLmdyb3VwaW5nLFxuICAgICAgdGhvdXNhbmRTZXBhcmF0b3I6IHRoaXMudGhvdXNhbmRTZXBhcmF0b3IsXG4gICAgICB2YWx1ZUJhc2U6IHRoaXMudmFsdWVCYXNlXG4gICAgfTtcbiAgfVxuXG59XG4iXX0=