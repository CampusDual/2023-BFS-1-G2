import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, Injector, TemplateRef, ViewChild } from '@angular/core';
import { InputConverter } from '../../../../../decorators/input-converter';
import { OCurrencyPipe } from '../../../../../pipes/o-currency.pipe';
import { CurrencyService } from '../../../../../services/currency.service';
import { OListPickerCustomRenderer } from '../o-list-picker-renderer.class';
import { DEFAULT_INPUTS_O_LISTPICKER_RENDERER_REAL } from '../real/o-list-picker-renderer-real.component';
export var DEFAULT_INPUTS_O_LISTPICKER_RENDERER_CURRENCY = tslib_1.__spread(DEFAULT_INPUTS_O_LISTPICKER_RENDERER_REAL, [
    'currencySymbol: currency-symbol',
    'currencySymbolPosition: currency-symbol-position'
]);
var OListPickerRendererCurrencyComponent = (function (_super) {
    tslib_1.__extends(OListPickerRendererCurrencyComponent, _super);
    function OListPickerRendererCurrencyComponent(injector) {
        var _this = _super.call(this, injector) || this;
        _this.injector = injector;
        _this.minDecimalDigits = 2;
        _this.maxDecimalDigits = 2;
        _this.decimalSeparator = '.';
        _this.grouping = true;
        _this.thousandSeparator = ',';
        _this.currencyService = _this.injector.get(CurrencyService);
        _this.setComponentPipe();
        return _this;
    }
    OListPickerRendererCurrencyComponent.prototype.setComponentPipe = function () {
        this.componentPipe = new OCurrencyPipe(this.injector);
    };
    OListPickerRendererCurrencyComponent.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        if (typeof this.currencySymbol === 'undefined') {
            this.currencySymbol = this.currencyService.symbol;
        }
        if (typeof this.currencySymbolPosition === 'undefined') {
            this.currencySymbolPosition = this.currencyService.symbolPosition;
        }
        this.pipeArguments = {
            currencySimbol: this.currencySymbol,
            currencySymbolPosition: this.currencySymbolPosition,
            minDecimalDigits: this.minDecimalDigits,
            maxDecimalDigits: this.maxDecimalDigits,
            decimalSeparator: this.decimalSeparator,
            grouping: this.grouping,
            thousandSeparator: this.thousandSeparator
        };
    };
    OListPickerRendererCurrencyComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-list-picker-renderer-currency',
                    template: "<ng-template #templateref let-value=\"value\">\n  {{getListPickerValue(value)}}\n</ng-template>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    inputs: DEFAULT_INPUTS_O_LISTPICKER_RENDERER_CURRENCY
                }] }
    ];
    OListPickerRendererCurrencyComponent.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    OListPickerRendererCurrencyComponent.propDecorators = {
        templateref: [{ type: ViewChild, args: ['templateref', { read: TemplateRef, static: true },] }]
    };
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Number)
    ], OListPickerRendererCurrencyComponent.prototype, "minDecimalDigits", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Number)
    ], OListPickerRendererCurrencyComponent.prototype, "maxDecimalDigits", void 0);
    return OListPickerRendererCurrencyComponent;
}(OListPickerCustomRenderer));
export { OListPickerRendererCurrencyComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1saXN0LXBpY2tlci1yZW5kZXJlci1jdXJyZW5jeS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9vbnRpbWl6ZS13ZWItbmd4LyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvaW5wdXQvbGlzdHBpY2tlci9saXN0cGlja2VyLXJlbmRlcmVyL2N1cnJlbmN5L28tbGlzdC1waWNrZXItcmVuZGVyZXItY3VycmVuY3kuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBVSxXQUFXLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTdHLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQztBQUMzRSxPQUFPLEVBQXlCLGFBQWEsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQzVGLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUMzRSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUM1RSxPQUFPLEVBQUUseUNBQXlDLEVBQUUsTUFBTSwrQ0FBK0MsQ0FBQztBQUUxRyxNQUFNLENBQUMsSUFBTSw2Q0FBNkMsb0JBQ3JELHlDQUF5QztJQUc1QyxpQ0FBaUM7SUFHakMsa0RBQWtEO0VBQ25ELENBQUM7QUFFRjtJQU0wRCxnRUFBeUI7SUFvQmpGLDhDQUFzQixRQUFrQjtRQUF4QyxZQUNFLGtCQUFNLFFBQVEsQ0FBQyxTQUdoQjtRQUpxQixjQUFRLEdBQVIsUUFBUSxDQUFVO1FBakJ4QyxzQkFBZ0IsR0FBVyxDQUFDLENBQUM7UUFFN0Isc0JBQWdCLEdBQVcsQ0FBQyxDQUFDO1FBSW5CLHNCQUFnQixHQUFXLEdBQUcsQ0FBQztRQUUvQixjQUFRLEdBQVksSUFBSSxDQUFDO1FBQ3pCLHVCQUFpQixHQUFXLEdBQUcsQ0FBQztRQVV4QyxLQUFJLENBQUMsZUFBZSxHQUFHLEtBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQzFELEtBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDOztJQUMxQixDQUFDO0lBRUQsK0RBQWdCLEdBQWhCO1FBQ0UsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLGFBQWEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUVELHlEQUFVLEdBQVY7UUFDRSxpQkFBTSxVQUFVLFdBQUUsQ0FBQztRQUNuQixJQUFJLE9BQU8sSUFBSSxDQUFDLGNBQWMsS0FBSyxXQUFXLEVBQUU7WUFDOUMsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQztTQUNuRDtRQUNELElBQUksT0FBTyxJQUFJLENBQUMsc0JBQXNCLEtBQUssV0FBVyxFQUFFO1lBQ3RELElBQUksQ0FBQyxzQkFBc0IsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQztTQUNuRTtRQUVELElBQUksQ0FBQyxhQUFhLEdBQUc7WUFDbkIsY0FBYyxFQUFFLElBQUksQ0FBQyxjQUFjO1lBQ25DLHNCQUFzQixFQUFFLElBQUksQ0FBQyxzQkFBc0I7WUFDbkQsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLGdCQUFnQjtZQUN2QyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsZ0JBQWdCO1lBQ3ZDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxnQkFBZ0I7WUFDdkMsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO1lBQ3ZCLGlCQUFpQixFQUFFLElBQUksQ0FBQyxpQkFBaUI7U0FDMUMsQ0FBQztJQUVKLENBQUM7O2dCQXZERixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGlDQUFpQztvQkFDM0MsNkdBQStEO29CQUMvRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsTUFBTSxFQUFFLDZDQUE2QztpQkFDdEQ7OztnQkF2QjRDLFFBQVE7Ozs4QkEwQ2xELFNBQVMsU0FBQyxhQUFhLEVBQUUsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7O0lBZjdEO1FBREMsY0FBYyxFQUFFOztrRkFDWTtJQUU3QjtRQURDLGNBQWMsRUFBRTs7a0ZBQ1k7SUE4Qy9CLDJDQUFDO0NBQUEsQUF6REQsQ0FNMEQseUJBQXlCLEdBbURsRjtTQW5EWSxvQ0FBb0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBJbmplY3RvciwgT25Jbml0LCBUZW1wbGF0ZVJlZiwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IElucHV0Q29udmVydGVyIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vZGVjb3JhdG9ycy9pbnB1dC1jb252ZXJ0ZXInO1xuaW1wb3J0IHsgSUN1cnJlbmN5UGlwZUFyZ3VtZW50LCBPQ3VycmVuY3lQaXBlIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vcGlwZXMvby1jdXJyZW5jeS5waXBlJztcbmltcG9ydCB7IEN1cnJlbmN5U2VydmljZSB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3NlcnZpY2VzL2N1cnJlbmN5LnNlcnZpY2UnO1xuaW1wb3J0IHsgT0xpc3RQaWNrZXJDdXN0b21SZW5kZXJlciB9IGZyb20gJy4uL28tbGlzdC1waWNrZXItcmVuZGVyZXIuY2xhc3MnO1xuaW1wb3J0IHsgREVGQVVMVF9JTlBVVFNfT19MSVNUUElDS0VSX1JFTkRFUkVSX1JFQUwgfSBmcm9tICcuLi9yZWFsL28tbGlzdC1waWNrZXItcmVuZGVyZXItcmVhbC5jb21wb25lbnQnO1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9JTlBVVFNfT19MSVNUUElDS0VSX1JFTkRFUkVSX0NVUlJFTkNZID0gW1xuICAuLi5ERUZBVUxUX0lOUFVUU19PX0xJU1RQSUNLRVJfUkVOREVSRVJfUkVBTCxcblxuICAvLyBjdXJyZW5jeS1zeW1ib2wgW3N0cmluZ106IGN1cnJlbmN5IHN5bWJvbC4gRGVmYXVsdDogZG9sbGFyICgkKS5cbiAgJ2N1cnJlbmN5U3ltYm9sOiBjdXJyZW5jeS1zeW1ib2wnLFxuXG4gIC8vIGN1cnJlbmN5LXN5bWJvbC1wb3NpdGlvbiBbbGVmdHxyaWdodF06IHBvc2l0aW9uIG9mIHRoZSBjdXJyZW5jeSBzeW1ib2wuIERlZmF1bHQ6IGxlZnQuXG4gICdjdXJyZW5jeVN5bWJvbFBvc2l0aW9uOiBjdXJyZW5jeS1zeW1ib2wtcG9zaXRpb24nXG5dO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdvLWxpc3QtcGlja2VyLXJlbmRlcmVyLWN1cnJlbmN5JyxcbiAgdGVtcGxhdGVVcmw6ICcuL28tbGlzdC1waWNrZXItcmVuZGVyZXItY3VycmVuY3kuY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgaW5wdXRzOiBERUZBVUxUX0lOUFVUU19PX0xJU1RQSUNLRVJfUkVOREVSRVJfQ1VSUkVOQ1lcbn0pXG5leHBvcnQgY2xhc3MgT0xpc3RQaWNrZXJSZW5kZXJlckN1cnJlbmN5Q29tcG9uZW50IGV4dGVuZHMgT0xpc3RQaWNrZXJDdXN0b21SZW5kZXJlciBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgQElucHV0Q29udmVydGVyKClcbiAgbWluRGVjaW1hbERpZ2l0czogbnVtYmVyID0gMjtcbiAgQElucHV0Q29udmVydGVyKClcbiAgbWF4RGVjaW1hbERpZ2l0czogbnVtYmVyID0gMjtcblxuICBwcm90ZWN0ZWQgY3VycmVuY3lTeW1ib2w6IHN0cmluZztcbiAgcHJvdGVjdGVkIGN1cnJlbmN5U3ltYm9sUG9zaXRpb246IHN0cmluZztcbiAgcHJvdGVjdGVkIGRlY2ltYWxTZXBhcmF0b3I6IHN0cmluZyA9ICcuJztcblxuICBwcm90ZWN0ZWQgZ3JvdXBpbmc6IGJvb2xlYW4gPSB0cnVlO1xuICBwcm90ZWN0ZWQgdGhvdXNhbmRTZXBhcmF0b3I6IHN0cmluZyA9ICcsJztcblxuICBwcm90ZWN0ZWQgY3VycmVuY3lTZXJ2aWNlOiBDdXJyZW5jeVNlcnZpY2U7XG5cbiAgcHJvdGVjdGVkIGNvbXBvbmVudFBpcGU6IE9DdXJyZW5jeVBpcGU7XG4gIHByb3RlY3RlZCBwaXBlQXJndW1lbnRzOiBJQ3VycmVuY3lQaXBlQXJndW1lbnQ7XG4gIEBWaWV3Q2hpbGQoJ3RlbXBsYXRlcmVmJywgeyByZWFkOiBUZW1wbGF0ZVJlZiwgc3RhdGljOiB0cnVlIH0pIHB1YmxpYyB0ZW1wbGF0ZXJlZjogVGVtcGxhdGVSZWY8YW55PjtcblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgaW5qZWN0b3I6IEluamVjdG9yKSB7XG4gICAgc3VwZXIoaW5qZWN0b3IpO1xuICAgIHRoaXMuY3VycmVuY3lTZXJ2aWNlID0gdGhpcy5pbmplY3Rvci5nZXQoQ3VycmVuY3lTZXJ2aWNlKTtcbiAgICB0aGlzLnNldENvbXBvbmVudFBpcGUoKTtcbiAgfVxuXG4gIHNldENvbXBvbmVudFBpcGUoKSB7XG4gICAgdGhpcy5jb21wb25lbnRQaXBlID0gbmV3IE9DdXJyZW5jeVBpcGUodGhpcy5pbmplY3Rvcik7XG4gIH1cblxuICBpbml0aWFsaXplKCkge1xuICAgIHN1cGVyLmluaXRpYWxpemUoKTtcbiAgICBpZiAodHlwZW9mIHRoaXMuY3VycmVuY3lTeW1ib2wgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzLmN1cnJlbmN5U3ltYm9sID0gdGhpcy5jdXJyZW5jeVNlcnZpY2Uuc3ltYm9sO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHRoaXMuY3VycmVuY3lTeW1ib2xQb3NpdGlvbiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRoaXMuY3VycmVuY3lTeW1ib2xQb3NpdGlvbiA9IHRoaXMuY3VycmVuY3lTZXJ2aWNlLnN5bWJvbFBvc2l0aW9uO1xuICAgIH1cblxuICAgIHRoaXMucGlwZUFyZ3VtZW50cyA9IHtcbiAgICAgIGN1cnJlbmN5U2ltYm9sOiB0aGlzLmN1cnJlbmN5U3ltYm9sLFxuICAgICAgY3VycmVuY3lTeW1ib2xQb3NpdGlvbjogdGhpcy5jdXJyZW5jeVN5bWJvbFBvc2l0aW9uLFxuICAgICAgbWluRGVjaW1hbERpZ2l0czogdGhpcy5taW5EZWNpbWFsRGlnaXRzLFxuICAgICAgbWF4RGVjaW1hbERpZ2l0czogdGhpcy5tYXhEZWNpbWFsRGlnaXRzLFxuICAgICAgZGVjaW1hbFNlcGFyYXRvcjogdGhpcy5kZWNpbWFsU2VwYXJhdG9yLFxuICAgICAgZ3JvdXBpbmc6IHRoaXMuZ3JvdXBpbmcsXG4gICAgICB0aG91c2FuZFNlcGFyYXRvcjogdGhpcy50aG91c2FuZFNlcGFyYXRvclxuICAgIH07XG5cbiAgfVxuXG59XG4iXX0=