import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, Injector, TemplateRef, ViewChild } from '@angular/core';
import { InputConverter } from '../../../../../decorators/input-converter';
import { OIntegerPipe } from '../../../../../pipes/o-integer.pipe';
import { DEFAULT_INPUTS_O_LISTPICKER_RENDERER, OListPickerCustomRenderer } from '../o-list-picker-renderer.class';
export var DEFAULT_INPUTS_O_LISTPICKER_RENDERER_INTEGER = tslib_1.__spread(DEFAULT_INPUTS_O_LISTPICKER_RENDERER, [
    'grouping',
    'thousandSeparator: thousand-separator'
]);
var OListPickerRendererIntegerComponent = (function (_super) {
    tslib_1.__extends(OListPickerRendererIntegerComponent, _super);
    function OListPickerRendererIntegerComponent(injector) {
        var _this = _super.call(this, injector) || this;
        _this.injector = injector;
        _this.grouping = true;
        _this.thousandSeparator = ',';
        _this.setComponentPipe();
        return _this;
    }
    OListPickerRendererIntegerComponent.prototype.setComponentPipe = function () {
        this.componentPipe = new OIntegerPipe(this.injector);
    };
    OListPickerRendererIntegerComponent.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        this.pipeArguments = {
            grouping: this.grouping,
            thousandSeparator: this.thousandSeparator
        };
    };
    OListPickerRendererIntegerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-list-picker-renderer-integer',
                    template: "<ng-template #templateref let-value=\"value\">\n  {{getListPickerValue(value)}}\n</ng-template>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    inputs: DEFAULT_INPUTS_O_LISTPICKER_RENDERER_INTEGER
                }] }
    ];
    OListPickerRendererIntegerComponent.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    OListPickerRendererIntegerComponent.propDecorators = {
        templateref: [{ type: ViewChild, args: ['templateref', { read: TemplateRef, static: true },] }]
    };
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OListPickerRendererIntegerComponent.prototype, "grouping", void 0);
    return OListPickerRendererIntegerComponent;
}(OListPickerCustomRenderer));
export { OListPickerRendererIntegerComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1saXN0LXBpY2tlci1yZW5kZXJlci1pbnRlZ2VyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL29udGltaXplLXdlYi1uZ3gvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9pbnB1dC9saXN0cGlja2VyL2xpc3RwaWNrZXItcmVuZGVyZXIvaW50ZWdlci9vLWxpc3QtcGlja2VyLXJlbmRlcmVyLWludGVnZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBRUwsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFDVCxRQUFRLEVBRVIsV0FBVyxFQUNYLFNBQVMsRUFDVixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFDM0UsT0FBTyxFQUF3QixZQUFZLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUN6RixPQUFPLEVBQUUsb0NBQW9DLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUVsSCxNQUFNLENBQUMsSUFBTSw0Q0FBNEMsb0JBQ3BELG9DQUFvQztJQUV2QyxVQUFVO0lBRVYsdUNBQXVDO0VBQ3hDLENBQUM7QUFFRjtJQU15RCwrREFBeUI7SUFVaEYsNkNBQXNCLFFBQWtCO1FBQXhDLFlBQ0Usa0JBQU0sUUFBUSxDQUFDLFNBRWhCO1FBSHFCLGNBQVEsR0FBUixRQUFRLENBQVU7UUFQOUIsY0FBUSxHQUFZLElBQUksQ0FBQztRQUN6Qix1QkFBaUIsR0FBVyxHQUFHLENBQUM7UUFReEMsS0FBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7O0lBQzFCLENBQUM7SUFFRCw4REFBZ0IsR0FBaEI7UUFDRSxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksWUFBWSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRUQsd0RBQVUsR0FBVjtRQUNFLGlCQUFNLFVBQVUsV0FBRSxDQUFDO1FBQ25CLElBQUksQ0FBQyxhQUFhLEdBQUc7WUFDbkIsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO1lBQ3ZCLGlCQUFpQixFQUFFLElBQUksQ0FBQyxpQkFBaUI7U0FDMUMsQ0FBQztJQUNKLENBQUM7O2dCQS9CRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGdDQUFnQztvQkFDMUMsNkdBQThEO29CQUM5RCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsTUFBTSxFQUFFLDRDQUE0QztpQkFDckQ7OztnQkF2QkMsUUFBUTs7OzhCQWdDUCxTQUFTLFNBQUMsYUFBYSxFQUFFLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFOztJQUw3RDtRQURDLGNBQWMsRUFBRTs7eUVBQ2tCO0lBd0JyQywwQ0FBQztDQUFBLEFBakNELENBTXlELHlCQUF5QixHQTJCakY7U0EzQlksbUNBQW1DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQWZ0ZXJDb250ZW50SW5pdCxcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENvbXBvbmVudCxcbiAgSW5qZWN0b3IsXG4gIE9uSW5pdCxcbiAgVGVtcGxhdGVSZWYsXG4gIFZpZXdDaGlsZFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgSW5wdXRDb252ZXJ0ZXIgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9kZWNvcmF0b3JzL2lucHV0LWNvbnZlcnRlcic7XG5pbXBvcnQgeyBJSW50ZWdlclBpcGVBcmd1bWVudCwgT0ludGVnZXJQaXBlIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vcGlwZXMvby1pbnRlZ2VyLnBpcGUnO1xuaW1wb3J0IHsgREVGQVVMVF9JTlBVVFNfT19MSVNUUElDS0VSX1JFTkRFUkVSLCBPTGlzdFBpY2tlckN1c3RvbVJlbmRlcmVyIH0gZnJvbSAnLi4vby1saXN0LXBpY2tlci1yZW5kZXJlci5jbGFzcyc7XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX0lOUFVUU19PX0xJU1RQSUNLRVJfUkVOREVSRVJfSU5URUdFUiA9IFtcbiAgLi4uREVGQVVMVF9JTlBVVFNfT19MSVNUUElDS0VSX1JFTkRFUkVSLFxuICAvLyBncm91cGluZyBbbm98eWVzXTogZ3JvdXBpbmcgdGhvdXNhbmRzLiBEZWZhdWx0OiB5ZXMuXG4gICdncm91cGluZycsXG4gIC8vIHRob3VzYW5kLXNlcGFyYXRvciBbc3RyaW5nXTogdGhvdXNhbmRzIHNlcGFyYXRvciB3aGVuIGdyb3VwaW5nLiBEZWZhdWx0OiBjb21tYSAoLCkuXG4gICd0aG91c2FuZFNlcGFyYXRvcjogdGhvdXNhbmQtc2VwYXJhdG9yJ1xuXTtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnby1saXN0LXBpY2tlci1yZW5kZXJlci1pbnRlZ2VyJyxcbiAgdGVtcGxhdGVVcmw6ICcuL28tbGlzdC1waWNrZXItcmVuZGVyZXItaW50ZWdlci5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBpbnB1dHM6IERFRkFVTFRfSU5QVVRTX09fTElTVFBJQ0tFUl9SRU5ERVJFUl9JTlRFR0VSXG59KVxuZXhwb3J0IGNsYXNzIE9MaXN0UGlja2VyUmVuZGVyZXJJbnRlZ2VyQ29tcG9uZW50IGV4dGVuZHMgT0xpc3RQaWNrZXJDdXN0b21SZW5kZXJlciBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQsIE9uSW5pdCB7XG5cbiAgQElucHV0Q29udmVydGVyKClcbiAgcHJvdGVjdGVkIGdyb3VwaW5nOiBib29sZWFuID0gdHJ1ZTtcbiAgcHJvdGVjdGVkIHRob3VzYW5kU2VwYXJhdG9yOiBzdHJpbmcgPSAnLCc7XG4gIHByb3RlY3RlZCBjb21wb25lbnRQaXBlOiBPSW50ZWdlclBpcGU7XG4gIHByb3RlY3RlZCBwaXBlQXJndW1lbnRzOiBJSW50ZWdlclBpcGVBcmd1bWVudDtcblxuICBAVmlld0NoaWxkKCd0ZW1wbGF0ZXJlZicsIHsgcmVhZDogVGVtcGxhdGVSZWYsIHN0YXRpYzogdHJ1ZSB9KSBwdWJsaWMgdGVtcGxhdGVyZWY6IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGluamVjdG9yOiBJbmplY3Rvcikge1xuICAgIHN1cGVyKGluamVjdG9yKTtcbiAgICB0aGlzLnNldENvbXBvbmVudFBpcGUoKTtcbiAgfVxuXG4gIHNldENvbXBvbmVudFBpcGUoKSB7XG4gICAgdGhpcy5jb21wb25lbnRQaXBlID0gbmV3IE9JbnRlZ2VyUGlwZSh0aGlzLmluamVjdG9yKTtcbiAgfVxuXG4gIGluaXRpYWxpemUoKSB7XG4gICAgc3VwZXIuaW5pdGlhbGl6ZSgpO1xuICAgIHRoaXMucGlwZUFyZ3VtZW50cyA9IHtcbiAgICAgIGdyb3VwaW5nOiB0aGlzLmdyb3VwaW5nLFxuICAgICAgdGhvdXNhbmRTZXBhcmF0b3I6IHRoaXMudGhvdXNhbmRTZXBhcmF0b3JcbiAgICB9O1xuICB9XG5cbn1cbiJdfQ==