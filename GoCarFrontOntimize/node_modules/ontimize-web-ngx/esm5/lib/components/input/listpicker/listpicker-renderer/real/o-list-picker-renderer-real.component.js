import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, Injector, TemplateRef, ViewChild } from '@angular/core';
import { InputConverter } from '../../../../../decorators/input-converter';
import { ORealPipe } from '../../../../../pipes/o-real.pipe';
import { NumberService } from '../../../../../services/number.service';
import { DEFAULT_INPUTS_O_LISTPICKER_RENDERER_INTEGER, OListPickerRendererIntegerComponent } from '../integer/o-list-picker-renderer-integer.component';
export var DEFAULT_INPUTS_O_LISTPICKER_RENDERER_REAL = tslib_1.__spread(DEFAULT_INPUTS_O_LISTPICKER_RENDERER_INTEGER, [
    'decimalSeparator: decimal-separator',
    'minDecimalDigits: min-decimal-digits',
    'maxDecimalDigits: max-decimal-digits'
]);
var OListPickerRendererRealComponent = (function (_super) {
    tslib_1.__extends(OListPickerRendererRealComponent, _super);
    function OListPickerRendererRealComponent(injector) {
        var _this = _super.call(this, injector) || this;
        _this.injector = injector;
        _this.minDecimalDigits = 2;
        _this.maxDecimalDigits = 2;
        _this.decimalSeparator = '.';
        _this.numberService = _this.injector.get(NumberService);
        _this.setComponentPipe();
        return _this;
    }
    OListPickerRendererRealComponent.prototype.setComponentPipe = function () {
        this.componentPipe = new ORealPipe(this.injector);
    };
    OListPickerRendererRealComponent.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        this.pipeArguments = {
            minDecimalDigits: this.minDecimalDigits,
            maxDecimalDigits: this.maxDecimalDigits,
            decimalSeparator: this.decimalSeparator,
            grouping: this.grouping,
            thousandSeparator: this.thousandSeparator
        };
    };
    OListPickerRendererRealComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-list-picker-renderer-real',
                    template: "<ng-template #templateref let-value=\"value\">\n  {{getListPickerValue(value)}}\n</ng-template>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    inputs: DEFAULT_INPUTS_O_LISTPICKER_RENDERER_REAL
                }] }
    ];
    OListPickerRendererRealComponent.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    OListPickerRendererRealComponent.propDecorators = {
        templateref: [{ type: ViewChild, args: ['templateref', { read: TemplateRef, static: true },] }]
    };
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Number)
    ], OListPickerRendererRealComponent.prototype, "minDecimalDigits", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Number)
    ], OListPickerRendererRealComponent.prototype, "maxDecimalDigits", void 0);
    return OListPickerRendererRealComponent;
}(OListPickerRendererIntegerComponent));
export { OListPickerRendererRealComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1saXN0LXBpY2tlci1yZW5kZXJlci1yZWFsLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL29udGltaXplLXdlYi1uZ3gvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9pbnB1dC9saXN0cGlja2VyL2xpc3RwaWNrZXItcmVuZGVyZXIvcmVhbC9vLWxpc3QtcGlja2VyLXJlbmRlcmVyLXJlYWwuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBVSxXQUFXLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTdHLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQztBQUMzRSxPQUFPLEVBQXFCLFNBQVMsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUN2RSxPQUFPLEVBQ0wsNENBQTRDLEVBQzVDLG1DQUFtQyxFQUNwQyxNQUFNLHFEQUFxRCxDQUFDO0FBRTdELE1BQU0sQ0FBQyxJQUFNLHlDQUF5QyxvQkFDakQsNENBQTRDO0lBRS9DLHFDQUFxQztJQUNyQyxzQ0FBc0M7SUFDdEMsc0NBQXNDO0VBQ3ZDLENBQUM7QUFFRjtJQU1zRCw0REFBbUM7SUFldkYsMENBQXNCLFFBQWtCO1FBQXhDLFlBQ0Usa0JBQU0sUUFBUSxDQUFDLFNBR2hCO1FBSnFCLGNBQVEsR0FBUixRQUFRLENBQVU7UUFaeEMsc0JBQWdCLEdBQVcsQ0FBQyxDQUFDO1FBRTdCLHNCQUFnQixHQUFXLENBQUMsQ0FBQztRQUVuQixzQkFBZ0IsR0FBVyxHQUFHLENBQUM7UUFVdkMsS0FBSSxDQUFDLGFBQWEsR0FBRyxLQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUN0RCxLQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQzs7SUFDMUIsQ0FBQztJQUVELDJEQUFnQixHQUFoQjtRQUNFLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3BELENBQUM7SUFFRCxxREFBVSxHQUFWO1FBQ0UsaUJBQU0sVUFBVSxXQUFFLENBQUM7UUFDbkIsSUFBSSxDQUFDLGFBQWEsR0FBRztZQUNuQixnQkFBZ0IsRUFBRSxJQUFJLENBQUMsZ0JBQWdCO1lBQ3ZDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxnQkFBZ0I7WUFDdkMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLGdCQUFnQjtZQUN2QyxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7WUFDdkIsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLGlCQUFpQjtTQUMxQyxDQUFDO0lBQ0osQ0FBQzs7Z0JBeENGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsNkJBQTZCO29CQUN2Qyw2R0FBMkQ7b0JBQzNELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxNQUFNLEVBQUUseUNBQXlDO2lCQUNsRDs7O2dCQXZCNEMsUUFBUTs7OzhCQXFDbEQsU0FBUyxTQUFDLGFBQWEsRUFBRSxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTs7SUFWN0Q7UUFEQyxjQUFjLEVBQUU7OzhFQUNZO0lBRTdCO1FBREMsY0FBYyxFQUFFOzs4RUFDWTtJQStCL0IsdUNBQUM7Q0FBQSxBQTFDRCxDQU1zRCxtQ0FBbUMsR0FvQ3hGO1NBcENZLGdDQUFnQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIEluamVjdG9yLCBPbkluaXQsIFRlbXBsYXRlUmVmLCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgSW5wdXRDb252ZXJ0ZXIgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9kZWNvcmF0b3JzL2lucHV0LWNvbnZlcnRlcic7XG5pbXBvcnQgeyBJUmVhbFBpcGVBcmd1bWVudCwgT1JlYWxQaXBlIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vcGlwZXMvby1yZWFsLnBpcGUnO1xuaW1wb3J0IHsgTnVtYmVyU2VydmljZSB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3NlcnZpY2VzL251bWJlci5zZXJ2aWNlJztcbmltcG9ydCB7XG4gIERFRkFVTFRfSU5QVVRTX09fTElTVFBJQ0tFUl9SRU5ERVJFUl9JTlRFR0VSLFxuICBPTGlzdFBpY2tlclJlbmRlcmVySW50ZWdlckNvbXBvbmVudFxufSBmcm9tICcuLi9pbnRlZ2VyL28tbGlzdC1waWNrZXItcmVuZGVyZXItaW50ZWdlci5jb21wb25lbnQnO1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9JTlBVVFNfT19MSVNUUElDS0VSX1JFTkRFUkVSX1JFQUwgPSBbXG4gIC4uLkRFRkFVTFRfSU5QVVRTX09fTElTVFBJQ0tFUl9SRU5ERVJFUl9JTlRFR0VSLFxuICAvLyBkZWNpbWFsLXNlcGFyYXRvciBbc3RyaW5nXTogZGVjaW1hbCBzZXBhcmF0b3IuIERlZmF1bHQ6IGRvdCAoLikuXG4gICdkZWNpbWFsU2VwYXJhdG9yOiBkZWNpbWFsLXNlcGFyYXRvcicsXG4gICdtaW5EZWNpbWFsRGlnaXRzOiBtaW4tZGVjaW1hbC1kaWdpdHMnLFxuICAnbWF4RGVjaW1hbERpZ2l0czogbWF4LWRlY2ltYWwtZGlnaXRzJ1xuXTtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnby1saXN0LXBpY2tlci1yZW5kZXJlci1yZWFsJyxcbiAgdGVtcGxhdGVVcmw6ICcuL28tbGlzdC1waWNrZXItcmVuZGVyZXItcmVhbC5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBpbnB1dHM6IERFRkFVTFRfSU5QVVRTX09fTElTVFBJQ0tFUl9SRU5ERVJFUl9SRUFMXG59KVxuZXhwb3J0IGNsYXNzIE9MaXN0UGlja2VyUmVuZGVyZXJSZWFsQ29tcG9uZW50IGV4dGVuZHMgT0xpc3RQaWNrZXJSZW5kZXJlckludGVnZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIEBJbnB1dENvbnZlcnRlcigpXG4gIG1pbkRlY2ltYWxEaWdpdHM6IG51bWJlciA9IDI7XG4gIEBJbnB1dENvbnZlcnRlcigpXG4gIG1heERlY2ltYWxEaWdpdHM6IG51bWJlciA9IDI7XG5cbiAgcHJvdGVjdGVkIGRlY2ltYWxTZXBhcmF0b3I6IHN0cmluZyA9ICcuJztcbiAgcHJvdGVjdGVkIG51bWJlclNlcnZpY2U6IE51bWJlclNlcnZpY2U7XG5cbiAgcHJvdGVjdGVkIGNvbXBvbmVudFBpcGU6IE9SZWFsUGlwZTtcbiAgcHJvdGVjdGVkIHBpcGVBcmd1bWVudHM6IElSZWFsUGlwZUFyZ3VtZW50O1xuXG4gIEBWaWV3Q2hpbGQoJ3RlbXBsYXRlcmVmJywgeyByZWFkOiBUZW1wbGF0ZVJlZiwgc3RhdGljOiB0cnVlIH0pIHB1YmxpYyB0ZW1wbGF0ZXJlZjogVGVtcGxhdGVSZWY8YW55PjtcblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgaW5qZWN0b3I6IEluamVjdG9yKSB7XG4gICAgc3VwZXIoaW5qZWN0b3IpO1xuICAgIHRoaXMubnVtYmVyU2VydmljZSA9IHRoaXMuaW5qZWN0b3IuZ2V0KE51bWJlclNlcnZpY2UpO1xuICAgIHRoaXMuc2V0Q29tcG9uZW50UGlwZSgpO1xuICB9XG5cbiAgc2V0Q29tcG9uZW50UGlwZSgpIHtcbiAgICB0aGlzLmNvbXBvbmVudFBpcGUgPSBuZXcgT1JlYWxQaXBlKHRoaXMuaW5qZWN0b3IpO1xuICB9XG5cbiAgaW5pdGlhbGl6ZSgpIHtcbiAgICBzdXBlci5pbml0aWFsaXplKCk7XG4gICAgdGhpcy5waXBlQXJndW1lbnRzID0ge1xuICAgICAgbWluRGVjaW1hbERpZ2l0czogdGhpcy5taW5EZWNpbWFsRGlnaXRzLFxuICAgICAgbWF4RGVjaW1hbERpZ2l0czogdGhpcy5tYXhEZWNpbWFsRGlnaXRzLFxuICAgICAgZGVjaW1hbFNlcGFyYXRvcjogdGhpcy5kZWNpbWFsU2VwYXJhdG9yLFxuICAgICAgZ3JvdXBpbmc6IHRoaXMuZ3JvdXBpbmcsXG4gICAgICB0aG91c2FuZFNlcGFyYXRvcjogdGhpcy50aG91c2FuZFNlcGFyYXRvclxuICAgIH07XG4gIH1cblxufVxuIl19