import * as tslib_1 from "tslib";
import { EventEmitter, NgZone, ViewChild } from '@angular/core';
import { BehaviorSubject, Observable, Subscription } from 'rxjs';
import { InputConverter } from '../../decorators/input-converter';
import { OErrorDialogManager } from '../../services/o-error-dialog-manager.service';
import { OntimizeService } from '../../services/ontimize/ontimize.service';
import { Codes } from '../../util/codes';
import { ServiceUtils } from '../../util/service.utils';
import { Util } from '../../util/util';
import { OContextMenuComponent } from '../contextmenu/o-context-menu.component';
import { DEFAULT_INPUTS_O_FORM_DATA_COMPONENT, DEFAULT_OUTPUTS_O_FORM_DATA_COMPONENT, OFormDataComponent } from '../o-form-data-component.class';
export var DEFAULT_INPUTS_O_FORM_SERVICE_COMPONENT = tslib_1.__spread(DEFAULT_INPUTS_O_FORM_DATA_COMPONENT, [
    'staticData: static-data',
    'entity',
    'service',
    'columns',
    'valueColumn: value-column',
    'valueColumnType: value-column-type',
    'parentKeys: parent-keys',
    'visibleColumns: visible-columns',
    'descriptionColumns: description-columns',
    'separator',
    'queryOnInit: query-on-init',
    'queryOnBind: query-on-bind',
    'queryOnEvent: query-on-event',
    'queryMethod: query-method',
    'serviceType: service-type',
    'queryWithNullParentKeys: query-with-null-parent-keys',
    'setValueOnValueChange: set-value-on-value-change',
    'queryFallbackFunction: query-fallback-function',
    'translate',
    'sort'
]);
export var DEFAULT_OUTPUTS_O_FORM_SERVICE_COMPONENT = tslib_1.__spread(DEFAULT_OUTPUTS_O_FORM_DATA_COMPONENT, [
    'onSetValueOnValueChange',
    'onDataLoaded'
]);
var OFormServiceComponent = (function (_super) {
    tslib_1.__extends(OFormServiceComponent, _super);
    function OFormServiceComponent(form, elRef, injector) {
        var _this = _super.call(this, form, elRef, injector) || this;
        _this.valueColumnType = Codes.TYPE_INT;
        _this.separator = Codes.SPACE_SEPARATOR;
        _this.queryOnInit = true;
        _this.queryOnBind = false;
        _this.queryMethod = Codes.QUERY_METHOD;
        _this.queryWithNullParentKeys = false;
        _this.translate = false;
        _this.onSetValueOnValueChange = new EventEmitter();
        _this.onDataLoaded = new EventEmitter();
        _this.dataArray = [];
        _this.colArray = [];
        _this.visibleColArray = [];
        _this.descriptionColArray = [];
        _this.loading = false;
        _this.cacheQueried = false;
        _this._pKeysEquiv = {};
        _this._setValueOnValueChangeEquiv = {};
        _this.subscriptionDataLoad = new Subscription();
        _this.delayLoad = 250;
        _this.loadingSubject = new BehaviorSubject(false);
        _this.form = form;
        _this.elRef = elRef;
        _this.oErrorDialogManager = injector.get(OErrorDialogManager);
        return _this;
    }
    Object.defineProperty(OFormServiceComponent.prototype, "oContextMenuRef", {
        set: function (value) {
            this.oContextMenu = value;
        },
        enumerable: true,
        configurable: true
    });
    OFormServiceComponent.prototype.initialize = function () {
        var _this = this;
        _super.prototype.initialize.call(this);
        this.subscriptionDataLoad.add(this.onDataLoaded.subscribe(function () { return _this.syncDataIndex(false); }));
        this.cacheQueried = false;
        this.colArray = Util.parseArray(this.columns, true);
        this.visibleColArray = Util.parseArray(this.visibleColumns, true);
        if (Util.isArrayEmpty(this.visibleColArray)) {
            this.visibleColumns = this.columns;
            this.visibleColArray = this.colArray;
        }
        this.descriptionColArray = Util.parseArray(this.descriptionColumns);
        if (Util.isArrayEmpty(this.descriptionColArray)) {
            this.descriptionColArray = this.visibleColArray;
        }
        var pkArray = Util.parseArray(this.parentKeys);
        this._pKeysEquiv = Util.parseParentKeysEquivalences(pkArray);
        var setValueSetArray = Util.parseArray(this.setValueOnValueChange);
        this._setValueOnValueChangeEquiv = Util.parseParentKeysEquivalences(setValueSetArray);
        if (this.form && this.queryOnBind) {
            this._formDataSubcribe = this.form.onDataLoaded.subscribe(function () { return _this.queryData(); });
        }
        if (this.staticData) {
            this.queryOnBind = false;
            this.queryOnInit = false;
            this.setDataArray(this.staticData);
        }
        else {
            this.configureService();
        }
        if (this.queryOnEvent !== undefined && this.queryOnEvent.subscribe !== undefined) {
            this.queryOnEventSubscription = this.queryOnEvent.subscribe(function (value) {
                if (Util.isDefined(value) || _this.queryWithNullParentKeys) {
                    _this.queryData();
                }
            });
        }
        if (typeof this.queryFallbackFunction !== 'function') {
            this.queryFallbackFunction = undefined;
        }
    };
    OFormServiceComponent.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
        if (this._formDataSubcribe) {
            this._formDataSubcribe.unsubscribe();
        }
        if (this.queryOnEventSubscription) {
            this.queryOnEventSubscription.unsubscribe();
        }
        if (this.loaderSubscription) {
            this.loaderSubscription.unsubscribe();
        }
        if (this.subscriptionDataLoad) {
            this.subscriptionDataLoad.unsubscribe();
        }
    };
    OFormServiceComponent.prototype.emitOnValueChange = function (type, newValue, oldValue) {
        var _this = this;
        _super.prototype.emitOnValueChange.call(this, type, newValue, oldValue);
        var record = this.getSelectedRecord();
        this.onSetValueOnValueChange.emit(record);
        var setValueSetKeys = Object.keys(this._setValueOnValueChangeEquiv);
        if (setValueSetKeys.length) {
            var formComponents_1 = this.form.getComponents();
            if (Util.isDefined(record)) {
                setValueSetKeys.forEach(function (key) {
                    var comp = formComponents_1[_this._setValueOnValueChangeEquiv[key]];
                    if (Util.isDefined(comp)) {
                        comp.setValue(record[key]);
                    }
                });
            }
        }
    };
    OFormServiceComponent.prototype.configureService = function () {
        var configureServiceArgs = { injector: this.injector, baseService: OntimizeService, entity: this.entity, service: this.service, serviceType: this.serviceType };
        this.dataService = Util.configureService(configureServiceArgs);
    };
    OFormServiceComponent.prototype.getAttributesValuesToQuery = function (columns) {
        var result = Util.isDefined(columns) ? columns : this.colArray;
        if (result.indexOf(this.valueColumn) === -1) {
            result.push(this.valueColumn);
        }
        return result;
    };
    OFormServiceComponent.prototype.queryData = function (filter) {
        var _this = this;
        if (!this.dataService || !(this.queryMethod in this.dataService) || !this.entity) {
            console.warn('Service not properly configured! aborting query');
            return;
        }
        filter = Object.assign(filter || {}, ServiceUtils.getParentKeysFromForm(this._pKeysEquiv, this.form));
        if (!ServiceUtils.filterContainsAllParentKeys(filter, this._pKeysEquiv) && !this.queryWithNullParentKeys) {
            this.setDataArray([]);
        }
        else {
            if (this.querySuscription) {
                this.querySuscription.unsubscribe();
            }
            if (this.loaderSubscription) {
                this.loaderSubscription.unsubscribe();
            }
            var queryCols = this.getAttributesValuesToQuery();
            this.loaderSubscription = this.load();
            this.querySuscription = this.dataService[this.queryMethod](filter, queryCols, this.entity)
                .subscribe(function (resp) {
                if (resp.isSuccessful()) {
                    _this.cacheQueried = true;
                    _this.setDataArray(resp.data);
                }
                _this.loadingSubject.next(false);
                _this.loaderSubscription.unsubscribe();
            }, function (err) {
                console.error(err);
                _this.loadingSubject.next(false);
                _this.loaderSubscription.unsubscribe();
                if (Util.isDefined(_this.queryFallbackFunction)) {
                    _this.queryFallbackFunction(err);
                }
                else {
                    _this.oErrorDialogManager.openErrorDialog(err);
                    console.error(err);
                }
            });
        }
    };
    OFormServiceComponent.prototype.getDataArray = function () {
        return this.dataArray;
    };
    OFormServiceComponent.prototype.setDataArray = function (data) {
        if (Util.isArray(data)) {
            this.dataArray = this.sortData(data);
        }
        else if (Util.isObject(data) && Object.keys(data).length > 0) {
            this.dataArray = [data];
        }
        else {
            console.warn('Component has received not supported service data. Supported data are Array or not empty Object');
            this.dataArray = [];
        }
        this.onDataLoaded.emit(this.dataArray);
    };
    OFormServiceComponent.prototype.syncDataIndex = function (queryIfNotFound) {
        var _this = this;
        if (queryIfNotFound === void 0) { queryIfNotFound = true; }
        this._currentIndex = undefined;
        if (Util.isDefined(this.value) && !this.isEmpty() && this.dataArray) {
            this.dataArray.forEach(function (item, index) {
                if (_this.value.value instanceof Array) {
                    _this._currentIndex = [];
                    _this.value.value.forEach(function (itemValue, indexValue) {
                        if (item[_this.valueColumn] === itemValue) {
                            _this._currentIndex[_this._currentIndex.length] = indexValue;
                        }
                    });
                }
                else if (item[_this.valueColumn] === _this.value.value) {
                    _this._currentIndex = index;
                }
                if (item[_this.valueColumn] === _this.value.value) {
                    _this._currentIndex = index;
                }
            });
            if (this._currentIndex === undefined) {
                if (queryIfNotFound &&
                    this.queryOnBind && this.dataArray && this.dataArray.length === 0 && !this.cacheQueried) {
                    this.queryData();
                }
                else if (!queryIfNotFound && this.dataArray && this.dataArray.length > 0) {
                    console.warn('It was set the value ' + this.value.value + ' to the component ' + this.oattr + ' but this value does not exist in the data array and this value will be set to undefined');
                    this.setValue(void 0);
                }
            }
        }
    };
    OFormServiceComponent.prototype.parseByValueColumnType = function (val) {
        var value = val;
        if (this.valueColumnType === Codes.TYPE_INT) {
            var parsed = parseInt(value, 10);
            if (!isNaN(parsed)) {
                value = parsed;
            }
        }
        return value;
    };
    OFormServiceComponent.prototype.setValue = function (val, options) {
        var value = this.parseByValueColumnType(val);
        _super.prototype.setValue.call(this, value, options);
    };
    OFormServiceComponent.prototype.setData = function (val) {
        var value = this.parseByValueColumnType(val);
        _super.prototype.setData.call(this, value);
    };
    OFormServiceComponent.prototype.getSelectedRecord = function () {
        var _this = this;
        var result;
        var selectedValue = this.getValue();
        if (Util.isDefined(selectedValue)) {
            result = this.getDataArray().find(function (item) { return item[_this.valueColumn] === selectedValue; });
        }
        return result;
    };
    OFormServiceComponent.prototype.load = function () {
        var _this = this;
        var zone = this.injector.get(NgZone);
        var loadObservable = new Observable(function (observer) {
            var timer = window.setTimeout(function () {
                observer.next(true);
            }, _this.delayLoad);
            return function () {
                window.clearTimeout(timer);
                zone.run(function () {
                    observer.next(false);
                    _this.loading = false;
                });
            };
        });
        var subscription = loadObservable.subscribe(function (val) {
            zone.run(function () {
                _this.loading = val;
                _this.loadingSubject.next(val);
            });
        });
        return subscription;
    };
    OFormServiceComponent.prototype.onFormControlChange = function (value) {
        if (this.oldValue === value) {
            return;
        }
        _super.prototype.onFormControlChange.call(this, value);
    };
    OFormServiceComponent.prototype.getOptionDescriptionValue = function (item) {
        var _this = this;
        if (item === void 0) { item = {}; }
        var descTxt = '';
        if (this.descriptionColArray && this.descriptionColArray.length > 0) {
            this.descriptionColArray.forEach(function (col, index) {
                var txt = item[col];
                if (Util.isDefined(txt)) {
                    if (_this.translate && _this.translateService) {
                        txt = _this.translateService.get(txt);
                    }
                    descTxt += txt;
                }
                if (index < _this.descriptionColArray.length - 1) {
                    descTxt += _this.separator;
                }
            });
        }
        return descTxt.trim();
    };
    OFormServiceComponent.prototype.sortData = function (data) {
        var _this = this;
        if (!Util.isDefined(this.sort)) {
            return data;
        }
        var sortDirection = this.sort.toLowerCase();
        if (sortDirection !== Codes.ASC_SORT && sortDirection !== Codes.DESC_SORT) {
            return data;
        }
        var sortedData = data.sort(function (a, b) { return Util.compare(_this.getOptionDescriptionValue(a), _this.getOptionDescriptionValue(b)); });
        if (sortDirection === Codes.DESC_SORT) {
            sortedData.reverse();
        }
        return sortedData;
    };
    OFormServiceComponent.prototype.refresh = function () {
        this.queryData();
    };
    OFormServiceComponent.propDecorators = {
        oContextMenuRef: [{ type: ViewChild, args: [OContextMenuComponent, { static: false },] }]
    };
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OFormServiceComponent.prototype, "queryOnInit", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OFormServiceComponent.prototype, "queryOnBind", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OFormServiceComponent.prototype, "queryWithNullParentKeys", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OFormServiceComponent.prototype, "translate", void 0);
    return OFormServiceComponent;
}(OFormDataComponent));
export { OFormServiceComponent };
//# sourceMappingURL=data:application/json;base64,