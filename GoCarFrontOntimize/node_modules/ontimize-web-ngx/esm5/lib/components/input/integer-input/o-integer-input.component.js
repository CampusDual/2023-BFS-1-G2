import * as tslib_1 from "tslib";
import { Component, ElementRef, forwardRef, Inject, Injector, Optional, ViewEncapsulation } from '@angular/core';
import { InputConverter } from '../../../decorators/input-converter';
import { OIntegerPipe } from '../../../pipes/o-integer.pipe';
import { Util } from '../../../util/util';
import { OFormValue } from '../../form/o-form-value';
import { OFormComponent } from '../../form/o-form.component';
import { DEFAULT_INPUTS_O_TEXT_INPUT, DEFAULT_OUTPUTS_O_TEXT_INPUT, OTextInputComponent } from '../text-input/o-text-input.component';
export var DEFAULT_INPUTS_O_INTEGER_INPUT = tslib_1.__spread(DEFAULT_INPUTS_O_TEXT_INPUT, [
    'min',
    'max',
    'step',
    'grouping',
    'thousandSeparator : thousand-separator',
    'olocale : locale'
]);
export var DEFAULT_OUTPUTS_O_INTEGER_INPUT = tslib_1.__spread(DEFAULT_OUTPUTS_O_TEXT_INPUT);
var OIntegerInputComponent = (function (_super) {
    tslib_1.__extends(OIntegerInputComponent, _super);
    function OIntegerInputComponent(form, elRef, injector) {
        var _this = _super.call(this, form, elRef, injector) || this;
        _this.inputType = 'number';
        _this.step = 1;
        _this.grouping = false;
        _this._defaultSQLTypeKey = 'INTEGER';
        if (navigator.userAgent.toLowerCase().indexOf('firefox') > -1) {
            _this.inputType = 'text';
        }
        _this.setComponentPipe();
        return _this;
    }
    OIntegerInputComponent.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        this.initializeStep();
    };
    OIntegerInputComponent.prototype.setComponentPipe = function () {
        this.componentPipe = new OIntegerPipe(this.injector);
    };
    OIntegerInputComponent.prototype.ngOnInit = function () {
        _super.prototype.ngOnInit.call(this);
        this.pipeArguments = {
            grouping: this.grouping,
            thousandSeparator: this.thousandSeparator,
            locale: this.olocale
        };
        if (this.step === undefined) {
            this.step = 1;
        }
    };
    OIntegerInputComponent.prototype.ngAfterViewInit = function () {
        _super.prototype.ngAfterViewInit.call(this);
    };
    OIntegerInputComponent.prototype.setData = function (value) {
        var _this = this;
        _super.prototype.setData.call(this, value);
        setTimeout(function () {
            _this.setPipeValue();
        }, 0);
    };
    OIntegerInputComponent.prototype.setValue = function (val, options) {
        _super.prototype.setValue.call(this, val, options);
        this.setPipeValue();
    };
    OIntegerInputComponent.prototype.innerOnFocus = function (event) {
        event.preventDefault();
        event.stopPropagation();
        if (this.isReadOnly) {
            return;
        }
        _super.prototype.innerOnFocus.call(this, event);
        this.setNumberDOMValue(this.getValue());
        if (this.selectAllOnClick) {
            this.selectValue();
        }
    };
    OIntegerInputComponent.prototype.innerOnBlur = function (event) {
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
        if (this.isReadOnly) {
            return;
        }
        this.setPipeValue();
        var formControl = this.getControl();
        if (formControl) {
            formControl.updateValueAndValidity({ emitEvent: false });
        }
        _super.prototype.innerOnBlur.call(this, event);
    };
    OIntegerInputComponent.prototype.setPipeValue = function () {
        if (typeof this.pipeArguments !== 'undefined' && !this.isEmpty()) {
            var parsedValue = this.componentPipe.transform(this.getValue(), this.pipeArguments);
            this.setTextDOMValue(parsedValue);
        }
    };
    OIntegerInputComponent.prototype.isEmpty = function () {
        if (this.value instanceof OFormValue) {
            if (this.value.value !== undefined) {
                return false;
            }
        }
        return true;
    };
    OIntegerInputComponent.prototype.getInputEl = function () {
        var inputElement;
        if (this.elRef.nativeElement.tagName === 'INPUT') {
            inputElement = this.elRef.nativeElement;
        }
        else {
            inputElement = this.elRef.nativeElement.getElementsByTagName('INPUT')[0];
        }
        return inputElement;
    };
    OIntegerInputComponent.prototype.setNumberDOMValue = function (val) {
        var inputElement = this.getInputEl();
        if (Util.isDefined(inputElement)) {
            if (navigator.userAgent.toLowerCase().indexOf('firefox') === -1) {
                inputElement.type = 'number';
            }
            inputElement.value = (val !== undefined) ? val : '';
        }
    };
    OIntegerInputComponent.prototype.setTextDOMValue = function (val) {
        var inputElement = this.getInputEl();
        if (Util.isDefined(inputElement)) {
            if (navigator.userAgent.toLowerCase().indexOf('firefox') === -1) {
                inputElement.type = 'text';
            }
            inputElement.value = (val !== undefined) ? val : '';
        }
    };
    OIntegerInputComponent.prototype.resolveValidators = function () {
        var validators = _super.prototype.resolveValidators.call(this);
        if (Util.isDefined(this.min)) {
            validators.push(this.minValidator.bind(this));
        }
        if (Util.isDefined(this.max)) {
            validators.push(this.maxValidator.bind(this));
        }
        return validators;
    };
    OIntegerInputComponent.prototype.minValidator = function (control) {
        if ((typeof (control.value) === 'number') && (control.value < this.min)) {
            return {
                min: {
                    requiredMin: this.min
                }
            };
        }
        return {};
    };
    OIntegerInputComponent.prototype.maxValidator = function (control) {
        if ((typeof (control.value) === 'number') && (this.max < control.value)) {
            return {
                max: {
                    requiredMax: this.max
                }
            };
        }
        return {};
    };
    OIntegerInputComponent.prototype.initializeStep = function () {
        if (this.step <= 0) {
            this.step = 1;
            console.warn('`step` attribute must be greater than zero');
        }
    };
    OIntegerInputComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-integer-input',
                    template: "<div [formGroup]=\"getFormGroup()\" [matTooltip]=\"tooltip\" [matTooltipClass]=\"tooltipClass\" [matTooltipPosition]=\"tooltipPosition\"\n  [matTooltipShowDelay]=\"tooltipShowDelay\" [matTooltipHideDelay]=\"tooltipHideDelay\">\n  <mat-form-field [appearance]=\"appearance\" [floatLabel]=\"floatLabel\"  [hideRequiredMarker]=\"hideRequiredMarker\" [class.custom-width]=\"hasCustomWidth\"\n    [class.icon-field]=\"showClearButton\" fxFlexFill>\n    <mat-label *ngIf=\"labelVisible\">{{ olabel | oTranslate }}</mat-label>\n    <input matInput [type]=\"inputType\" [id]=\"getAttribute()\" [formControlName]=\"getAttribute()\" [placeholder]=\"placeHolder\"\n      (focus)=\"innerOnFocus($event)\" (blur)=\"innerOnBlur($event)\" (change)=\"onChangeEvent($event)\" [readonly]=\"isReadOnly\"\n      [min]=\"min\" [max]=\"max\" [step]=\"step\" [required]=\"isRequired\">\n    <button type=\"button\" *ngIf=\"showClearButton\" matSuffix mat-icon-button (click)=\"onClickClearValue($event)\">\n      <mat-icon svgIcon=\"ontimize:close\"></mat-icon>\n    </button>\n    <mat-error *oMatError=\"hasError('required')\">\n      {{ 'FORM_VALIDATION.REQUIRED' | oTranslate }}\n    </mat-error>\n    <mat-error *oMatError=\"hasError('min')\">\n      {{ 'FORM_VALIDATION.MIN_VALUE' | oTranslate }}: {{ getErrorValue('min', 'requiredMin') }}\n    </mat-error>\n    <mat-error *oMatError=\"hasError('max')\">\n      {{ 'FORM_VALIDATION.MAX_VALUE' | oTranslate }}: {{ getErrorValue('max', 'requiredMax') }}\n    </mat-error>\n    <mat-error *ngFor=\"let oError of getActiveOErrors()\">\n      {{ oError.text | oTranslate }}\n    </mat-error>\n  </mat-form-field>\n</div>",
                    inputs: DEFAULT_INPUTS_O_INTEGER_INPUT,
                    outputs: DEFAULT_OUTPUTS_O_INTEGER_INPUT,
                    encapsulation: ViewEncapsulation.None,
                    styles: [""]
                }] }
    ];
    OIntegerInputComponent.ctorParameters = function () { return [
        { type: OFormComponent, decorators: [{ type: Optional }, { type: Inject, args: [forwardRef(function () { return OFormComponent; }),] }] },
        { type: ElementRef },
        { type: Injector }
    ]; };
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Number)
    ], OIntegerInputComponent.prototype, "min", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Number)
    ], OIntegerInputComponent.prototype, "max", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Number)
    ], OIntegerInputComponent.prototype, "step", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OIntegerInputComponent.prototype, "grouping", void 0);
    return OIntegerInputComponent;
}(OTextInputComponent));
export { OIntegerInputComponent };
//# sourceMappingURL=data:application/json;base64,