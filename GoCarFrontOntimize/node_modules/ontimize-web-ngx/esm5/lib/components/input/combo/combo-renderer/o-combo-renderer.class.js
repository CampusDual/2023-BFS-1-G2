import { Util } from '../../../../util';
import { OComboComponent } from '../o-combo.component';
export var DEFAULT_INPUTS_O_COMBO_RENDERER = [];
var OComboCustomRenderer = (function () {
    function OComboCustomRenderer(injector) {
        this.injector = injector;
        this.comboComponent = this.injector.get(OComboComponent);
    }
    OComboCustomRenderer.prototype.ngOnInit = function () {
        this.initialize();
    };
    OComboCustomRenderer.prototype.initialize = function () {
    };
    OComboCustomRenderer.prototype.ngAfterContentInit = function () {
        this.registerRenderer();
    };
    OComboCustomRenderer.prototype.registerRenderer = function () {
        this.comboComponent.registerRenderer(this);
    };
    OComboCustomRenderer.prototype.getComboData = function (record) {
        var _this = this;
        var descTxt = '';
        if (!Util.isDefined(record)) {
            return descTxt;
        }
        this.comboComponent.descriptionColArray.forEach(function (col, index) {
            if (Util.isDefined(record[col])) {
                var value = record[col];
                if (_this.componentPipe && _this.pipeArguments != null) {
                    value = _this.componentPipe.transform(value, _this.pipeArguments);
                }
                if (Util.isDefined(value)) {
                    descTxt += value;
                    if (index < _this.comboComponent.descriptionColArray.length - 1) {
                        descTxt += _this.comboComponent.separator;
                    }
                }
            }
        });
        return descTxt;
    };
    return OComboCustomRenderer;
}());
export { OComboCustomRenderer };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1jb21iby1yZW5kZXJlci5jbGFzcy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL29udGltaXplLXdlYi1uZ3gvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9pbnB1dC9jb21iby9jb21iby1yZW5kZXJlci9vLWNvbWJvLXJlbmRlcmVyLmNsYXNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUN4QyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFdkQsTUFBTSxDQUFDLElBQU0sK0JBQStCLEdBQUcsRUFBRSxDQUFDO0FBQ2xEO0lBUUUsOEJBQXNCLFFBQWtCO1FBQWxCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDdEMsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUMzRCxDQUFDO0lBRU0sdUNBQVEsR0FBZjtRQUNFLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBRU0seUNBQVUsR0FBakI7SUFDQSxDQUFDO0lBRU0saURBQWtCLEdBQXpCO1FBQ0UsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUVNLCtDQUFnQixHQUF2QjtRQUNFLElBQUksQ0FBQyxjQUFjLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQU9NLDJDQUFZLEdBQW5CLFVBQW9CLE1BQVc7UUFBL0IsaUJBcUJDO1FBcEJDLElBQUksT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNqQixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUMzQixPQUFPLE9BQU8sQ0FBQztTQUNoQjtRQUNELElBQUksQ0FBQyxjQUFjLENBQUMsbUJBQW1CLENBQUMsT0FBTyxDQUFDLFVBQUMsR0FBRyxFQUFFLEtBQUs7WUFDekQsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFO2dCQUMvQixJQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ3hCLElBQUksS0FBSSxDQUFDLGFBQWEsSUFBSSxLQUFJLENBQUMsYUFBYSxJQUFJLElBQUksRUFBRTtvQkFDcEQsS0FBSyxHQUFHLEtBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxLQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7aUJBQ2pFO2dCQUNELElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRTtvQkFDekIsT0FBTyxJQUFJLEtBQUssQ0FBQztvQkFFakIsSUFBSSxLQUFLLEdBQUcsS0FBSSxDQUFDLGNBQWMsQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO3dCQUM5RCxPQUFPLElBQUksS0FBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUM7cUJBQzFDO2lCQUNGO2FBQ0Y7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7SUFDSCwyQkFBQztBQUFELENBQUMsQUF0REQsSUFzREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RvciwgT25Jbml0LCBQaXBlVHJhbnNmb3JtLCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBVdGlsIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbCc7XG5pbXBvcnQgeyBPQ29tYm9Db21wb25lbnQgfSBmcm9tICcuLi9vLWNvbWJvLmNvbXBvbmVudCc7XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX0lOUFVUU19PX0NPTUJPX1JFTkRFUkVSID0gW107XG5leHBvcnQgY2xhc3MgT0NvbWJvQ3VzdG9tUmVuZGVyZXIgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIHB1YmxpYyB0ZW1wbGF0ZXJlZjogVGVtcGxhdGVSZWY8YW55PjtcbiAgcHVibGljIGNvbWJvQ29tcG9uZW50OiBPQ29tYm9Db21wb25lbnQ7XG5cbiAgcHJvdGVjdGVkIHBpcGVBcmd1bWVudHM6IGFueTtcbiAgcHJvdGVjdGVkIGNvbXBvbmVudFBpcGU6IFBpcGVUcmFuc2Zvcm07XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGluamVjdG9yOiBJbmplY3Rvcikge1xuICAgIHRoaXMuY29tYm9Db21wb25lbnQgPSB0aGlzLmluamVjdG9yLmdldChPQ29tYm9Db21wb25lbnQpO1xuICB9XG5cbiAgcHVibGljIG5nT25Jbml0KCkge1xuICAgIHRoaXMuaW5pdGlhbGl6ZSgpO1xuICB9XG5cbiAgcHVibGljIGluaXRpYWxpemUoKTogdm9pZCB7XG4gIH1cblxuICBwdWJsaWMgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQge1xuICAgIHRoaXMucmVnaXN0ZXJSZW5kZXJlcigpO1xuICB9XG5cbiAgcHVibGljIHJlZ2lzdGVyUmVuZGVyZXIoKTogdm9pZCB7XG4gICAgdGhpcy5jb21ib0NvbXBvbmVudC5yZWdpc3RlclJlbmRlcmVyKHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGRpc3BsYXllZCBjb21ibyBkYXRhXG4gICAqIEBwYXJhbSB2YWx1ZSBJbnRlcm5hbCBjb21ibyBkYXRhXG4gICovXG5cbiAgcHVibGljIGdldENvbWJvRGF0YShyZWNvcmQ6IGFueSk6IHN0cmluZyB7XG4gICAgbGV0IGRlc2NUeHQgPSAnJztcbiAgICBpZiAoIVV0aWwuaXNEZWZpbmVkKHJlY29yZCkpIHtcbiAgICAgIHJldHVybiBkZXNjVHh0O1xuICAgIH1cbiAgICB0aGlzLmNvbWJvQ29tcG9uZW50LmRlc2NyaXB0aW9uQ29sQXJyYXkuZm9yRWFjaCgoY29sLCBpbmRleCkgPT4ge1xuICAgICAgaWYgKFV0aWwuaXNEZWZpbmVkKHJlY29yZFtjb2xdKSkge1xuICAgICAgICBsZXQgdmFsdWUgPSByZWNvcmRbY29sXTtcbiAgICAgICAgaWYgKHRoaXMuY29tcG9uZW50UGlwZSAmJiB0aGlzLnBpcGVBcmd1bWVudHMgIT0gbnVsbCkge1xuICAgICAgICAgIHZhbHVlID0gdGhpcy5jb21wb25lbnRQaXBlLnRyYW5zZm9ybSh2YWx1ZSwgdGhpcy5waXBlQXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoVXRpbC5pc0RlZmluZWQodmFsdWUpKSB7XG4gICAgICAgICAgZGVzY1R4dCArPSB2YWx1ZTtcblxuICAgICAgICAgIGlmIChpbmRleCA8IHRoaXMuY29tYm9Db21wb25lbnQuZGVzY3JpcHRpb25Db2xBcnJheS5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICBkZXNjVHh0ICs9IHRoaXMuY29tYm9Db21wb25lbnQuc2VwYXJhdG9yO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBkZXNjVHh0O1xuICB9XG59Il19