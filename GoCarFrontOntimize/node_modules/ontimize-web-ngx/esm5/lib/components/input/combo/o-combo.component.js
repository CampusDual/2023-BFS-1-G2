import * as tslib_1 from "tslib";
import { Component, ElementRef, forwardRef, Inject, Injector, Optional, ViewChild, ViewEncapsulation } from '@angular/core';
import { FormControl } from '@angular/forms';
import { MatSelect } from '@angular/material';
import { Subscription } from 'rxjs';
import { InputConverter } from '../../../decorators/input-converter';
import { OntimizeServiceProvider } from '../../../services/factories';
import { Codes } from '../../../util/codes';
import { Util } from '../../../util/util';
import { OFormValue } from '../../form/o-form-value';
import { OFormComponent } from '../../form/o-form.component';
import { OValueChangeEvent } from '../../o-value-change-event.class';
import { DEFAULT_INPUTS_O_FORM_SERVICE_COMPONENT, DEFAULT_OUTPUTS_O_FORM_SERVICE_COMPONENT, OFormServiceComponent } from '../o-form-service-component.class';
export var DEFAULT_INPUTS_O_COMBO = tslib_1.__spread(DEFAULT_INPUTS_O_FORM_SERVICE_COMPONENT, [
    'multiple',
    'nullSelection: null-selection',
    'multipleTriggerLabel: multiple-trigger-label',
    'searchable',
    'nullSelectionLabel: null-selection-label'
]);
export var DEFAULT_OUTPUTS_O_COMBO = tslib_1.__spread(DEFAULT_OUTPUTS_O_FORM_SERVICE_COMPONENT);
var OComboComponent = (function (_super) {
    tslib_1.__extends(OComboComponent, _super);
    function OComboComponent(form, elRef, injector) {
        var _this = _super.call(this, form, elRef, injector) || this;
        _this.searchControl = new FormControl();
        _this.multipleTriggerLabel = false;
        _this.searchable = false;
        _this.nullSelection = true;
        _this._filteredDataArray = [];
        _this.subscription = new Subscription();
        _this.defaultValue = '';
        return _this;
    }
    Object.defineProperty(OComboComponent.prototype, "filteredDataArray", {
        get: function () {
            return this._filteredDataArray;
        },
        set: function (data) {
            if (Util.isArray(data)) {
                this._filteredDataArray = data;
            }
            else if (Util.isObject(data) && Object.keys(data).length > 0) {
                this._filteredDataArray = [data];
            }
            else {
                console.warn('Component has received not supported service data. Supported data are Array or not empty Object');
                this._filteredDataArray = [];
            }
        },
        enumerable: true,
        configurable: true
    });
    OComboComponent.prototype.ngOnInit = function () {
        var _this = this;
        _super.prototype.ngOnInit.call(this);
        this.subscription.add(this.searchControl.valueChanges.subscribe(function () { return _this.searchFilter(); }));
    };
    OComboComponent.prototype.ngAfterViewInit = function () {
        _super.prototype.ngAfterViewInit.call(this);
        if (this.queryOnInit) {
            this.queryData();
        }
        else if (this.queryOnBind) {
            this.syncDataIndex();
        }
    };
    OComboComponent.prototype.ngOnDestroy = function () {
        this.subscription.unsubscribe();
        this.destroy();
    };
    OComboComponent.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        if (this.multiple) {
            this.nullSelection = false;
            this.defaultValue = [];
        }
    };
    OComboComponent.prototype.ensureOFormValue = function (value) {
        if (value instanceof OFormValue) {
            this.value = new OFormValue(value.value);
        }
        else if (Util.isDefined(value) && !(value instanceof OFormValue)) {
            this.value = new OFormValue(value);
        }
        else if (!Util.isDefined(value) && this.nullSelection) {
            this.value = new OFormValue(undefined);
        }
        else {
            this.value = new OFormValue(this.defaultValue);
        }
    };
    OComboComponent.prototype.setDataArray = function (data) {
        _super.prototype.setDataArray.call(this, data);
        this.filteredDataArray = data;
    };
    OComboComponent.prototype.getDataArray = function () {
        return this.dataArray;
    };
    OComboComponent.prototype.getFilteredDataArray = function () {
        return this._filteredDataArray;
    };
    OComboComponent.prototype.hasNullSelection = function () {
        return this.nullSelection;
    };
    OComboComponent.prototype.syncDataIndex = function (queryIfNotFound) {
        if (queryIfNotFound === void 0) { queryIfNotFound = true; }
        _super.prototype.syncDataIndex.call(this, queryIfNotFound);
        if (this._currentIndex !== undefined && this.nullSelection) {
            this._currentIndex += 1;
        }
    };
    OComboComponent.prototype.getValue = function () {
        if (this.value instanceof OFormValue) {
            if (this.value.value !== undefined) {
                return this.value.value;
            }
            else if (this.value.value === undefined) {
                return this.getEmptyValue();
            }
        }
        return '';
    };
    OComboComponent.prototype.getEmptyValue = function () {
        if (this.multiple) {
            return [];
        }
        else {
            if (this.nullSelection) {
                return undefined;
            }
            else {
                return '';
            }
        }
    };
    OComboComponent.prototype.isEmpty = function () {
        if (!(this.value instanceof OFormValue)) {
            return true;
        }
        return this.value.value === undefined || (this.multiple && this.value.value.length === 0);
    };
    OComboComponent.prototype.clearValue = function (options, setDirty) {
        if (setDirty === void 0) { setDirty = false; }
        if (this.multiple) {
            this.setValue(this.defaultValue, options, setDirty);
            this.value.value = [];
        }
        else {
            _super.prototype.clearValue.call(this, options, setDirty);
        }
    };
    Object.defineProperty(OComboComponent.prototype, "showClearButton", {
        get: function () {
            return this.clearButton && !this.isReadOnly && this.enabled && !this.isEmpty();
        },
        enumerable: true,
        configurable: true
    });
    OComboComponent.prototype.getMultiple = function () {
        return this.multiple;
    };
    OComboComponent.prototype.onSelectionChange = function (event) {
        if (!this.selectModel.panelOpen) {
            return;
        }
        var newValue = event.value;
        this.setValue(newValue, {
            changeType: OValueChangeEvent.USER_CHANGE,
            emitEvent: false,
            emitModelToViewChange: false
        });
    };
    OComboComponent.prototype.getValueColumn = function (item) {
        if (item && item.hasOwnProperty(this.valueColumn)) {
            var option = item[this.valueColumn];
            if (option === 'undefined') {
                option = null;
            }
            return option;
        }
        return '';
    };
    OComboComponent.prototype.isSelected = function (item, rowIndex) {
        var selected = false;
        if (item && item.hasOwnProperty(this.valueColumn) && this.value) {
            var val = item[this.valueColumn];
            if (val === this.value.value) {
                selected = true;
                this._currentIndex = rowIndex;
            }
        }
        return selected;
    };
    OComboComponent.prototype.setValue = function (val, options, setDirty) {
        if (setDirty === void 0) { setDirty = false; }
        if (!this.dataArray) {
            return;
        }
        var isDefinedVal = Util.isDefined(val);
        if (this.multiple && !isDefinedVal) {
            return;
        }
        if (!isDefinedVal && !this.nullSelection) {
            console.warn('`o-combo` with attr ' + this.oattr + ' cannot be set. `null-selection` attribute is false.');
            return;
        }
        _super.prototype.setValue.call(this, val, options);
    };
    OComboComponent.prototype.getSelectedItems = function () {
        return this.getValue();
    };
    OComboComponent.prototype.setSelectedItems = function (values) {
        this.setValue(values);
    };
    OComboComponent.prototype.getFirstSelectedValue = function () {
        return this.selectModel.selected[0].viewValue;
    };
    OComboComponent.prototype.setIsReadOnly = function (value) {
        _super.prototype.setIsReadOnly.call(this, value);
        var readOnly = Util.isDefined(this.readOnly) ? this.readOnly : value;
        if (this.enabled) {
            if (this._fControl && readOnly) {
                this._fControl.disable({ emitEvent: false });
            }
            else if (this._fControl) {
                this._fControl.enable({ emitEvent: false });
            }
        }
    };
    OComboComponent.prototype.parseByValueColumnType = function (val) {
        if (!Util.isDefined(this.multiple)) {
            return val;
        }
        var valueArr = this.multiple ? val : [val];
        if (this.valueColumnType === Codes.TYPE_INT) {
            valueArr.forEach(function (item, index) {
                var parsed = parseInt(item, 10);
                if (!isNaN(parsed)) {
                    valueArr[index] = parsed;
                }
            });
        }
        return this.multiple ? valueArr : valueArr[0];
    };
    OComboComponent.prototype.searchFilter = function () {
        var _this = this;
        if (this.dataArray || this.dataArray.length) {
            var search_1 = this.searchControl.value;
            if (!search_1) {
                this.filteredDataArray = this.dataArray.slice();
                return;
            }
            else {
                search_1 = search_1.toLowerCase();
            }
            if (this.renderer) {
                this.filteredDataArray = this.dataArray.filter(function (item) { return _this.renderer.getComboData(item).toLowerCase().indexOf(search_1) > -1; });
            }
            else {
                this.filteredDataArray = this.dataArray.filter(function (item) { return _this.getOptionDescriptionValue(item).toLowerCase().indexOf(search_1) > -1; });
            }
        }
    };
    OComboComponent.prototype.registerRenderer = function (renderer) {
        this.renderer = renderer;
        this.renderer.initialize();
    };
    OComboComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-combo',
                    providers: [
                        OntimizeServiceProvider,
                        { provide: OFormServiceComponent, useExisting: forwardRef(function () { return OComboComponent; }) }
                    ],
                    inputs: DEFAULT_INPUTS_O_COMBO,
                    outputs: DEFAULT_OUTPUTS_O_COMBO,
                    template: "<div [formGroup]=\"getFormGroup()\" [matTooltip]=\"tooltip\" [matTooltipClass]=\"tooltipClass\" [matTooltipPosition]=\"tooltipPosition\"\n  [matTooltipShowDelay]=\"tooltipShowDelay\" [matTooltipHideDelay]=\"tooltipHideDelay\" [oContextMenu]=\"oContextMenu\">\n  <mat-form-field [appearance]=\"appearance\" [floatLabel]=\"floatLabel\" [class.read-only]=\"isReadOnly\" [class.custom-width]=\"hasCustomWidth\"\n    [hideRequiredMarker]=\"hideRequiredMarker\" fxFill>\n    <mat-label *ngIf=\"labelVisible\">{{ olabel | oTranslate }}</mat-label>\n    <mat-select [value]=\"getValue()\" #selectModel [id]=\"getAttribute()\" fxFill [formControlName]=\"getAttribute()\" [placeholder]=\"placeHolder\"\n      [multiple]=\"getMultiple()\" [required]=\"isRequired\" [panelClass]=\"{ 'o-combo-panel': true, 'o-combo-panel-search': searchable }\"\n      (selectionChange)=\"onSelectionChange($event)\" (closed)=\"innerOnBlur($event)\">\n      <o-combo-search *ngIf=\"searchable\" [formControl]=\"searchControl\"></o-combo-search>\n\n      <mat-select-trigger *ngIf=\"multiple && multipleTriggerLabel\">\n        {{ selectModel.selected[0] ? getFirstSelectedValue(): '' }}\n        <span *ngIf=\"!isEmpty()\">\n          {{ 'INPUT.COMBO.MESSAGE_TRIGGER' | oTranslate: { values: [getFormControl().value.length -1] } }}\n        </span>\n      </mat-select-trigger>\n\n      <mat-select-trigger *ngIf=\"!multiple && !multipleTriggerLabel\">\n        <ng-container *ngFor=\"let item of filteredDataArray\">\n          <ng-container *ngIf=\"renderer && item[valueColumn] == getValue()\">\n            <ng-template *ngTemplateOutlet=\"renderer?.templateref; context:{ value: item }\">\n            </ng-template>\n          </ng-container>\n          <ng-container *ngIf=\"!renderer && item[valueColumn] == getValue()\">\n            {{ getOptionDescriptionValue(item) }}\n          </ng-container>\n        </ng-container>\n      </mat-select-trigger>\n\n      <div class=\"o-combo-options-container\">\n        <mat-option *ngIf=\"hasNullSelection()\" [value]=\"null\">{{translate ?\n          (nullSelectionLabel|oTranslate): nullSelectionLabel}}\n        </mat-option>\n        <mat-option *ngFor=\"let item of filteredDataArray\" [value]=\"getValueColumn(item)\">\n          <ng-container *ngIf=\"renderer\">\n            <ng-template *ngTemplateOutlet=\"renderer?.templateref; context:{ value: item }\">\n            </ng-template>\n          </ng-container>\n          <ng-container *ngIf=\"!renderer\">\n            {{ getOptionDescriptionValue(item) }}\n          </ng-container>\n        </mat-option>\n      </div>\n    </mat-select>\n\n    <button type=\"button\" *ngIf=\"showClearButton\" matSuffix mat-icon-button (click)=\"onClickClearValue($event)\">\n      <mat-icon svgIcon=\"ontimize:close\"></mat-icon>\n    </button>\n\n    <mat-error *oMatError=\"hasError('required')\">\n      {{ 'FORM_VALIDATION.REQUIRED' | oTranslate }}\n    </mat-error>\n    <mat-error *ngFor=\"let oError of getActiveOErrors()\">\n      {{ oError.text | oTranslate }}\n    </mat-error>\n  </mat-form-field>\n\n  <o-context-menu *ngIf=\"!this.isReadOnly && this.enabled\">\n    <o-context-menu-item attr=\"refresh\" label=\"FORM_SERVICE_COMPONENT.REFRESH\" svg-icon=\"ontimize:autorenew\" (execute)=\"refresh()\">\n    </o-context-menu-item>\n  </o-context-menu>\n</div>\n",
                    encapsulation: ViewEncapsulation.None,
                    host: {
                        '[class.o-combo]': 'true'
                    },
                    styles: [".o-combo .read-only .mat-select-arrow-wrapper{visibility:hidden}.o-combo .read-only .mat-form-field-underline{background-image:none}.o-combo-panel.o-combo-panel-search{height:100%}.o-combo-panel.o-combo-panel-search .o-combo-options-container{height:calc(100% - 3em);overflow:auto}"]
                }] }
    ];
    OComboComponent.ctorParameters = function () { return [
        { type: OFormComponent, decorators: [{ type: Optional }, { type: Inject, args: [forwardRef(function () { return OFormComponent; }),] }] },
        { type: ElementRef },
        { type: Injector }
    ]; };
    OComboComponent.propDecorators = {
        inputModel: [{ type: ViewChild, args: ['inputModel', { static: false },] }],
        selectModel: [{ type: ViewChild, args: ['selectModel', { static: false },] }]
    };
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OComboComponent.prototype, "multiple", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OComboComponent.prototype, "multipleTriggerLabel", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OComboComponent.prototype, "searchable", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OComboComponent.prototype, "nullSelection", void 0);
    return OComboComponent;
}(OFormServiceComponent));
export { OComboComponent };
//# sourceMappingURL=data:application/json;base64,