import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, Injector, TemplateRef, ViewChild } from '@angular/core';
import { InputConverter } from '../../../../../decorators/input-converter';
import { OIntegerPipe } from '../../../../../pipes/o-integer.pipe';
import { DEFAULT_INPUTS_O_COMBO_RENDERER, OComboCustomRenderer } from '../o-combo-renderer.class';
export var DEFAULT_INPUTS_O_COMBO_RENDERER_INTEGER = tslib_1.__spread(DEFAULT_INPUTS_O_COMBO_RENDERER, [
    'grouping',
    'thousandSeparator: thousand-separator'
]);
var OComboRendererIntegerComponent = (function (_super) {
    tslib_1.__extends(OComboRendererIntegerComponent, _super);
    function OComboRendererIntegerComponent(injector) {
        var _this = _super.call(this, injector) || this;
        _this.injector = injector;
        _this.grouping = true;
        _this.thousandSeparator = ',';
        _this.setComponentPipe();
        return _this;
    }
    OComboRendererIntegerComponent.prototype.setComponentPipe = function () {
        this.componentPipe = new OIntegerPipe(this.injector);
    };
    OComboRendererIntegerComponent.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        this.pipeArguments = {
            grouping: this.grouping,
            thousandSeparator: this.thousandSeparator
        };
    };
    OComboRendererIntegerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-combo-renderer-integer',
                    template: "<ng-template #templateref let-value=\"value\">\n  {{getComboData(value)}}\n</ng-template>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    inputs: DEFAULT_INPUTS_O_COMBO_RENDERER_INTEGER
                }] }
    ];
    OComboRendererIntegerComponent.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    OComboRendererIntegerComponent.propDecorators = {
        templateref: [{ type: ViewChild, args: ['templateref', { read: TemplateRef, static: true },] }]
    };
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OComboRendererIntegerComponent.prototype, "grouping", void 0);
    return OComboRendererIntegerComponent;
}(OComboCustomRenderer));
export { OComboRendererIntegerComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1jb21iby1yZW5kZXJlci1pbnRlZ2VyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL29udGltaXplLXdlYi1uZ3gvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9pbnB1dC9jb21iby9jb21iby1yZW5kZXJlci9pbnRlZ2VyL28tY29tYm8tcmVuZGVyZXItaW50ZWdlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFFTCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULFFBQVEsRUFFUixXQUFXLEVBQ1gsU0FBUyxFQUNWLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQztBQUMzRSxPQUFPLEVBQXdCLFlBQVksRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQ3pGLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRWxHLE1BQU0sQ0FBQyxJQUFNLHVDQUF1QyxvQkFDL0MsK0JBQStCO0lBRWxDLFVBQVU7SUFFVix1Q0FBdUM7RUFDeEMsQ0FBQztBQUVGO0lBTW9ELDBEQUFvQjtJQVV0RSx3Q0FBc0IsUUFBa0I7UUFBeEMsWUFDRSxrQkFBTSxRQUFRLENBQUMsU0FFaEI7UUFIcUIsY0FBUSxHQUFSLFFBQVEsQ0FBVTtRQVA5QixjQUFRLEdBQVksSUFBSSxDQUFDO1FBQ3pCLHVCQUFpQixHQUFXLEdBQUcsQ0FBQztRQVF4QyxLQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQzs7SUFDMUIsQ0FBQztJQUVELHlEQUFnQixHQUFoQjtRQUNFLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxZQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFRCxtREFBVSxHQUFWO1FBQ0UsaUJBQU0sVUFBVSxXQUFFLENBQUM7UUFDbkIsSUFBSSxDQUFDLGFBQWEsR0FBRztZQUNuQixRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7WUFDdkIsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLGlCQUFpQjtTQUMxQyxDQUFDO0lBQ0osQ0FBQzs7Z0JBL0JGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsMEJBQTBCO29CQUNwQyx1R0FBd0Q7b0JBQ3hELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxNQUFNLEVBQUUsdUNBQXVDO2lCQUNoRDs7O2dCQXZCQyxRQUFROzs7OEJBZ0NQLFNBQVMsU0FBQyxhQUFhLEVBQUUsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7O0lBTDdEO1FBREMsY0FBYyxFQUFFOztvRUFDa0I7SUF3QnJDLHFDQUFDO0NBQUEsQUFqQ0QsQ0FNb0Qsb0JBQW9CLEdBMkJ2RTtTQTNCWSw4QkFBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBZnRlckNvbnRlbnRJbml0LFxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ29tcG9uZW50LFxuICBJbmplY3RvcixcbiAgT25Jbml0LFxuICBUZW1wbGF0ZVJlZixcbiAgVmlld0NoaWxkXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBJbnB1dENvbnZlcnRlciB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2RlY29yYXRvcnMvaW5wdXQtY29udmVydGVyJztcbmltcG9ydCB7IElJbnRlZ2VyUGlwZUFyZ3VtZW50LCBPSW50ZWdlclBpcGUgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9waXBlcy9vLWludGVnZXIucGlwZSc7XG5pbXBvcnQgeyBERUZBVUxUX0lOUFVUU19PX0NPTUJPX1JFTkRFUkVSLCBPQ29tYm9DdXN0b21SZW5kZXJlciB9IGZyb20gJy4uL28tY29tYm8tcmVuZGVyZXIuY2xhc3MnO1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9JTlBVVFNfT19DT01CT19SRU5ERVJFUl9JTlRFR0VSID0gW1xuICAuLi5ERUZBVUxUX0lOUFVUU19PX0NPTUJPX1JFTkRFUkVSLFxuICAvLyBncm91cGluZyBbbm98eWVzXTogZ3JvdXBpbmcgdGhvdXNhbmRzLiBEZWZhdWx0OiB5ZXMuXG4gICdncm91cGluZycsXG4gIC8vIHRob3VzYW5kLXNlcGFyYXRvciBbc3RyaW5nXTogdGhvdXNhbmRzIHNlcGFyYXRvciB3aGVuIGdyb3VwaW5nLiBEZWZhdWx0OiBjb21tYSAoLCkuXG4gICd0aG91c2FuZFNlcGFyYXRvcjogdGhvdXNhbmQtc2VwYXJhdG9yJ1xuXTtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnby1jb21iby1yZW5kZXJlci1pbnRlZ2VyJyxcbiAgdGVtcGxhdGVVcmw6ICcuL28tY29tYm8tcmVuZGVyZXItaW50ZWdlci5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBpbnB1dHM6IERFRkFVTFRfSU5QVVRTX09fQ09NQk9fUkVOREVSRVJfSU5URUdFUlxufSlcbmV4cG9ydCBjbGFzcyBPQ29tYm9SZW5kZXJlckludGVnZXJDb21wb25lbnQgZXh0ZW5kcyBPQ29tYm9DdXN0b21SZW5kZXJlciBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQsIE9uSW5pdCB7XG5cbiAgQElucHV0Q29udmVydGVyKClcbiAgcHJvdGVjdGVkIGdyb3VwaW5nOiBib29sZWFuID0gdHJ1ZTtcbiAgcHJvdGVjdGVkIHRob3VzYW5kU2VwYXJhdG9yOiBzdHJpbmcgPSAnLCc7XG4gIHByb3RlY3RlZCBjb21wb25lbnRQaXBlOiBPSW50ZWdlclBpcGU7XG4gIHByb3RlY3RlZCBwaXBlQXJndW1lbnRzOiBJSW50ZWdlclBpcGVBcmd1bWVudDtcblxuICBAVmlld0NoaWxkKCd0ZW1wbGF0ZXJlZicsIHsgcmVhZDogVGVtcGxhdGVSZWYsIHN0YXRpYzogdHJ1ZSB9KSBwdWJsaWMgdGVtcGxhdGVyZWY6IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGluamVjdG9yOiBJbmplY3Rvcikge1xuICAgIHN1cGVyKGluamVjdG9yKTtcbiAgICB0aGlzLnNldENvbXBvbmVudFBpcGUoKTtcbiAgfVxuXG4gIHNldENvbXBvbmVudFBpcGUoKSB7XG4gICAgdGhpcy5jb21wb25lbnRQaXBlID0gbmV3IE9JbnRlZ2VyUGlwZSh0aGlzLmluamVjdG9yKTtcbiAgfVxuXG4gIGluaXRpYWxpemUoKSB7XG4gICAgc3VwZXIuaW5pdGlhbGl6ZSgpO1xuICAgIHRoaXMucGlwZUFyZ3VtZW50cyA9IHtcbiAgICAgIGdyb3VwaW5nOiB0aGlzLmdyb3VwaW5nLFxuICAgICAgdGhvdXNhbmRTZXBhcmF0b3I6IHRoaXMudGhvdXNhbmRTZXBhcmF0b3JcbiAgICB9O1xuICB9XG5cbn1cbiJdfQ==