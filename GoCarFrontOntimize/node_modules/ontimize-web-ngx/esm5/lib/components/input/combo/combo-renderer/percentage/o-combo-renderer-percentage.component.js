import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, Injector, TemplateRef, ViewChild } from '@angular/core';
import { OPercentPipe } from '../../../../../pipes/o-percentage.pipe';
import { NumberService } from '../../../../../services/number.service';
import { DEFAULT_INPUTS_O_COMBO_RENDERER_REAL, OComboRendererRealComponent } from '../real/o-combo-renderer-real.component';
export var DEFAULT_INPUTS_O_COMBO_RENDERER_PERCENTAGE = tslib_1.__spread(DEFAULT_INPUTS_O_COMBO_RENDERER_REAL, [
    'valueBase: value-base'
]);
var OComboRendererPercentageComponent = (function (_super) {
    tslib_1.__extends(OComboRendererPercentageComponent, _super);
    function OComboRendererPercentageComponent(injector) {
        var _this = _super.call(this, injector) || this;
        _this.injector = injector;
        _this.decimalSeparator = '.';
        _this.minDecimalDigits = 0;
        _this.maxDecimalDigits = 0;
        _this.valueBase = 1;
        _this.numberService = _this.injector.get(NumberService);
        _this.setComponentPipe();
        return _this;
    }
    OComboRendererPercentageComponent.prototype.setComponentPipe = function () {
        this.componentPipe = new OPercentPipe(this.injector);
    };
    OComboRendererPercentageComponent.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        this.pipeArguments = {
            minDecimalDigits: this.minDecimalDigits,
            maxDecimalDigits: this.maxDecimalDigits,
            decimalSeparator: this.decimalSeparator,
            grouping: this.grouping,
            thousandSeparator: this.thousandSeparator,
            valueBase: this.valueBase
        };
    };
    OComboRendererPercentageComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-combo-renderer-percentage',
                    template: "<ng-template #templateref let-value=\"value\">\n  {{getComboData(value)}}\n</ng-template>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    inputs: DEFAULT_INPUTS_O_COMBO_RENDERER_PERCENTAGE
                }] }
    ];
    OComboRendererPercentageComponent.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    OComboRendererPercentageComponent.propDecorators = {
        templateref: [{ type: ViewChild, args: ['templateref', { read: TemplateRef, static: true },] }]
    };
    return OComboRendererPercentageComponent;
}(OComboRendererRealComponent));
export { OComboRendererPercentageComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1jb21iby1yZW5kZXJlci1wZXJjZW50YWdlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL29udGltaXplLXdlYi1uZ3gvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9pbnB1dC9jb21iby9jb21iby1yZW5kZXJlci9wZXJjZW50YWdlL28tY29tYm8tcmVuZGVyZXItcGVyY2VudGFnZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFVLFdBQVcsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFN0csT0FBTyxFQUFrRCxZQUFZLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUN0SCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDdkUsT0FBTyxFQUFFLG9DQUFvQyxFQUFFLDJCQUEyQixFQUFFLE1BQU0seUNBQXlDLENBQUM7QUFFNUgsTUFBTSxDQUFDLElBQU0sMENBQTBDLG9CQUNsRCxvQ0FBb0M7SUFDdkMsdUJBQXVCO0VBQ3hCLENBQUM7QUFFRjtJQU11RCw2REFBMkI7SUFjaEYsMkNBQXNCLFFBQWtCO1FBQXhDLFlBQ0Usa0JBQU0sUUFBUSxDQUFDLFNBSWhCO1FBTHFCLGNBQVEsR0FBUixRQUFRLENBQVU7UUFaeEMsc0JBQWdCLEdBQVcsR0FBRyxDQUFDO1FBQy9CLHNCQUFnQixHQUFHLENBQUMsQ0FBQztRQUNyQixzQkFBZ0IsR0FBRyxDQUFDLENBQUM7UUFDckIsZUFBUyxHQUE2QixDQUFDLENBQUM7UUFXdEMsS0FBSSxDQUFDLGFBQWEsR0FBRyxLQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUV0RCxLQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQzs7SUFDMUIsQ0FBQztJQUVELDREQUFnQixHQUFoQjtRQUNFLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxZQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFRCxzREFBVSxHQUFWO1FBQ0UsaUJBQU0sVUFBVSxXQUFFLENBQUM7UUFDbkIsSUFBSSxDQUFDLGFBQWEsR0FBRztZQUNuQixnQkFBZ0IsRUFBRSxJQUFJLENBQUMsZ0JBQWdCO1lBQ3ZDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxnQkFBZ0I7WUFDdkMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLGdCQUFnQjtZQUN2QyxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7WUFDdkIsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLGlCQUFpQjtZQUN6QyxTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVM7U0FDMUIsQ0FBQztJQUNKLENBQUM7O2dCQXpDRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLDZCQUE2QjtvQkFDdkMsdUdBQTJEO29CQUMzRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsTUFBTSxFQUFFLDBDQUEwQztpQkFDbkQ7OztnQkFoQjRDLFFBQVE7Ozs4QkE2QmxELFNBQVMsU0FBQyxhQUFhLEVBQUUsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7O0lBeUIvRCx3Q0FBQztDQUFBLEFBM0NELENBTXVELDJCQUEyQixHQXFDakY7U0FyQ1ksaUNBQWlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgSW5qZWN0b3IsIE9uSW5pdCwgVGVtcGxhdGVSZWYsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBJUGVyY2VudFBpcGVBcmd1bWVudCwgT1BlcmNlbnRhZ2VWYWx1ZUJhc2VUeXBlLCBPUGVyY2VudFBpcGUgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9waXBlcy9vLXBlcmNlbnRhZ2UucGlwZSc7XG5pbXBvcnQgeyBOdW1iZXJTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc2VydmljZXMvbnVtYmVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgREVGQVVMVF9JTlBVVFNfT19DT01CT19SRU5ERVJFUl9SRUFMLCBPQ29tYm9SZW5kZXJlclJlYWxDb21wb25lbnQgfSBmcm9tICcuLi9yZWFsL28tY29tYm8tcmVuZGVyZXItcmVhbC5jb21wb25lbnQnO1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9JTlBVVFNfT19DT01CT19SRU5ERVJFUl9QRVJDRU5UQUdFID0gW1xuICAuLi5ERUZBVUxUX0lOUFVUU19PX0NPTUJPX1JFTkRFUkVSX1JFQUwsXG4gICd2YWx1ZUJhc2U6IHZhbHVlLWJhc2UnXG5dO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdvLWNvbWJvLXJlbmRlcmVyLXBlcmNlbnRhZ2UnLFxuICB0ZW1wbGF0ZVVybDogJy4vby1jb21iby1yZW5kZXJlci1wZXJjZW50YWdlLmNvbXBvbmVudC5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIGlucHV0czogREVGQVVMVF9JTlBVVFNfT19DT01CT19SRU5ERVJFUl9QRVJDRU5UQUdFXG59KVxuZXhwb3J0IGNsYXNzIE9Db21ib1JlbmRlcmVyUGVyY2VudGFnZUNvbXBvbmVudCBleHRlbmRzIE9Db21ib1JlbmRlcmVyUmVhbENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgZGVjaW1hbFNlcGFyYXRvcjogc3RyaW5nID0gJy4nO1xuICBtaW5EZWNpbWFsRGlnaXRzID0gMDtcbiAgbWF4RGVjaW1hbERpZ2l0cyA9IDA7XG4gIHZhbHVlQmFzZTogT1BlcmNlbnRhZ2VWYWx1ZUJhc2VUeXBlID0gMTtcblxuICBwcm90ZWN0ZWQgbnVtYmVyU2VydmljZTogTnVtYmVyU2VydmljZTtcblxuICBwcm90ZWN0ZWQgY29tcG9uZW50UGlwZTogT1BlcmNlbnRQaXBlO1xuICBwcm90ZWN0ZWQgcGlwZUFyZ3VtZW50czogSVBlcmNlbnRQaXBlQXJndW1lbnQ7XG5cbiAgQFZpZXdDaGlsZCgndGVtcGxhdGVyZWYnLCB7IHJlYWQ6IFRlbXBsYXRlUmVmLCBzdGF0aWM6IHRydWUgfSkgcHVibGljIHRlbXBsYXRlcmVmOiBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBpbmplY3RvcjogSW5qZWN0b3IpIHtcbiAgICBzdXBlcihpbmplY3Rvcik7XG4gICAgdGhpcy5udW1iZXJTZXJ2aWNlID0gdGhpcy5pbmplY3Rvci5nZXQoTnVtYmVyU2VydmljZSk7XG5cbiAgICB0aGlzLnNldENvbXBvbmVudFBpcGUoKTtcbiAgfVxuXG4gIHNldENvbXBvbmVudFBpcGUoKSB7XG4gICAgdGhpcy5jb21wb25lbnRQaXBlID0gbmV3IE9QZXJjZW50UGlwZSh0aGlzLmluamVjdG9yKTtcbiAgfVxuXG4gIGluaXRpYWxpemUoKSB7XG4gICAgc3VwZXIuaW5pdGlhbGl6ZSgpO1xuICAgIHRoaXMucGlwZUFyZ3VtZW50cyA9IHtcbiAgICAgIG1pbkRlY2ltYWxEaWdpdHM6IHRoaXMubWluRGVjaW1hbERpZ2l0cyxcbiAgICAgIG1heERlY2ltYWxEaWdpdHM6IHRoaXMubWF4RGVjaW1hbERpZ2l0cyxcbiAgICAgIGRlY2ltYWxTZXBhcmF0b3I6IHRoaXMuZGVjaW1hbFNlcGFyYXRvcixcbiAgICAgIGdyb3VwaW5nOiB0aGlzLmdyb3VwaW5nLFxuICAgICAgdGhvdXNhbmRTZXBhcmF0b3I6IHRoaXMudGhvdXNhbmRTZXBhcmF0b3IsXG4gICAgICB2YWx1ZUJhc2U6IHRoaXMudmFsdWVCYXNlXG4gICAgfTtcbiAgfVxuXG59XG4iXX0=