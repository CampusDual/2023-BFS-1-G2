import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, Injector, TemplateRef, ViewChild } from '@angular/core';
import { OTranslateService } from '../../../../../services/translate/o-translate.service';
import { Util } from '../../../../../util/util';
import { DEFAULT_INPUTS_O_COMBO_RENDERER, OComboCustomRenderer } from '../o-combo-renderer.class';
export var DEFAULT_INPUTS_O_COMBO_RENDERER_BOOLEAN = tslib_1.__spread(DEFAULT_INPUTS_O_COMBO_RENDERER, [
    'trueValue: true-value',
    'falseValue: false-value',
    'booleanType: boolean-type',
    'renderTrueValue: render-true-value',
    'renderFalseValue: render-false-value',
    'renderType: render-type'
]);
var OComboRendererBooleanComponent = (function (_super) {
    tslib_1.__extends(OComboRendererBooleanComponent, _super);
    function OComboRendererBooleanComponent(injector) {
        var _this = _super.call(this, injector) || this;
        _this.injector = injector;
        _this._renderType = 'string';
        _this._booleanType = 'boolean';
        _this.translateService = _this.injector.get(OTranslateService);
        return _this;
    }
    OComboRendererBooleanComponent.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        this.parseInputs();
    };
    OComboRendererBooleanComponent.prototype.parseInputs = function () {
        switch (this.booleanType) {
            case 'string':
                this.parseStringInputs();
                break;
            case 'number':
                this.parseNumberInputs();
                break;
            default:
                this.trueValue = true;
                this.falseValue = false;
                break;
        }
    };
    OComboRendererBooleanComponent.prototype.parseStringInputs = function () {
        if ((this.trueValue || '').length === 0) {
            this.trueValue = undefined;
        }
        if ((this.falseValue || '').length === 0) {
            this.falseValue = undefined;
        }
    };
    OComboRendererBooleanComponent.prototype.parseNumberInputs = function () {
        this.trueValue = parseInt(this.trueValue, 10);
        if (isNaN(this.trueValue)) {
            this.trueValue = 1;
        }
        this.falseValue = parseInt(this.falseValue, 10);
        if (isNaN(this.falseValue)) {
            this.falseValue = 0;
        }
    };
    OComboRendererBooleanComponent.prototype.hasComboTrueValue = function (record) {
        var result;
        if (Util.isDefined(record) && Util.isDefined(record[this.comboComponent.valueColumn])) {
            var value = record[this.comboComponent.valueColumn];
            result = (value === this.trueValue);
            if (this.booleanType === 'string' && !Util.isDefined(this.trueValue)) {
                result = Util.parseBoolean(value, false);
            }
        }
        return result;
    };
    Object.defineProperty(OComboRendererBooleanComponent.prototype, "booleanType", {
        get: function () {
            return this._booleanType;
        },
        set: function (arg) {
            arg = (arg || '').toLowerCase();
            if (['number', 'boolean', 'string'].indexOf(arg) === -1) {
                arg = 'boolean';
            }
            this._booleanType = arg;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OComboRendererBooleanComponent.prototype, "renderType", {
        get: function () {
            return this._renderType;
        },
        set: function (arg) {
            arg = (arg || '').toLowerCase();
            if (['string', 'number'].indexOf(arg) === -1) {
                arg = 'string';
            }
            this._renderType = arg;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OComboRendererBooleanComponent.prototype, "renderTrueValue", {
        get: function () {
            return this._renderTrueValue || this.trueValue;
        },
        set: function (arg) {
            this._renderTrueValue = arg;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OComboRendererBooleanComponent.prototype, "renderFalseValue", {
        get: function () {
            return this._renderFalseValue || this.falseValue;
        },
        set: function (arg) {
            this._renderFalseValue = arg;
        },
        enumerable: true,
        configurable: true
    });
    OComboRendererBooleanComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-combo-renderer-boolean',
                    template: "<ng-template #templateref let-value=\"value\">\n  <ng-container *ngIf=\"hasComboTrueValue(value);else falseValue\">\n    <ng-container [ngSwitch]=\"renderType\">\n      <ng-container *ngSwitchCase=\"'number'\">{{ renderTrueValue }}</ng-container>\n      <span *ngSwitchDefault>{{ renderTrueValue | oTranslate }}</span>\n    </ng-container>\n  </ng-container>\n  <ng-template #falseValue>\n    <ng-container [ngSwitch]=\"renderType\">\n      <ng-container *ngSwitchCase=\"'number'\">{{ renderFalseValue }}</ng-container>\n      <ng-container *ngSwitchDefault>{{ renderFalseValue | oTranslate}}</ng-container>\n    </ng-container>\n  </ng-template>\n</ng-template>",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    inputs: DEFAULT_INPUTS_O_COMBO_RENDERER_BOOLEAN
                }] }
    ];
    OComboRendererBooleanComponent.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    OComboRendererBooleanComponent.propDecorators = {
        templateref: [{ type: ViewChild, args: ['templateref', { read: TemplateRef, static: true },] }]
    };
    return OComboRendererBooleanComponent;
}(OComboCustomRenderer));
export { OComboRendererBooleanComponent };
//# sourceMappingURL=data:application/json;base64,