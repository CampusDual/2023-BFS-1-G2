import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, Injector, TemplateRef, ViewChild } from '@angular/core';
import { InputConverter } from '../../../../../decorators/input-converter';
import { ORealPipe } from '../../../../../pipes/o-real.pipe';
import { NumberService } from '../../../../../services/number.service';
import { DEFAULT_INPUTS_O_COMBO_RENDERER_INTEGER, OComboRendererIntegerComponent } from '../integer/o-combo-renderer-integer.component';
export var DEFAULT_INPUTS_O_COMBO_RENDERER_REAL = tslib_1.__spread(DEFAULT_INPUTS_O_COMBO_RENDERER_INTEGER, [
    'decimalSeparator: decimal-separator',
    'minDecimalDigits: min-decimal-digits',
    'maxDecimalDigits: max-decimal-digits'
]);
var OComboRendererRealComponent = (function (_super) {
    tslib_1.__extends(OComboRendererRealComponent, _super);
    function OComboRendererRealComponent(injector) {
        var _this = _super.call(this, injector) || this;
        _this.injector = injector;
        _this.minDecimalDigits = 2;
        _this.maxDecimalDigits = 2;
        _this.decimalSeparator = '.';
        _this.numberService = _this.injector.get(NumberService);
        _this.setComponentPipe();
        return _this;
    }
    OComboRendererRealComponent.prototype.setComponentPipe = function () {
        this.componentPipe = new ORealPipe(this.injector);
    };
    OComboRendererRealComponent.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        this.pipeArguments = {
            minDecimalDigits: this.minDecimalDigits,
            maxDecimalDigits: this.maxDecimalDigits,
            decimalSeparator: this.decimalSeparator,
            grouping: this.grouping,
            thousandSeparator: this.thousandSeparator
        };
    };
    OComboRendererRealComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-combo-renderer-real',
                    template: "<ng-template #templateref let-value=\"value\">\n  {{ getComboData(value)}}\n</ng-template>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    inputs: DEFAULT_INPUTS_O_COMBO_RENDERER_REAL
                }] }
    ];
    OComboRendererRealComponent.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    OComboRendererRealComponent.propDecorators = {
        templateref: [{ type: ViewChild, args: ['templateref', { read: TemplateRef, static: true },] }]
    };
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Number)
    ], OComboRendererRealComponent.prototype, "minDecimalDigits", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Number)
    ], OComboRendererRealComponent.prototype, "maxDecimalDigits", void 0);
    return OComboRendererRealComponent;
}(OComboRendererIntegerComponent));
export { OComboRendererRealComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1jb21iby1yZW5kZXJlci1yZWFsLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL29udGltaXplLXdlYi1uZ3gvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9pbnB1dC9jb21iby9jb21iby1yZW5kZXJlci9yZWFsL28tY29tYm8tcmVuZGVyZXItcmVhbC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFVLFdBQVcsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFN0csT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBQzNFLE9BQU8sRUFBcUIsU0FBUyxFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDaEYsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQ3ZFLE9BQU8sRUFDTCx1Q0FBdUMsRUFDdkMsOEJBQThCLEVBQy9CLE1BQU0sK0NBQStDLENBQUM7QUFFdkQsTUFBTSxDQUFDLElBQU0sb0NBQW9DLG9CQUM1Qyx1Q0FBdUM7SUFFMUMscUNBQXFDO0lBQ3JDLHNDQUFzQztJQUN0QyxzQ0FBc0M7RUFDdkMsQ0FBQztBQUVGO0lBTWlELHVEQUE4QjtJQWU3RSxxQ0FBc0IsUUFBa0I7UUFBeEMsWUFDRSxrQkFBTSxRQUFRLENBQUMsU0FHaEI7UUFKcUIsY0FBUSxHQUFSLFFBQVEsQ0FBVTtRQVp4QyxzQkFBZ0IsR0FBVyxDQUFDLENBQUM7UUFFN0Isc0JBQWdCLEdBQVcsQ0FBQyxDQUFDO1FBRW5CLHNCQUFnQixHQUFXLEdBQUcsQ0FBQztRQVV2QyxLQUFJLENBQUMsYUFBYSxHQUFHLEtBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ3RELEtBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDOztJQUMxQixDQUFDO0lBRUQsc0RBQWdCLEdBQWhCO1FBQ0UsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVELGdEQUFVLEdBQVY7UUFDRSxpQkFBTSxVQUFVLFdBQUUsQ0FBQztRQUNuQixJQUFJLENBQUMsYUFBYSxHQUFHO1lBQ25CLGdCQUFnQixFQUFFLElBQUksQ0FBQyxnQkFBZ0I7WUFDdkMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLGdCQUFnQjtZQUN2QyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsZ0JBQWdCO1lBQ3ZDLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtZQUN2QixpQkFBaUIsRUFBRSxJQUFJLENBQUMsaUJBQWlCO1NBQzFDLENBQUM7SUFDSixDQUFDOztnQkF4Q0YsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSx1QkFBdUI7b0JBQ2pDLHdHQUFxRDtvQkFDckQsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07b0JBQy9DLE1BQU0sRUFBRSxvQ0FBb0M7aUJBQzdDOzs7Z0JBdkI0QyxRQUFROzs7OEJBcUNsRCxTQUFTLFNBQUMsYUFBYSxFQUFFLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFOztJQVY3RDtRQURDLGNBQWMsRUFBRTs7eUVBQ1k7SUFFN0I7UUFEQyxjQUFjLEVBQUU7O3lFQUNZO0lBK0IvQixrQ0FBQztDQUFBLEFBMUNELENBTWlELDhCQUE4QixHQW9DOUU7U0FwQ1ksMkJBQTJCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgSW5qZWN0b3IsIE9uSW5pdCwgVGVtcGxhdGVSZWYsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBJbnB1dENvbnZlcnRlciB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2RlY29yYXRvcnMvaW5wdXQtY29udmVydGVyJztcbmltcG9ydCB7IElSZWFsUGlwZUFyZ3VtZW50LCBPUmVhbFBpcGUgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9waXBlcy9vLXJlYWwucGlwZSc7XG5pbXBvcnQgeyBOdW1iZXJTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc2VydmljZXMvbnVtYmVyLnNlcnZpY2UnO1xuaW1wb3J0IHtcbiAgREVGQVVMVF9JTlBVVFNfT19DT01CT19SRU5ERVJFUl9JTlRFR0VSLFxuICBPQ29tYm9SZW5kZXJlckludGVnZXJDb21wb25lbnRcbn0gZnJvbSAnLi4vaW50ZWdlci9vLWNvbWJvLXJlbmRlcmVyLWludGVnZXIuY29tcG9uZW50JztcblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfSU5QVVRTX09fQ09NQk9fUkVOREVSRVJfUkVBTCA9IFtcbiAgLi4uREVGQVVMVF9JTlBVVFNfT19DT01CT19SRU5ERVJFUl9JTlRFR0VSLFxuICAvLyBkZWNpbWFsLXNlcGFyYXRvciBbc3RyaW5nXTogZGVjaW1hbCBzZXBhcmF0b3IuIERlZmF1bHQ6IGRvdCAoLikuXG4gICdkZWNpbWFsU2VwYXJhdG9yOiBkZWNpbWFsLXNlcGFyYXRvcicsXG4gICdtaW5EZWNpbWFsRGlnaXRzOiBtaW4tZGVjaW1hbC1kaWdpdHMnLFxuICAnbWF4RGVjaW1hbERpZ2l0czogbWF4LWRlY2ltYWwtZGlnaXRzJ1xuXTtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnby1jb21iby1yZW5kZXJlci1yZWFsJyxcbiAgdGVtcGxhdGVVcmw6ICcuL28tY29tYm8tcmVuZGVyZXItcmVhbC5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBpbnB1dHM6IERFRkFVTFRfSU5QVVRTX09fQ09NQk9fUkVOREVSRVJfUkVBTFxufSlcbmV4cG9ydCBjbGFzcyBPQ29tYm9SZW5kZXJlclJlYWxDb21wb25lbnQgZXh0ZW5kcyBPQ29tYm9SZW5kZXJlckludGVnZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIEBJbnB1dENvbnZlcnRlcigpXG4gIG1pbkRlY2ltYWxEaWdpdHM6IG51bWJlciA9IDI7XG4gIEBJbnB1dENvbnZlcnRlcigpXG4gIG1heERlY2ltYWxEaWdpdHM6IG51bWJlciA9IDI7XG5cbiAgcHJvdGVjdGVkIGRlY2ltYWxTZXBhcmF0b3I6IHN0cmluZyA9ICcuJztcbiAgcHJvdGVjdGVkIG51bWJlclNlcnZpY2U6IE51bWJlclNlcnZpY2U7XG5cbiAgcHJvdGVjdGVkIGNvbXBvbmVudFBpcGU6IE9SZWFsUGlwZTtcbiAgcHJvdGVjdGVkIHBpcGVBcmd1bWVudHM6IElSZWFsUGlwZUFyZ3VtZW50O1xuXG4gIEBWaWV3Q2hpbGQoJ3RlbXBsYXRlcmVmJywgeyByZWFkOiBUZW1wbGF0ZVJlZiwgc3RhdGljOiB0cnVlIH0pIHB1YmxpYyB0ZW1wbGF0ZXJlZjogVGVtcGxhdGVSZWY8YW55PjtcblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgaW5qZWN0b3I6IEluamVjdG9yKSB7XG4gICAgc3VwZXIoaW5qZWN0b3IpO1xuICAgIHRoaXMubnVtYmVyU2VydmljZSA9IHRoaXMuaW5qZWN0b3IuZ2V0KE51bWJlclNlcnZpY2UpO1xuICAgIHRoaXMuc2V0Q29tcG9uZW50UGlwZSgpO1xuICB9XG5cbiAgc2V0Q29tcG9uZW50UGlwZSgpIHtcbiAgICB0aGlzLmNvbXBvbmVudFBpcGUgPSBuZXcgT1JlYWxQaXBlKHRoaXMuaW5qZWN0b3IpO1xuICB9XG5cbiAgaW5pdGlhbGl6ZSgpIHtcbiAgICBzdXBlci5pbml0aWFsaXplKCk7XG4gICAgdGhpcy5waXBlQXJndW1lbnRzID0ge1xuICAgICAgbWluRGVjaW1hbERpZ2l0czogdGhpcy5taW5EZWNpbWFsRGlnaXRzLFxuICAgICAgbWF4RGVjaW1hbERpZ2l0czogdGhpcy5tYXhEZWNpbWFsRGlnaXRzLFxuICAgICAgZGVjaW1hbFNlcGFyYXRvcjogdGhpcy5kZWNpbWFsU2VwYXJhdG9yLFxuICAgICAgZ3JvdXBpbmc6IHRoaXMuZ3JvdXBpbmcsXG4gICAgICB0aG91c2FuZFNlcGFyYXRvcjogdGhpcy50aG91c2FuZFNlcGFyYXRvclxuICAgIH07XG4gIH1cblxufVxuIl19