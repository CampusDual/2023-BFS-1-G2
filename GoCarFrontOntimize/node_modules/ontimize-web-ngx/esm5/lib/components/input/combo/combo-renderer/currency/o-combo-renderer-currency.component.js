import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, Injector, TemplateRef, ViewChild } from '@angular/core';
import { InputConverter } from '../../../../../decorators/input-converter';
import { OCurrencyPipe } from '../../../../../pipes/o-currency.pipe';
import { CurrencyService } from '../../../../../services/currency.service';
import { OComboCustomRenderer } from '../o-combo-renderer.class';
import { DEFAULT_INPUTS_O_COMBO_RENDERER_REAL } from '../real/o-combo-renderer-real.component';
export var DEFAULT_INPUTS_O_COMBO_RENDERER_CURRENCY = tslib_1.__spread(DEFAULT_INPUTS_O_COMBO_RENDERER_REAL, [
    'currencySymbol: currency-symbol',
    'currencySymbolPosition: currency-symbol-position'
]);
var OComboRendererCurrencyComponent = (function (_super) {
    tslib_1.__extends(OComboRendererCurrencyComponent, _super);
    function OComboRendererCurrencyComponent(injector) {
        var _this = _super.call(this, injector) || this;
        _this.injector = injector;
        _this.minDecimalDigits = 2;
        _this.maxDecimalDigits = 2;
        _this.decimalSeparator = '.';
        _this.grouping = true;
        _this.thousandSeparator = ',';
        _this.currencyService = _this.injector.get(CurrencyService);
        _this.setComponentPipe();
        return _this;
    }
    OComboRendererCurrencyComponent.prototype.setComponentPipe = function () {
        this.componentPipe = new OCurrencyPipe(this.injector);
    };
    OComboRendererCurrencyComponent.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        if (typeof this.currencySymbol === 'undefined') {
            this.currencySymbol = this.currencyService.symbol;
        }
        if (typeof this.currencySymbolPosition === 'undefined') {
            this.currencySymbolPosition = this.currencyService.symbolPosition;
        }
        this.pipeArguments = {
            currencySimbol: this.currencySymbol,
            currencySymbolPosition: this.currencySymbolPosition,
            minDecimalDigits: this.minDecimalDigits,
            maxDecimalDigits: this.maxDecimalDigits,
            decimalSeparator: this.decimalSeparator,
            grouping: this.grouping,
            thousandSeparator: this.thousandSeparator
        };
    };
    OComboRendererCurrencyComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-combo-renderer-currency',
                    template: "<ng-template #templateref let-value=\"value\">\n  {{getComboData(value)}}\n</ng-template>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    inputs: DEFAULT_INPUTS_O_COMBO_RENDERER_CURRENCY
                }] }
    ];
    OComboRendererCurrencyComponent.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    OComboRendererCurrencyComponent.propDecorators = {
        templateref: [{ type: ViewChild, args: ['templateref', { read: TemplateRef, static: true },] }]
    };
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Number)
    ], OComboRendererCurrencyComponent.prototype, "minDecimalDigits", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Number)
    ], OComboRendererCurrencyComponent.prototype, "maxDecimalDigits", void 0);
    return OComboRendererCurrencyComponent;
}(OComboCustomRenderer));
export { OComboRendererCurrencyComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1jb21iby1yZW5kZXJlci1jdXJyZW5jeS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9vbnRpbWl6ZS13ZWItbmd4LyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvaW5wdXQvY29tYm8vY29tYm8tcmVuZGVyZXIvY3VycmVuY3kvby1jb21iby1yZW5kZXJlci1jdXJyZW5jeS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFVLFdBQVcsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFN0csT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBQzNFLE9BQU8sRUFBeUIsYUFBYSxFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDNUYsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDBDQUEwQyxDQUFDO0FBQzNFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxvQ0FBb0MsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBRS9GLE1BQU0sQ0FBQyxJQUFNLHdDQUF3QyxvQkFDaEQsb0NBQW9DO0lBR3ZDLGlDQUFpQztJQUdqQyxrREFBa0Q7RUFDbkQsQ0FBQztBQUVGO0lBTXFELDJEQUFvQjtJQW9CdkUseUNBQXNCLFFBQWtCO1FBQXhDLFlBQ0Usa0JBQU0sUUFBUSxDQUFDLFNBR2hCO1FBSnFCLGNBQVEsR0FBUixRQUFRLENBQVU7UUFqQnhDLHNCQUFnQixHQUFXLENBQUMsQ0FBQztRQUU3QixzQkFBZ0IsR0FBVyxDQUFDLENBQUM7UUFJbkIsc0JBQWdCLEdBQVcsR0FBRyxDQUFDO1FBRS9CLGNBQVEsR0FBWSxJQUFJLENBQUM7UUFDekIsdUJBQWlCLEdBQVcsR0FBRyxDQUFDO1FBVXhDLEtBQUksQ0FBQyxlQUFlLEdBQUcsS0FBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDMUQsS0FBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7O0lBQzFCLENBQUM7SUFFRCwwREFBZ0IsR0FBaEI7UUFDRSxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksYUFBYSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBRUQsb0RBQVUsR0FBVjtRQUNFLGlCQUFNLFVBQVUsV0FBRSxDQUFDO1FBQ25CLElBQUksT0FBTyxJQUFJLENBQUMsY0FBYyxLQUFLLFdBQVcsRUFBRTtZQUM5QyxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDO1NBQ25EO1FBQ0QsSUFBSSxPQUFPLElBQUksQ0FBQyxzQkFBc0IsS0FBSyxXQUFXLEVBQUU7WUFDdEQsSUFBSSxDQUFDLHNCQUFzQixHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsY0FBYyxDQUFDO1NBQ25FO1FBRUQsSUFBSSxDQUFDLGFBQWEsR0FBRztZQUNuQixjQUFjLEVBQUUsSUFBSSxDQUFDLGNBQWM7WUFDbkMsc0JBQXNCLEVBQUUsSUFBSSxDQUFDLHNCQUFzQjtZQUNuRCxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsZ0JBQWdCO1lBQ3ZDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxnQkFBZ0I7WUFDdkMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLGdCQUFnQjtZQUN2QyxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7WUFDdkIsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLGlCQUFpQjtTQUMxQyxDQUFDO0lBRUosQ0FBQzs7Z0JBdkRGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsMkJBQTJCO29CQUNyQyx1R0FBeUQ7b0JBQ3pELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxNQUFNLEVBQUUsd0NBQXdDO2lCQUNqRDs7O2dCQXZCNEMsUUFBUTs7OzhCQTBDbEQsU0FBUyxTQUFDLGFBQWEsRUFBRSxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTs7SUFmN0Q7UUFEQyxjQUFjLEVBQUU7OzZFQUNZO0lBRTdCO1FBREMsY0FBYyxFQUFFOzs2RUFDWTtJQThDL0Isc0NBQUM7Q0FBQSxBQXpERCxDQU1xRCxvQkFBb0IsR0FtRHhFO1NBbkRZLCtCQUErQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIEluamVjdG9yLCBPbkluaXQsIFRlbXBsYXRlUmVmLCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgSW5wdXRDb252ZXJ0ZXIgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9kZWNvcmF0b3JzL2lucHV0LWNvbnZlcnRlcic7XG5pbXBvcnQgeyBJQ3VycmVuY3lQaXBlQXJndW1lbnQsIE9DdXJyZW5jeVBpcGUgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9waXBlcy9vLWN1cnJlbmN5LnBpcGUnO1xuaW1wb3J0IHsgQ3VycmVuY3lTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc2VydmljZXMvY3VycmVuY3kuc2VydmljZSc7XG5pbXBvcnQgeyBPQ29tYm9DdXN0b21SZW5kZXJlciB9IGZyb20gJy4uL28tY29tYm8tcmVuZGVyZXIuY2xhc3MnO1xuaW1wb3J0IHsgREVGQVVMVF9JTlBVVFNfT19DT01CT19SRU5ERVJFUl9SRUFMIH0gZnJvbSAnLi4vcmVhbC9vLWNvbWJvLXJlbmRlcmVyLXJlYWwuY29tcG9uZW50JztcblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfSU5QVVRTX09fQ09NQk9fUkVOREVSRVJfQ1VSUkVOQ1kgPSBbXG4gIC4uLkRFRkFVTFRfSU5QVVRTX09fQ09NQk9fUkVOREVSRVJfUkVBTCxcblxuICAvLyBjdXJyZW5jeS1zeW1ib2wgW3N0cmluZ106IGN1cnJlbmN5IHN5bWJvbC4gRGVmYXVsdDogZG9sbGFyICgkKS5cbiAgJ2N1cnJlbmN5U3ltYm9sOiBjdXJyZW5jeS1zeW1ib2wnLFxuXG4gIC8vIGN1cnJlbmN5LXN5bWJvbC1wb3NpdGlvbiBbbGVmdHxyaWdodF06IHBvc2l0aW9uIG9mIHRoZSBjdXJyZW5jeSBzeW1ib2wuIERlZmF1bHQ6IGxlZnQuXG4gICdjdXJyZW5jeVN5bWJvbFBvc2l0aW9uOiBjdXJyZW5jeS1zeW1ib2wtcG9zaXRpb24nXG5dO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdvLWNvbWJvLXJlbmRlcmVyLWN1cnJlbmN5JyxcbiAgdGVtcGxhdGVVcmw6ICcuL28tY29tYm8tcmVuZGVyZXItY3VycmVuY3kuY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgaW5wdXRzOiBERUZBVUxUX0lOUFVUU19PX0NPTUJPX1JFTkRFUkVSX0NVUlJFTkNZXG59KVxuZXhwb3J0IGNsYXNzIE9Db21ib1JlbmRlcmVyQ3VycmVuY3lDb21wb25lbnQgZXh0ZW5kcyBPQ29tYm9DdXN0b21SZW5kZXJlciBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgQElucHV0Q29udmVydGVyKClcbiAgbWluRGVjaW1hbERpZ2l0czogbnVtYmVyID0gMjtcbiAgQElucHV0Q29udmVydGVyKClcbiAgbWF4RGVjaW1hbERpZ2l0czogbnVtYmVyID0gMjtcblxuICBwcm90ZWN0ZWQgY3VycmVuY3lTeW1ib2w6IHN0cmluZztcbiAgcHJvdGVjdGVkIGN1cnJlbmN5U3ltYm9sUG9zaXRpb246IHN0cmluZztcbiAgcHJvdGVjdGVkIGRlY2ltYWxTZXBhcmF0b3I6IHN0cmluZyA9ICcuJztcblxuICBwcm90ZWN0ZWQgZ3JvdXBpbmc6IGJvb2xlYW4gPSB0cnVlO1xuICBwcm90ZWN0ZWQgdGhvdXNhbmRTZXBhcmF0b3I6IHN0cmluZyA9ICcsJztcblxuICBwcm90ZWN0ZWQgY3VycmVuY3lTZXJ2aWNlOiBDdXJyZW5jeVNlcnZpY2U7XG5cbiAgcHJvdGVjdGVkIGNvbXBvbmVudFBpcGU6IE9DdXJyZW5jeVBpcGU7XG4gIHByb3RlY3RlZCBwaXBlQXJndW1lbnRzOiBJQ3VycmVuY3lQaXBlQXJndW1lbnQ7XG4gIEBWaWV3Q2hpbGQoJ3RlbXBsYXRlcmVmJywgeyByZWFkOiBUZW1wbGF0ZVJlZiwgc3RhdGljOiB0cnVlIH0pIHB1YmxpYyB0ZW1wbGF0ZXJlZjogVGVtcGxhdGVSZWY8YW55PjtcblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgaW5qZWN0b3I6IEluamVjdG9yKSB7XG4gICAgc3VwZXIoaW5qZWN0b3IpO1xuICAgIHRoaXMuY3VycmVuY3lTZXJ2aWNlID0gdGhpcy5pbmplY3Rvci5nZXQoQ3VycmVuY3lTZXJ2aWNlKTtcbiAgICB0aGlzLnNldENvbXBvbmVudFBpcGUoKTtcbiAgfVxuXG4gIHNldENvbXBvbmVudFBpcGUoKSB7XG4gICAgdGhpcy5jb21wb25lbnRQaXBlID0gbmV3IE9DdXJyZW5jeVBpcGUodGhpcy5pbmplY3Rvcik7XG4gIH1cblxuICBpbml0aWFsaXplKCkge1xuICAgIHN1cGVyLmluaXRpYWxpemUoKTtcbiAgICBpZiAodHlwZW9mIHRoaXMuY3VycmVuY3lTeW1ib2wgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzLmN1cnJlbmN5U3ltYm9sID0gdGhpcy5jdXJyZW5jeVNlcnZpY2Uuc3ltYm9sO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHRoaXMuY3VycmVuY3lTeW1ib2xQb3NpdGlvbiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRoaXMuY3VycmVuY3lTeW1ib2xQb3NpdGlvbiA9IHRoaXMuY3VycmVuY3lTZXJ2aWNlLnN5bWJvbFBvc2l0aW9uO1xuICAgIH1cblxuICAgIHRoaXMucGlwZUFyZ3VtZW50cyA9IHtcbiAgICAgIGN1cnJlbmN5U2ltYm9sOiB0aGlzLmN1cnJlbmN5U3ltYm9sLFxuICAgICAgY3VycmVuY3lTeW1ib2xQb3NpdGlvbjogdGhpcy5jdXJyZW5jeVN5bWJvbFBvc2l0aW9uLFxuICAgICAgbWluRGVjaW1hbERpZ2l0czogdGhpcy5taW5EZWNpbWFsRGlnaXRzLFxuICAgICAgbWF4RGVjaW1hbERpZ2l0czogdGhpcy5tYXhEZWNpbWFsRGlnaXRzLFxuICAgICAgZGVjaW1hbFNlcGFyYXRvcjogdGhpcy5kZWNpbWFsU2VwYXJhdG9yLFxuICAgICAgZ3JvdXBpbmc6IHRoaXMuZ3JvdXBpbmcsXG4gICAgICB0aG91c2FuZFNlcGFyYXRvcjogdGhpcy50aG91c2FuZFNlcGFyYXRvclxuICAgIH07XG5cbiAgfVxuXG59XG4iXX0=