import * as tslib_1 from "tslib";
import { Component, ElementRef, EventEmitter, forwardRef, Inject, Injector, Input, Optional, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import * as lpn from 'google-libphonenumber';
import { Codes } from '../../../util/codes';
import { Util } from '../../../util/util';
import { OValidators } from '../../../validators/o-validators';
import { OFormValue } from '../../form/o-form-value';
import { OFormComponent } from '../../form/o-form.component';
import { DEFAULT_INPUTS_O_FORM_DATA_COMPONENT, DEFAULT_OUTPUTS_O_FORM_DATA_COMPONENT, OFormDataComponent } from '../../o-form-data-component.class';
import { CountryCode } from './data/country-code';
import { CountryISO } from './enums/country-iso.enum';
import { PhoneNumberFormat } from './enums/phone-number-format.enum';
export var DEFAULT_INPUTS_O_PHONE_INPUT = tslib_1.__spread(DEFAULT_INPUTS_O_FORM_DATA_COMPONENT, [
    'gap'
]);
export var DEFAULT_OUTPUTS_O_PHONE_INPUT = tslib_1.__spread(DEFAULT_OUTPUTS_O_FORM_DATA_COMPONENT);
var PHONE_PREFIX = '+';
var OPhoneInputComponent = (function (_super) {
    tslib_1.__extends(OPhoneInputComponent, _super);
    function OPhoneInputComponent(countryCodeData, form, elRef, injector) {
        var _this = _super.call(this, form, elRef, injector) || this;
        _this.countryCodeData = countryCodeData;
        _this.countries = [];
        _this.countryChange = new EventEmitter();
        _this.onPhoneDataChange = new EventEmitter();
        _this.gap = '14px';
        _this._selectedCountry = {
            areaCodes: undefined,
            dialCode: '',
            htmlId: '',
            flagClass: '',
            iso2: '',
            name: '',
            placeHolder: '',
            priority: 0,
        };
        _this.allCountries = [];
        _this.states = CountryISO;
        _this.selectedStates = _this.states;
        _this.phoneUtil = lpn.PhoneNumberUtil.getInstance();
        _this.separateDialCode = true;
        _this.numberFormat = PhoneNumberFormat.International;
        _this.fetchCountryData();
        return _this;
    }
    Object.defineProperty(OPhoneInputComponent.prototype, "selectedCountry", {
        get: function () {
            return this._selectedCountry;
        },
        set: function (value) {
            this._selectedCountry = value;
            this.placeHolder = this.resolvePlaceholder();
        },
        enumerable: true,
        configurable: true
    });
    OPhoneInputComponent.prototype.initialize = function () {
        this.initializeCountryData();
        _super.prototype.initialize.call(this);
        var formControl = this.getFormControl();
        if (formControl) {
            var self_1 = this;
            formControl.getValue = function () {
                if (this.value && this.value.length > 0 && self_1.selectedCountry && self_1.selectedCountry.dialCode) {
                    return "+" + self_1.selectedCountry.dialCode + " " + this.value;
                }
                return undefined;
            };
        }
    };
    OPhoneInputComponent.prototype.ngAfterViewInit = function () {
        _super.prototype.ngAfterViewInit.call(this);
        if (this.oInputsOptions.iconColor === Codes.O_INPUTS_OPTIONS_COLOR_ACCENT) {
            var matFormFieldEL = this.elRef.nativeElement.getElementsByTagName('mat-form-field')[1];
            if (Util.isDefined(matFormFieldEL)) {
                matFormFieldEL.classList.add('accent');
            }
        }
    };
    OPhoneInputComponent.prototype.addOntimizeCustomAppearanceClass = function () {
        try {
            if (this.elRef) {
                var matFormFieldEl = this.elRef.nativeElement.querySelectorAll('mat-form-field');
                matFormFieldEl.forEach(function (matForm) {
                    matForm.classList.add('mat-form-field-appearance-ontimize');
                });
            }
        }
        catch (e) {
        }
    };
    OPhoneInputComponent.prototype.getValue = function () {
        var formControl = this.getFormControl();
        if (formControl) {
            return formControl.getValue();
        }
        return _super.prototype.getValue.call(this);
    };
    OPhoneInputComponent.prototype.resolveValidators = function () {
        var _this = this;
        var validators = _super.prototype.resolveValidators.call(this);
        var createPhoneValidator = (function () {
            return OValidators.phoneValidator(_this.getFormControl(), _this.getSelectedCountryIso2());
        });
        validators.push(createPhoneValidator);
        return validators;
    };
    OPhoneInputComponent.prototype.onFormControlChange = function (value) {
        if (!this.value) {
            this.value = new OFormValue();
        }
        this.ensureOFormValue(value);
        this.ensurePhoneValue(value);
        this.onChange.emit(value);
    };
    OPhoneInputComponent.prototype.setFormValue = function (val, options, setDirty) {
        if (setDirty === void 0) { setDirty = false; }
        var _a = this.getSeparatedValues(val), countryDialCode = _a.countryDialCode, number = _a.number;
        var country = this.getCountryByDialCode(countryDialCode);
        var parsed = this.getParsedNumber(number, country ? country.iso2 : undefined);
        if (!Util.isDefined(parsed)) {
            number = undefined;
            country = undefined;
        }
        this.selectedCountry = country;
        this.ensureOFormValue(number);
        if (this._fControl) {
            this._fControl.setValue(this.value.value, options);
            if (setDirty) {
                this._fControl.markAsDirty();
            }
            if (this._fControl.invalid && !this.form.isInInsertMode()) {
                this._fControl.markAsTouched();
            }
        }
        this.oldValue = this.value.value;
    };
    OPhoneInputComponent.prototype.onCountrySelect = function (value) {
        var _this = this;
        var country = value.value;
        this.countryChange.emit(country);
        this.setValue(undefined);
        this.selectedCountry = country;
        if (this.matInputRef && this.matInputRef.nativeElement) {
            setTimeout(function () {
                _this.matInputRef.nativeElement.focus();
            }, 0);
        }
    };
    OPhoneInputComponent.prototype.innerOnBlur = function (event) {
        _super.prototype.innerOnBlur.call(this, event);
        if (this._fControl) {
            this._fControl.updateValueAndValidity({ emitEvent: false });
        }
    };
    OPhoneInputComponent.prototype.getSelectedCountryIso2 = function () {
        return this.selectedCountry ? this.selectedCountry.iso2 : undefined;
    };
    OPhoneInputComponent.prototype.initializeCountryData = function () {
        var _this = this;
        if (this.countries.length) {
            this.allCountries = this.allCountries.filter(function (c) { return _this.countries.includes(c.iso2); });
        }
    };
    OPhoneInputComponent.prototype.ensurePhoneValue = function (value) {
        var number = this.getParsedNumber(value, this.getSelectedCountryIso2());
        if (number) {
            var intlNo = number
                ? this.phoneUtil.format(number, lpn.PhoneNumberFormat.INTERNATIONAL)
                : '';
            if (intlNo) {
                this.value.value = this.removeDialCode(intlNo);
                this.emitPhoneInputData(intlNo, number);
            }
        }
    };
    OPhoneInputComponent.prototype.getCountryByDialCode = function (countryDialCode) {
        if (countryDialCode) {
            return this.sortCountries().find(function (c) { return c.dialCode === countryDialCode; });
        }
        return undefined;
    };
    OPhoneInputComponent.prototype.sortCountries = function () {
        return this.allCountries
            .sort(function (a, b) {
            return a.priority - b.priority;
        });
    };
    OPhoneInputComponent.prototype.getSeparatedValues = function (value) {
        var countryDialCode = '';
        var number = (value instanceof OFormValue ? value.value : value) || undefined;
        if (Util.isDefined(number) && number.startsWith(PHONE_PREFIX)) {
            countryDialCode = number.substr(1, number.indexOf(' ') - 1);
            number = number.substr(countryDialCode.length + 2);
        }
        return { countryDialCode: countryDialCode, number: number };
    };
    OPhoneInputComponent.prototype.emitPhoneInputData = function (intlNo, number) {
        var phoneInputData = undefined;
        var iso2 = this.getSelectedCountryIso2();
        if (intlNo && number && iso2) {
            phoneInputData = {
                number: this.value.value,
                internationalNumber: intlNo,
                nationalNumber: number
                    ? this.phoneUtil.format(number, lpn.PhoneNumberFormat.NATIONAL)
                    : '',
                e164Number: number
                    ? this.phoneUtil.format(number, lpn.PhoneNumberFormat.E164)
                    : '',
                countryCode: iso2.toUpperCase(),
                dialCode: PHONE_PREFIX + this.selectedCountry.dialCode,
            };
        }
        this.onPhoneDataChange.emit(phoneInputData);
    };
    OPhoneInputComponent.prototype.getParsedNumber = function (phoneNumber, countryCode) {
        var number;
        try {
            number = this.phoneUtil.parse(phoneNumber, countryCode.toUpperCase());
        }
        catch (e) { }
        return number;
    };
    OPhoneInputComponent.prototype.removeDialCode = function (phoneNumber) {
        var number = this.getParsedNumber(phoneNumber, this.getSelectedCountryIso2());
        phoneNumber = this.phoneUtil.format(number, lpn.PhoneNumberFormat[this.numberFormat]);
        if (phoneNumber.startsWith(PHONE_PREFIX) && this.separateDialCode) {
            phoneNumber = phoneNumber.substring(phoneNumber.indexOf(' ') + 1);
        }
        return phoneNumber;
    };
    OPhoneInputComponent.prototype.getCountryIsoCode = function (countryCode, number) {
        var rawNumber = number['values_']['2'].toString();
        var countries = this.allCountries.filter(function (c) { return c.dialCode === countryCode.toString(); });
        var mainCountry = countries.find(function (c) { return c.areaCodes === undefined; });
        var secondaryCountries = countries.filter(function (c) { return c.areaCodes !== undefined; });
        var matchedCountry = mainCountry ? mainCountry.iso2 : undefined;
        secondaryCountries.forEach(function (country) {
            country.areaCodes.forEach(function (areaCode) {
                if (rawNumber.startsWith(areaCode)) {
                    matchedCountry = country.iso2;
                }
            });
        });
        return matchedCountry;
    };
    OPhoneInputComponent.prototype.getPhoneNumberPlaceHolder = function (countryCode) {
        try {
            return this.phoneUtil.format(this.phoneUtil.getExampleNumber(countryCode), lpn.PhoneNumberFormat[this.numberFormat]);
        }
        catch (e) {
            return e;
        }
    };
    OPhoneInputComponent.prototype.fetchCountryData = function () {
        var _this = this;
        this.allCountries = [];
        this.countryCodeData.allCountries.forEach(function (c) {
            var country = {
                name: c[0].toString(),
                iso2: c[1].toString(),
                dialCode: c[2].toString(),
                priority: +c[3] || 0,
                areaCodes: c[4] || undefined,
                htmlId: "iti-0__item-" + c[1].toString(),
                flagClass: "iti__" + c[1].toString().toLocaleLowerCase(),
                placeHolder: '',
            };
            if (!_this.oplaceholder) {
                country.placeHolder = _this.getPhoneNumberPlaceHolder(country.iso2.toUpperCase());
            }
            _this.allCountries.push(country);
        });
    };
    OPhoneInputComponent.prototype.resolvePlaceholder = function () {
        var placeholder = '';
        if (this.selectedCountry && this.selectedCountry.placeHolder && this.selectedCountry.placeHolder.length > 0) {
            placeholder = this.selectedCountry.placeHolder;
            if (this.separateDialCode) {
                placeholder = this.removeDialCode(placeholder);
            }
        }
        return placeholder;
    };
    OPhoneInputComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-phone-input',
                    template: "<div [formGroup]=\"getFormGroup()\" fxLayout=\"row wrap\" [fxLayoutGap]=\"gap +' grid'\">\n  <mat-form-field class=\"mat-form-phone\" [floatLabel]=\"floatLabel\" [appearance]=\"appearance\" [class.read-only]=\"isReadOnly\" fxFlex.xs>\n    <mat-label *ngIf=\"labelVisible\">{{ olabel | oTranslate }}</mat-label>\n    <mat-select [value]=\"selectedCountry\" (selectionChange)=\"onCountrySelect($event)\" [disabled]=\"!enabled\">\n      <mat-option *ngFor=\"let country of allCountries\" [value]=\"country\"> {{country.name}} +{{country.dialCode}}</mat-option>\n    </mat-select>\n  </mat-form-field>\n  <mat-form-field [hideRequiredMarker]=\"hideRequiredMarker\" [class.custom-width]=\"hasCustomWidth\" class=\"icon-field\" [appearance]=\"appearance\"\n    fxFlex>\n    <input #matInputRef matInput type=\"tel\" [id]=\"getAttribute()\" [formControlName]=\"getAttribute()\" [placeholder]=\"placeHolder\"\n      (focus)=\"innerOnFocus($event)\" (blur)=\"innerOnBlur($event)\" [readonly]=\"isReadOnly\" (change)=\"onChangeEvent($event)\" [required]=\"isRequired\">\n    <button type=\"button\" *ngIf=\"showClearButton\" matSuffix mat-icon-button (click)=\"onClickClearValue($event)\">\n      <mat-icon svgIcon=\"ontimize:close\"></mat-icon>\n    </button>\n    <mat-icon matSuffix [class.mat-disabled]=\"!enabled\" class=\"svg-icon\" svgIcon=\"ontimize:phone_outline\"></mat-icon>\n    <mat-error *oMatError=\"hasError('required')\">\n      {{ 'FORM_VALIDATION.REQUIRED' | oTranslate }}\n    </mat-error>\n    <mat-error *oMatError=\"hasError('validatePhoneNumber')\">\n      {{ 'FORM_VALIDATION.PHONE_FORMAT' | oTranslate }}\n    </mat-error>\n    <mat-error *ngFor=\"let oError of getActiveOErrors()\">\n      {{ oError.text | oTranslate }}\n    </mat-error>\n  </mat-form-field>\n</div>",
                    inputs: DEFAULT_INPUTS_O_PHONE_INPUT,
                    outputs: DEFAULT_OUTPUTS_O_PHONE_INPUT,
                    encapsulation: ViewEncapsulation.None,
                    providers: [CountryCode],
                    host: {
                        '[class.o-phone-input]': 'true'
                    },
                    styles: [".o-phone-input{overflow:hidden}.o-phone-input .read-only{pointer-events:none}.o-phone-input .read-only .mat-select-arrow-wrapper{visibility:hidden}.o-phone-input .read-only .mat-form-field-underline{background-image:none}.o-phone-input .mat-form-field.icon-field{height:100%}"]
                }] }
    ];
    OPhoneInputComponent.ctorParameters = function () { return [
        { type: CountryCode },
        { type: OFormComponent, decorators: [{ type: Optional }, { type: Inject, args: [forwardRef(function () { return OFormComponent; }),] }] },
        { type: ElementRef },
        { type: Injector }
    ]; };
    OPhoneInputComponent.propDecorators = {
        countries: [{ type: Input }],
        countryChange: [{ type: Output }],
        onPhoneDataChange: [{ type: Output }],
        countryList: [{ type: ViewChild, args: ['countryList', { static: false },] }],
        matInputRef: [{ type: ViewChild, args: ['matInputRef', { read: ElementRef, static: true },] }]
    };
    return OPhoneInputComponent;
}(OFormDataComponent));
export { OPhoneInputComponent };
//# sourceMappingURL=data:application/json;base64,