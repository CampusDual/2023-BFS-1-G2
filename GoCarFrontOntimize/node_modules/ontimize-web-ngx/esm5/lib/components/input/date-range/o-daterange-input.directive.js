import { ESCAPE, UP_ARROW } from '@angular/cdk/keycodes';
import { Overlay, OverlayConfig, ScrollStrategyOptions } from '@angular/cdk/overlay';
import { ComponentPortal } from '@angular/cdk/portal';
import { ChangeDetectorRef, Directive, ElementRef, EventEmitter, forwardRef, Input, KeyValueDiffers, NgZone, Output, ViewContainerRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { MatDialog } from '@angular/material';
import * as _moment from 'moment';
import { merge } from 'rxjs';
import { filter, take } from 'rxjs/operators';
import { DaterangepickerComponent } from './o-daterange-picker.component';
var moment = _moment;
var ODaterangepickerDirective = (function () {
    function ODaterangepickerDirective(_dialog, _ngZone, _overlay, _viewContainerRef, _changeDetectorRef, _el, differs, scrollStrategy) {
        this._dialog = _dialog;
        this._ngZone = _ngZone;
        this._overlay = _overlay;
        this._viewContainerRef = _viewContainerRef;
        this._changeDetectorRef = _changeDetectorRef;
        this._el = _el;
        this.differs = differs;
        this.scrollStrategy = scrollStrategy;
        this._onChange = Function.prototype;
        this._onTouched = Function.prototype;
        this._validatorChange = Function.prototype;
        this.minDate = null;
        this.maxDate = null;
        this.dateLimit = null;
        this.showCancel = false;
        this.timePicker = false;
        this.showRanges = false;
        this.timePicker24Hour = false;
        this.timePickerIncrement = 1;
        this.timePickerSeconds = false;
        this._endKey = 'endDate';
        this._startKey = 'startDate';
        this.ranges = {
            'DATERANGE.today': [moment(), moment()],
            'DATERANGE.yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
            'DATERANGE.last_7days': [moment().subtract(6, 'days'), moment()],
            'DATERANGE.last_30days': [moment().subtract(29, 'days'), moment()],
            'DATERANGE.this_month': [moment().startOf('month'), moment().endOf('month')],
            'DATERANGE.last_month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')],
            'DATERANGE.this_year': [moment().startOf('year'), moment().endOf('year')]
        };
        this.oTouchUi = false;
        this.notForChangesProperty = [
            'locale',
            'endKey',
            'startKey'
        ];
        this.onChange = new EventEmitter();
        this.rangeClicked = new EventEmitter();
        this.datesUpdated = new EventEmitter();
        this.drops = 'down';
        this.opens = 'right';
    }
    Object.defineProperty(ODaterangepickerDirective.prototype, "separator", {
        set: function (value) {
            if (value !== null) {
                this._separator = value;
                if (this._locale) {
                    this._locale.separator = value;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ODaterangepickerDirective.prototype, "locale", {
        get: function () {
            return this._locale;
        },
        set: function (value) {
            if (value !== null) {
                this._locale = value;
                if (this._separator) {
                    this._locale.separator = this._separator;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ODaterangepickerDirective.prototype, "startKey", {
        get: function () {
            return this._startKey;
        },
        set: function (value) {
            if (value && value !== null) {
                this._startKey = value;
            }
            else {
                this._startKey = 'startDate';
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ODaterangepickerDirective.prototype, "endKey", {
        get: function () {
            return this._endKey;
        },
        set: function (value) {
            if (value && value !== null) {
                this._endKey = value;
            }
            else {
                this._endKey = 'endDate';
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ODaterangepickerDirective.prototype, "value", {
        get: function () {
            return this._value || null;
        },
        set: function (val) {
            this._value = val;
            this._onChange(val);
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    ODaterangepickerDirective.prototype.initializeListeners = function (instance) {
        var _this = this;
        instance.rangeClicked.asObservable().subscribe(function (range) {
            _this.rangeClicked.emit(range);
        });
        instance.datesUpdated.asObservable().subscribe(function (range) {
            _this.datesUpdated.emit(range);
        });
        instance.choosedDate.asObservable().subscribe(function (change) {
            if (change) {
                var value = {};
                value[_this._startKey] = change.startDate;
                value[_this._endKey] = change.endDate;
                _this.value = value;
                _this.onChange.emit(value);
                if (typeof change.chosenLabel === 'string') {
                    _this._el.nativeElement.value = change.chosenLabel;
                }
            }
        });
        instance.firstMonthDayClass = this.firstMonthDayClass;
        instance.lastMonthDayClass = this.lastMonthDayClass;
        instance.emptyWeekRowClass = this.emptyWeekRowClass;
        instance.firstDayOfNextMonthClass = this.firstDayOfNextMonthClass;
        instance.lastDayOfPreviousMonthClass = this.lastDayOfPreviousMonthClass;
        instance.drops = this.drops;
        instance.opens = this.opens;
        instance.minDate = this.minDate;
        instance.maxDate = this.maxDate;
        instance.locale = this.locale;
        instance.showWeekNumbers = this.showWeekNumbers;
        instance.singleDatePicker = this.singleDatePicker;
        if (this.showRanges) {
            instance.ranges = this.ranges;
            instance.keepCalendarOpeningWithRange = true;
            instance.alwaysShowCalendars = true;
        }
        this.localeDiffer = this.differs.find(this.locale).create();
    };
    ODaterangepickerDirective.prototype.onBlur = function () {
        this._onTouched();
    };
    ODaterangepickerDirective.prototype.open = function () {
        if (!this.oTouchUi) {
            this.openAsPopup();
        }
        else {
            this.openAsDialog();
        }
    };
    ODaterangepickerDirective.prototype.ngOnDestroy = function () {
        this.close();
        if (this._popupRef) {
            this._popupRef.dispose();
            this._popupComponentRef = null;
        }
    };
    ODaterangepickerDirective.prototype.clear = function () {
        this._popupComponentRef.instance.clear();
    };
    ODaterangepickerDirective.prototype.writeValue = function (value) {
        this.setValue(value);
    };
    ODaterangepickerDirective.prototype.registerOnChange = function (fn) {
        this._onChange = fn;
    };
    ODaterangepickerDirective.prototype.registerOnTouched = function (fn) {
        this._onTouched = fn;
    };
    ODaterangepickerDirective.prototype.setValueInDateComponent = function (instance, val) {
        if (val) {
            if (val[this._startKey]) {
                instance.setStartDate(val[this._startKey]);
            }
            if (val[this._endKey]) {
                instance.setEndDate(val[this._endKey]);
            }
            instance.calculateChosenLabel();
            if (instance.chosenLabel) {
                this._el.nativeElement.value = instance.chosenLabel;
            }
        }
        else {
            instance.clear();
        }
    };
    ODaterangepickerDirective.prototype.setValue = function (val) {
        if (val) {
            this.value = val;
        }
    };
    ODaterangepickerDirective.prototype.openAsPopup = function () {
        var _this = this;
        if (!this._calendarPortal) {
            this._calendarPortal = new ComponentPortal(DaterangepickerComponent, this._viewContainerRef);
        }
        if (!this._popupRef) {
            this._createPopup();
        }
        if (!this._popupRef.hasAttached()) {
            this._popupComponentRef = this._popupRef.attach(this._calendarPortal);
            this.initializeListeners(this._popupComponentRef.instance);
            if (this.value) {
                this.setValueInDateComponent(this._popupComponentRef.instance, this.value);
            }
            this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(function () {
                _this._popupRef.updatePosition();
            });
        }
    };
    ODaterangepickerDirective.prototype._createPopup = function () {
        var _this = this;
        var overlayConfig = new OverlayConfig({
            positionStrategy: this._createPopupPositionStrategy(),
            hasBackdrop: true,
            backdropClass: 'mat-overlay-transparent-backdrop',
            direction: 'ltr',
            panelClass: 'o-daterangepicker-popup',
            scrollStrategy: this.scrollStrategy.close()
        });
        this._popupRef = this._overlay.create(overlayConfig);
        this._popupRef.overlayElement.setAttribute('role', 'dialog');
        merge(this._popupRef.backdropClick(), this._popupRef.detachments(), this._popupRef.keydownEvents().pipe(filter(function (event) {
            return event.keyCode === ESCAPE ||
                (_this._el && event.altKey && event.keyCode === UP_ARROW);
        }))).subscribe(function () { return _this.close(); });
    };
    ODaterangepickerDirective.prototype._createPopupPositionStrategy = function () {
        return this._overlay.position()
            .flexibleConnectedTo(this._el)
            .withViewportMargin(8)
            .withPositions([
            {
                originX: 'start',
                originY: 'bottom',
                overlayX: 'start',
                overlayY: 'top'
            },
            {
                originX: 'start',
                originY: 'top',
                overlayX: 'start',
                overlayY: 'bottom'
            },
            {
                originX: 'end',
                originY: 'bottom',
                overlayX: 'end',
                overlayY: 'top'
            },
            {
                originX: 'end',
                originY: 'top',
                overlayX: 'end',
                overlayY: 'bottom'
            }
        ]);
    };
    ODaterangepickerDirective.prototype.openAsDialog = function () {
        var _this = this;
        if (this._dialogRef) {
            this._dialogRef.close();
        }
        this._dialogRef = this._dialog.open(DaterangepickerComponent, {
            direction: 'ltr',
            viewContainerRef: this._viewContainerRef,
            panelClass: 'mat-datepicker-dialog',
        });
        this.initializeListeners(this._dialogRef.componentInstance);
        if (this.value) {
            this.setValueInDateComponent(this._dialogRef.componentInstance, this.value);
        }
        this._dialogRef.afterClosed().subscribe(function () { return _this.close(); });
    };
    ODaterangepickerDirective.prototype.close = function () {
        if (this._popupRef && this._popupRef.hasAttached()) {
            this._popupRef.detach();
        }
        if (this._dialogRef) {
            this._dialogRef.close();
        }
        if (this._calendarPortal && this._calendarPortal.isAttached) {
            this._calendarPortal.detach();
        }
    };
    ODaterangepickerDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'input[o-daterange-input]',
                    host: {
                        '(keyup.esc)': 'close()',
                        '(blur)': 'onBlur()'
                    },
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return ODaterangepickerDirective; }), multi: true
                        }
                    ]
                },] }
    ];
    ODaterangepickerDirective.ctorParameters = function () { return [
        { type: MatDialog },
        { type: NgZone },
        { type: Overlay },
        { type: ViewContainerRef },
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: KeyValueDiffers },
        { type: ScrollStrategyOptions }
    ]; };
    ODaterangepickerDirective.propDecorators = {
        minDate: [{ type: Input }],
        maxDate: [{ type: Input }],
        showCustomRangeLabel: [{ type: Input }],
        linkedCalendars: [{ type: Input }],
        dateLimit: [{ type: Input }],
        singleDatePicker: [{ type: Input }],
        showWeekNumbers: [{ type: Input }],
        showISOWeekNumbers: [{ type: Input }],
        showDropdowns: [{ type: Input }],
        isInvalidDate: [{ type: Input }],
        isCustomDate: [{ type: Input }],
        opens: [{ type: Input }],
        drops: [{ type: Input }],
        lastMonthDayClass: [{ type: Input }],
        emptyWeekRowClass: [{ type: Input }],
        firstDayOfNextMonthClass: [{ type: Input }],
        lastDayOfPreviousMonthClass: [{ type: Input }],
        keepCalendarOpeningWithRange: [{ type: Input }],
        showRangeLabelOnInput: [{ type: Input }],
        showCancel: [{ type: Input }],
        timePicker: [{ type: Input }],
        showRanges: [{ type: Input }],
        timePicker24Hour: [{ type: Input }],
        timePickerIncrement: [{ type: Input }],
        timePickerSeconds: [{ type: Input }],
        separator: [{ type: Input }],
        locale: [{ type: Input }],
        _endKey: [{ type: Input }],
        oTouchUi: [{ type: Input }],
        startKey: [{ type: Input }],
        endKey: [{ type: Input }],
        onChange: [{ type: Output }],
        rangeClicked: [{ type: Output }],
        datesUpdated: [{ type: Output }]
    };
    return ODaterangepickerDirective;
}());
export { ODaterangepickerDirective };
//# sourceMappingURL=data:application/json;base64,