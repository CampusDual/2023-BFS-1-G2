import * as tslib_1 from "tslib";
import { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';
import { Component, ElementRef, forwardRef, Inject, Injector, Optional, ViewChild } from '@angular/core';
import * as _moment from 'moment';
import { InputConverter } from '../../../decorators/input-converter';
import { MomentService } from '../../../services/moment.service';
import { OTranslateService } from '../../../services/translate/o-translate.service';
import { Util } from '../../../util/util';
import { OFormComponent } from '../../form/o-form.component';
import { OFormDataComponent } from '../../o-form-data-component.class';
import { OValueChangeEvent } from '../../o-value-change-event.class';
import { DEFAULT_INPUTS_O_DATE_INPUT } from '../date-input/o-date-input.component';
import { DEFAULT_OUTPUTS_O_TEXT_INPUT } from '../text-input/o-text-input.component';
import { ODaterangepickerDirective } from './o-daterange-input.directive';
export var DEFAULT_OUTPUTS_O_DATERANGE_INPUT = tslib_1.__spread(DEFAULT_OUTPUTS_O_TEXT_INPUT);
export var DEFAULT_INPUTS_O_DATERANGE_INPUT = tslib_1.__spread([
    'separator',
    'showWeekNumbers:show-week-numbers',
    'showRanges:show-ranges',
    'olocale:locale',
    'startKey',
    'endKey',
    'valueType: value-type',
    'mode'
], DEFAULT_INPUTS_O_DATE_INPUT);
var moment = _moment;
var ODateRangeInputComponent = (function (_super) {
    tslib_1.__extends(ODateRangeInputComponent, _super);
    function ODateRangeInputComponent(form, elRef, injector, breakpointObserver) {
        var _this = _super.call(this, form, elRef, injector) || this;
        _this.breakpointObserver = breakpointObserver;
        _this.textInputEnabled = true;
        _this.showWeekNumbers = false;
        _this.oTouchUi = false;
        _this.showRanges = false;
        _this.mode = 'auto';
        _this._startKey = 'startDate';
        _this._endKey = 'endDate';
        _this._valueType = 'timestamp';
        _this._separator = ' - ';
        _this.oformat = 'L';
        _this.oTranslate = _this.injector.get(OTranslateService);
        _this.momentSrv = _this.injector.get(MomentService);
        if (!_this.olocale) {
            _this.olocale = _this.momentSrv.getLocale();
            moment.locale(_this.olocale);
        }
        _this._localeOptions = {
            direction: 'ltr',
            separator: ' - ',
            weekLabel: _this.oTranslate.get('DATERANGE.W'),
            applyLabel: _this.oTranslate.get('DATERANGE.APPLYLABEL'),
            cancelLabel: _this.oTranslate.get('CANCEL'),
            customRangeLabel: 'Custom range',
            daysOfWeek: moment.localeData().weekdaysMin(),
            monthNames: moment.localeData().monthsShort(),
            firstDay: moment.localeData().firstDayOfWeek(),
            format: 'L'
        };
        return _this;
    }
    Object.defineProperty(ODateRangeInputComponent.prototype, "oMinDate", {
        get: function () {
            return this._oMinDate;
        },
        set: function (value) {
            this._oMinDate = moment(value, this.oformat);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ODateRangeInputComponent.prototype, "oMaxDate", {
        get: function () {
            return this._oMaxDate;
        },
        set: function (value) {
            this._oMaxDate = moment(value, this.oformat);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ODateRangeInputComponent.prototype, "startKey", {
        get: function () {
            return this._startKey;
        },
        set: function (value) {
            this._startKey = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ODateRangeInputComponent.prototype, "endKey", {
        get: function () {
            return this._endKey;
        },
        set: function (value) {
            this._endKey = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ODateRangeInputComponent.prototype, "separator", {
        get: function () {
            return this._separator;
        },
        set: function (value) {
            this._separator = value;
            if (this.getFormControl() && this.getFormControl().value) {
                this.updateElement();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ODateRangeInputComponent.prototype, "showClearButton", {
        get: function () {
            return this.clearButton && !this.isReadOnly && this.enabled && this.matInputRef.nativeElement.value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ODateRangeInputComponent.prototype, "localeOptions", {
        get: function () {
            return this._localeOptions;
        },
        enumerable: true,
        configurable: true
    });
    ODateRangeInputComponent.prototype.isMobileMode = function () {
        return this.mode === 'mobile' || (this.mode === 'auto' && this.breakpointObserver.isMatched(Breakpoints.Handset));
    };
    ODateRangeInputComponent.prototype.isDesktopMode = function () {
        return this.mode === 'desktop' || (this.mode === 'auto' && !this.breakpointObserver.isMatched(Breakpoints.Handset));
    };
    ODateRangeInputComponent.prototype.ngOnInit = function () {
        _super.prototype.ngOnInit.call(this);
        if (this.oformat) {
            this._localeOptions.format = this.oformat;
        }
    };
    ODateRangeInputComponent.prototype.openPicker = function () {
        this.pickerDirective.open();
    };
    ODateRangeInputComponent.prototype.onChangeEvent = function (event) {
        var objectValue;
        if (event instanceof Event) {
            var value = event.target.value;
            if (value !== '') {
                objectValue = this.getDateRangeToString(value);
            }
        }
        else {
            objectValue = event;
        }
        this.setValue(objectValue, {
            changeType: OValueChangeEvent.USER_CHANGE,
            emitEvent: false,
            emitModelToViewChange: false
        });
    };
    ODateRangeInputComponent.prototype.setValue = function (val, options, setDirty) {
        if (options === void 0) { options = {}; }
        if (setDirty === void 0) { setDirty = false; }
        _super.prototype.setValue.call(this, val, options, setDirty);
        this.updateElement();
    };
    ODateRangeInputComponent.prototype.onClickClearValue = function (e) {
        _super.prototype.onClickClearValue.call(this, e);
        this.pickerDirective.value = undefined;
        this.pickerDirective.datesUpdated.emit();
    };
    ODateRangeInputComponent.prototype.datesUpdated = function (range) {
        this.pickerDirective.close();
        this.setValue(range, {
            changeType: OValueChangeEvent.USER_CHANGE,
            emitEvent: false,
            emitModelToViewChange: false
        });
    };
    ODateRangeInputComponent.prototype.setData = function (newValue) {
        _super.prototype.setData.call(this, newValue);
        this.pickerDirective.datesUpdated.emit(newValue);
        this.updateElement();
    };
    ODateRangeInputComponent.prototype.updateElement = function () {
        var chosenLabel;
        if (Util.isDefined(this.value) && Util.isDefined(this.value.value) && !this.isObjectDataRangeNull(this.value)) {
            if (this.value.value[this.pickerDirective.startKey] && this.value.value[this.pickerDirective.endKey]) {
                this.value.value[this.pickerDirective.startKey] = this.ensureDateRangeValue(this.value.value[this.pickerDirective.startKey], this._valueType);
                this.value.value[this.pickerDirective.endKey] = this.ensureDateRangeValue(this.value.value[this.pickerDirective.endKey], this._valueType);
                chosenLabel = this.value.value[this.pickerDirective.startKey].format(this.oformat) +
                    this.separator + this.value.value[this.pickerDirective.endKey].format(this.oformat);
            }
            else {
                chosenLabel = null;
            }
        }
        else {
            chosenLabel = null;
            this.pickerDirective.value = undefined;
        }
        this.pickerDirective._el.nativeElement.value = chosenLabel;
    };
    ODateRangeInputComponent.prototype.getDateRangeToString = function (valueToString) {
        var value = {};
        var range = valueToString.split(this.separator);
        value[this._startKey] = moment(range[0].trim(), this.oformat);
        value[this._endKey] = moment(range[1].trim(), this.oformat);
        return value;
    };
    ODateRangeInputComponent.prototype.resolveValidators = function () {
        var validators = _super.prototype.resolveValidators.call(this);
        validators.push(this.rangeDateValidator.bind(this));
        if (Util.isDefined(this._oMinDate)) {
            validators.push(this.minDateValidator.bind(this));
        }
        if (Util.isDefined(this._oMaxDate)) {
            validators.push(this.maxDateValidator.bind(this));
        }
        validators.push(this.parseDateValidator.bind(this));
        return validators;
    };
    ODateRangeInputComponent.prototype.isObjectDataRangeNull = function (objectValue) {
        return objectValue !== null && objectValue.value !== null &&
            !Util.isDefined(objectValue.value[this.pickerDirective.startKey]) &&
            !Util.isDefined(objectValue.value[this.pickerDirective.endKey]);
    };
    ODateRangeInputComponent.prototype.rangeDateValidator = function (control) {
        if ((control.value instanceof Object)
            && !this.isObjectDataRangeNull(control) && control.value[this._endKey].isSameOrBefore(control.value[this._startKey])) {
            return {
                dateRange: true
            };
        }
        return {};
    };
    ODateRangeInputComponent.prototype.minDateValidator = function (control) {
        var mindate = moment(this._oMinDate);
        if ((control.value instanceof Object)
            && !this.isObjectDataRangeNull(control) && control.value[this._startKey].isBefore(mindate)) {
            return {
                dateRangeMin: {
                    dateMin: mindate.format(this.oformat)
                }
            };
        }
        return {};
    };
    ODateRangeInputComponent.prototype.maxDateValidator = function (control) {
        var maxdate = moment(this._oMaxDate);
        if ((control.value instanceof Object)
            && !this.isObjectDataRangeNull(control) && control.value[this._endKey].isAfter(maxdate)) {
            return {
                dateRangeMax: {
                    dateMax: maxdate.format(this.oformat)
                }
            };
        }
        return {};
    };
    ODateRangeInputComponent.prototype.parseDateValidator = function (control) {
        if ((control.value instanceof Object)
            && !this.isObjectDataRangeNull(control)
            && ((control.value[this._startKey] && !control.value[this._startKey].isValid())
                || (control.value[this._endKey] && !control.value[this._endKey].isValid()))) {
            return {
                dateRangeParse: {
                    format: this.oformat + this._localeOptions.separator + this.oformat
                }
            };
        }
        return {};
    };
    ODateRangeInputComponent.prototype.ensureDateRangeValue = function (val, valueType) {
        if (!Util.isDefined(val)) {
            return val;
        }
        var result = val;
        if (!moment.isMoment(val)) {
            switch (valueType) {
                case 'string':
                case 'date':
                    if ((val instanceof Date) || typeof val === 'string') {
                        var dateString = moment(val).format('YYYY-MM-DDThh:mm') + 'Z';
                        var q = moment(dateString);
                        if (q.isValid()) {
                            result = q;
                        }
                        else {
                            result = undefined;
                        }
                    }
                    else {
                        result = undefined;
                    }
                    break;
                case 'timestamp':
                    if (typeof val === 'number') {
                        var dateString = moment.unix(val).format('YYYY-MM-DDThh:mm') + 'Z';
                        var t = moment(dateString);
                        if (t.isValid()) {
                            result = t;
                        }
                        else {
                            result = undefined;
                        }
                    }
                    else {
                        result = val;
                    }
                    break;
                case 'iso-8601':
                    var m = moment(val);
                    if (m.isValid()) {
                        result = m;
                    }
                    else {
                        result = undefined;
                    }
                    break;
                default:
                    break;
            }
        }
        if (!Util.isDefined(result)) {
            console.warn("ODateRangeInputComponent value (" + val + ") is not consistent with value-type (" + valueType + ")");
        }
        return result;
    };
    Object.defineProperty(ODateRangeInputComponent.prototype, "valueType", {
        get: function () {
            return this._valueType;
        },
        set: function (val) {
            this._valueType = Util.convertToODateValueType(val);
        },
        enumerable: true,
        configurable: true
    });
    ODateRangeInputComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-daterange-input',
                    template: "<div fxLayout=\"row\" fxLayoutAlign=\"space-between center\" [formGroup]=\"getFormGroup()\" [matTooltip]=\"tooltip\" [matTooltipClass]=\"tooltipClass\"\n  [matTooltipPosition]=\"tooltipPosition\" [matTooltipShowDelay]=\"tooltipShowDelay\" [matTooltipHideDelay]=\"tooltipHideDelay\">\n\n  <mat-form-field [appearance]=\"appearance\" [floatLabel]=\"floatLabel\" [hideRequiredMarker]=\"hideRequiredMarker\" [class.custom-width]=\"hasCustomWidth\"\n    class=\"icon-field\" fxFlexFill>\n    <mat-label *ngIf=\"labelVisible\">{{ olabel | oTranslate }}</mat-label>\n    <input #matInputRef matInput type=\"text\" o-daterange-input [id]=\"getAttribute()\" [formControlName]=\"getAttribute()\" [required]=\"isRequired\"\n      [placeholder]=\"placeHolder\" [readonly]=\"isReadOnly || !textInputEnabled\" showDropdowns=\"true\" showCancel=\"true\" [showRanges]=\"showRanges\"\n      (datesUpdated)=\"datesUpdated($event)\" [oTouchUi]=\"oTouchUi\" [minDate]=\"oMinDate\" [maxDate]=\"oMaxDate\" (focus)=\"innerOnFocus($event)\"\n      (blur)=\"innerOnBlur($event)\" (change)=\"onChangeEvent($event)\" [locale]=\"localeOptions\" [separator]=\"separator\" [startKey]=\"startKey\"\n      [endKey]=\"endKey\" [showWeekNumbers]=\"showWeekNumbers\" [singleDatePicker]=\"isMobileMode()\">\n    <button type=\"button\" matSuffix mat-icon-button (click)=\"openPicker()\" [disabled]=\"isReadOnly || !enabled\">\n      <mat-icon>today</mat-icon>\n    </button>\n\n    <button type=\"button\" *ngIf=\"showClearButton\" matSuffix mat-icon-button (click)=\"onClickClearValue($event)\" [disabled]=\"isReadOnly || !enabled\">\n      <mat-icon svgIcon=\"ontimize:close\"></mat-icon>\n    </button>\n\n    <mat-error *oMatError=\"hasError('required')\">\n      {{ 'FORM_VALIDATION.REQUIRED' | oTranslate }}\n    </mat-error>\n    <mat-error *oMatError=\"hasError('dateRange')\">\n      {{ 'FORM_VALIDATION.DATERANGE_INVALID' | oTranslate }}\n    </mat-error>\n    <mat-error *oMatError=\"hasError('dateRangeParse')\">\n      {{ 'FORM_VALIDATION.DATE_PARSE' | oTranslate }} : {{ getErrorValue('dateRangeParse', 'format') }}\n    </mat-error>\n    <mat-error *oMatError=\"hasError('dateRangeMin')\">\n      {{ 'FORM_VALIDATION.DATERANGE_MIN' | oTranslate }} : {{ getErrorValue('dateRangeMin', 'dateMin') }}\n    </mat-error>\n    <mat-error *oMatError=\"hasError('dateRangeMax')\">\n      {{ 'FORM_VALIDATION.DATERANGE_MAX' | oTranslate }} : {{ getErrorValue('dateRangeMax', 'dateMax') }}\n    </mat-error>\n    <mat-error *ngFor=\"let oError of getActiveOErrors()\">\n      {{ oError.text | oTranslate }}\n    </mat-error>\n  </mat-form-field>\n</div>\n",
                    outputs: DEFAULT_OUTPUTS_O_DATERANGE_INPUT,
                    inputs: DEFAULT_INPUTS_O_DATERANGE_INPUT,
                    styles: [""]
                }] }
    ];
    ODateRangeInputComponent.ctorParameters = function () { return [
        { type: OFormComponent, decorators: [{ type: Optional }, { type: Inject, args: [forwardRef(function () { return OFormComponent; }),] }] },
        { type: ElementRef },
        { type: Injector },
        { type: BreakpointObserver }
    ]; };
    ODateRangeInputComponent.propDecorators = {
        pickerDirective: [{ type: ViewChild, args: [ODaterangepickerDirective, { static: true },] }],
        matInputRef: [{ type: ViewChild, args: ['matInputRef', { read: ElementRef, static: true },] }]
    };
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], ODateRangeInputComponent.prototype, "textInputEnabled", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], ODateRangeInputComponent.prototype, "showWeekNumbers", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], ODateRangeInputComponent.prototype, "oTouchUi", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], ODateRangeInputComponent.prototype, "showRanges", void 0);
    return ODateRangeInputComponent;
}(OFormDataComponent));
export { ODateRangeInputComponent };
//# sourceMappingURL=data:application/json;base64,