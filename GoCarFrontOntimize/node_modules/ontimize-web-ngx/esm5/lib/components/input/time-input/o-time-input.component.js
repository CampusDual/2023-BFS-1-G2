import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Component, ElementRef, forwardRef, Inject, Injector, Optional, ViewChild, ViewEncapsulation } from '@angular/core';
import { FormGroup } from '@angular/forms';
import moment from 'moment';
import { merge, Subscription } from 'rxjs';
import { InputConverter } from '../../../decorators/input-converter';
import { Util } from '../../../util/util';
import { OFormValue } from '../../form/o-form-value';
import { OFormComponent } from '../../form/o-form.component';
import { DEFAULT_INPUTS_O_FORM_DATA_COMPONENT, DEFAULT_OUTPUTS_O_FORM_DATA_COMPONENT, OFormDataComponent } from '../../o-form-data-component.class';
import { OValueChangeEvent } from '../../o-value-change-event.class';
import { ODateInputComponent } from '../date-input/o-date-input.component';
import { OHourInputComponent } from '../hour-input/o-hour-input.component';
export var DEFAULT_INPUTS_O_TIME_INPUT = tslib_1.__spread([
    'valueType: value-type',
    'oformat: value-format'
], DEFAULT_INPUTS_O_FORM_DATA_COMPONENT, [
    'oDateFormat: date-format',
    'oDateLocale: date-locale',
    'oDateStartView: date-start-view',
    'oDateMinDate: date-min',
    'oDateMaxDate: date-max',
    'oDateTouchUi: date-touch-ui',
    'oDateStartAt: date-start-at',
    'oDateFilterDate: date-filter-date',
    'oDateTextInputEnabled: date-text-input-enabled',
    'oHourFormat: hour-format',
    'oHourMin: hour-min',
    'oHourMax: hour-max',
    'oHourTextInputEnabled: hour-text-input-enabled',
    'oHourPlaceholder: hour-placeholder',
    'oDatePlaceholder: date-placeholder'
]);
export var DEFAULT_OUTPUTS_O_TIME_INPUT = tslib_1.__spread(DEFAULT_OUTPUTS_O_FORM_DATA_COMPONENT);
var OTimeInputComponent = (function (_super) {
    tslib_1.__extends(OTimeInputComponent, _super);
    function OTimeInputComponent(form, elRef, injector, cd) {
        var _this = _super.call(this, form, elRef, injector) || this;
        _this.cd = cd;
        _this.oDateFormat = 'L';
        _this.oDateStartView = 'month';
        _this.oDateTextInputEnabled = true;
        _this.oHourFormat = 24;
        _this.oHourTextInputEnabled = true;
        _this.oHourPlaceholder = '';
        _this.oDatePlaceholder = '';
        _this.oformat = 'L';
        _this._valueType = 'timestamp';
        _this.formGroup = new FormGroup({});
        _this.subscription = new Subscription();
        _this.dateAttr = 'dateInput';
        _this.hourAttr = 'hourInput';
        _this._defaultSQLTypeKey = 'DATE';
        return _this;
    }
    OTimeInputComponent.prototype.ngOnInit = function () {
        var _this = this;
        _super.prototype.ngOnInit.call(this);
        this.dateAttr += '_' + this.oattr;
        this.hourAttr += '_' + this.oattr;
        this.subscription.add(merge(this.dateInput.onValueChange, this.hourInput.onValueChange).subscribe(function (event) {
            if (event.isUserChange()) {
                _this.updateComponentValue();
                var newValue = _this._fControl.value;
                _this.emitOnValueChange(OValueChangeEvent.USER_CHANGE, newValue, _this.oldValue);
                _this.oldValue = newValue;
            }
        }));
    };
    OTimeInputComponent.prototype.ngAfterViewInit = function () {
        this.modifyFormControls();
        _super.prototype.ngAfterViewInit.call(this);
        this.registerFormControls();
        this.setInnerComponentsData();
    };
    OTimeInputComponent.prototype.ngOnDestroy = function () {
        this.subscription.unsubscribe();
    };
    OTimeInputComponent.prototype.createFormControl = function (cfg, validators) {
        this._fControl = _super.prototype.createFormControl.call(this, cfg, validators);
        this._fControl.fControlChildren = [this.dateInput, this.hourInput];
        return this._fControl;
    };
    OTimeInputComponent.prototype.onFormControlChange = function (value) {
        _super.prototype.onFormControlChange.call(this, value);
        this.setInnerComponentsData();
    };
    OTimeInputComponent.prototype.setValue = function (newValue, options) {
        var changed = this.oldValue !== newValue;
        _super.prototype.setValue.call(this, newValue, options);
        if (changed) {
            this.setInnerComponentsData();
        }
    };
    OTimeInputComponent.prototype.onClickClearValue = function (event) {
        event.stopPropagation();
        event.preventDefault();
        this.blockGroupValueChanges = true;
        this.clearValue();
        this.blockGroupValueChanges = false;
    };
    OTimeInputComponent.prototype.setInnerComponentsData = function () {
        var dateValue;
        var hourValue;
        if (Util.isDefined(this.value) && Util.isDefined(this.value.value)) {
            var momentD = moment(this.value.value);
            if (momentD.isValid()) {
                dateValue = momentD.clone().startOf('day').valueOf();
                hourValue = momentD.clone().valueOf() - dateValue;
            }
        }
        if (this.dateInput) {
            this.dateInput.setValue(dateValue);
        }
        if (this.hourInput) {
            this.hourInput.setTimestampValue(hourValue);
        }
        this.cd.detectChanges();
    };
    OTimeInputComponent.prototype.updateComponentValue = function () {
        if (!this.value) {
            this.value = new OFormValue();
        }
        var timeValue;
        var values = this.formGroup.getRawValue();
        var mDate = (values[this.dateAttr] ? moment(values[this.dateAttr]) : moment()).startOf('day');
        var mHour = moment(values[this.hourAttr], this.hourInput.formatString);
        timeValue = mDate.clone()
            .set('hour', mHour.get('hour'))
            .set('minute', mHour.get('minutes'))
            .valueOf();
        this.setFormValue(timeValue);
    };
    OTimeInputComponent.prototype.modifyFormControls = function () {
        var _this = this;
        if (this.dateInput) {
            this.dateInput.getFormGroup = function () {
                return _this.formGroup;
            };
        }
        if (this.hourInput) {
            this.hourInput.getFormGroup = function () {
                return _this.formGroup;
            };
        }
        if (this.form) {
            this.form.formGroup.removeControl(this.dateAttr);
            this.form.formGroup.removeControl(this.hourAttr);
        }
    };
    OTimeInputComponent.prototype.registerFormControls = function () {
        if (this.dateInput && this.dateInput.getFormControl()) {
            this.formGroup.registerControl(this.dateAttr, this.dateInput.getFormControl());
        }
        if (this.hourInput) {
            if (this.hourInput.getFormControl()) {
                this.formGroup.registerControl(this.hourAttr, this.hourInput.getFormControl());
            }
        }
    };
    Object.defineProperty(OTimeInputComponent.prototype, "valueType", {
        get: function () {
            return this._valueType;
        },
        set: function (val) {
            this._valueType = Util.convertToODateValueType(val);
        },
        enumerable: true,
        configurable: true
    });
    OTimeInputComponent.prototype.ensureOFormValue = function (arg) {
        var value = arg;
        if (arg instanceof OFormValue) {
            value = arg.value;
        }
        value = Util.parseByValueType(value, this.valueType, this.oformat);
        _super.prototype.ensureOFormValue.call(this, value);
    };
    OTimeInputComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-time-input',
                    template: "<div [formGroup]=\"getFormGroup()\" [matTooltip]=\"tooltip\" [matTooltipClass]=\"tooltipClass\" [matTooltipPosition]=\"tooltipPosition\"\n  [matTooltipShowDelay]=\"tooltipShowDelay\" [matTooltipHideDelay]=\"tooltipHideDelay\">\n  <div class=\"mat-form-field mat-form-field-appearance-legacy\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\" fxLayoutGap=\"8px\">\n    <o-date-input #dateInput fxFlex [attr]=\"dateAttr\" [read-only]=\"readOnly\" [enabled]=\"enabled\" [required]=\"isRequired\" [label]=\"olabel\"\n      clear-button=\"no\" automatic-registering=\"no\" automatic-binding=\"no\" (onFocus)=\"innerOnFocus($event)\" (onBlur)=\"innerOnBlur($event)\"\n      [format]=\"oDateFormat\" [locale]=\"oDateLocale\" [start-view]=\"oDateStartView\" [min]=\"oDateMinDate\" [max]=\"oDateMaxDate\" [touch-ui]=\"oDateTouchUi\"\n      [start-at]=\"oDateStartAt\" [filter-date]=\"oDateFilterDate\" [text-input-enabled]=\"oDateTextInputEnabled\" [placeholder]=\"oDatePlaceholder\"\n      [label-visible]=\"labelVisible\" [hide-required-marker]=\"hideRequiredMarker\" [select-all-on-click]=\"selectAllOnClick\">\n    </o-date-input>\n\n    <span class=\"separator\">&ndash;</span>\n\n    <o-hour-input #hourInput fxFlex [attr]=\"hourAttr\" [read-only]=\"readOnly\" [enabled]=\"enabled\" [required]=\"isRequired\" clear-button=\"no\"\n      automatic-registering=\"no\" automatic-binding=\"no\" (onFocus)=\"innerOnFocus($event)\" (onBlur)=\"innerOnBlur($event)\" [format]=\"oHourFormat\"\n      [text-input-enabled]=\"oHourTextInputEnabled\" [min]=\"oHourMin\" [max]=\"oHourMax\" hide-required-marker=\"yes\" label-visible=\"no\"\n      [placeholder]=\"oHourPlaceholder\" [select-all-on-click]=\"selectAllOnClick\">\n    </o-hour-input>\n\n    <button class=\"mat-form-field-suffix\" type=\"button\" *ngIf=\"showClearButton\" matSuffix mat-icon-button (click)=\"onClickClearValue($event)\">\n      <mat-icon svgIcon=\"ontimize:close\"></mat-icon>\n    </button>\n  </div>\n\n  <mat-error *ngFor=\"let oError of getActiveOErrors()\">\n    {{ oError.text | oTranslate }}\n  </mat-error>\n</div>\n",
                    inputs: DEFAULT_INPUTS_O_TIME_INPUT,
                    outputs: DEFAULT_OUTPUTS_O_TIME_INPUT,
                    encapsulation: ViewEncapsulation.None,
                    host: {
                        '[class.o-time-input]': 'true'
                    },
                    styles: [".o-time-input .separator{cursor:default}.o-time-input .mat-form-field.icon-field:not(.custom-width).icon-field-1-suffix .mat-form-field-infix{width:auto}"]
                }] }
    ];
    OTimeInputComponent.ctorParameters = function () { return [
        { type: OFormComponent, decorators: [{ type: Optional }, { type: Inject, args: [forwardRef(function () { return OFormComponent; }),] }] },
        { type: ElementRef },
        { type: Injector },
        { type: ChangeDetectorRef }
    ]; };
    OTimeInputComponent.propDecorators = {
        dateInput: [{ type: ViewChild, args: ['dateInput', { static: true },] }],
        hourInput: [{ type: ViewChild, args: ['hourInput', { static: true },] }]
    };
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OTimeInputComponent.prototype, "oDateTouchUi", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OTimeInputComponent.prototype, "oDateTextInputEnabled", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OTimeInputComponent.prototype, "oHourTextInputEnabled", void 0);
    return OTimeInputComponent;
}(OFormDataComponent));
export { OTimeInputComponent };
//# sourceMappingURL=data:application/json;base64,