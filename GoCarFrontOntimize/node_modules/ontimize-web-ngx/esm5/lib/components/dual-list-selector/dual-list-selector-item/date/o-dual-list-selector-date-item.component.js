import { Component, ChangeDetectionStrategy } from "@angular/core";
export var DEFAULT_DUAL_LIST_SELECTOR_DATE_ITEM = [
    'item',
    'groupedDateColumns: grouped-date-columns',
];
var ODualListSelectorDateItemComponent = (function () {
    function ODualListSelectorDateItemComponent() {
        this.dateTypes = [
            { value: 'MONTH', viewValue: 'DUAL_LIST_SELECTOR.GROUP_BY_MONTH' },
            { value: 'YEAR_MONTH', viewValue: 'DUAL_LIST_SELECTOR.GROUP_BY_YEAR_MONTH' },
            { value: 'YEAR', viewValue: 'DUAL_LIST_SELECTOR.GROUP_BY_YEAR' },
            { value: 'YEAR_MONTH_DAY', viewValue: 'DUAL_LIST_SELECTOR.GROUP_BY_YEAR_MONTH_DAY' }
        ];
        this.item = "";
    }
    ODualListSelectorDateItemComponent.prototype.onSelectionChange = function (event, itemSelected) {
        var value = event.value;
        var attr = itemSelected;
        var index = this.groupedDateColumns.findIndex(function (column) { return column.attr == attr; });
        if (index != -1) {
            this.groupedDateColumns.splice(index, 1);
        }
        this.groupedDateColumns.push({ "attr": attr, "type": value });
    };
    ODualListSelectorDateItemComponent.prototype.getSelectValue = function () {
        var _this = this;
        var index = this.groupedDateColumns.findIndex(function (column) { return column.attr == _this.item; });
        return index != -1 ? this.groupedDateColumns[index].type : 'YEAR_MONTH_DAY';
    };
    ODualListSelectorDateItemComponent.prototype.getViewValue = function () {
        var value = this.getSelectValue();
        var indexFindValue = this.dateTypes.findIndex(function (type) { return type.value == value; });
        return indexFindValue > -1 ? this.dateTypes[indexFindValue].viewValue : 'DUAL_LIST_SELECTOR.GROUP_BY_YEAR_MONTH_DAY';
    };
    ODualListSelectorDateItemComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-dual-list-selector-date-item',
                    template: "<mat-select [value]=\"getSelectValue()\" (selectionChange)=\"onSelectionChange($event,item)\" required>\n  <mat-select-trigger>\n    {{item | oTranslate}} ({{getViewValue() | oTranslate}})\n  </mat-select-trigger>\n  <mat-option *ngFor=\"let type of dateTypes\" [value]=\"type.value\">\n    {{type.viewValue | oTranslate}}\n  </mat-option>\n</mat-select>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    inputs: DEFAULT_DUAL_LIST_SELECTOR_DATE_ITEM
                }] }
    ];
    return ODualListSelectorDateItemComponent;
}());
export { ODualListSelectorDateItemComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1kdWFsLWxpc3Qtc2VsZWN0b3ItZGF0ZS1pdGVtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL29udGltaXplLXdlYi1uZ3gvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9kdWFsLWxpc3Qtc2VsZWN0b3IvZHVhbC1saXN0LXNlbGVjdG9yLWl0ZW0vZGF0ZS9vLWR1YWwtbGlzdC1zZWxlY3Rvci1kYXRlLWl0ZW0uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHbkUsTUFBTSxDQUFDLElBQU0sb0NBQW9DLEdBQUc7SUFDbEQsTUFBTTtJQUNOLDBDQUEwQztDQUMzQyxDQUFDO0FBQ0Y7SUFBQTtRQU9TLGNBQVMsR0FBRztZQUNqQixFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLG1DQUFtQyxFQUFFO1lBQ2xFLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsd0NBQXdDLEVBQUU7WUFDNUUsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxrQ0FBa0MsRUFBRTtZQUNoRSxFQUFFLEtBQUssRUFBRSxnQkFBZ0IsRUFBRSxTQUFTLEVBQUUsNENBQTRDLEVBQUU7U0FDckYsQ0FBQztRQUNLLFNBQUksR0FBVyxFQUFFLENBQUM7SUF5QjNCLENBQUM7SUFyQkMsOERBQWlCLEdBQWpCLFVBQWtCLEtBQXNCLEVBQUUsWUFBaUI7UUFDekQsSUFBSSxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztRQUN4QixJQUFJLElBQUksR0FBRyxZQUFZLENBQUM7UUFDeEIsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxVQUFBLE1BQU0sSUFBSSxPQUFBLE1BQU0sQ0FBQyxJQUFJLElBQUksSUFBSSxFQUFuQixDQUFtQixDQUFDLENBQUM7UUFDN0UsSUFBSSxLQUFLLElBQUksQ0FBQyxDQUFDLEVBQUU7WUFDZixJQUFJLENBQUMsa0JBQWtCLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztTQUMxQztRQUNELElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFBO0lBQy9ELENBQUM7SUFFRCwyREFBYyxHQUFkO1FBQUEsaUJBR0M7UUFGQyxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsU0FBUyxDQUFDLFVBQUEsTUFBTSxJQUFJLE9BQUEsTUFBTSxDQUFDLElBQUksSUFBSSxLQUFJLENBQUMsSUFBSSxFQUF4QixDQUF3QixDQUFDLENBQUM7UUFDbEYsT0FBTyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFBO0lBQzdFLENBQUM7SUFFRCx5REFBWSxHQUFaO1FBQ0UsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ2xDLElBQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLFVBQUEsSUFBSSxJQUFJLE9BQUEsSUFBSSxDQUFDLEtBQUssSUFBSSxLQUFLLEVBQW5CLENBQW1CLENBQUMsQ0FBQztRQUM3RSxPQUFPLGNBQWMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLDRDQUE0QyxDQUFDO0lBQ3ZILENBQUM7O2dCQXBDRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGdDQUFnQztvQkFDMUMsZ1hBQThEO29CQUM5RCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsTUFBTSxFQUFFLG9DQUFvQztpQkFDN0M7O0lBaUNELHlDQUFDO0NBQUEsQUF0Q0QsSUFzQ0M7U0FoQ1ksa0NBQWtDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBNYXRTZWxlY3RDaGFuZ2UgfSBmcm9tIFwiQGFuZ3VsYXIvbWF0ZXJpYWxcIjtcbmltcG9ydCB7IE9Hcm91cGVkQ29sdW1uVHlwZXMgfSBmcm9tIFwiLi4vLi4vLi4vLi4vdHlwZXMvby1ncm91cGVkLWNvbHVtbi10eXBlcy50eXBlXCI7XG5leHBvcnQgY29uc3QgREVGQVVMVF9EVUFMX0xJU1RfU0VMRUNUT1JfREFURV9JVEVNID0gW1xuICAnaXRlbScsXG4gICdncm91cGVkRGF0ZUNvbHVtbnM6IGdyb3VwZWQtZGF0ZS1jb2x1bW5zJyxcbl07XG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdvLWR1YWwtbGlzdC1zZWxlY3Rvci1kYXRlLWl0ZW0nLFxuICB0ZW1wbGF0ZVVybDogJy4vby1kdWFsLWxpc3Qtc2VsZWN0b3ItZGF0ZS1pdGVtLmNvbXBvbmVudC5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIGlucHV0czogREVGQVVMVF9EVUFMX0xJU1RfU0VMRUNUT1JfREFURV9JVEVNXG59KVxuZXhwb3J0IGNsYXNzIE9EdWFsTGlzdFNlbGVjdG9yRGF0ZUl0ZW1Db21wb25lbnQge1xuICBwdWJsaWMgZGF0ZVR5cGVzID0gW1xuICAgIHsgdmFsdWU6ICdNT05USCcsIHZpZXdWYWx1ZTogJ0RVQUxfTElTVF9TRUxFQ1RPUi5HUk9VUF9CWV9NT05USCcgfSxcbiAgICB7IHZhbHVlOiAnWUVBUl9NT05USCcsIHZpZXdWYWx1ZTogJ0RVQUxfTElTVF9TRUxFQ1RPUi5HUk9VUF9CWV9ZRUFSX01PTlRIJyB9LFxuICAgIHsgdmFsdWU6ICdZRUFSJywgdmlld1ZhbHVlOiAnRFVBTF9MSVNUX1NFTEVDVE9SLkdST1VQX0JZX1lFQVInIH0sXG4gICAgeyB2YWx1ZTogJ1lFQVJfTU9OVEhfREFZJywgdmlld1ZhbHVlOiAnRFVBTF9MSVNUX1NFTEVDVE9SLkdST1VQX0JZX1lFQVJfTU9OVEhfREFZJyB9XG4gIF07XG4gIHB1YmxpYyBpdGVtOiBzdHJpbmcgPSBcIlwiO1xuICBwdWJsaWMgZ3JvdXBlZERhdGVDb2x1bW5zOiBPR3JvdXBlZENvbHVtblR5cGVzW107XG5cblxuICBvblNlbGVjdGlvbkNoYW5nZShldmVudDogTWF0U2VsZWN0Q2hhbmdlLCBpdGVtU2VsZWN0ZWQ6IGFueSkge1xuICAgIGxldCB2YWx1ZSA9IGV2ZW50LnZhbHVlO1xuICAgIGxldCBhdHRyID0gaXRlbVNlbGVjdGVkO1xuICAgIGxldCBpbmRleCA9IHRoaXMuZ3JvdXBlZERhdGVDb2x1bW5zLmZpbmRJbmRleChjb2x1bW4gPT4gY29sdW1uLmF0dHIgPT0gYXR0cik7XG4gICAgaWYgKGluZGV4ICE9IC0xKSB7XG4gICAgICB0aGlzLmdyb3VwZWREYXRlQ29sdW1ucy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbiAgICB0aGlzLmdyb3VwZWREYXRlQ29sdW1ucy5wdXNoKHsgXCJhdHRyXCI6IGF0dHIsIFwidHlwZVwiOiB2YWx1ZSB9KVxuICB9XG5cbiAgZ2V0U2VsZWN0VmFsdWUoKTogc3RyaW5nIHtcbiAgICBsZXQgaW5kZXggPSB0aGlzLmdyb3VwZWREYXRlQ29sdW1ucy5maW5kSW5kZXgoY29sdW1uID0+IGNvbHVtbi5hdHRyID09IHRoaXMuaXRlbSk7XG4gICAgcmV0dXJuIGluZGV4ICE9IC0xID8gdGhpcy5ncm91cGVkRGF0ZUNvbHVtbnNbaW5kZXhdLnR5cGUgOiAnWUVBUl9NT05USF9EQVknXG4gIH1cblxuICBnZXRWaWV3VmFsdWUoKTogc3RyaW5nIHtcbiAgICBsZXQgdmFsdWUgPSB0aGlzLmdldFNlbGVjdFZhbHVlKCk7XG4gICAgY29uc3QgaW5kZXhGaW5kVmFsdWUgPSB0aGlzLmRhdGVUeXBlcy5maW5kSW5kZXgodHlwZSA9PiB0eXBlLnZhbHVlID09IHZhbHVlKTtcbiAgICByZXR1cm4gaW5kZXhGaW5kVmFsdWUgPiAtMSA/IHRoaXMuZGF0ZVR5cGVzW2luZGV4RmluZFZhbHVlXS52aWV3VmFsdWUgOiAnRFVBTF9MSVNUX1NFTEVDVE9SLkdST1VQX0JZX1lFQVJfTU9OVEhfREFZJztcbiAgfVxuXG59Il19