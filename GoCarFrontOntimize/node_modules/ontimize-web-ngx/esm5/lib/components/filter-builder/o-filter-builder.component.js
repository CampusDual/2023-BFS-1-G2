import * as tslib_1 from "tslib";
import { Component, EventEmitter, forwardRef, Inject, Injector } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
import { OFormComponent } from '../../components/form/o-form.component';
import { InputConverter } from '../../decorators/input-converter';
import { LocalStorageService } from '../../services/local-storage.service';
import { OFilterBuilderComponentStateService } from '../../services/state/o-filter-builder-component-state.service';
import { Codes } from '../../util/codes';
import { FilterExpressionUtils } from '../../util/filter-expression.utils';
import { Util } from '../../util/util';
export var DEFAULT_INPUTS_O_FILTER_BUILDER = [
    'filters',
    'targetCmp: target',
    'expressionBuilder: expression-builder',
    'queryOnChange: query-on-change',
    'queryOnChangeDelay: query-on-change-delay',
    'queryOnChangeEventType: query-on-change-event-type',
    'oattr: attr',
];
export var DEFAULT_OUTPUTS_O_FILTER_BUILDER = [
    'onFilter',
    'onClear'
];
var OFilterBuilderComponent = (function () {
    function OFilterBuilderComponent(injector, form) {
        this.injector = injector;
        this.form = form;
        this.onFilter = new EventEmitter();
        this.onClear = new EventEmitter();
        this.queryOnChange = false;
        this.queryOnChangeDelay = 0;
        this.queryOnChangeEventType = Codes.DEFAULT_CHANGE_EVENT;
        this.filterComponents = [];
        this.subscriptions = new Subscription();
        this.localStorageService = this.injector.get(LocalStorageService);
        this.componentStateService = this.injector.get(OFilterBuilderComponentStateService);
        this.router = this.injector.get(Router);
        this.actRoute = this.injector.get(ActivatedRoute);
    }
    OFilterBuilderComponent.prototype.ngOnInit = function () {
        this.initialize();
    };
    OFilterBuilderComponent.prototype.ngAfterViewInit = function () {
        this.initializeListeners();
    };
    OFilterBuilderComponent.prototype.ngOnDestroy = function () {
        if (this.subscriptions) {
            this.subscriptions.unsubscribe();
        }
    };
    OFilterBuilderComponent.prototype.initialize = function () {
        var _this = this;
        this.componentStateService.initialize(this);
        if (this.filters) {
            var filterArray = Util.parseArray(this.filters);
            filterArray.forEach(function (filter) {
                var filterElms = filter.split(Codes.COLUMNS_ALIAS_SEPARATOR);
                _this.filterComponents.push({
                    targetAttr: filterElms[0],
                    formComponentAttr: filterElms[1] ? filterElms[1] : filterElms[0]
                });
            });
        }
        if (Util.isDefined(this.targetCmp)) {
            this.targetCmp.setFilterBuilder(this);
        }
    };
    OFilterBuilderComponent.prototype.initializeListeners = function () {
        var _this = this;
        if (this.queryOnChange) {
            this.filterComponents.forEach(function (filterComponent) {
                var formComponent = _this.form.getComponents()[filterComponent.formComponentAttr];
                if (formComponent) {
                    _this.subscriptions.add(_this.getEventFromFormComponent(formComponent)
                        .pipe(debounceTime(_this.queryOnChangeDelay))
                        .subscribe(function () { return _this.triggerReload(); }));
                }
            });
        }
    };
    OFilterBuilderComponent.prototype.getEventFromFormComponent = function (formComponent) {
        return this.queryOnChangeEventType === Codes.DEFAULT_CHANGE_EVENT ?
            formComponent.onValueChange :
            formComponent.getFormControl().valueChanges;
    };
    OFilterBuilderComponent.prototype.getExpression = function () {
        var formComponents = this.form.getComponents();
        var params = [];
        this.filterComponents.forEach(function (filterComponent) {
            var formComponent = formComponents[filterComponent.formComponentAttr];
            if (formComponent) {
                var value = formComponent.getValue();
                params.push({
                    attr: filterComponent.targetAttr,
                    value: value
                });
            }
        });
        if (this.expressionBuilder) {
            return this.expressionBuilder(params);
        }
        var expressions = [];
        params.forEach(function (elem) {
            if (Util.isDefined(elem.value)) {
                expressions.push(FilterExpressionUtils.buildExpressionEquals(elem.attr, elem.value));
            }
        });
        return expressions.length ? expressions.reduce(function (fe1, fe2) { return FilterExpressionUtils.buildComplexExpression(fe1, fe2, FilterExpressionUtils.OP_OR); }) : undefined;
    };
    OFilterBuilderComponent.prototype.getBasicExpression = function () {
        return FilterExpressionUtils.buildBasicExpression(this.getExpression());
    };
    OFilterBuilderComponent.prototype.getTargetComponent = function () {
        return this.targetCmp;
    };
    OFilterBuilderComponent.prototype.triggerReload = function () {
        if (!this.targetCmp) {
            return;
        }
        if (this.targetCmp.pageable) {
            this.targetCmp.reloadPaginatedDataFromStart();
        }
        else {
            this.targetCmp.reloadData();
        }
        this.onFilter.emit();
    };
    OFilterBuilderComponent.prototype.clearFilter = function () {
        var formComponents = this.form.getComponents();
        this.getFilterAttrs().forEach(function (attr) {
            formComponents[attr].clearValue();
        });
        this.onClear.emit();
    };
    OFilterBuilderComponent.prototype.getFilterValues = function () {
        var _this = this;
        var result = [];
        this.filterComponents.
            forEach(function (filterComponent) {
            if (Util.isDefined(_this.form.getComponents()[filterComponent.formComponentAttr])) {
                result.push({ attr: filterComponent.formComponentAttr, value: _this.form.getComponents()[filterComponent.formComponentAttr].getValue() });
            }
        });
        return result;
    };
    OFilterBuilderComponent.prototype.setFilterValues = function (filterBuilderValues) {
        var _this = this;
        filterBuilderValues.forEach(function (filterBuilderValue) {
            if (_this.form.getComponents()[filterBuilderValue.attr]) {
                _this.form.getComponents()[filterBuilderValue.attr].setValue(filterBuilderValue.value);
            }
            else {
                console.warn('The filter with attr ' + filterBuilderValue.attr + ' cannot be set ' + filterBuilderValue.value + ' because it does not exist .');
            }
        });
    };
    OFilterBuilderComponent.prototype.getFilterAttrs = function () {
        return this.filterComponents.map(function (elem) { return elem.formComponentAttr; });
    };
    Object.defineProperty(OFilterBuilderComponent.prototype, "state", {
        get: function () {
            return this.componentStateService.state;
        },
        enumerable: true,
        configurable: true
    });
    OFilterBuilderComponent.prototype.getDataToStore = function () {
        return this.componentStateService.state;
    };
    OFilterBuilderComponent.prototype.getComponentKey = function () {
        if (!Util.isDefined(this.oattr)) {
            console.error('Your o-filter-builder component must have an \'attr\'. Otherwise, your filter builder state will not set in localstorage.');
            return 'OFilterBuilderComponent_';
        }
        return 'OFilterBuilderComponent_' + this.oattr;
    };
    OFilterBuilderComponent.prototype.storeFilterInState = function (arg) {
        this.componentStateService.storeFilter(arg);
        this.updateStateStorage();
    };
    OFilterBuilderComponent.prototype.updateStateStorage = function () {
        if (this.localStorageService) {
            this.localStorageService.updateComponentStorage(this, this.getRouteKey());
        }
    };
    OFilterBuilderComponent.prototype.getRouteKey = function () {
        var route = this.router.url;
        this.actRoute.params.subscribe(function (params) {
            Object.keys(params).forEach(function (key) {
                route = route.replace(params[key], key);
            });
        });
        return route;
    };
    OFilterBuilderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-filter-builder',
                    template: "",
                    inputs: DEFAULT_INPUTS_O_FILTER_BUILDER,
                    outputs: DEFAULT_OUTPUTS_O_FILTER_BUILDER
                }] }
    ];
    OFilterBuilderComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: OFormComponent, decorators: [{ type: Inject, args: [forwardRef(function () { return OFormComponent; }),] }] }
    ]; };
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OFilterBuilderComponent.prototype, "queryOnChange", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Number)
    ], OFilterBuilderComponent.prototype, "queryOnChangeDelay", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", String)
    ], OFilterBuilderComponent.prototype, "queryOnChangeEventType", void 0);
    return OFilterBuilderComponent;
}());
export { OFilterBuilderComponent };
//# sourceMappingURL=data:application/json;base64,