import * as tslib_1 from "tslib";
import { Component, Injector, ViewEncapsulation } from '@angular/core';
import { MatDialog } from '@angular/material';
import { InputConverter } from '../../../decorators/input-converter';
import { DialogService } from '../../../services/dialog.service';
import { OLoadFilterDialogComponent } from '../../../shared/components/filter/load-filter/o-load-filter-dialog.component';
import { OStoreFilterDialogComponent } from '../../../shared/components/filter/store-filter/o-store-filter-dialog.component';
export var DEFAULT_INPUTS_O_FILTER_BUILDER_MENU = [
    '_filterBuilder: oFilterBuilder',
    'icon',
    'svgIcon : svg-icon',
    'showClearFilterOption: show-clear-filter-option',
    'showFilterOption: show-filter-option'
];
var OFilterBuilderMenuComponent = (function () {
    function OFilterBuilderMenuComponent(injector) {
        this.injector = injector;
        this.showFilterOption = true;
        this.showClearFilterOption = true;
        this.defaultSvgIcon = 'ontimize:more_vert';
        this.dialog = this.injector.get(MatDialog);
        this.dialogService = this.injector.get(DialogService);
    }
    OFilterBuilderMenuComponent.prototype.onStoreFilterClicked = function () {
        var _this = this;
        var dialogRef = this.dialog.open(OStoreFilterDialogComponent, {
            data: this._filterBuilder.state.storedFilterBuilders.map(function (filter) { return filter.name; }),
            width: 'calc((75em - 100%) * 1000)',
            maxWidth: '65vw',
            minWidth: '30vw',
            disableClose: true,
            panelClass: ['o-dialog-class', 'o-table-dialog']
        });
        dialogRef.afterClosed().subscribe(function (result) {
            if (result) {
                _this._filterBuilder.storeFilterInState(dialogRef.componentInstance.getFilterAttributes());
            }
        });
    };
    OFilterBuilderMenuComponent.prototype.onLoadFilterClicked = function () {
        var _this = this;
        var dialogRef = this.dialog.open(OLoadFilterDialogComponent, {
            data: this._filterBuilder.state.storedFilterBuilders,
            width: 'calc((75em - 100%) * 1000)',
            maxWidth: '65vw',
            minWidth: '30vw',
            disableClose: true,
            panelClass: ['o-dialog-class', 'o-table-dialog']
        });
        dialogRef.componentInstance.onDelete.subscribe(function (filterName) { return _this._filterBuilder.state.deleteStoredFilter(filterName); });
        dialogRef.afterClosed().subscribe(function (result) {
            if (result) {
                var selectedFilterName = dialogRef.componentInstance.getSelectedFilterName();
                if (selectedFilterName) {
                    _this._filterBuilder.state.applyFilter(selectedFilterName);
                    _this._filterBuilder.setFilterValues(_this._filterBuilder.state.filterBuilderValues);
                    _this._filterBuilder.triggerReload();
                }
            }
        });
    };
    OFilterBuilderMenuComponent.prototype.onClearFilterClicked = function () {
        var _this = this;
        this.dialogService.confirm('CONFIRM', 'FILTERBUILDERMENU.DIALOG.CONFIRM_CLEAR_FILTER').then(function (result) {
            if (result) {
                _this._filterBuilder.clearFilter();
                _this._filterBuilder.triggerReload();
            }
        });
    };
    OFilterBuilderMenuComponent.prototype.onFilterClicked = function () {
        if (this._filterBuilder) {
            this._filterBuilder.triggerReload();
        }
    };
    OFilterBuilderMenuComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-filter-builder-menu',
                    template: "<button mat-icon-button [attr.aria-label]=\"'FILTERBUILDERMENU.BUTTONS.ARIALBUTTON' | oTranslate\" [matMenuTriggerFor]=\"filterMenu\">\n  <ng-container *ngIf=\"svgIcon !== undefined; else buttonIconTemplate\">\n    <mat-icon [svgIcon]=\"svgIcon\"></mat-icon>\n  </ng-container>\n  <ng-template #buttonIconTemplate>\n    <ng-container *ngIf=\"icon !== undefined; else defaultButtonTemplate\">\n      <mat-icon>{{icon}}</mat-icon>\n    </ng-container>\n  </ng-template>\n  <ng-template #defaultButtonTemplate>\n    <mat-icon [svgIcon]=\"defaultSvgIcon\"></mat-icon>\n  </ng-template>\n</button>\n<mat-menu #filterMenu=\"matMenu\" class=\"o-mat-menu\">\n  <button type=\"button\" mat-menu-item (click)=\"onFilterClicked()\" *ngIf=\"showFilterOption\">\n    {{ 'FILTERBUILDERMENU.BUTTONS.FILTER' | oTranslate }}\n  </button>\n  <button type=\"button\" mat-menu-item (click)=\"onStoreFilterClicked()\">\n    {{ 'FILTERBUILDERMENU.BUTTONS.SAVE_FILTER' | oTranslate }}\n  </button>\n  <button type=\"button\" mat-menu-item (click)=\"onLoadFilterClicked()\">\n    {{ 'FILTERBUILDERMENU.BUTTONS.LOAD_FILTER' | oTranslate}}\n  </button>\n  <button type=\"button\" mat-menu-item (click)=\"onClearFilterClicked()\" *ngIf=\"showClearFilterOption\">\n    {{ 'FILTERBUILDERMENU.BUTTONS.CLEAR_FILTER' | oTranslate}}\n  </button>\n</mat-menu>\n",
                    inputs: DEFAULT_INPUTS_O_FILTER_BUILDER_MENU,
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    OFilterBuilderMenuComponent.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OFilterBuilderMenuComponent.prototype, "showFilterOption", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OFilterBuilderMenuComponent.prototype, "showClearFilterOption", void 0);
    return OFilterBuilderMenuComponent;
}());
export { OFilterBuilderMenuComponent };
//# sourceMappingURL=data:application/json;base64,