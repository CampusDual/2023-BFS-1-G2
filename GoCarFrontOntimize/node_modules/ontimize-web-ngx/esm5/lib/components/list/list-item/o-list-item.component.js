import { ChangeDetectorRef, Component, ContentChild, ContentChildren, ElementRef, forwardRef, Inject, Injector, Optional, QueryList, Renderer2, ViewChild, ViewEncapsulation } from '@angular/core';
import { MatLine, MatListAvatarCssMatStyler, MatListItem } from '@angular/material';
import { Util } from '../../../util/util';
import { OListComponent } from '../o-list.component';
var OListItemComponent = (function () {
    function OListItemComponent(elRef, _renderer, _injector, cd, _list) {
        this.elRef = elRef;
        this._renderer = _renderer;
        this._injector = _injector;
        this.cd = cd;
        this._list = _list;
    }
    Object.defineProperty(OListItemComponent.prototype, "_hasAvatar", {
        set: function (avatar) {
            var listItemNativeEl = this.elRef.nativeElement.getElementsByTagName('mat-list-item');
            if (listItemNativeEl && listItemNativeEl.length === 1) {
                if ((avatar !== null && avatar !== undefined)) {
                    this._renderer.addClass(listItemNativeEl[0], 'mat-list-avatar');
                }
                else {
                    this._renderer.removeClass(listItemNativeEl[0], 'mat-list-avatar');
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    OListItemComponent.prototype.ngAfterContentInit = function () {
        var matLinesRef = this._lines;
        var ngAfterContentInitOriginal = this._innerListItem.ngAfterContentInit;
        this._innerListItem.ngAfterContentInit = function () {
            var emptyDiv = this._element.nativeElement.querySelector('.mat-list-text:empty');
            if (emptyDiv) {
                emptyDiv.remove();
            }
            this._lines = matLinesRef;
            ngAfterContentInitOriginal.apply(this);
        };
    };
    OListItemComponent.prototype.onDetailIconClicked = function (e) {
        if (Util.isDefined(e)) {
            e.stopPropagation();
        }
        this._list.viewDetail(this.modelData);
    };
    OListItemComponent.prototype.onEditIconClicked = function (e) {
        if (Util.isDefined(e)) {
            e.stopPropagation();
        }
        this._list.editDetail(this.modelData);
    };
    OListItemComponent.prototype.setItemData = function (data) {
        if (!Util.isDefined(this.modelData)) {
            this.modelData = data;
            this.cd.detectChanges();
        }
    };
    OListItemComponent.prototype.getItemData = function () {
        return this.modelData;
    };
    OListItemComponent.prototype.onCheckboxChange = function () {
        if (this._list.selectable && Util.isDefined(this.modelData)) {
            this._list.setSelected(this.modelData);
        }
    };
    OListItemComponent.prototype.onCheckboxClicked = function (event) {
        event.stopPropagation();
    };
    Object.defineProperty(OListItemComponent.prototype, "isSelected", {
        get: function () {
            return this._list.isItemSelected(this.modelData);
        },
        enumerable: true,
        configurable: true
    });
    OListItemComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-list-item',
                    template: "<mat-list-item #innerListItem>\n  <div class=\"o-list-row-action o-list-item-selection-check\" *ngIf=\"_list && _list.selectable\">\n    <mat-checkbox [checked]=\"isSelected\" (change)=\"onCheckboxChange()\" (click)=\"onCheckboxClicked($event)\"></mat-checkbox>\n  </div>\n  <ng-content select=\"[o-list-item-avatar], [matListAvatar], [matListIcon]\"> </ng-content>\n  <div class=\"mat-list-text\">\n    <ng-content select=\"[matLine]\"></ng-content>\n  </div>\n  <ng-content></ng-content>\n  <div fxLayout=\"row\" class=\"row-buttons-container\">\n    <div class=\"o-list-row-action o-list-item-icon\" *ngIf=\"_list && _list.editButtonInRow\" (click)=\"onEditIconClicked($event)\">\n      <mat-icon class=\"material-icons\">{{ _list.editButtonInRowIcon }}</mat-icon>\n    </div>\n    <div class=\"o-list-row-action o-list-item-icon\" *ngIf=\"_list && _list.detailButtonInRow\" (click)=\"onDetailIconClicked($event)\">\n      <mat-icon class=\"material-icons\">{{ _list.detailButtonInRowIcon }}</mat-icon>\n    </div>\n  </div>\n</mat-list-item>",
                    encapsulation: ViewEncapsulation.None,
                    host: {
                        '[class.o-list-item]': 'true'
                    },
                    styles: [".o-list-item{display:flex}.o-list-item .mat-list-item{width:100%}.o-list-item .mat-list-item .o-list-item-selection-check{padding-right:16px}.o-list-item .mat-list-item .row-buttons-container .o-list-row-action{height:24px;text-align:center;cursor:pointer}.mat-list[dense] .o-list-item .o-list-row-action .mat-checkbox-inner-container{height:16px;width:16px}"]
                }] }
    ];
    OListItemComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: Injector },
        { type: ChangeDetectorRef },
        { type: OListComponent, decorators: [{ type: Optional }, { type: Inject, args: [forwardRef(function () { return OListComponent; }),] }] }
    ]; };
    OListItemComponent.propDecorators = {
        _lines: [{ type: ContentChildren, args: [MatLine,] }],
        _innerListItem: [{ type: ViewChild, args: ['innerListItem', { static: true },] }],
        _hasAvatar: [{ type: ContentChild, args: [MatListAvatarCssMatStyler, { static: false },] }]
    };
    return OListItemComponent;
}());
export { OListItemComponent };
//# sourceMappingURL=data:application/json;base64,