import { Directive, ElementRef, EventEmitter, HostListener, Input, Renderer2, ViewContainerRef } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { Subscription } from 'rxjs';
import { instanceOfIListItem } from '../../../interfaces/o-list-item.interface';
import { Codes } from '../../../util/codes';
import { Util } from '../../../util/util';
var OListItemDirective = (function () {
    function OListItemDirective(_viewContainerRef, _el, renderer, actRoute) {
        this._viewContainerRef = _viewContainerRef;
        this._el = _el;
        this.renderer = renderer;
        this.actRoute = actRoute;
        this.onClick = new EventEmitter();
        this.onDoubleClick = new EventEmitter();
        this.selectable = false;
        this.subscription = new Subscription();
    }
    OListItemDirective.prototype.ngOnInit = function () {
        var _this = this;
        var hostComponent = this._viewContainerRef["_data"].componentView.component;
        if (instanceOfIListItem(hostComponent)) {
            this.listItem = hostComponent;
        }
        this.subscription.add(this.actRoute.params.subscribe(function (params) { return _this.updateActiveState(params); }));
    };
    OListItemDirective.prototype.ngOnDestroy = function () {
        this.subscription.unsubscribe();
    };
    OListItemDirective.prototype.onMouseEnter = function () {
        if (!this.selectable && this._list && this._list.detailMode !== Codes.DETAIL_MODE_NONE) {
            this.renderer.setStyle(this._el.nativeElement, 'cursor', 'pointer');
        }
    };
    OListItemDirective.prototype.updateActiveState = function (params) {
        if (this._list) {
            var aKeys = this._list.getKeys();
            if (this.modelData) {
                var _act = false;
                if (aKeys.length > 0) {
                    for (var k = 0; k < aKeys.length; ++k) {
                        var key = aKeys[k];
                        var id = params[key];
                        _act = (this.modelData[key] === id);
                        if (_act === false) {
                            break;
                        }
                    }
                }
                if (_act) {
                    this._el.nativeElement.classList.add('mat-active');
                }
                else {
                    this._el.nativeElement.classList.remove('mat-active');
                }
            }
            else {
                this._el.nativeElement.classList.remove('mat-active');
            }
        }
    };
    OListItemDirective.prototype.onItemClicked = function (e) {
        if (!this.selectable && this._list) {
            this._list.onItemDetailClick(this);
            this.onClick.emit(this.getItemData());
        }
    };
    OListItemDirective.prototype.onItemDoubleClicked = function (e) {
        if (!this.selectable && this._list) {
            this._list.onItemDetailDoubleClick(this);
            this.onDoubleClick.emit(this.getItemData());
        }
    };
    OListItemDirective.prototype.isSelected = function () {
        return this._list && this._list.isItemSelected(this.modelData);
    };
    OListItemDirective.prototype.setListComponent = function (list) {
        this._list = list;
    };
    OListItemDirective.prototype.setItemData = function (data) {
        if (!Util.isDefined(this.modelData) || this.modelData !== 'object') {
            this.modelData = data;
        }
        if (Util.isDefined(this.listItem)) {
            this.listItem.setItemData(this.modelData);
        }
    };
    OListItemDirective.prototype.getItemData = function () {
        return this.modelData;
    };
    OListItemDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'o-list-item, mat-list-item[o-list-item], mat-card[o-list-item]',
                    exportAs: 'olistitem',
                    host: {
                        '[class.o-list-item]': 'true',
                        '(click)': 'onItemClicked($event)',
                        '(dblclick)': 'onItemDoubleClicked($event)'
                    }
                },] }
    ];
    OListItemDirective.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: ElementRef },
        { type: Renderer2 },
        { type: ActivatedRoute }
    ]; };
    OListItemDirective.propDecorators = {
        modelData: [{ type: Input, args: ['o-list-item',] }],
        selectable: [{ type: Input }],
        onMouseEnter: [{ type: HostListener, args: ['mouseenter',] }]
    };
    return OListItemDirective;
}());
export { OListItemDirective };
//# sourceMappingURL=data:application/json;base64,