import * as tslib_1 from "tslib";
import { SelectionModel } from '@angular/cdk/collections';
import { Component, ContentChildren, ElementRef, EventEmitter, forwardRef, Inject, Injector, Optional, QueryList, ViewEncapsulation } from '@angular/core';
import { merge, Subscription } from 'rxjs';
import { InputConverter } from '../../decorators/input-converter';
import { ComponentStateServiceProvider, O_COMPONENT_STATE_SERVICE, OntimizeServiceProvider } from '../../services/factories';
import { OListComponentStateService } from '../../services/state/o-list-component-state.service';
import { ObservableWrapper } from '../../util/async';
import { ServiceUtils } from '../../util/service.utils';
import { Util } from '../../util/util';
import { OFormComponent } from '../form/o-form.component';
import { AbstractOServiceComponent, DEFAULT_INPUTS_O_SERVICE_COMPONENT, DEFAULT_OUTPUTS_O_SERVICE_COMPONENT } from '../o-service-component.class';
import { OMatSort } from '../table/extensions/sort/o-mat-sort';
import { OListItemDirective } from './list-item/o-list-item.directive';
import { SQLTypes } from '../../util/sqltypes';
export var DEFAULT_INPUTS_O_LIST = tslib_1.__spread(DEFAULT_INPUTS_O_SERVICE_COMPONENT, [
    'quickFilterColumns: quick-filter-columns',
    'refreshButton: refresh-button',
    'route',
    'selectable',
    'odense : dense',
    'deleteButton: delete-button',
    'sortColumns: sort-columns',
    'insertButtonPosition:insert-button-position',
    'insertButtonFloatable:insert-button-floatable',
    'showButtonsText: show-buttons-text',
    'keysSqlTypes: keys-sql-types',
]);
export var DEFAULT_OUTPUTS_O_LIST = tslib_1.__spread(DEFAULT_OUTPUTS_O_SERVICE_COMPONENT, [
    'onInsertButtonClick',
    'onItemDeleted'
]);
var OListComponent = (function (_super) {
    tslib_1.__extends(OListComponent, _super);
    function OListComponent(injector, elRef, form) {
        var _this = _super.call(this, injector, elRef, form) || this;
        _this.refreshButton = true;
        _this.selectable = false;
        _this.odense = false;
        _this.deleteButton = true;
        _this.insertButtonFloatable = true;
        _this.showButtonsText = false;
        _this.paginationControls = false;
        _this.sortColArray = [];
        _this.onInsertButtonClick = new EventEmitter();
        _this.onItemDeleted = new EventEmitter();
        _this.selection = new SelectionModel(true, []);
        _this.enabledDeleteButton = false;
        _this.insertButtonPosition = 'bottom';
        _this.storePaginationState = false;
        _this.subscription = new Subscription();
        _this._quickFilterAppearance = 'outline';
        _this.keysSqlTypesArray = [];
        _this.oMatSort = new OMatSort();
        return _this;
    }
    Object.defineProperty(OListComponent.prototype, "state", {
        get: function () {
            return this.componentStateService.state;
        },
        enumerable: true,
        configurable: true
    });
    OListComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.initialize();
        this.subscription.add(this.selection.changed.subscribe(function () { return _this.enabledDeleteButton = !_this.selection.isEmpty(); }));
    };
    OListComponent.prototype.ngAfterViewInit = function () {
        _super.prototype.afterViewInit.call(this);
        this.filterCaseSensitive = Util.isDefined(this.state.filterCaseSensitive) ?
            this.state.filterCaseSensitive :
            this.filterCaseSensitive;
        this.parseSortColumns();
        this.registerQuickFilter(this.searchInputComponent);
        if (this.queryOnInit) {
            this.queryData();
        }
    };
    OListComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.setListItemDirectivesData();
        this.subscription.add(this.listItemDirectives.changes.subscribe(function () { return _this.setListItemDirectivesData(); }));
    };
    OListComponent.prototype.ngOnDestroy = function () {
        this.destroy();
        this.subscription.unsubscribe();
    };
    OListComponent.prototype.ngOnChanges = function (changes) {
        if (changes.staticData !== undefined) {
            this.dataResponseArray = changes.staticData.currentValue;
            this.onDataLoaded.emit(this.dataResponseArray);
            if (this.quickFilterComponent) {
                this.filterData();
            }
        }
    };
    OListComponent.prototype.getComponentKey = function () {
        return 'OListComponent_' + this.oattr;
    };
    OListComponent.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        this.keysSqlTypesArray = Util.parseArray(this.keysSqlTypes);
        if (!Util.isDefined(this.quickFilterColumns)) {
            this.quickFilterColumns = this.columns;
        }
        this.quickFilterColArray = Util.parseArray(this.quickFilterColumns, true);
        this.state.queryRecordOffset = 0;
        if (!Util.isDefined(this.state.totalQueryRecordsNumber)) {
            this.state.totalQueryRecordsNumber = 0;
        }
    };
    OListComponent.prototype.reinitialize = function (options) {
        _super.prototype.reinitialize.call(this, options);
    };
    OListComponent.prototype.getDense = function () {
        return this.odense;
    };
    OListComponent.prototype.onListItemClicked = function (onNext) {
        return ObservableWrapper.subscribe(this.onClick, onNext);
    };
    OListComponent.prototype.onItemDetailClick = function (item) {
        this.handleItemClick(item);
    };
    OListComponent.prototype.onItemDetailDoubleClick = function (item) {
        this.handleItemDblClick(item);
    };
    OListComponent.prototype.getDataToStore = function () {
        return this.componentStateService.getDataToStore();
    };
    OListComponent.prototype.reloadData = function (clearSelectedItems) {
        if (clearSelectedItems === void 0) { clearSelectedItems = true; }
        this.componentStateService.refreshSelection();
        if (clearSelectedItems && this.selectable) {
            this.clearSelection();
        }
        var queryArgs = {};
        if (this.pageable) {
            this.state.queryRecordOffset = 0;
            queryArgs = {
                length: Math.max(this.queryRows, this.dataResponseArray.length),
                replace: true
            };
        }
        this.queryData(void 0, queryArgs);
    };
    OListComponent.prototype.reloadPaginatedDataFromStart = function (clearSelectedItems) {
        if (clearSelectedItems === void 0) { clearSelectedItems = true; }
        if (this.pageable) {
            this.dataResponseArray = [];
            this.reloadData(clearSelectedItems);
        }
    };
    OListComponent.prototype.getSortedDataFromArray = function (dataArray) {
        return this.oMatSort.getSortedDataBySQLOrder(dataArray, this.sortColArray);
    };
    OListComponent.prototype.isItemSelected = function (item) {
        return this.selectable && this.selection.isSelected(item);
    };
    OListComponent.prototype.onScroll = function (e) {
        if (this.matpaginator)
            return;
        if (this.pageable) {
            var pendingRegistries = this.dataResponseArray.length < this.state.totalQueryRecordsNumber;
            if (!this.loadingSubject.value && pendingRegistries) {
                var element = e.target;
                if (element.offsetHeight + element.scrollTop + 5 >= element.scrollHeight) {
                    var queryArgs = {
                        offset: this.state.queryRecordOffset,
                        length: this.queryRows
                    };
                    this.queryData(void 0, queryArgs);
                }
            }
        }
    };
    OListComponent.prototype.remove = function (clearSelectedItems) {
        var _this = this;
        if (clearSelectedItems === void 0) { clearSelectedItems = false; }
        var selectedItems = this.getSelectedItems();
        if (selectedItems.length === 0) {
            return;
        }
        this.dialogService.confirm('CONFIRM', 'MESSAGES.CONFIRM_DELETE').then(function (res) {
            if (res === true) {
                if (_this.dataService && (_this.deleteMethod in _this.dataService) && _this.entity && (_this.keysArray.length > 0)) {
                    var filters = ServiceUtils.getArrayProperties(selectedItems, _this.keysArray);
                    var sqlTypesArg_1 = _this.getSqlTypesOfKeys();
                    merge(filters.map((function (kv) { return _this.dataService[_this.deleteMethod](kv, _this.entity, sqlTypesArg_1); }))).subscribe(function (obs) { return obs.subscribe(function () {
                        ObservableWrapper.callEmit(_this.onItemDeleted, selectedItems);
                    }, function (error) {
                        _this.dialogService.alert('ERROR', 'MESSAGES.ERROR_DELETE');
                    }, function () {
                        _this.clearSelection();
                        _this.reloadData();
                    }); });
                }
                else {
                    _this.deleteLocalItems();
                }
            }
            else if (clearSelectedItems) {
                _this.clearSelection();
            }
        });
    };
    OListComponent.prototype.add = function (e) {
        this.onInsertButtonClick.emit(e);
        _super.prototype.insertDetail.call(this);
    };
    OListComponent.prototype.parseSortColumns = function () {
        var sortColumnsParam = this.state.sortColumns || this.sortColumns;
        this.sortColArray = ServiceUtils.parseSortColumns(sortColumnsParam);
    };
    OListComponent.prototype.getQueryArguments = function (filter, ovrrArgs) {
        var queryArguments = _super.prototype.getQueryArguments.call(this, filter, ovrrArgs);
        if (this.pageable) {
            queryArguments[6] = this.sortColArray;
        }
        return queryArguments;
    };
    OListComponent.prototype.setListItemDirectivesData = function () {
        var _this = this;
        this.listItemDirectives.forEach(function (element, index) {
            element.setItemData(_this.dataArray[index]);
            element.setListComponent(_this);
        });
    };
    OListComponent.prototype.saveDataNavigationInLocalStorage = function () {
        _super.prototype.saveDataNavigationInLocalStorage.call(this);
        this.storePaginationState = true;
    };
    OListComponent.prototype.parseResponseArray = function (data, replace) {
        var result = data;
        if (this.pageable && !replace) {
            result = (this.dataResponseArray || []).concat(data);
        }
        return result;
    };
    OListComponent.prototype.registerQuickFilter = function (arg) {
        _super.prototype.registerQuickFilter.call(this, arg);
        if (Util.isDefined(this.quickFilterComponent) && Util.isDefined(this.state.quickFilterActiveColumns)) {
            var parsedArr = Util.parseArray(this.state.quickFilterActiveColumns, true);
            this.quickFilterComponent.setActiveColumns(parsedArr);
        }
    };
    OListComponent.prototype.setDataArray = function (data) {
        _super.prototype.setDataArray.call(this, data);
        this.updateSelectedItems();
        this.cd.detectChanges();
    };
    OListComponent.prototype.setSelected = function (item) {
        _super.prototype.setSelected.call(this, item);
        this.componentStateService.refreshSelection();
    };
    OListComponent.prototype.updateSelectedItems = function () {
        var _this = this;
        if (!this.selectable || !Util.isDefined(this.state.selection) || this.getSelectedItems().length > 0) {
            return;
        }
        this.state.selection.forEach(function (selectedItem) {
            var itemKeys = Object.keys(selectedItem);
            var foundItem = _this.dataArray.find(function (data) { return itemKeys.every(function (key) { return data[key] === selectedItem[key]; }); });
            if (Util.isDefined(foundItem)) {
                _this.selection.select(foundItem);
            }
        });
    };
    OListComponent.prototype.getSqlTypes = function () {
        var _this = this;
        var sqlTypes = this.sqlTypes;
        this.keysSqlTypesArray.forEach(function (kst, i) { return sqlTypes[_this.keysArray[i]] = SQLTypes.getSQLTypeValue(kst); });
        return sqlTypes;
    };
    OListComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-list',
                    providers: [
                        OntimizeServiceProvider,
                        ComponentStateServiceProvider,
                        { provide: O_COMPONENT_STATE_SERVICE, useClass: OListComponentStateService },
                    ],
                    inputs: DEFAULT_INPUTS_O_LIST,
                    outputs: DEFAULT_OUTPUTS_O_LIST,
                    template: "<div class=\"o-list-container\" [style.display]=\"isVisible()? '' : 'none'\" fxFill>\n  <div *ngIf=\"loading | async\" fxLayoutAlign=\"center center\" [class.pageable-loading]=\"pageable && state.queryRecordOffset > 0\"\n    class=\"spinner-container\">\n    <mat-progress-spinner strokeWidth=\"3\" mode=\"indeterminate\"></mat-progress-spinner>\n  </div>\n  <o-data-toolbar *ngIf=\"hasControls()\" [class.dense]=\"odense\" [title]=\"title\" [show-title]=\"hasTitle()\" class=\"o-list-toolbar\">\n    <ng-container o-data-toolbar-projection-start>\n      <ng-container *ngIf=\"showButtonsText;else showButtonsWithoutText\">\n        <button *ngIf=\"insertButton && !insertButtonFloatable\" class=\"o-list-button text\" type=\"button\" mat-stroked-button aria-label=\"Insert\" (click)=\"add($event)\">\n          <mat-icon svgIcon=\"ontimize:add\"></mat-icon>\n          <span>{{ 'ADD' | oTranslate }}</span>\n        </button>\n\n        <button type=\"button\" mat-stroked-button class=\"o-list-button text\" aria-label=\"Refresh\" (click)=\"reloadData()\" *ngIf=\"refreshButton\">\n          <mat-icon svgIcon=\"ontimize:autorenew\"></mat-icon>\n          <span>{{ 'REFRESH' | oTranslate }}</span>\n        </button>\n\n        <button *ngIf=\"deleteButton\" type=\"button\" class=\"o-list-button text\" mat-stroked-button aria-label=\"Delete\" [disabled]=\"!enabledDeleteButton\"\n          [class.disabled]=\"!enabledDeleteButton\" (click)=\"remove()\">\n          <mat-icon svgIcon=\"ontimize:delete\"></mat-icon>\n          <span>{{ 'DELETE' | oTranslate }}</span>\n        </button>\n      </ng-container>\n      <ng-template #showButtonsWithoutText>\n        <button *ngIf=\"insertButton && !insertButtonFloatable\" type=\"button\" class=\"o-list-button no-text\" mat-icon-button aria-label=\"Insert\" (click)=\"add($event)\">\n          <mat-icon svgIcon=\"ontimize:add\"></mat-icon>\n        </button>\n\n        <button type=\"button\" mat-icon-button aria-label=\"Refresh\" class=\"o-list-button no-text\" (click)=\"reloadData()\" *ngIf=\"refreshButton\">\n          <mat-icon svgIcon=\"ontimize:autorenew\"></mat-icon>\n        </button>\n\n        <button *ngIf=\"deleteButton\" type=\"button\" class=\"o-list-button no-text\" mat-icon-button aria-label=\"Delete\" [disabled]=\"!enabledDeleteButton\"\n          [class.disabled]=\"!enabledDeleteButton\" (click)=\"remove()\">\n          <mat-icon svgIcon=\"ontimize:delete\"></mat-icon>\n        </button>\n      </ng-template>\n    </ng-container>\n    <ng-content select=\"[o-list-toolbar][position=start]\" ngProjectAs=\"[o-data-toolbar-custom-projection-start]\">\n    </ng-content>\n    <ng-content select=\"[o-list-toolbar][position=end]\" ngProjectAs=\"[o-data-toolbar-custom-projection-end]\">\n    </ng-content>\n    <ng-content select=\"[o-list-toolbar]\" ngProjectAs=\"[o-data-toolbar-custom-projection-start]\">\n    </ng-content>\n    <ng-container o-data-toolbar-projection-end>\n      <o-search-input *ngIf=\"quickFilter\" [filter-case-sensitive]=\"filterCaseSensitive\" [show-case-sensitive-checkbox]=\"showCaseSensitiveCheckbox()\"\n        [columns]=\"quickFilterColumns\" [placeholder]=\"quickFilterPlaceholder\" [appearance]=\"quickFilterAppearance\" float-label=\"never\">\n      </o-search-input>\n    </ng-container>\n  </o-data-toolbar>\n  <div fxLayout=\"column\" class=\"o-list-content\" fxFlex=\"1 1 100%\" [class.o-list-content-toolbar-dense]=\"hasControls() && odense\">\n\n    <!--MAT-LIST-->\n    <mat-list [attr.dense]=\"odense || undefined\" (scroll)=\"onScroll($event)\" [class.selectable]=\"selectable\"\n      [class.o-list-item-has-buttons]=\"insertButton && (editButtonInRow || detailButtonInRow)\">\n\n      <mat-list-item *ngIf=\"!getDataArray().length\" fxLayout=\"row\" fxLayoutAlign=\"center center\" style=\"cursor: default;\">\n        <h3 matLine>\n          {{ 'TABLE.EMPTY' | oTranslate }}\n          <ng-container *ngIf=\"getQuickFilterValue().length > 0\">\n            {{ 'TABLE.EMPTY_USING_FILTER' | oTranslate : {values: [getQuickFilterValue()]} }}\n          </ng-container>\n        </h3>\n      </mat-list-item>\n      <ng-content></ng-content>\n    </mat-list>\n  </div>\n  <mat-paginator fxFlex=\"0 1 auto\" class=\"o-mat-paginator\" #paginator *ngIf=\"paginationControls\" [length]=\"totalRecords\" [pageSize]=\"queryRows\"\n    [pageSizeOptions]=\"pageSizeOptions\" [pageIndex]=\"currentPage\" [showFirstLastButtons]=\"true\" (page)=\"onChangePage($event)\"></mat-paginator>\n\n  <!--INSERT BUTTON -->\n  <button type=\"button\" *ngIf=\"insertButton && insertButtonFloatable && odense\" mat-mini-fab (click)=\"add($event)\" class=\"add-button\"\n    [class.add-button-bottom]=\"insertButtonPosition ==='bottom'\" [class.add-button-top]=\"insertButtonPosition ==='top'\">\n    <mat-icon svgIcon=\"ontimize:add\"></mat-icon>\n  </button>\n  <button type=\"button\" *ngIf=\"insertButton && insertButtonFloatable && !odense\" mat-fab (click)=\"add($event)\" class=\"add-button add-button-bottom\"\n    [class.add-button-bottom]=\"insertButtonPosition ==='bottom'\" [class.add-button-top]=\"insertButtonPosition ==='top'\">\n    <mat-icon svgIcon=\"ontimize:add\"></mat-icon>\n  </button>\n\n</div>\n",
                    encapsulation: ViewEncapsulation.None,
                    host: {
                        '[class.o-list]': 'true'
                    },
                    styles: ["::-webkit-input-placeholder{color:#8e0c39}:-moz-placeholder{color:#8e0c39;opacity:1}::-moz-placeholder{color:#8e0c39;opacity:1}:-ms-input-placeholder{color:#8e0c39}:placeholder-shown{color:#8e0c39}.o-list-container{position:relative;flex-direction:column}.o-list-container .o-list-content.o-list-content-toolbar-dense .add-button.add-button-top{top:60px}.o-list-container .spinner-container{position:absolute;top:0;bottom:0;left:0;right:0;z-index:500}.o-list-container .spinner-container:not(.pageable-loading){top:0;background:#fff}.o-list-container .spinner-container.pageable-loading{background:rgba(255,255,255,.5)}.o-list-container .spinner-container path{stroke-width:5px!important}.o-list-container .mat-list{overflow:auto}.o-list-container .mat-list .mat-3-line .o-custom-list-item{position:relative}.o-list-container .mat-list .o-custom-list-item{max-width:100%;width:100%}.o-list-container .mat-list .o-custom-list-item .o-list-item-icon{cursor:pointer;padding-right:6px}.o-list-container .mat-list.o-list-item-has-buttons .o-list-item .mat-list-item-content{padding-right:72px}.o-list-container .mat-list.o-list-item-has-buttons[dense] .o-list-item .mat-list-item-content{padding-right:56px}.o-list-container .mat-list .o-list-item.mat-card,.o-list-container .mat-list .o-list-item.mat-list-item{margin:6px 0}.o-list-container .add-button{right:12px;position:absolute}.o-list-container .add-button.add-button-bottom{bottom:12px}.o-list-container .add-button.add-button-top{top:88px}.o-list-container .o-mat-paginator~.add-button.add-button-bottom{bottom:68px}"]
                }] }
    ];
    OListComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: ElementRef },
        { type: OFormComponent, decorators: [{ type: Optional }, { type: Inject, args: [forwardRef(function () { return OFormComponent; }),] }] }
    ]; };
    OListComponent.propDecorators = {
        listItemDirectives: [{ type: ContentChildren, args: [OListItemDirective,] }]
    };
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OListComponent.prototype, "refreshButton", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OListComponent.prototype, "selectable", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OListComponent.prototype, "odense", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OListComponent.prototype, "deleteButton", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OListComponent.prototype, "insertButtonFloatable", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OListComponent.prototype, "showButtonsText", void 0);
    return OListComponent;
}(AbstractOServiceComponent));
export { OListComponent };
//# sourceMappingURL=data:application/json;base64,