import * as tslib_1 from "tslib";
import { Component, ElementRef, forwardRef, Inject, Injector, Optional, Renderer2, ViewEncapsulation, } from '@angular/core';
import { OListItemComponent } from '../../list-item/o-list-item.component';
import { DEFAULT_INPUTS_O_TEXT_RENDERER, DEFAULT_OUTPUTS_O_TEXT_RENDERER, OListItemTextRenderer, } from '../o-list-item-text-renderer.class';
export var DEFAULT_INPUTS_O_LIST_ITEM_AVATAR = tslib_1.__spread(DEFAULT_INPUTS_O_TEXT_RENDERER, [
    'avatar',
    'emptyAvatar: empty-avatar',
    'avatarType: avatar-type'
]);
export var DEFAULT_OUTPUTS_O_LIST_ITEM_AVATAR = tslib_1.__spread(DEFAULT_OUTPUTS_O_TEXT_RENDERER);
var OListItemAvatarComponent = (function (_super) {
    tslib_1.__extends(OListItemAvatarComponent, _super);
    function OListItemAvatarComponent(elRef, _renderer, _injector, _listItem) {
        var _this = _super.call(this, elRef, _renderer, _injector, _listItem) || this;
        _this._listItem = _listItem;
        return _this;
    }
    OListItemAvatarComponent.prototype.ngAfterViewInit = function () {
        this.modifyMatListItemElement();
    };
    OListItemAvatarComponent.prototype.ngOnInit = function () {
        var avatarValue = this.avatar;
        if (!this.avatar) {
            avatarValue = this.emptyAvatar;
        }
        else {
            switch (this.avatarType) {
                case 'base64':
                    avatarValue = ('data:image/png;base64,' + ((typeof (avatarValue.bytes) !== 'undefined') ? avatarValue.bytes : avatarValue));
                    break;
                case 'url':
                default:
                    avatarValue = this.avatar;
                    break;
            }
        }
        this.avatarSrc = avatarValue;
    };
    OListItemAvatarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-list-item-avatar',
                    template: "<div fxLayout=\"row\" fxLayoutAlign=\"center center\">\n  <img matListAvatar class=\"avatar\" [src]=\"avatarSrc | oSafe:'resourceUrl'\" [alt]=\"title\">\n  <div class=\"mat-list-text\">\n    <h3 matLine class=\"primary-text\"> {{ title }} </h3>\n    <h4 *ngIf=\"primaryText !== undefined\" matLine class=\"primary-text\">{{ primaryText }}</h4>\n    <p *ngIf=\"secondaryText !== undefined\" matLine class=\"secondary-text\">{{ secondaryText }}</p>\n  </div>\n  <mat-icon *ngIf=\"icon !== undefined\" class=\"material-icons o-list-item-icon\" (click)=\"onActionIconClick($event)\">{{ icon\n    }}\n  </mat-icon>\n</div>\n",
                    inputs: DEFAULT_INPUTS_O_LIST_ITEM_AVATAR,
                    outputs: DEFAULT_OUTPUTS_O_LIST_ITEM_AVATAR,
                    encapsulation: ViewEncapsulation.None,
                    host: {
                        '[class.o-custom-list-item]': 'true',
                        '[class.o-list-item-avatar]': 'true'
                    },
                    styles: [".o-list-row-action+.o-list-item-avatar{padding:0 0 0 10px}.mat-list.selectable .o-list-item-avatar .mat-list-text{padding-right:0}.mat-list .mat-list-item .mat-list-item-content .o-list-item-avatar.o-custom-list-item .mat-list-text,.mat-nav-list .mat-list-item .mat-list-item-content .o-list-item-avatar.o-custom-list-item .mat-list-text{padding:0 16px}"]
                }] }
    ];
    OListItemAvatarComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: Injector },
        { type: OListItemComponent, decorators: [{ type: Optional }, { type: Inject, args: [forwardRef(function () { return OListItemComponent; }),] }] }
    ]; };
    return OListItemAvatarComponent;
}(OListItemTextRenderer));
export { OListItemAvatarComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1saXN0LWl0ZW0tYXZhdGFyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL29udGltaXplLXdlYi1uZ3gvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9saXN0L3JlbmRlcmVycy9hdmF0YXIvby1saXN0LWl0ZW0tYXZhdGFyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUVMLFNBQVMsRUFDVCxVQUFVLEVBQ1YsVUFBVSxFQUNWLE1BQU0sRUFDTixRQUFRLEVBRVIsUUFBUSxFQUNSLFNBQVMsRUFDVCxpQkFBaUIsR0FDbEIsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDM0UsT0FBTyxFQUNMLDhCQUE4QixFQUM5QiwrQkFBK0IsRUFDL0IscUJBQXFCLEdBQ3RCLE1BQU0sb0NBQW9DLENBQUM7QUFFNUMsTUFBTSxDQUFDLElBQU0saUNBQWlDLG9CQUN6Qyw4QkFBOEI7SUFDakMsUUFBUTtJQUNSLDJCQUEyQjtJQUUzQix5QkFBeUI7RUFDMUIsQ0FBQztBQUVGLE1BQU0sQ0FBQyxJQUFNLGtDQUFrQyxvQkFDMUMsK0JBQStCLENBQ25DLENBQUM7QUFFRjtJQVk4QyxvREFBcUI7SUFRakUsa0NBQ0UsS0FBaUIsRUFDakIsU0FBb0IsRUFDcEIsU0FBbUIsRUFDaUQsU0FBNkI7UUFKbkcsWUFNRSxrQkFBTSxLQUFLLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUMsU0FDOUM7UUFIcUUsZUFBUyxHQUFULFNBQVMsQ0FBb0I7O0lBR25HLENBQUM7SUFFRCxrREFBZSxHQUFmO1FBQ0UsSUFBSSxDQUFDLHdCQUF3QixFQUFFLENBQUM7SUFDbEMsQ0FBQztJQUVELDJDQUFRLEdBQVI7UUFDRSxJQUFJLFdBQVcsR0FBUSxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ25DLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2hCLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1NBQ2hDO2FBQU07WUFDTCxRQUFRLElBQUksQ0FBQyxVQUFVLEVBQUU7Z0JBQ3ZCLEtBQUssUUFBUTtvQkFDWCxXQUFXLEdBQUcsQ0FBQyx3QkFBd0IsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztvQkFDNUgsTUFBTTtnQkFDUixLQUFLLEtBQUssQ0FBQztnQkFDWDtvQkFDRSxXQUFXLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztvQkFDMUIsTUFBTTthQUNUO1NBQ0Y7UUFDRCxJQUFJLENBQUMsU0FBUyxHQUFHLFdBQVcsQ0FBQztJQUMvQixDQUFDOztnQkFqREYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxvQkFBb0I7b0JBQzlCLHVuQkFBa0Q7b0JBRWxELE1BQU0sRUFBRSxpQ0FBaUM7b0JBQ3pDLE9BQU8sRUFBRSxrQ0FBa0M7b0JBQzNDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO29CQUNyQyxJQUFJLEVBQUU7d0JBQ0osNEJBQTRCLEVBQUUsTUFBTTt3QkFDcEMsNEJBQTRCLEVBQUUsTUFBTTtxQkFDckM7O2lCQUNGOzs7Z0JBeENDLFVBQVU7Z0JBTVYsU0FBUztnQkFIVCxRQUFRO2dCQU9ELGtCQUFrQix1QkEyQ3RCLFFBQVEsWUFBSSxNQUFNLFNBQUMsVUFBVSxDQUFDLGNBQU0sT0FBQSxrQkFBa0IsRUFBbEIsQ0FBa0IsQ0FBQzs7SUEyQjVELCtCQUFDO0NBQUEsQUFuREQsQ0FZOEMscUJBQXFCLEdBdUNsRTtTQXZDWSx3QkFBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBZnRlclZpZXdJbml0LFxuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIGZvcndhcmRSZWYsXG4gIEluamVjdCxcbiAgSW5qZWN0b3IsXG4gIE9uSW5pdCxcbiAgT3B0aW9uYWwsXG4gIFJlbmRlcmVyMixcbiAgVmlld0VuY2Fwc3VsYXRpb24sXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBPTGlzdEl0ZW1Db21wb25lbnQgfSBmcm9tICcuLi8uLi9saXN0LWl0ZW0vby1saXN0LWl0ZW0uY29tcG9uZW50JztcbmltcG9ydCB7XG4gIERFRkFVTFRfSU5QVVRTX09fVEVYVF9SRU5ERVJFUixcbiAgREVGQVVMVF9PVVRQVVRTX09fVEVYVF9SRU5ERVJFUixcbiAgT0xpc3RJdGVtVGV4dFJlbmRlcmVyLFxufSBmcm9tICcuLi9vLWxpc3QtaXRlbS10ZXh0LXJlbmRlcmVyLmNsYXNzJztcblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfSU5QVVRTX09fTElTVF9JVEVNX0FWQVRBUiA9IFtcbiAgLi4uREVGQVVMVF9JTlBVVFNfT19URVhUX1JFTkRFUkVSLFxuICAnYXZhdGFyJyxcbiAgJ2VtcHR5QXZhdGFyOiBlbXB0eS1hdmF0YXInLFxuICAvLyBhdmF0YXItdHlwZSBbYmFzZTY0fHVybF06IGF2YXRhciB0eXBlIChleHRlcm4gdXJsIG9yIGJhc2U2NCkuIERlZmF1bHQ6IG5vIHZhbHVlLlxuICAnYXZhdGFyVHlwZTogYXZhdGFyLXR5cGUnXG5dO1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9PVVRQVVRTX09fTElTVF9JVEVNX0FWQVRBUiA9IFtcbiAgLi4uREVGQVVMVF9PVVRQVVRTX09fVEVYVF9SRU5ERVJFUlxuXTtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnby1saXN0LWl0ZW0tYXZhdGFyJyxcbiAgdGVtcGxhdGVVcmw6ICcuL28tbGlzdC1pdGVtLWF2YXRhci5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL28tbGlzdC1pdGVtLWF2YXRhci5jb21wb25lbnQuc2NzcyddLFxuICBpbnB1dHM6IERFRkFVTFRfSU5QVVRTX09fTElTVF9JVEVNX0FWQVRBUixcbiAgb3V0cHV0czogREVGQVVMVF9PVVRQVVRTX09fTElTVF9JVEVNX0FWQVRBUixcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgaG9zdDoge1xuICAgICdbY2xhc3Muby1jdXN0b20tbGlzdC1pdGVtXSc6ICd0cnVlJyxcbiAgICAnW2NsYXNzLm8tbGlzdC1pdGVtLWF2YXRhcl0nOiAndHJ1ZSdcbiAgfVxufSlcbmV4cG9ydCBjbGFzcyBPTGlzdEl0ZW1BdmF0YXJDb21wb25lbnQgZXh0ZW5kcyBPTGlzdEl0ZW1UZXh0UmVuZGVyZXIgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkluaXQge1xuXG4gIHB1YmxpYyBhdmF0YXJTcmM6IHN0cmluZztcbiAgcHJvdGVjdGVkIGF2YXRhcjogc3RyaW5nO1xuICBwcm90ZWN0ZWQgYXZhdGFyVHlwZTogc3RyaW5nO1xuICBwcm90ZWN0ZWQgZW1wdHlBdmF0YXI6IHN0cmluZztcblxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGVsUmVmOiBFbGVtZW50UmVmLFxuICAgIF9yZW5kZXJlcjogUmVuZGVyZXIyLFxuICAgIF9pbmplY3RvcjogSW5qZWN0b3IsXG4gICAgQE9wdGlvbmFsKCkgQEluamVjdChmb3J3YXJkUmVmKCgpID0+IE9MaXN0SXRlbUNvbXBvbmVudCkpIHByb3RlY3RlZCBfbGlzdEl0ZW06IE9MaXN0SXRlbUNvbXBvbmVudFxuICApIHtcbiAgICBzdXBlcihlbFJlZiwgX3JlbmRlcmVyLCBfaW5qZWN0b3IsIF9saXN0SXRlbSk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5tb2RpZnlNYXRMaXN0SXRlbUVsZW1lbnQoKTtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIGxldCBhdmF0YXJWYWx1ZTogYW55ID0gdGhpcy5hdmF0YXI7XG4gICAgaWYgKCF0aGlzLmF2YXRhcikge1xuICAgICAgYXZhdGFyVmFsdWUgPSB0aGlzLmVtcHR5QXZhdGFyO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2l0Y2ggKHRoaXMuYXZhdGFyVHlwZSkge1xuICAgICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICAgIGF2YXRhclZhbHVlID0gKCdkYXRhOmltYWdlL3BuZztiYXNlNjQsJyArICgodHlwZW9mIChhdmF0YXJWYWx1ZS5ieXRlcykgIT09ICd1bmRlZmluZWQnKSA/IGF2YXRhclZhbHVlLmJ5dGVzIDogYXZhdGFyVmFsdWUpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAndXJsJzpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBhdmF0YXJWYWx1ZSA9IHRoaXMuYXZhdGFyO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmF2YXRhclNyYyA9IGF2YXRhclZhbHVlO1xuICB9XG5cbn1cbiJdfQ==