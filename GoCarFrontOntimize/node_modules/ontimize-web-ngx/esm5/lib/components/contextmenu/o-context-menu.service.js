import { Overlay, ScrollStrategyOptions } from '@angular/cdk/overlay';
import { ComponentPortal } from '@angular/cdk/portal';
import { ChangeDetectorRef, ElementRef, Injectable, Renderer2 } from '@angular/core';
import { Subject, Subscription } from 'rxjs';
import { OContextMenuContentComponent } from './context-menu/o-context-menu-content.component';
import { OContextMenuOverlayService } from './o-context-menu-overlay.service';
var OContextMenuService = (function () {
    function OContextMenuService(overlay, scrollStrategy, cd, overlayService, renderer) {
        this.overlay = overlay;
        this.scrollStrategy = scrollStrategy;
        this.cd = cd;
        this.overlayService = overlayService;
        this.renderer = renderer;
        this.showContextMenu = new Subject();
        this.closeContextMenu = new Subject();
        this.fakeElement = new ElementRef({ nativeElement: '' });
        this.subscription = new Subscription();
    }
    OContextMenuService.prototype.ngOnDestroy = function () {
        this.subscription.unsubscribe();
    };
    OContextMenuService.prototype.openContextMenu = function (context) {
        this.destroyOverlays();
        this.createOverlay(context);
    };
    OContextMenuService.prototype.destroyOverlays = function () {
        this.overlayService.destroyOverlays();
    };
    OContextMenuService.prototype.createOverlay = function (context) {
        var _this = this;
        context.event.preventDefault();
        context.event.stopPropagation();
        this.fakeElement.nativeElement.getBoundingClientRect = function () { return ({
            bottom: context.event.clientY,
            height: 0,
            left: context.event.clientX,
            right: context.event.clientX,
            top: context.event.clientY,
            width: 0,
            x: 0,
            y: 0,
            toJSON: function () { }
        }); };
        var positionStrategy = this.overlay.position()
            .flexibleConnectedTo(context.anchorElement || this.fakeElement)
            .withPositions([{
                overlayX: 'start',
                overlayY: 'top',
                originX: 'start',
                originY: 'bottom'
            }]);
        var overlayRef = this.overlay.create({
            positionStrategy: positionStrategy,
            hasBackdrop: false,
            panelClass: ['o-context-menu'],
            scrollStrategy: this.scrollStrategy.close()
        });
        this.overlayService.addOverlay(overlayRef);
        this.attachContextMenu(overlayRef, context);
        setTimeout(function () {
            overlayRef.hostElement.classList.add('overlay-ref-display-none');
            var nextSibling = overlayRef.hostElement.nextElementSibling;
            if (nextSibling) {
                var top_1 = nextSibling.getBoundingClientRect().top;
                _this.renderer.setStyle(nextSibling, 'top', top_1 - 32 + "px");
            }
            _this.cd.detectChanges();
        });
    };
    OContextMenuService.prototype.attachContextMenu = function (overlay, context) {
        var _this = this;
        var contextMenuContent = overlay.attach(new ComponentPortal(OContextMenuContentComponent));
        contextMenuContent.instance.overlay = overlay;
        contextMenuContent.instance.menuItems = context.menuItems;
        contextMenuContent.instance.externalMenuItems = context.externalMenuItems;
        contextMenuContent.instance.data = context.data;
        contextMenuContent.instance.menuClass = context.class;
        this.subscription.add(contextMenuContent.instance.close.subscribe(function () {
            _this.closeContextMenu.next();
            _this.destroyOverlays();
        }));
    };
    OContextMenuService.decorators = [
        { type: Injectable }
    ];
    OContextMenuService.ctorParameters = function () { return [
        { type: Overlay },
        { type: ScrollStrategyOptions },
        { type: ChangeDetectorRef },
        { type: OContextMenuOverlayService },
        { type: Renderer2 }
    ]; };
    return OContextMenuService;
}());
export { OContextMenuService };
//# sourceMappingURL=data:application/json;base64,