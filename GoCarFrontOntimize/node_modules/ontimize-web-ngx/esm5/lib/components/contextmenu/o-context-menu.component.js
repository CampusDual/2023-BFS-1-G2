import { Component, ContentChildren, EventEmitter, Injector, QueryList } from '@angular/core';
import { Subscription } from 'rxjs';
import { OComponentMenuBaseItem } from './o-content-menu-base-item.class';
import { OContextMenuService } from './o-context-menu.service';
export var DEFAULT_OUTPUTS_O_CONTEXT_MENU = [
    'onShow',
    'onClose'
];
var OContextMenuComponent = (function () {
    function OContextMenuComponent(injector) {
        this.injector = injector;
        this.onShow = new EventEmitter();
        this.onClose = new EventEmitter();
        this.subscription = new Subscription();
        this.oContextMenuService = this.injector.get(OContextMenuService);
    }
    OContextMenuComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.subscription.add(this.oContextMenuService.showContextMenu.subscribe(function (param) { return _this.showContextMenu(param); }));
        this.subscription.add(this.oContextMenuService.closeContextMenu.subscribe(function (param) { return _this.onClose.emit(); }));
    };
    OContextMenuComponent.prototype.ngOnDestroy = function () {
        this.subscription.unsubscribe();
    };
    OContextMenuComponent.prototype.showContextMenu = function (params) {
        this.origin = params.event.target;
        this.onShow.emit(params);
        if (params.contextMenu !== this) {
            return;
        }
        params.menuItems = this.oContextMenuItems;
        params.externalMenuItems = this.externalContextMenuItems;
        if (params.menuItems.length > 0) {
            this.oContextMenuService.openContextMenu(params);
        }
    };
    OContextMenuComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-context-menu',
                    template: ' ',
                    outputs: DEFAULT_OUTPUTS_O_CONTEXT_MENU,
                    providers: [OContextMenuService]
                }] }
    ];
    OContextMenuComponent.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    OContextMenuComponent.propDecorators = {
        oContextMenuItems: [{ type: ContentChildren, args: [OComponentMenuBaseItem,] }]
    };
    return OContextMenuComponent;
}());
export { OContextMenuComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1jb250ZXh0LW1lbnUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vb250aW1pemUtd2ViLW5neC8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2NvbnRleHRtZW51L28tY29udGV4dC1tZW51LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRSxZQUFZLEVBQUUsUUFBUSxFQUFxQixTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakgsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUdwQyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUMxRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUUvRCxNQUFNLENBQUMsSUFBTSw4QkFBOEIsR0FBRztJQUM1QyxRQUFRO0lBQ1IsU0FBUztDQUNWLENBQUM7QUFFRjtJQWtCRSwrQkFDWSxRQUFrQjtRQUFsQixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBUHZCLFdBQU0sR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUMvQyxZQUFPLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7UUFHN0MsaUJBQVksR0FBaUIsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUt4RCxJQUFJLENBQUMsbUJBQW1CLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUNwRSxDQUFDO0lBRU0sd0NBQVEsR0FBZjtRQUFBLGlCQUdDO1FBRkMsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsVUFBQSxLQUFLLElBQUksT0FBQSxLQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxFQUEzQixDQUEyQixDQUFDLENBQUMsQ0FBQztRQUNoSCxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLFVBQUEsS0FBSyxJQUFJLE9BQUEsS0FBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBbkIsQ0FBbUIsQ0FBQyxDQUFDLENBQUM7SUFDM0csQ0FBQztJQUVNLDJDQUFXLEdBQWxCO1FBQ0UsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNsQyxDQUFDO0lBRU0sK0NBQWUsR0FBdEIsVUFBdUIsTUFBNEI7UUFDakQsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQXFCLENBQUM7UUFDakQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDekIsSUFBSSxNQUFNLENBQUMsV0FBVyxLQUFLLElBQUksRUFBRTtZQUMvQixPQUFPO1NBQ1I7UUFDRCxNQUFNLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztRQUMxQyxNQUFNLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLHdCQUF3QixDQUFDO1FBQ3pELElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQy9CLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDbEQ7SUFDSCxDQUFDOztnQkE1Q0YsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxnQkFBZ0I7b0JBQzFCLFFBQVEsRUFBRSxHQUFHO29CQUNiLE9BQU8sRUFBRSw4QkFBOEI7b0JBQ3ZDLFNBQVMsRUFBRSxDQUFDLG1CQUFtQixDQUFDO2lCQUNqQzs7O2dCQWpCa0QsUUFBUTs7O29DQW9CeEQsZUFBZSxTQUFDLHNCQUFzQjs7SUFzQ3pDLDRCQUFDO0NBQUEsQUE5Q0QsSUE4Q0M7U0F4Q1kscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBDb250ZW50Q2hpbGRyZW4sIEV2ZW50RW1pdHRlciwgSW5qZWN0b3IsIE9uRGVzdHJveSwgT25Jbml0LCBRdWVyeUxpc3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBJT0NvbnRleHRNZW51Q29udGV4dCB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvby1jb250ZXh0LW1lbnUuaW50ZXJmYWNlJztcbmltcG9ydCB7IE9Db21wb25lbnRNZW51QmFzZUl0ZW0gfSBmcm9tICcuL28tY29udGVudC1tZW51LWJhc2UtaXRlbS5jbGFzcyc7XG5pbXBvcnQgeyBPQ29udGV4dE1lbnVTZXJ2aWNlIH0gZnJvbSAnLi9vLWNvbnRleHQtbWVudS5zZXJ2aWNlJztcblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfT1VUUFVUU19PX0NPTlRFWFRfTUVOVSA9IFtcbiAgJ29uU2hvdycsXG4gICdvbkNsb3NlJ1xuXTtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnby1jb250ZXh0LW1lbnUnLFxuICB0ZW1wbGF0ZTogJyAnLFxuICBvdXRwdXRzOiBERUZBVUxUX09VVFBVVFNfT19DT05URVhUX01FTlUsXG4gIHByb3ZpZGVyczogW09Db250ZXh0TWVudVNlcnZpY2VdXG59KVxuZXhwb3J0IGNsYXNzIE9Db250ZXh0TWVudUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uRGVzdHJveSwgT25Jbml0IHtcbiAgcHVibGljIGV4dGVybmFsQ29udGV4dE1lbnVJdGVtczogUXVlcnlMaXN0PE9Db21wb25lbnRNZW51QmFzZUl0ZW0+O1xuICBAQ29udGVudENoaWxkcmVuKE9Db21wb25lbnRNZW51QmFzZUl0ZW0pXG4gIHB1YmxpYyBvQ29udGV4dE1lbnVJdGVtczogUXVlcnlMaXN0PE9Db21wb25lbnRNZW51QmFzZUl0ZW0+O1xuXG4gIHB1YmxpYyBvcmlnaW46IEhUTUxFbGVtZW50O1xuICBwdWJsaWMgb25TaG93OiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgcHVibGljIG9uQ2xvc2U6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIHB1YmxpYyBvQ29udGV4dE1lbnVTZXJ2aWNlOiBPQ29udGV4dE1lbnVTZXJ2aWNlO1xuICBwcm90ZWN0ZWQgc3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIGluamVjdG9yOiBJbmplY3RvclxuICApIHtcbiAgICB0aGlzLm9Db250ZXh0TWVudVNlcnZpY2UgPSB0aGlzLmluamVjdG9yLmdldChPQ29udGV4dE1lbnVTZXJ2aWNlKTtcbiAgfVxuXG4gIHB1YmxpYyBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbi5hZGQodGhpcy5vQ29udGV4dE1lbnVTZXJ2aWNlLnNob3dDb250ZXh0TWVudS5zdWJzY3JpYmUocGFyYW0gPT4gdGhpcy5zaG93Q29udGV4dE1lbnUocGFyYW0pKSk7XG4gICAgdGhpcy5zdWJzY3JpcHRpb24uYWRkKHRoaXMub0NvbnRleHRNZW51U2VydmljZS5jbG9zZUNvbnRleHRNZW51LnN1YnNjcmliZShwYXJhbSA9PiB0aGlzLm9uQ2xvc2UuZW1pdCgpKSk7XG4gIH1cblxuICBwdWJsaWMgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgfVxuXG4gIHB1YmxpYyBzaG93Q29udGV4dE1lbnUocGFyYW1zOiBJT0NvbnRleHRNZW51Q29udGV4dCk6IHZvaWQge1xuICAgIHRoaXMub3JpZ2luID0gcGFyYW1zLmV2ZW50LnRhcmdldCBhcyBIVE1MRWxlbWVudDtcbiAgICB0aGlzLm9uU2hvdy5lbWl0KHBhcmFtcyk7XG4gICAgaWYgKHBhcmFtcy5jb250ZXh0TWVudSAhPT0gdGhpcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBwYXJhbXMubWVudUl0ZW1zID0gdGhpcy5vQ29udGV4dE1lbnVJdGVtcztcbiAgICBwYXJhbXMuZXh0ZXJuYWxNZW51SXRlbXMgPSB0aGlzLmV4dGVybmFsQ29udGV4dE1lbnVJdGVtcztcbiAgICBpZiAocGFyYW1zLm1lbnVJdGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLm9Db250ZXh0TWVudVNlcnZpY2Uub3BlbkNvbnRleHRNZW51KHBhcmFtcyk7XG4gICAgfVxuICB9XG5cbn1cbiJdfQ==