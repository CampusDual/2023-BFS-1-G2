import * as tslib_1 from "tslib";
import { Component, ContentChildren, forwardRef, QueryList } from '@angular/core';
import { Subscription } from 'rxjs';
import { DEFAULT_INPUTS_O_CONTEXT_MENU_ITEMS, OComponentMenuBaseItem } from '../o-content-menu-base-item.class';
export var DEFAULT_CONTEXT_MENU_GROUP_INPUTS = tslib_1.__spread(DEFAULT_INPUTS_O_CONTEXT_MENU_ITEMS);
var OContextMenuGroupComponent = (function (_super) {
    tslib_1.__extends(OContextMenuGroupComponent, _super);
    function OContextMenuGroupComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = OComponentMenuBaseItem.TYPE_GROUP_MENU;
        _this.children = [];
        _this.subscription = new Subscription();
        return _this;
    }
    OContextMenuGroupComponent.prototype.ngOnDestroy = function () {
        this.subscription.unsubscribe();
    };
    OContextMenuGroupComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.subscription.add(this.oContextMenuItems.changes.subscribe(function () {
            _this.updateChildren();
        }));
        this.updateChildren();
    };
    OContextMenuGroupComponent.prototype.updateChildren = function () {
        this.children = this.oContextMenuItems.toArray().slice(1, this.oContextMenuItems.toArray().length);
    };
    OContextMenuGroupComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-context-menu-group',
                    template: ' ',
                    inputs: DEFAULT_CONTEXT_MENU_GROUP_INPUTS,
                    providers: [{ provide: OComponentMenuBaseItem, useExisting: forwardRef(function () { return OContextMenuGroupComponent; }) }]
                }] }
    ];
    OContextMenuGroupComponent.propDecorators = {
        oContextMenuItems: [{ type: ContentChildren, args: [OComponentMenuBaseItem,] }]
    };
    return OContextMenuGroupComponent;
}(OComponentMenuBaseItem));
export { OContextMenuGroupComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1jb250ZXh0LW1lbnUtZ3JvdXAuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vb250aW1pemUtd2ViLW5neC8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2NvbnRleHRtZW51L2NvbnRleHQtbWVudS1ncm91cC9vLWNvbnRleHQtbWVudS1ncm91cC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBb0IsU0FBUyxFQUFFLGVBQWUsRUFBRSxVQUFVLEVBQWEsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQy9HLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFcEMsT0FBTyxFQUFFLG1DQUFtQyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFFaEgsTUFBTSxDQUFDLElBQU0saUNBQWlDLG9CQUN6QyxtQ0FBbUMsQ0FDdkMsQ0FBQztBQUVGO0lBTWdELHNEQUFzQjtJQU50RTtRQUFBLHFFQTZCQztRQXJCUSxVQUFJLEdBQUcsc0JBQXNCLENBQUMsZUFBZSxDQUFDO1FBQzlDLGNBQVEsR0FBNkIsRUFBRSxDQUFDO1FBR3JDLGtCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQzs7SUFpQjlDLENBQUM7SUFmQyxnREFBVyxHQUFYO1FBQ0UsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNsQyxDQUFDO0lBRUQsdURBQWtCLEdBQWxCO1FBQUEsaUJBS0M7UUFKQyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQztZQUM3RCxLQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDeEIsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNKLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUN4QixDQUFDO0lBRVMsbURBQWMsR0FBeEI7UUFDRSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNyRyxDQUFDOztnQkEzQkYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxzQkFBc0I7b0JBQ2hDLFFBQVEsRUFBRSxHQUFHO29CQUNiLE1BQU0sRUFBRSxpQ0FBaUM7b0JBQ3pDLFNBQVMsRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLFdBQVcsRUFBRSxVQUFVLENBQUMsY0FBTSxPQUFBLDBCQUEwQixFQUExQixDQUEwQixDQUFDLEVBQUUsQ0FBQztpQkFDNUc7OztvQ0FLRSxlQUFlLFNBQUMsc0JBQXNCOztJQW1CekMsaUNBQUM7Q0FBQSxBQTdCRCxDQU1nRCxzQkFBc0IsR0F1QnJFO1NBdkJZLDBCQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyQ29udGVudEluaXQsIENvbXBvbmVudCwgQ29udGVudENoaWxkcmVuLCBmb3J3YXJkUmVmLCBPbkRlc3Ryb3ksIFF1ZXJ5TGlzdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IERFRkFVTFRfSU5QVVRTX09fQ09OVEVYVF9NRU5VX0lURU1TLCBPQ29tcG9uZW50TWVudUJhc2VJdGVtIH0gZnJvbSAnLi4vby1jb250ZW50LW1lbnUtYmFzZS1pdGVtLmNsYXNzJztcblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfQ09OVEVYVF9NRU5VX0dST1VQX0lOUFVUUyA9IFtcbiAgLi4uREVGQVVMVF9JTlBVVFNfT19DT05URVhUX01FTlVfSVRFTVNcbl07XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ28tY29udGV4dC1tZW51LWdyb3VwJyxcbiAgdGVtcGxhdGU6ICcgJyxcbiAgaW5wdXRzOiBERUZBVUxUX0NPTlRFWFRfTUVOVV9HUk9VUF9JTlBVVFMsXG4gIHByb3ZpZGVyczogW3sgcHJvdmlkZTogT0NvbXBvbmVudE1lbnVCYXNlSXRlbSwgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gT0NvbnRleHRNZW51R3JvdXBDb21wb25lbnQpIH1dXG59KVxuZXhwb3J0IGNsYXNzIE9Db250ZXh0TWVudUdyb3VwQ29tcG9uZW50IGV4dGVuZHMgT0NvbXBvbmVudE1lbnVCYXNlSXRlbSBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveSB7XG5cbiAgcHVibGljIHR5cGUgPSBPQ29tcG9uZW50TWVudUJhc2VJdGVtLlRZUEVfR1JPVVBfTUVOVTtcbiAgcHVibGljIGNoaWxkcmVuOiBPQ29tcG9uZW50TWVudUJhc2VJdGVtW10gPSBbXTtcbiAgQENvbnRlbnRDaGlsZHJlbihPQ29tcG9uZW50TWVudUJhc2VJdGVtKSBwdWJsaWMgb0NvbnRleHRNZW51SXRlbXM6IFF1ZXJ5TGlzdDxPQ29tcG9uZW50TWVudUJhc2VJdGVtPjtcblxuICBwcm90ZWN0ZWQgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gIH1cblxuICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb24uYWRkKHRoaXMub0NvbnRleHRNZW51SXRlbXMuY2hhbmdlcy5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgdGhpcy51cGRhdGVDaGlsZHJlbigpO1xuICAgIH0pKTtcbiAgICB0aGlzLnVwZGF0ZUNoaWxkcmVuKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgdXBkYXRlQ2hpbGRyZW4oKSB7XG4gICAgdGhpcy5jaGlsZHJlbiA9IHRoaXMub0NvbnRleHRNZW51SXRlbXMudG9BcnJheSgpLnNsaWNlKDEsIHRoaXMub0NvbnRleHRNZW51SXRlbXMudG9BcnJheSgpLmxlbmd0aCk7XG4gIH1cblxufVxuIl19