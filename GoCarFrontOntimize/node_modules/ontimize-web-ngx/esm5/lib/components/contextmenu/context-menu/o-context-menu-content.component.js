import { Component, EventEmitter, HostListener, Injector, ViewChild } from '@angular/core';
import { MatMenuTrigger } from '@angular/material';
import { OContextMenuGroupComponent } from '../context-menu-group/o-context-menu-group.component';
export var DEFAULT_CONTEXT_MENU_CONTENT_INPUTS = [
    'menuItems',
    'externalMenuItems',
    'overlay',
    'data',
    'menuClass'
];
export var DEFAULT_CONTEXT_MENU_CONTENT_OUTPUTS = [
    'execute',
    'close'
];
var OContextMenuContentComponent = (function () {
    function OContextMenuContentComponent(injector) {
        this.injector = injector;
        this.execute = new EventEmitter();
        this.close = new EventEmitter();
    }
    OContextMenuContentComponent.prototype.click = function () {
        this.closeContent();
    };
    OContextMenuContentComponent.prototype.ngOnInit = function () {
        this.initialize();
    };
    OContextMenuContentComponent.prototype.ngAfterViewInit = function () {
        this.trigger.openMenu();
    };
    OContextMenuContentComponent.prototype.initialize = function () {
        var menuItemsArray = this.menuItems ? this.menuItems.toArray() : [];
        var externalItemsArray = this.externalMenuItems ? this.externalMenuItems.toArray() : [];
        this.allMenuItems = menuItemsArray.concat(externalItemsArray);
        this.setData(this.allMenuItems);
    };
    OContextMenuContentComponent.prototype.setData = function (items) {
        var _this = this;
        if (this.data) {
            (items || []).forEach(function (menuItem) {
                menuItem.data = _this.data;
                if (menuItem instanceof OContextMenuGroupComponent) {
                    _this.setData(menuItem.children);
                }
            });
        }
    };
    OContextMenuContentComponent.prototype.onMenuClosed = function (e) {
        this.closeContent();
    };
    OContextMenuContentComponent.prototype.closeContent = function () {
        this.trigger.closeMenu();
        this.close.emit();
    };
    OContextMenuContentComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-context-menu-content',
                    template: "<button mat-button [matMenuTriggerFor]=\"menu.childMenu\" (menuClosed)=\"onMenuClosed($event)\"></button>\n<o-wrapper-content-menu #menu [items]=\"allMenuItems\" [class]=\"menuClass\"> </o-wrapper-content-menu>",
                    inputs: DEFAULT_CONTEXT_MENU_CONTENT_INPUTS,
                    outputs: DEFAULT_CONTEXT_MENU_CONTENT_OUTPUTS,
                    host: {
                        '[class.o-context-menu-content]': 'true'
                    }
                }] }
    ];
    OContextMenuContentComponent.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    OContextMenuContentComponent.propDecorators = {
        trigger: [{ type: ViewChild, args: [MatMenuTrigger, { static: false },] }],
        click: [{ type: HostListener, args: ['document:click',] }]
    };
    return OContextMenuContentComponent;
}());
export { OContextMenuContentComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1jb250ZXh0LW1lbnUtY29udGVudC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9vbnRpbWl6ZS13ZWItbmd4LyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvY29udGV4dG1lbnUvY29udGV4dC1tZW51L28tY29udGV4dC1tZW51LWNvbnRlbnQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBaUIsU0FBUyxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsUUFBUSxFQUFxQixTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0gsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRW5ELE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLHNEQUFzRCxDQUFDO0FBSWxHLE1BQU0sQ0FBQyxJQUFNLG1DQUFtQyxHQUFHO0lBQ2pELFdBQVc7SUFDWCxtQkFBbUI7SUFDbkIsU0FBUztJQUNULE1BQU07SUFDTixXQUFXO0NBQ1osQ0FBQztBQUVGLE1BQU0sQ0FBQyxJQUFNLG9DQUFvQyxHQUFHO0lBQ2xELFNBQVM7SUFDVCxPQUFPO0NBQ1IsQ0FBQztBQUVGO0lBc0JFLHNDQUNZLFFBQWtCO1FBQWxCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFQdkIsWUFBTyxHQUFtRixJQUFJLFlBQVksRUFBRSxDQUFDO1FBQzdHLFVBQUssR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQU9qRCxDQUFDO0lBR0UsNENBQUssR0FEWjtRQUVFLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBRU0sK0NBQVEsR0FBZjtRQUNFLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBRU0sc0RBQWUsR0FBdEI7UUFDRSxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFHTSxpREFBVSxHQUFqQjtRQUNFLElBQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUN0RSxJQUFNLGtCQUFrQixHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDMUYsSUFBSSxDQUFDLFlBQVksR0FBRyxjQUFjLENBQUMsTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFDOUQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVNLDhDQUFPLEdBQWQsVUFBZSxLQUErQjtRQUE5QyxpQkFTQztRQVJDLElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtZQUNiLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFDLFFBQWdDO2dCQUNyRCxRQUFRLENBQUMsSUFBSSxHQUFHLEtBQUksQ0FBQyxJQUFJLENBQUM7Z0JBQzFCLElBQUksUUFBUSxZQUFZLDBCQUEwQixFQUFFO29CQUNsRCxLQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztpQkFDakM7WUFDSCxDQUFDLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQztJQUVNLG1EQUFZLEdBQW5CLFVBQW9CLENBQVE7UUFDMUIsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFFTSxtREFBWSxHQUFuQjtRQUNFLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDekIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNwQixDQUFDOztnQkFqRUYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSx3QkFBd0I7b0JBQ2xDLDhOQUFvRDtvQkFDcEQsTUFBTSxFQUFFLG1DQUFtQztvQkFDM0MsT0FBTyxFQUFFLG9DQUFvQztvQkFDN0MsSUFBSSxFQUFFO3dCQUNKLGdDQUFnQyxFQUFFLE1BQU07cUJBQ3pDO2lCQUNGOzs7Z0JBNUI4RCxRQUFROzs7MEJBc0NwRSxTQUFTLFNBQUMsY0FBYyxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRTt3QkFRM0MsWUFBWSxTQUFDLGdCQUFnQjs7SUF5Q2hDLG1DQUFDO0NBQUEsQUFuRUQsSUFtRUM7U0ExRFksNEJBQTRCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT3ZlcmxheVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9vdmVybGF5JztcbmltcG9ydCB7IEFmdGVyVmlld0luaXQsIENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBIb3N0TGlzdGVuZXIsIEluamVjdG9yLCBPbkluaXQsIFF1ZXJ5TGlzdCwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNYXRNZW51VHJpZ2dlciB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsJztcblxuaW1wb3J0IHsgT0NvbnRleHRNZW51R3JvdXBDb21wb25lbnQgfSBmcm9tICcuLi9jb250ZXh0LW1lbnUtZ3JvdXAvby1jb250ZXh0LW1lbnUtZ3JvdXAuY29tcG9uZW50JztcbmltcG9ydCB7IE9Db250ZXh0TWVudUl0ZW1Db21wb25lbnQgfSBmcm9tICcuLi9jb250ZXh0LW1lbnUtaXRlbS9vLWNvbnRleHQtbWVudS1pdGVtLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBPQ29tcG9uZW50TWVudUJhc2VJdGVtIH0gZnJvbSAnLi4vby1jb250ZW50LW1lbnUtYmFzZS1pdGVtLmNsYXNzJztcblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfQ09OVEVYVF9NRU5VX0NPTlRFTlRfSU5QVVRTID0gW1xuICAnbWVudUl0ZW1zJyxcbiAgJ2V4dGVybmFsTWVudUl0ZW1zJyxcbiAgJ292ZXJsYXknLFxuICAnZGF0YScsXG4gICdtZW51Q2xhc3MnXG5dO1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9DT05URVhUX01FTlVfQ09OVEVOVF9PVVRQVVRTID0gW1xuICAnZXhlY3V0ZScsXG4gICdjbG9zZSdcbl07XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ28tY29udGV4dC1tZW51LWNvbnRlbnQnLFxuICB0ZW1wbGF0ZVVybDogJ28tY29udGV4dC1tZW51LWNvbnRlbnQuY29tcG9uZW50Lmh0bWwnLFxuICBpbnB1dHM6IERFRkFVTFRfQ09OVEVYVF9NRU5VX0NPTlRFTlRfSU5QVVRTLFxuICBvdXRwdXRzOiBERUZBVUxUX0NPTlRFWFRfTUVOVV9DT05URU5UX09VVFBVVFMsXG4gIGhvc3Q6IHtcbiAgICAnW2NsYXNzLm8tY29udGV4dC1tZW51LWNvbnRlbnRdJzogJ3RydWUnXG4gIH1cbn0pXG5leHBvcnQgY2xhc3MgT0NvbnRleHRNZW51Q29udGVudENvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uSW5pdCB7XG5cbiAgcHVibGljIG1lbnVJdGVtczogUXVlcnlMaXN0PE9Db21wb25lbnRNZW51QmFzZUl0ZW0+O1xuICBwdWJsaWMgZXh0ZXJuYWxNZW51SXRlbXM6IFF1ZXJ5TGlzdDxPQ29tcG9uZW50TWVudUJhc2VJdGVtPjtcbiAgcHVibGljIG92ZXJsYXk6IE92ZXJsYXlSZWY7XG4gIHB1YmxpYyBkYXRhOiBhbnk7XG4gIHB1YmxpYyBtZW51Q2xhc3M6IHN0cmluZztcbiAgcHVibGljIGV4ZWN1dGU6IEV2ZW50RW1pdHRlcjx7IGV2ZW50OiBFdmVudCwgZGF0YTogYW55LCBtZW51SXRlbTogT0NvbnRleHRNZW51SXRlbUNvbXBvbmVudCB9PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgcHVibGljIGNsb3NlOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgQFZpZXdDaGlsZChNYXRNZW51VHJpZ2dlciwgeyBzdGF0aWM6IGZhbHNlIH0pXG4gIHB1YmxpYyB0cmlnZ2VyOiBNYXRNZW51VHJpZ2dlcjtcbiAgcHVibGljIGFsbE1lbnVJdGVtczogT0NvbXBvbmVudE1lbnVCYXNlSXRlbVtdO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCBpbmplY3RvcjogSW5qZWN0b3JcbiAgKSB7IH1cblxuICBASG9zdExpc3RlbmVyKCdkb2N1bWVudDpjbGljaycpXG4gIHB1YmxpYyBjbGljaygpOiB2b2lkIHtcbiAgICB0aGlzLmNsb3NlQ29udGVudCgpO1xuICB9XG5cbiAgcHVibGljIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMuaW5pdGlhbGl6ZSgpO1xuICB9XG5cbiAgcHVibGljIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLnRyaWdnZXIub3Blbk1lbnUoKTtcbiAgfVxuXG5cbiAgcHVibGljIGluaXRpYWxpemUoKTogdm9pZCB7XG4gICAgY29uc3QgbWVudUl0ZW1zQXJyYXkgPSB0aGlzLm1lbnVJdGVtcyA/IHRoaXMubWVudUl0ZW1zLnRvQXJyYXkoKSA6IFtdO1xuICAgIGNvbnN0IGV4dGVybmFsSXRlbXNBcnJheSA9IHRoaXMuZXh0ZXJuYWxNZW51SXRlbXMgPyB0aGlzLmV4dGVybmFsTWVudUl0ZW1zLnRvQXJyYXkoKSA6IFtdO1xuICAgIHRoaXMuYWxsTWVudUl0ZW1zID0gbWVudUl0ZW1zQXJyYXkuY29uY2F0KGV4dGVybmFsSXRlbXNBcnJheSk7XG4gICAgdGhpcy5zZXREYXRhKHRoaXMuYWxsTWVudUl0ZW1zKTtcbiAgfVxuXG4gIHB1YmxpYyBzZXREYXRhKGl0ZW1zOiBPQ29tcG9uZW50TWVudUJhc2VJdGVtW10pOiB2b2lkIHtcbiAgICBpZiAodGhpcy5kYXRhKSB7XG4gICAgICAoaXRlbXMgfHwgW10pLmZvckVhY2goKG1lbnVJdGVtOiBPQ29tcG9uZW50TWVudUJhc2VJdGVtKSA9PiB7XG4gICAgICAgIG1lbnVJdGVtLmRhdGEgPSB0aGlzLmRhdGE7XG4gICAgICAgIGlmIChtZW51SXRlbSBpbnN0YW5jZW9mIE9Db250ZXh0TWVudUdyb3VwQ29tcG9uZW50KSB7XG4gICAgICAgICAgdGhpcy5zZXREYXRhKG1lbnVJdGVtLmNoaWxkcmVuKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIG9uTWVudUNsb3NlZChlOiBFdmVudCk6IHZvaWQge1xuICAgIHRoaXMuY2xvc2VDb250ZW50KCk7XG4gIH1cblxuICBwdWJsaWMgY2xvc2VDb250ZW50KCk6IHZvaWQge1xuICAgIHRoaXMudHJpZ2dlci5jbG9zZU1lbnUoKTtcbiAgICB0aGlzLmNsb3NlLmVtaXQoKTtcbiAgfVxuXG59XG4iXX0=