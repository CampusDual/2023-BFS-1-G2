import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, Inject, Injector, Optional, ViewChild, ViewEncapsulation } from '@angular/core';
import { MatDialog, MatMenu } from '@angular/material';
import { InputConverter } from '../../../../../decorators/input-converter';
import { DialogService } from '../../../../../services/dialog.service';
import { O_CHART_ON_DEMAND_SERVICE, O_REPORT_SERVICE } from '../../../../../services/factories';
import { OntimizeExportDataProviderService } from '../../../../../services/ontimize-export-data-provider.service';
import { SnackBarService } from '../../../../../services/snackbar.service';
import { OTranslateService } from '../../../../../services/translate/o-translate.service';
import { OLoadFilterDialogComponent } from '../../../../../shared/components/filter/load-filter/o-load-filter-dialog.component';
import { OStoreFilterDialogComponent } from '../../../../../shared/components/filter/store-filter/o-store-filter-dialog.component';
import { PermissionsUtils } from '../../../../../util/permissions';
import { Util } from '../../../../../util/util';
import { OTableComponent } from '../../../o-table.component';
import { OTableGroupByColumnsDialogComponent } from '../../dialog';
import { OTableApplyConfigurationDialogComponent } from '../../dialog/apply-configuration/o-table-apply-configuration-dialog.component';
import { OTableExportDialogComponent } from '../../dialog/export/o-table-export-dialog.component';
import { OTableStoreConfigurationDialogComponent } from '../../dialog/store-configuration/o-table-store-configuration-dialog.component';
import { OTableVisibleColumnsDialogComponent } from '../../dialog/visible-columns/o-table-visible-columns-dialog.component';
import { OTableOptionComponent } from '../table-option/o-table-option.component';
export var DEFAULT_INPUTS_O_TABLE_MENU = [
    'selectAllCheckbox: select-all-checkbox',
    'exportButton: export-button',
    'columnsVisibilityButton: columns-visibility-button',
    'showConfigurationOption: show-configuration-option',
    'showFilterOption: show-filter-option',
    'showGroupByOption: show-group-by-option',
    'showResetWidthOption: show-reset-width-option',
    'showReportOnDemandOption: show-report-on-demand-option',
    'showChartsOnDemandOption: show-charts-on-demand-option'
];
export var DEFAULT_OUTPUTS_O_TABLE_MENU = [];
var OTableMenuComponent = (function () {
    function OTableMenuComponent(injector, dialog, cd, table, chartOnDemandService, reportService) {
        this.injector = injector;
        this.dialog = dialog;
        this.cd = cd;
        this.table = table;
        this.chartOnDemandService = chartOnDemandService;
        this.reportService = reportService;
        this.selectAllCheckbox = false;
        this.exportButton = true;
        this.showConfigurationOption = true;
        this.showFilterOption = true;
        this.columnsVisibilityButton = true;
        this.showGroupByOption = true;
        this.showResetWidthOption = true;
        this.showReportOnDemandOption = true;
        this.showChartsOnDemandOption = true;
        this.onVisibleFilterOptionChange = new EventEmitter();
        this.mutationObservers = [];
        this.dialogService = this.injector.get(DialogService);
        this.translateService = this.injector.get(OTranslateService);
        this.snackBarService = this.injector.get(SnackBarService);
        this.exportDataProvider = this.injector.get(OntimizeExportDataProviderService);
    }
    OTableMenuComponent.prototype.ngOnInit = function () {
        this.permissions = this.table.getMenuPermissions();
    };
    Object.defineProperty(OTableMenuComponent.prototype, "isColumnFilterOptionActive", {
        get: function () {
            return this.table && this.table.isColumnFiltersActive;
        },
        enumerable: true,
        configurable: true
    });
    OTableMenuComponent.prototype.ngAfterViewInit = function () {
        if (!this.permissions.items || this.permissions.items.length === 0) {
            return;
        }
        if (this.selectAllCheckboxOption && !this.enabledSelectAllCheckbox) {
            this.disableOTableOptionComponent(this.selectAllCheckboxOption);
        }
        if (this.exportButtonOption && !this.enabledExportButton) {
            this.disableOTableOptionComponent(this.exportButtonOption);
        }
        if (this.columnsVisibilityButtonOption && !this.enabledColumnsVisibilityButton) {
            this.disableOTableOptionComponent(this.columnsVisibilityButtonOption);
        }
        if (this.filterMenuButton && !this.enabledFilterMenu) {
            this.disableButton(this.filterMenuButton);
        }
        if (this.configurationMenuButton && !this.enabledConfigurationMenu) {
            this.disableButton(this.configurationMenuButton);
        }
        this.cd.detectChanges();
    };
    OTableMenuComponent.prototype.disableOTableOptionComponent = function (comp) {
        comp.enabled = false;
        var buttonEL = comp.elRef.nativeElement.querySelector('button');
        var obs = PermissionsUtils.registerDisabledChangesInDom(buttonEL);
        this.mutationObservers.push(obs);
    };
    OTableMenuComponent.prototype.disableButton = function (buttonEL) {
        buttonEL.nativeElement.disabled = true;
        var obs = PermissionsUtils.registerDisabledChangesInDom(buttonEL.nativeElement);
        this.mutationObservers.push(obs);
    };
    OTableMenuComponent.prototype.ngOnDestroy = function () {
        if (this.mutationObservers) {
            this.mutationObservers.forEach(function (m) {
                m.disconnect();
            });
        }
    };
    OTableMenuComponent.prototype.registerOptions = function (oTableOptions) {
        var items = this.permissions.items || [];
        var fixedOptions = ['select-all-checkbox', 'export', 'show-hide-columns', 'filter', 'configuration'];
        var userItems = items.filter(function (perm) { return fixedOptions.indexOf(perm.attr) === -1; });
        var self = this;
        userItems.forEach(function (perm) {
            var option = oTableOptions.find(function (oTableOption) { return oTableOption.oattr === perm.attr; });
            self.setPermissionsToOTableOption(perm, option);
        });
    };
    OTableMenuComponent.prototype.setPermissionsToOTableOption = function (perm, option) {
        if (perm.visible === false && option) {
            option.elRef.nativeElement.remove();
        }
        else if (perm.enabled === false && option) {
            option.enabled = false;
            var buttonEL = option.elRef.nativeElement.querySelector('button');
            var obs = PermissionsUtils.registerDisabledChangesInDom(buttonEL);
            this.mutationObservers.push(obs);
        }
    };
    OTableMenuComponent.prototype.getPermissionByAttr = function (attr) {
        var items = this.permissions.items || [];
        return items.find(function (perm) { return perm.attr === attr; });
    };
    Object.defineProperty(OTableMenuComponent.prototype, "isSelectAllOptionActive", {
        get: function () {
            return this.table.oTableOptions.selectColumn.visible;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableMenuComponent.prototype, "showSelectAllCheckbox", {
        get: function () {
            if (!this.selectAllCheckbox) {
                return false;
            }
            var perm = this.getPermissionByAttr('select-all-checkbox');
            return this.showFilterOption && !(perm && perm.visible === false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableMenuComponent.prototype, "rowHeightObservable", {
        get: function () {
            return this.table.rowHeightObservable;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableMenuComponent.prototype, "enabledSelectAllCheckbox", {
        get: function () {
            var perm = this.getPermissionByAttr('select-all-checkbox');
            return !(perm && perm.enabled === false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableMenuComponent.prototype, "showExportButton", {
        get: function () {
            if (!this.exportButton) {
                return false;
            }
            var perm = this.getPermissionByAttr('export');
            return !(perm && perm.visible === false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableMenuComponent.prototype, "enabledExportButton", {
        get: function () {
            var perm = this.getPermissionByAttr('export');
            return !(perm && perm.enabled === false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableMenuComponent.prototype, "showColumnsVisibilityButton", {
        get: function () {
            if (!this.columnsVisibilityButton) {
                return false;
            }
            var perm = this.getPermissionByAttr('show-hide-columns');
            return !(perm && perm.visible === false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableMenuComponent.prototype, "showReportOnDemandButton", {
        get: function () {
            if (!this.showReportOnDemandOption) {
                return false;
            }
            var perm = this.getPermissionByAttr('show-report-on-demand');
            return !(perm && perm.visible === false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableMenuComponent.prototype, "enabledColumnsVisibilityButton", {
        get: function () {
            var perm = this.getPermissionByAttr('show-hide-columns');
            return !(perm && perm.enabled === false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableMenuComponent.prototype, "showFilterMenu", {
        get: function () {
            var perm = this.getPermissionByAttr('filter');
            return this.showFilterOption && !(perm && perm.visible === false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableMenuComponent.prototype, "enabledFilterMenu", {
        get: function () {
            var perm = this.getPermissionByAttr('filter');
            return !(perm && perm.enabled === false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableMenuComponent.prototype, "showConfigurationMenu", {
        get: function () {
            var perm = this.getPermissionByAttr('configuration');
            return this.showConfigurationOption && !(perm && perm.visible === false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableMenuComponent.prototype, "enabledConfigurationMenu", {
        get: function () {
            var perm = this.getPermissionByAttr('configuration');
            return !(perm && perm.enabled === false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableMenuComponent.prototype, "showGroupByButton", {
        get: function () {
            return this.showGroupByOption;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableMenuComponent.prototype, "showChartsOnDemandButton", {
        get: function () {
            if (!this.showChartsOnDemandOption) {
                return false;
            }
            var perm = this.getPermissionByAttr('show-chart-on-demand');
            return !(perm && perm.visible === false);
        },
        enumerable: true,
        configurable: true
    });
    OTableMenuComponent.prototype.onShowsSelects = function () {
        var tableOptions = this.table.oTableOptions;
        tableOptions.selectColumn.visible = !tableOptions.selectColumn.visible;
        this.table.initializeCheckboxColumn();
    };
    OTableMenuComponent.prototype.onExportButtonClicked = function () {
        this.exportDataProvider.initializeProvider(this.table);
        this.dialog.open(OTableExportDialogComponent, {
            data: {
                visibleButtons: this.table.visibleExportDialogButtons,
                service: this.table.service,
                serviceType: this.table.exportServiceType,
                options: this.table.exportOptsTemplate
            },
            disableClose: true,
            panelClass: ['o-dialog-class', 'o-table-dialog']
        });
    };
    OTableMenuComponent.prototype.onChangeColumnsVisibilityClicked = function () {
        var _this = this;
        var dialogRef = this.dialog.open(OTableVisibleColumnsDialogComponent, {
            data: {
                table: this.table
            },
            maxWidth: '35vw',
            disableClose: true,
            panelClass: ['o-dialog-class', 'o-table-dialog']
        });
        dialogRef.afterClosed().subscribe(function (result) {
            if (Util.isDefined(result)) {
                _this.table.visibleColArray = result.visibleColArray;
                var columnsOrder_1 = result.columnsOrder;
                _this.table.oTableOptions.columns.sort(function (a, b) { return columnsOrder_1.indexOf(a.attr) - columnsOrder_1.indexOf(b.attr); });
                if (Util.isDefined(result.sortColumns)) {
                    _this.table.reinitializeSortColumns(result.sortColumns);
                }
                if (Util.isDefined(result.groupColumns)) {
                    _this.table.setGroupColumns(result.groupColumns);
                }
                if (result.columnValueFiltersToRemove.length > 0) {
                    _this.table.clearColumnFilters(false, result.columnValueFiltersToRemove);
                }
                _this.table.cd.detectChanges();
                _this.table.refreshColumnsWidth();
            }
        });
    };
    OTableMenuComponent.prototype.onGroupByClicked = function () {
        var _this = this;
        var dialogRef = this.dialog.open(OTableGroupByColumnsDialogComponent, {
            data: {
                groupedColumns: this.table.groupedColumnsArray,
                columnsData: this.table.oTableOptions.columns,
                rowHeight: this.table.rowHeight,
                groupedColumnTypes: this.table.groupedColumnTypes
            },
            height: '75vh',
            width: '50vw',
            disableClose: true,
            panelClass: ['o-dialog-class', 'o-table-dialog', 'o-table-group-by-column-dialog']
        });
        dialogRef.afterClosed().subscribe(function (result) {
            if (result) {
                _this.table.setGroupedColumnTypes(dialogRef.componentInstance.getGroupedColumnTypes());
                _this.table.setGroupColumns(dialogRef.componentInstance.getGroupedColumns());
            }
        });
    };
    OTableMenuComponent.prototype.onFilterByColumnClicked = function () {
        var _this = this;
        if (this.table.isColumnFiltersActive && this.table.dataSource.isColumnValueFilterActive()) {
            this.dialogService.confirm('CONFIRM', 'MESSAGES.CONFIRM_DISCARD_FILTER_BY_COLUMN').then(function (res) {
                if (res) {
                    _this.table.clearColumnFilters();
                }
                _this.table.isColumnFiltersActive = !res;
            });
        }
        else {
            this.table.isColumnFiltersActive = !this.table.isColumnFiltersActive;
        }
    };
    OTableMenuComponent.prototype.onStoreFilterClicked = function () {
        var _this = this;
        var dialogRef = this.dialog.open(OStoreFilterDialogComponent, {
            data: this.table.state.storedFilters.map(function (filter) { return filter.name; }),
            width: 'calc((75em - 100%) * 1000)',
            maxWidth: '65vw',
            minWidth: '30vw',
            disableClose: true,
            panelClass: ['o-dialog-class', 'o-table-dialog']
        });
        dialogRef.afterClosed().subscribe(function (result) {
            if (result) {
                _this.table.storeFilterInState(dialogRef.componentInstance.getFilterAttributes());
            }
        });
    };
    OTableMenuComponent.prototype.onLoadFilterClicked = function () {
        var _this = this;
        var dialogRef = this.dialog.open(OLoadFilterDialogComponent, {
            data: this.table.state.storedFilters,
            width: 'calc((75em - 100%) * 1000)',
            maxWidth: '65vw',
            minWidth: '30vw',
            disableClose: true,
            panelClass: ['o-dialog-class', 'o-table-dialog']
        });
        dialogRef.componentInstance.onDelete.subscribe(function (filterName) { return _this.table.state.deleteStoredFilter(filterName); });
        dialogRef.afterClosed().subscribe(function (result) {
            if (result) {
                var selectedFilterName = dialogRef.componentInstance.getSelectedFilterName();
                if (selectedFilterName) {
                    _this.table.state.applyFilter(selectedFilterName);
                    _this.table.setFiltersConfiguration();
                    _this.table.reloadPaginatedDataFromStart(false);
                }
            }
        });
    };
    OTableMenuComponent.prototype.onClearFilterClicked = function () {
        var _this = this;
        this.dialogService.confirm('CONFIRM', 'TABLE.DIALOG.CONFIRM_CLEAR_FILTER').then(function (result) {
            if (result) {
                _this.table.clearFilters();
                _this.table.reloadPaginatedDataFromStart(false);
            }
        });
    };
    OTableMenuComponent.prototype.onChartsOnDemandClicked = function () {
        if (this.chartOnDemandService) {
            this.chartOnDemandService.openChartOnDemand(this.table);
        }
        else {
            console.warn("You must have ontimize-web-ngx-charts installed in your app to use charts on demand.");
        }
    };
    OTableMenuComponent.prototype.onResetWidthClicked = function () {
        var _this = this;
        this.dialogService.confirm('CONFIRM', 'TABLE.DIALOG.CONFIRM_RESET_WIDTH').then(function (result) {
            if (result) {
                _this.table.resetColumnsWidth();
            }
        });
    };
    OTableMenuComponent.prototype.onReportOnDemandClicked = function () {
        if (this.reportService) {
            this.reportService.openReportOnDemand(this.table);
        }
        else {
            console.warn("You must have ontimize-web-ngx-report-on-demand installed in your app to use report on demand.");
        }
    };
    OTableMenuComponent.prototype.onStoreConfigurationClicked = function () {
        var _this = this;
        var dialogRef = this.dialog.open(OTableStoreConfigurationDialogComponent, {
            width: 'calc((75em - 100%) * 1000)',
            maxWidth: '65vw',
            minWidth: '30vw',
            disableClose: true,
            panelClass: ['o-dialog-class', 'o-table-dialog']
        });
        dialogRef.afterClosed().subscribe(function (result) {
            if (result) {
                var configurationData = dialogRef.componentInstance.getConfigurationAttributes();
                var tableProperties = dialogRef.componentInstance.getSelectedTableProperties();
                _this.table.componentStateService.storeConfiguration(configurationData, tableProperties);
            }
        });
    };
    OTableMenuComponent.prototype.onApplyConfigurationClicked = function () {
        var _this = this;
        var dialogRef = this.dialog.open(OTableApplyConfigurationDialogComponent, {
            data: this.table.state.storedConfigurations,
            width: 'calc((75em - 100%) * 1000)',
            maxWidth: '65vw',
            minWidth: '30vw',
            disableClose: true,
            panelClass: ['o-dialog-class', 'o-table-dialog']
        });
        dialogRef.componentInstance.onDelete.subscribe(function (configurationName) { return _this.table.state.deleteStoredConfiguration(configurationName); });
        dialogRef.afterClosed().subscribe(function (result) {
            if (result && dialogRef.componentInstance.isDefaultConfigurationSelected()) {
                _this.table.state.reset(_this.table.pageable);
                _this.table.applyDefaultConfiguration();
            }
            else if (result) {
                var selectedConfigurationName = dialogRef.componentInstance.getSelectedConfigurationName();
                if (selectedConfigurationName) {
                    _this.table.state.applyConfiguration(selectedConfigurationName);
                    _this.table.applyConfiguration(selectedConfigurationName);
                }
            }
        });
    };
    OTableMenuComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-table-menu',
                    template: "<mat-menu #menu=\"matMenu\" x-position=\"before\" [class]=\"(rowHeightObservable | async) +' o-table-menu'\">\n  <!-- DEFAULT OPTIONS -->\n  <o-table-option #selectAllCheckboxOption *ngIf=\"showSelectAllCheckbox\" [active]=\"isSelectAllOptionActive\" (onClick)=\"onShowsSelects()\"\n    label=\"TABLE.BUTTONS.SELECT\" show-checkbox-option=\"true\"></o-table-option>\n  <o-table-option #columnsVisibilityButtonOption *ngIf=\"showColumnsVisibilityButton\" (onClick)=\"onChangeColumnsVisibilityClicked()\"\n    label=\"TABLE.BUTTONS.COLVIS\"></o-table-option>\n  <o-table-option *ngIf=\"showResetWidthOption\" (onClick)=\"onResetWidthClicked()\" label=\"TABLE.BUTTONS.RESETWIDTH\"></o-table-option>\n\n  <mat-divider *ngIf=\"showSelectAllCheckbox || showColumnsVisibilityButton || showResetWidthOption\"></mat-divider>\n\n  <o-table-option #exportButtonOption *ngIf=\"showExportButton\" (onClick)=\"onExportButtonClicked()\" label=\"TABLE.BUTTONS.EXPORT\"></o-table-option>\n  <o-table-option (onClick)=\"onReportOnDemandClicked()\" label=\"TABLE.BUTTONS.REPORT_ON_DEMAND\" *ngIf=\"showReportOnDemandButton\"></o-table-option>\n  <o-table-option *ngIf=\"showChartsOnDemandButton\" (onClick)=\"onChartsOnDemandClicked()\" label=\"TABLE.BUTTONS.CHART_ON_DEMAND\"></o-table-option>\n  <mat-divider *ngIf=\" showExportButton || showReportOnDemandButton || showChartsOnDemandButton\"></mat-divider>\n\n  <o-table-option #columnsGroupByOption *ngIf=\"showGroupByButton\" (onClick)=\"onGroupByClicked()\" label=\"TABLE.BUTTONS.GROUPBY\"></o-table-option>\n\n  <button type=\"button\" #filterMenuButton *ngIf=\"showFilterMenu\" mat-menu-item [matMenuTriggerFor]=\"filterMenu\">{{\n    'TABLE.BUTTONS.FILTER' | oTranslate }}</button>\n  <button type=\"button\" #configurationMenuButton *ngIf=\"showConfigurationMenu\" mat-menu-item [matMenuTriggerFor]=\"configurationMenu\">{{\n    'TABLE.BUTTONS.CONFIGURATION' | oTranslate }}</button>\n  <ng-content></ng-content>\n</mat-menu>\n\n<mat-menu #filterMenu=\"matMenu\" [class]=\"(rowHeightObservable| async) +' o-table-menu'\">\n  <o-table-option #columnFilterOption show-checkbox-option=\"true\" [active]=\"isColumnFilterOptionActive\" (onClick)=\"onFilterByColumnClicked()\"\n    label=\"TABLE.BUTTONS.FILTER_BY_COLUMN\">\n  </o-table-option>\n  <button type=\"button\" mat-menu-item (click)=\"onStoreFilterClicked()\">{{ 'TABLE.BUTTONS.FILTER_SAVE' | oTranslate\n    }}</button>\n  <button type=\"button\" mat-menu-item (click)=\"onLoadFilterClicked()\">{{ 'TABLE.BUTTONS.FILTER_LOAD' | oTranslate\n    }}</button>\n  <button type=\"button\" mat-menu-item (click)=\"onClearFilterClicked()\">{{ 'TABLE.BUTTONS.FILTER_CLEAR' | oTranslate\n    }}</button>\n</mat-menu>\n\n<mat-menu #configurationMenu=\"matMenu\" [class]=\"(rowHeightObservable | async) +' o-table-menu'\">\n  <button type=\"button\" mat-menu-item (click)=\"onStoreConfigurationClicked()\">{{ 'TABLE.BUTTONS.SAVE_CONFIGURATION' |\n    oTranslate }}</button>\n  <button type=\"button\" mat-menu-item (click)=\"onApplyConfigurationClicked()\">{{ 'TABLE.BUTTONS.APPLY_CONFIGURATION' |\n    oTranslate }}</button>\n</mat-menu>\n",
                    inputs: DEFAULT_INPUTS_O_TABLE_MENU,
                    outputs: DEFAULT_OUTPUTS_O_TABLE_MENU,
                    encapsulation: ViewEncapsulation.None,
                    host: {
                        '[class.o-table-menu]': 'true'
                    },
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [".o-table-menu .mat-divider{margin:0 8px}"]
                }] }
    ];
    OTableMenuComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: MatDialog },
        { type: ChangeDetectorRef },
        { type: OTableComponent, decorators: [{ type: Inject, args: [forwardRef(function () { return OTableComponent; }),] }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [O_CHART_ON_DEMAND_SERVICE,] }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [O_REPORT_SERVICE,] }] }
    ]; };
    OTableMenuComponent.propDecorators = {
        matMenu: [{ type: ViewChild, args: ['menu', { static: true },] }],
        selectAllCheckboxOption: [{ type: ViewChild, args: ['selectAllCheckboxOption', { static: false },] }],
        exportButtonOption: [{ type: ViewChild, args: ['exportButtonOption', { static: false },] }],
        columnsVisibilityButtonOption: [{ type: ViewChild, args: ['columnsVisibilityButtonOption', { static: false },] }],
        filterMenuButton: [{ type: ViewChild, args: ['filterMenuButton', { read: ElementRef, static: false },] }],
        configurationMenuButton: [{ type: ViewChild, args: ['configurationMenuButton', { read: ElementRef, static: false },] }],
        filterMenu: [{ type: ViewChild, args: ['filterMenu', { static: false },] }],
        configurationMenu: [{ type: ViewChild, args: ['configurationMenu', { static: false },] }],
        columnFilterOption: [{ type: ViewChild, args: ['columnFilterOption', { static: false },] }],
        chartMenu: [{ type: ViewChild, args: ['chartMenu', { static: true },] }]
    };
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OTableMenuComponent.prototype, "selectAllCheckbox", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OTableMenuComponent.prototype, "exportButton", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OTableMenuComponent.prototype, "showConfigurationOption", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OTableMenuComponent.prototype, "showFilterOption", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OTableMenuComponent.prototype, "columnsVisibilityButton", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OTableMenuComponent.prototype, "showGroupByOption", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OTableMenuComponent.prototype, "showResetWidthOption", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OTableMenuComponent.prototype, "showReportOnDemandOption", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OTableMenuComponent.prototype, "showChartsOnDemandOption", void 0);
    return OTableMenuComponent;
}());
export { OTableMenuComponent };
//# sourceMappingURL=data:application/json;base64,