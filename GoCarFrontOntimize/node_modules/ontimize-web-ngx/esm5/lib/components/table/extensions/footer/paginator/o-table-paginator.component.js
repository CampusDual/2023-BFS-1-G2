import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, forwardRef, Inject, Injector } from '@angular/core';
import { InputConverter } from '../../../../../decorators/input-converter';
import { OTableComponent } from '../../../o-table.component';
import { OBaseTablePaginator } from './o-base-table-paginator.class';
export var DEFAULT_PAGINATOR_TABLE = [
    'pageSize: page-size',
    'pageSizeOptions: page-size-options',
    'showFirstLastButtons: show-first-last-buttons'
];
var OTablePaginatorComponent = (function (_super) {
    tslib_1.__extends(OTablePaginatorComponent, _super);
    function OTablePaginatorComponent(injector, table) {
        var _this = _super.call(this) || this;
        _this.injector = injector;
        _this.table = table;
        _this.showFirstLastButtons = true;
        return _this;
    }
    OTablePaginatorComponent.prototype.ngOnInit = function () {
        this.pageSize = this.table.queryRows;
        this.pageIndex = this.table.currentPage;
        this.showFirstLastButtons = this.table.showPaginatorFirstLastButtons;
        this.table.registerPagination(this);
    };
    Object.defineProperty(OTablePaginatorComponent.prototype, "pageIndex", {
        get: function () {
            return this._pageIndex;
        },
        set: function (value) {
            this._pageIndex = value;
            if (this.table.matpaginator) {
                this.table.matpaginator.pageIndex = this._pageIndex;
            }
        },
        enumerable: true,
        configurable: true
    });
    OTablePaginatorComponent.prototype.isShowingAllRows = function (selectedLength) {
        return false;
    };
    OTablePaginatorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-table-paginator',
                    template: ' ',
                    inputs: DEFAULT_PAGINATOR_TABLE,
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    OTablePaginatorComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: OTableComponent, decorators: [{ type: Inject, args: [forwardRef(function () { return OTableComponent; }),] }] }
    ]; };
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OTablePaginatorComponent.prototype, "showFirstLastButtons", void 0);
    return OTablePaginatorComponent;
}(OBaseTablePaginator));
export { OTablePaginatorComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby10YWJsZS1wYWdpbmF0b3IuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vb250aW1pemUtd2ViLW5neC8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3RhYmxlL2V4dGVuc2lvbnMvZm9vdGVyL3BhZ2luYXRvci9vLXRhYmxlLXBhZ2luYXRvci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFFekcsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBRTNFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUVyRSxNQUFNLENBQUMsSUFBTSx1QkFBdUIsR0FBRztJQUVyQyxxQkFBcUI7SUFFckIsb0NBQW9DO0lBQ3BDLCtDQUErQztDQUNoRCxDQUFDO0FBRUY7SUFNOEMsb0RBQW1CO0lBSy9ELGtDQUNZLFFBQWtCLEVBQ3lCLEtBQXNCO1FBRjdFLFlBSUUsaUJBQU8sU0FDUjtRQUpXLGNBQVEsR0FBUixRQUFRLENBQVU7UUFDeUIsV0FBSyxHQUFMLEtBQUssQ0FBaUI7UUFKN0UsMEJBQW9CLEdBQVksSUFBSSxDQUFDOztJQU9yQyxDQUFDO0lBRUQsMkNBQVEsR0FBUjtRQUNFLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUM7UUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQztRQUN4QyxJQUFJLENBQUMsb0JBQW9CLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyw2QkFBNkIsQ0FBQztRQUVyRSxJQUFJLENBQUMsS0FBSyxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFFRCxzQkFBSSwrQ0FBUzthQUFiO1lBQ0UsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDO1FBQ3pCLENBQUM7YUFFRCxVQUFjLEtBQWE7WUFDekIsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7WUFDeEIsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksRUFBRTtnQkFDM0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7YUFDckQ7UUFDSCxDQUFDOzs7T0FQQTtJQVNNLG1EQUFnQixHQUF2QixVQUF3QixjQUFzQjtRQUc1QyxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7O2dCQXpDRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLG1CQUFtQjtvQkFDN0IsUUFBUSxFQUFFLEdBQUc7b0JBQ2IsTUFBTSxFQUFFLHVCQUF1QjtvQkFDL0IsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07aUJBQ2hEOzs7Z0JBcEJnRSxRQUFRO2dCQUloRSxlQUFlLHVCQXdCbkIsTUFBTSxTQUFDLFVBQVUsQ0FBQyxjQUFNLE9BQUEsZUFBZSxFQUFmLENBQWUsQ0FBQzs7SUFKM0M7UUFEQyxjQUFjLEVBQUU7OzBFQUNvQjtJQWlDdkMsK0JBQUM7Q0FBQSxBQTFDRCxDQU04QyxtQkFBbUIsR0FvQ2hFO1NBcENZLHdCQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIGZvcndhcmRSZWYsIEluamVjdCwgSW5qZWN0b3IsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBJbnB1dENvbnZlcnRlciB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2RlY29yYXRvcnMvaW5wdXQtY29udmVydGVyJztcbmltcG9ydCB7IE9UYWJsZVBhZ2luYXRvciB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2ludGVyZmFjZXMvby10YWJsZS1wYWdpbmF0b3IuaW50ZXJmYWNlJztcbmltcG9ydCB7IE9UYWJsZUNvbXBvbmVudCB9IGZyb20gJy4uLy4uLy4uL28tdGFibGUuY29tcG9uZW50JztcbmltcG9ydCB7IE9CYXNlVGFibGVQYWdpbmF0b3IgfSBmcm9tICcuL28tYmFzZS10YWJsZS1wYWdpbmF0b3IuY2xhc3MnO1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9QQUdJTkFUT1JfVEFCTEUgPSBbXG4gIC8vIHBhZ2Utc2l6ZSBbbnVtYmVyXTogTnVtYmVyIG9mIGl0ZW1zIHRvIGRpc3BsYXkgb24gYSBwYWdlLiBCeSBkZWZhdWx0IHNldCB0byA1MC5cbiAgJ3BhZ2VTaXplOiBwYWdlLXNpemUnLFxuICAvLyBwYWdlU2l6ZU9wdGlvbnMgW0FycmF5XTogVGhlIHNldCBvZiBwcm92aWRlZCBwYWdlIHNpemUgb3B0aW9ucyB0byBkaXNwbGF5IHRvIHRoZSB1c2VyLlxuICAncGFnZVNpemVPcHRpb25zOiBwYWdlLXNpemUtb3B0aW9ucycsXG4gICdzaG93Rmlyc3RMYXN0QnV0dG9uczogc2hvdy1maXJzdC1sYXN0LWJ1dHRvbnMnXG5dO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdvLXRhYmxlLXBhZ2luYXRvcicsXG4gIHRlbXBsYXRlOiAnICcsXG4gIGlucHV0czogREVGQVVMVF9QQUdJTkFUT1JfVEFCTEUsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIE9UYWJsZVBhZ2luYXRvckNvbXBvbmVudCBleHRlbmRzIE9CYXNlVGFibGVQYWdpbmF0b3IgaW1wbGVtZW50cyBPVGFibGVQYWdpbmF0b3IsIE9uSW5pdCB7XG5cbiAgQElucHV0Q29udmVydGVyKClcbiAgc2hvd0ZpcnN0TGFzdEJ1dHRvbnM6IGJvb2xlYW4gPSB0cnVlO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCBpbmplY3RvcjogSW5qZWN0b3IsXG4gICAgQEluamVjdChmb3J3YXJkUmVmKCgpID0+IE9UYWJsZUNvbXBvbmVudCkpIHByb3RlY3RlZCB0YWJsZTogT1RhYmxlQ29tcG9uZW50XG4gICkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnBhZ2VTaXplID0gdGhpcy50YWJsZS5xdWVyeVJvd3M7XG4gICAgdGhpcy5wYWdlSW5kZXggPSB0aGlzLnRhYmxlLmN1cnJlbnRQYWdlO1xuICAgIHRoaXMuc2hvd0ZpcnN0TGFzdEJ1dHRvbnMgPSB0aGlzLnRhYmxlLnNob3dQYWdpbmF0b3JGaXJzdExhc3RCdXR0b25zO1xuXG4gICAgdGhpcy50YWJsZS5yZWdpc3RlclBhZ2luYXRpb24odGhpcyk7XG4gIH1cblxuICBnZXQgcGFnZUluZGV4KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3BhZ2VJbmRleDtcbiAgfVxuXG4gIHNldCBwYWdlSW5kZXgodmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX3BhZ2VJbmRleCA9IHZhbHVlO1xuICAgIGlmICh0aGlzLnRhYmxlLm1hdHBhZ2luYXRvcikge1xuICAgICAgdGhpcy50YWJsZS5tYXRwYWdpbmF0b3IucGFnZUluZGV4ID0gdGhpcy5fcGFnZUluZGV4O1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBpc1Nob3dpbmdBbGxSb3dzKHNlbGVjdGVkTGVuZ3RoOiBudW1iZXIpOiBib29sZWFuIHtcbiAgICAvLyByZXR1cm4gdGhpcy5fcGFnZVNpemVPcHRpb25zLmluZGV4T2Yoc2VsZWN0ZWRMZW5ndGgpID09PSAodGhpcy5fcGFnZVNpemVPcHRpb25zLmxlbmd0aCAtIDEpO1xuICAgIC8vIHRlbXBvcmFsIHdoaWxlIG5vdCBoYXZpbmcgYW4gb3B0aW9uIGZvciBzaG93aW5nIGFsbCByZWNvcmRzIGluIHBhZ2luYXRlZCB0YWJsZXNcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbiJdfQ==