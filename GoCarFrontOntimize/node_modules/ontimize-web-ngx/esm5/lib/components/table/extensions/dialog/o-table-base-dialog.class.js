import { QueryList, ViewChildren } from '@angular/core';
import { OMatErrorDirective } from '../../../../directives/o-mat-error.directive';
import { O_MAT_ERROR_OPTIONS } from '../../../../services/factories';
import { Codes } from '../../../../util/codes';
import { Util } from '../../../../util/util';
var OTableBaseDialogClass = (function () {
    function OTableBaseDialogClass(injector) {
        this.injector = injector;
        try {
            this.errorOptions = this.injector.get(O_MAT_ERROR_OPTIONS) || {};
        }
        catch (e) {
            this.errorOptions = {};
        }
    }
    OTableBaseDialogClass.prototype.setFormControl = function (formControl) {
        this.formControl = formControl;
    };
    Object.defineProperty(OTableBaseDialogClass.prototype, "tooltipClass", {
        get: function () {
            var result;
            var liteError = this.errorOptions.type === Codes.O_MAT_ERROR_LITE;
            if (liteError && Util.isDefined(this.formControl) && this.formControlHasErrors()) {
                result = "o-tooltip o-mat-error";
            }
            return result;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableBaseDialogClass.prototype, "tooltipText", {
        get: function () {
            var result;
            var liteError = this.errorOptions.type === Codes.O_MAT_ERROR_LITE;
            if (liteError && this.formControlHasErrors() && this.oMatErrorChildren && this.oMatErrorChildren.length > 0) {
                result = this.oMatErrorChildren
                    .filter(function (oMatError) { return Util.isDefined(oMatError.text); })
                    .map(function (oMatError) { return oMatError.text; })
                    .join('\n');
            }
            return result;
        },
        enumerable: true,
        configurable: true
    });
    OTableBaseDialogClass.prototype.formControlHasErrors = function () {
        return Util.isDefined(this.formControl) && this.formControl.touched && Util.isDefined(this.formControl.errors);
    };
    OTableBaseDialogClass.prototype.hasError = function (fControl, error) {
        return fControl && fControl.touched && fControl.hasError(error);
    };
    OTableBaseDialogClass.propDecorators = {
        oMatErrorChildren: [{ type: ViewChildren, args: [OMatErrorDirective,] }]
    };
    return OTableBaseDialogClass;
}());
export { OTableBaseDialogClass };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby10YWJsZS1iYXNlLWRpYWxvZy5jbGFzcy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL29udGltaXplLXdlYi1uZ3gvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90YWJsZS9leHRlbnNpb25zL2RpYWxvZy9vLXRhYmxlLWJhc2UtZGlhbG9nLmNsYXNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBWSxTQUFTLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBR2xFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDhDQUE4QyxDQUFDO0FBQ2xGLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBRXJFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUMvQyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFN0M7SUFPRSwrQkFDWSxRQUFrQjtRQUFsQixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBRTVCLElBQUk7WUFDRixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLElBQUksRUFBRSxDQUFDO1NBQ2xFO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDVixJQUFJLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQztTQUN4QjtJQUNILENBQUM7SUFFUyw4Q0FBYyxHQUF4QixVQUF5QixXQUE0QjtRQUNuRCxJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztJQUNqQyxDQUFDO0lBRUQsc0JBQUksK0NBQVk7YUFBaEI7WUFDRSxJQUFJLE1BQWMsQ0FBQztZQUNuQixJQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksS0FBSyxLQUFLLENBQUMsZ0JBQWdCLENBQUM7WUFDcEUsSUFBSSxTQUFTLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksSUFBSSxDQUFDLG9CQUFvQixFQUFFLEVBQUU7Z0JBQ2hGLE1BQU0sR0FBRyx1QkFBdUIsQ0FBQzthQUNsQztZQUNELE9BQU8sTUFBTSxDQUFDO1FBQ2hCLENBQUM7OztPQUFBO0lBRUQsc0JBQUksOENBQVc7YUFBZjtZQUNFLElBQUksTUFBYyxDQUFDO1lBQ25CLElBQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxLQUFLLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQztZQUNwRSxJQUFJLFNBQVMsSUFBSSxJQUFJLENBQUMsb0JBQW9CLEVBQUUsSUFBSSxJQUFJLENBQUMsaUJBQWlCLElBQUksSUFBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Z0JBQzNHLE1BQU0sR0FBRyxJQUFJLENBQUMsaUJBQWlCO3FCQUM1QixNQUFNLENBQUMsVUFBQyxTQUE2QixJQUFLLE9BQUEsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQTlCLENBQThCLENBQUM7cUJBQ3pFLEdBQUcsQ0FBQyxVQUFDLFNBQTZCLElBQUssT0FBQSxTQUFTLENBQUMsSUFBSSxFQUFkLENBQWMsQ0FBQztxQkFDdEQsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ2Y7WUFDRCxPQUFPLE1BQU0sQ0FBQztRQUNoQixDQUFDOzs7T0FBQTtJQUVTLG9EQUFvQixHQUE5QjtRQUNFLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2pILENBQUM7SUFFTSx3Q0FBUSxHQUFmLFVBQWdCLFFBQXlCLEVBQUUsS0FBYTtRQUN0RCxPQUFPLFFBQVEsSUFBSSxRQUFRLENBQUMsT0FBTyxJQUFJLFFBQVEsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbEUsQ0FBQzs7b0NBN0NBLFlBQVksU0FBQyxrQkFBa0I7O0lBOENsQyw0QkFBQztDQUFBLEFBakRELElBaURDO1NBakRZLHFCQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdG9yLCBRdWVyeUxpc3QsIFZpZXdDaGlsZHJlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWJzdHJhY3RDb250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5pbXBvcnQgeyBPTWF0RXJyb3JEaXJlY3RpdmUgfSBmcm9tICcuLi8uLi8uLi8uLi9kaXJlY3RpdmVzL28tbWF0LWVycm9yLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBPX01BVF9FUlJPUl9PUFRJT05TIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2VydmljZXMvZmFjdG9yaWVzJztcbmltcG9ydCB7IE9NYXRFcnJvck9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi90eXBlcy9vLW1hdC1lcnJvci50eXBlJztcbmltcG9ydCB7IENvZGVzIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbC9jb2Rlcyc7XG5pbXBvcnQgeyBVdGlsIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbC91dGlsJztcblxuZXhwb3J0IGNsYXNzIE9UYWJsZUJhc2VEaWFsb2dDbGFzcyB7XG5cbiAgcHJvdGVjdGVkIGVycm9yT3B0aW9uczogT01hdEVycm9yT3B0aW9ucztcbiAgQFZpZXdDaGlsZHJlbihPTWF0RXJyb3JEaXJlY3RpdmUpXG4gIHByb3RlY3RlZCBvTWF0RXJyb3JDaGlsZHJlbjogUXVlcnlMaXN0PE9NYXRFcnJvckRpcmVjdGl2ZT47XG4gIHByb3RlY3RlZCBmb3JtQ29udHJvbDogQWJzdHJhY3RDb250cm9sO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCBpbmplY3RvcjogSW5qZWN0b3JcbiAgKSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuZXJyb3JPcHRpb25zID0gdGhpcy5pbmplY3Rvci5nZXQoT19NQVRfRVJST1JfT1BUSU9OUykgfHwge307XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhpcy5lcnJvck9wdGlvbnMgPSB7fTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgc2V0Rm9ybUNvbnRyb2woZm9ybUNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCkge1xuICAgIHRoaXMuZm9ybUNvbnRyb2wgPSBmb3JtQ29udHJvbDtcbiAgfVxuXG4gIGdldCB0b29sdGlwQ2xhc3MoKTogc3RyaW5nIHtcbiAgICBsZXQgcmVzdWx0OiBzdHJpbmc7XG4gICAgY29uc3QgbGl0ZUVycm9yID0gdGhpcy5lcnJvck9wdGlvbnMudHlwZSA9PT0gQ29kZXMuT19NQVRfRVJST1JfTElURTtcbiAgICBpZiAobGl0ZUVycm9yICYmIFV0aWwuaXNEZWZpbmVkKHRoaXMuZm9ybUNvbnRyb2wpICYmIHRoaXMuZm9ybUNvbnRyb2xIYXNFcnJvcnMoKSkge1xuICAgICAgcmVzdWx0ID0gYG8tdG9vbHRpcCBvLW1hdC1lcnJvcmA7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBnZXQgdG9vbHRpcFRleHQoKTogc3RyaW5nIHtcbiAgICBsZXQgcmVzdWx0OiBzdHJpbmc7XG4gICAgY29uc3QgbGl0ZUVycm9yID0gdGhpcy5lcnJvck9wdGlvbnMudHlwZSA9PT0gQ29kZXMuT19NQVRfRVJST1JfTElURTtcbiAgICBpZiAobGl0ZUVycm9yICYmIHRoaXMuZm9ybUNvbnRyb2xIYXNFcnJvcnMoKSAmJiB0aGlzLm9NYXRFcnJvckNoaWxkcmVuICYmIHRoaXMub01hdEVycm9yQ2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgcmVzdWx0ID0gdGhpcy5vTWF0RXJyb3JDaGlsZHJlblxuICAgICAgICAuZmlsdGVyKChvTWF0RXJyb3I6IE9NYXRFcnJvckRpcmVjdGl2ZSkgPT4gVXRpbC5pc0RlZmluZWQob01hdEVycm9yLnRleHQpKVxuICAgICAgICAubWFwKChvTWF0RXJyb3I6IE9NYXRFcnJvckRpcmVjdGl2ZSkgPT4gb01hdEVycm9yLnRleHQpXG4gICAgICAgIC5qb2luKCdcXG4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHByb3RlY3RlZCBmb3JtQ29udHJvbEhhc0Vycm9ycygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gVXRpbC5pc0RlZmluZWQodGhpcy5mb3JtQ29udHJvbCkgJiYgdGhpcy5mb3JtQ29udHJvbC50b3VjaGVkICYmIFV0aWwuaXNEZWZpbmVkKHRoaXMuZm9ybUNvbnRyb2wuZXJyb3JzKTtcbiAgfVxuXG4gIHB1YmxpYyBoYXNFcnJvcihmQ29udHJvbDogQWJzdHJhY3RDb250cm9sLCBlcnJvcjogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGZDb250cm9sICYmIGZDb250cm9sLnRvdWNoZWQgJiYgZkNvbnRyb2wuaGFzRXJyb3IoZXJyb3IpO1xuICB9XG59XG4iXX0=