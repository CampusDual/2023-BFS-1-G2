import { Directive, ElementRef, Injector, Input, Renderer2 } from '@angular/core';
import { Subscription } from 'rxjs';
import { distinctUntilChanged, filter } from 'rxjs/operators';
import { OTranslateService } from '../../../../../services/translate/o-translate.service';
import { Util } from '../../../../../util';
import { OTableComponent } from './../../../o-table.component';
var OTableExpandedFooterDirective = (function () {
    function OTableExpandedFooterDirective(table, element, renderer, injector) {
        this.table = table;
        this.element = element;
        this.renderer = renderer;
        this.injector = injector;
        this.subscription = new Subscription();
        this.translateService = this.injector.get(OTranslateService);
    }
    Object.defineProperty(OTableExpandedFooterDirective.prototype, "display", {
        set: function (val) {
            this.showMessage(val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableExpandedFooterDirective.prototype, "colspan", {
        get: function () {
            return this._colspan;
        },
        set: function (value) {
            this._colspan = value;
            if (this.tdTableWithMessage) {
                this.tdTableWithMessage.setAttribute('colspan', value);
            }
        },
        enumerable: true,
        configurable: true
    });
    OTableExpandedFooterDirective.prototype.ngAfterViewInit = function () {
        if (this.element.nativeElement.childNodes[2]) {
            this.tableBody = this.element.nativeElement.childNodes[1];
        }
        this.registerContentChange();
    };
    OTableExpandedFooterDirective.prototype.registerContentChange = function () {
        var _this = this;
        var tr = this.renderer.createElement('tr');
        this.tdTableWithMessage = this.renderer.createElement('td');
        this.renderer.addClass(tr, 'o-table-no-results');
        tr.appendChild(this.tdTableWithMessage);
        this.renderer.appendChild(this.tableBody, tr);
        this.subscription.add(this.table.onContentChange.pipe(distinctUntilChanged(function (prev, curr) { return prev.length === curr.length; }), filter(function () { return !!_this.table.staticData; })).subscribe(function () { return _this.showMessage(true); }));
        if (this.table.oTableQuickFilterComponent) {
            this.subscription.add(this.table.oTableQuickFilterComponent.onChange.pipe().subscribe(function () { return _this.showMessage(true); }));
        }
    };
    OTableExpandedFooterDirective.prototype.showMessage = function (display) {
        this.removeMessageSpan();
        if (display && this.table && this.table.dataSource && this.table.dataSource.renderedData.length === 0) {
            this.createMessageSpan();
        }
    };
    OTableExpandedFooterDirective.prototype.removeMessageSpan = function () {
        if (this.spanMessageNotResults) {
            this.renderer.removeChild(this.element.nativeElement, this.spanMessageNotResults);
        }
    };
    OTableExpandedFooterDirective.prototype.destroy = function () {
        this.subscription.unsubscribe();
    };
    OTableExpandedFooterDirective.prototype.buildMessage = function () {
        var message = '';
        message = this.translateService.get('TABLE.EMPTY');
        if (this.tableHasQuickFilter() && this.table.oTableQuickFilterComponent.value) {
            message += this.translateService.get('TABLE.EMPTY_USING_FILTER', [(this.table.oTableQuickFilterComponent.value)]);
        }
        return message;
    };
    OTableExpandedFooterDirective.prototype.tableHasQuickFilter = function () {
        return this.table.quickFilter && Util.isDefined(this.table.oTableQuickFilterComponent);
    };
    OTableExpandedFooterDirective.prototype.createMessageSpan = function () {
        var message = this.buildMessage();
        this.spanMessageNotResults = this.renderer.createElement('span');
        var messageNotResults = this.renderer.createText(message);
        if (this.tdTableWithMessage) {
            this.tdTableWithMessage.setAttribute('colspan', this.colspan);
            this.renderer.appendChild(this.spanMessageNotResults, messageNotResults);
            this.renderer.appendChild(this.tdTableWithMessage, this.spanMessageNotResults);
        }
    };
    OTableExpandedFooterDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[oTableExpandedFooter]'
                },] }
    ];
    OTableExpandedFooterDirective.ctorParameters = function () { return [
        { type: OTableComponent },
        { type: ElementRef },
        { type: Renderer2 },
        { type: Injector }
    ]; };
    OTableExpandedFooterDirective.propDecorators = {
        display: [{ type: Input, args: ['oTableExpandedFooter',] }],
        colspan: [{ type: Input, args: ['oTableExpandedFooterColspan',] }]
    };
    return OTableExpandedFooterDirective;
}());
export { OTableExpandedFooterDirective };
//# sourceMappingURL=data:application/json;base64,