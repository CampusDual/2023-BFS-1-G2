import * as tslib_1 from "tslib";
import { BehaviorSubject, merge, of } from 'rxjs';
var OTableDao = (function () {
    function OTableDao(dataService, entity, methods) {
        this.dataService = dataService;
        this.entity = entity;
        this.methods = methods;
        this.usingStaticData = false;
        this._isLoadingResults = false;
        this.dataChange = new BehaviorSubject([]);
        this.sqlTypesChange = new BehaviorSubject({});
    }
    Object.defineProperty(OTableDao.prototype, "data", {
        get: function () { return this.dataChange.value; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableDao.prototype, "sqlTypes", {
        get: function () { return this.sqlTypesChange.value; },
        enumerable: true,
        configurable: true
    });
    OTableDao.prototype.getQuery = function (queryArgs) {
        this.isLoadingResults = true;
        return this.dataService[this.methods.query].apply(this.dataService, queryArgs);
    };
    OTableDao.prototype.removeQuery = function (filters) {
        var _this = this;
        return merge.apply(void 0, tslib_1.__spread(filters.map((function (kv) { return _this.dataService[_this.methods.delete](kv, _this.entity); }))));
    };
    OTableDao.prototype.insertQuery = function (av, sqlTypes) {
        if (this.usingStaticData) {
            this.data.push(av);
            return of(this.data);
        }
        else {
            return this.dataService[this.methods.insert](av, this.entity, sqlTypes);
        }
    };
    OTableDao.prototype.updateQuery = function (kv, av, sqlTypes) {
        if (this.usingStaticData) {
            return of([]);
        }
        else {
            return this.dataService[this.methods.update](kv, av, this.entity, sqlTypes);
        }
    };
    OTableDao.prototype.setDataArray = function (data) {
        this.dataChange.next(data);
        this.isLoadingResults = false;
        return of(data);
    };
    OTableDao.prototype.setAsynchronousColumn = function (value, rowData) {
        var index = null;
        for (var i = 0; i < this.data.length; i++) {
            if (this.data[i] === rowData) {
                index = i;
                break;
            }
        }
        if (index !== null) {
            Object.assign(this.data[index], value);
        }
    };
    Object.defineProperty(OTableDao.prototype, "isLoadingResults", {
        get: function () {
            return this._isLoadingResults;
        },
        set: function (val) {
            var _this = this;
            if (val) {
                this.cleanTimer();
                this.loadingTimer = setTimeout(function () {
                    _this._isLoadingResults = val;
                }, 500);
            }
            else {
                this.cleanTimer();
                this._isLoadingResults = val;
            }
        },
        enumerable: true,
        configurable: true
    });
    OTableDao.prototype.cleanTimer = function () {
        if (this.loadingTimer) {
            clearTimeout(this.loadingTimer);
        }
    };
    return OTableDao;
}());
export { OTableDao };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby10YWJsZS5kYW8uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9vbnRpbWl6ZS13ZWItbmd4LyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvdGFibGUvZXh0ZW5zaW9ucy9vLXRhYmxlLmRhby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxLQUFLLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBSzlEO0lBYUUsbUJBQ1UsV0FBZ0IsRUFDaEIsTUFBYyxFQUNkLE9BQVk7UUFGWixnQkFBVyxHQUFYLFdBQVcsQ0FBSztRQUNoQixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ2QsWUFBTyxHQUFQLE9BQU8sQ0FBSztRQWR0QixvQkFBZSxHQUFZLEtBQUssQ0FBQztRQUd2QixzQkFBaUIsR0FBWSxLQUFLLENBQUM7UUFHN0MsZUFBVSxHQUFHLElBQUksZUFBZSxDQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQzVDLG1CQUFjLEdBQUcsSUFBSSxlQUFlLENBQVMsRUFBRSxDQUFDLENBQUM7SUFRN0MsQ0FBQztJQVBMLHNCQUFJLDJCQUFJO2FBQVIsY0FBb0IsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7OztPQUFBO0lBQ25ELHNCQUFJLCtCQUFRO2FBQVosY0FBeUIsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7OztPQUFBO0lBVzVELDRCQUFRLEdBQVIsVUFBUyxTQUF5QjtRQUNoQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDO1FBQzdCLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ2pGLENBQUM7SUFFRCwrQkFBVyxHQUFYLFVBQVksT0FBWTtRQUF4QixpQkFFQztRQURDLE9BQU8sS0FB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IjpbImltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgbWVyZ2UsIE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IE9RdWVyeURhdGFBcmdzIH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMvcXVlcnktZGF0YS1hcmdzLnR5cGUnO1xuXG5cbmV4cG9ydCBjbGFzcyBPVGFibGVEYW8ge1xuXG4gIHVzaW5nU3RhdGljRGF0YTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIHByb3RlY3RlZCBsb2FkaW5nVGltZXI7XG4gIHByb3RlY3RlZCBfaXNMb2FkaW5nUmVzdWx0czogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIC8qKiBTdHJlYW0gdGhhdCBlbWl0cyB3aGVuZXZlciB0aGUgZGF0YSBoYXMgYmVlbiBtb2RpZmllZC4gKi9cbiAgZGF0YUNoYW5nZSA9IG5ldyBCZWhhdmlvclN1YmplY3Q8YW55W10+KFtdKTtcbiAgc3FsVHlwZXNDaGFuZ2UgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PG9iamVjdD4oe30pO1xuICBnZXQgZGF0YSgpOiBhbnlbXSB7IHJldHVybiB0aGlzLmRhdGFDaGFuZ2UudmFsdWU7IH1cbiAgZ2V0IHNxbFR5cGVzKCk6IG9iamVjdCB7IHJldHVybiB0aGlzLnNxbFR5cGVzQ2hhbmdlLnZhbHVlOyB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBkYXRhU2VydmljZTogYW55LFxuICAgIHByaXZhdGUgZW50aXR5OiBzdHJpbmcsXG4gICAgcHJpdmF0ZSBtZXRob2RzOiBhbnlcbiAgKSB7IH1cblxuICAvKipcbiAgICogQ2FsbCB0aGUgc2VydmljZSBxdWVyeSBhbmQgZW1pdCBkYXRhIGhhcyBiZW4gbW9kaWZpZWRcbiAgICovXG4gIGdldFF1ZXJ5KHF1ZXJ5QXJnczogT1F1ZXJ5RGF0YUFyZ3MpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHRoaXMuaXNMb2FkaW5nUmVzdWx0cyA9IHRydWU7XG4gICAgcmV0dXJuIHRoaXMuZGF0YVNlcnZpY2VbdGhpcy5tZXRob2RzLnF1ZXJ5XS5hcHBseSh0aGlzLmRhdGFTZXJ2aWNlLCBxdWVyeUFyZ3MpO1xuICB9XG5cbiAgcmVtb3ZlUXVlcnkoZmlsdGVyczogYW55KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gbWVyZ2UoLi4uZmlsdGVycy5tYXAoKGt2ID0+IHRoaXMuZGF0YVNlcnZpY2VbdGhpcy5tZXRob2RzLmRlbGV0ZV0oa3YsIHRoaXMuZW50aXR5KSkpKTtcbiAgfVxuXG4gIGluc2VydFF1ZXJ5KGF2OiBvYmplY3QsIHNxbFR5cGVzPzogb2JqZWN0KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICBpZiAodGhpcy51c2luZ1N0YXRpY0RhdGEpIHtcbiAgICAgIHRoaXMuZGF0YS5wdXNoKGF2KTtcbiAgICAgIHJldHVybiBvZih0aGlzLmRhdGEpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5kYXRhU2VydmljZVt0aGlzLm1ldGhvZHMuaW5zZXJ0XShhdiwgdGhpcy5lbnRpdHksIHNxbFR5cGVzKTtcbiAgICB9XG4gIH1cblxuICB1cGRhdGVRdWVyeShrdjogb2JqZWN0LCBhdjogb2JqZWN0LCBzcWxUeXBlcz86IG9iamVjdCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgaWYgKHRoaXMudXNpbmdTdGF0aWNEYXRhKSB7XG4gICAgICAvLyBPbmx5IHRvIHNpbXVsYXRlIHRoZSBzZXJ2aWNlIHJlc3BvbnNlLCB0aGUgbW9kZWwgY2hhbmdlIGlzIGRvbmUgaW4gdGhlIGVkaXRvclxuICAgICAgcmV0dXJuIG9mKFtdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuZGF0YVNlcnZpY2VbdGhpcy5tZXRob2RzLnVwZGF0ZV0oa3YsIGF2LCB0aGlzLmVudGl0eSwgc3FsVHlwZXMpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgZGF0YSBhcnJheSBhbmQgZW1pdCBkYXRhIGhhcyBiZW4gbW9kaWZpZWRcbiAgICogQHBhcmFtIGRhdGFcbiAgICovXG4gIHNldERhdGFBcnJheShkYXRhOiBBcnJheTxhbnk+KSB7XG4gICAgdGhpcy5kYXRhQ2hhbmdlLm5leHQoZGF0YSk7XG4gICAgdGhpcy5pc0xvYWRpbmdSZXN1bHRzID0gZmFsc2U7XG4gICAgcmV0dXJuIG9mKGRhdGEpO1xuICB9XG5cbiAgc2V0QXN5bmNocm9ub3VzQ29sdW1uKHZhbHVlOiBBcnJheTxhbnk+LCByb3dEYXRhOiBhbnkpIHtcbiAgICAvLyBPYmplY3QuYXNzaWduKHRoaXMuZGF0YVtyb3dJbmRleF0sIHZhbHVlKTtcbiAgICBsZXQgaW5kZXggPSBudWxsO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5kYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodGhpcy5kYXRhW2ldID09PSByb3dEYXRhKSB7XG4gICAgICAgIGluZGV4ID0gaTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpbmRleCAhPT0gbnVsbCkge1xuICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLmRhdGFbaW5kZXhdLCB2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgZ2V0IGlzTG9hZGluZ1Jlc3VsdHMoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2lzTG9hZGluZ1Jlc3VsdHM7XG4gIH1cblxuICBzZXQgaXNMb2FkaW5nUmVzdWx0cyh2YWw6IGJvb2xlYW4pIHtcbiAgICBpZiAodmFsKSB7XG4gICAgICB0aGlzLmNsZWFuVGltZXIoKTtcbiAgICAgIHRoaXMubG9hZGluZ1RpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMuX2lzTG9hZGluZ1Jlc3VsdHMgPSB2YWw7XG4gICAgICB9LCA1MDApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNsZWFuVGltZXIoKTtcbiAgICAgIHRoaXMuX2lzTG9hZGluZ1Jlc3VsdHMgPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIGNsZWFuVGltZXIoKSB7XG4gICAgaWYgKHRoaXMubG9hZGluZ1RpbWVyKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5sb2FkaW5nVGltZXIpO1xuICAgIH1cbiAgfVxuXG59XG4iXX0=