import { ChangeDetectionStrategy, Component, Inject, ViewChild, ViewEncapsulation } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';
import { Util } from '../../../../../util/util';
import { ODualListSelectorComponent } from '../../../../dual-list-selector/o-dual-list-selector.component';
var OTableGroupByColumnsDialogComponent = (function () {
    function OTableGroupByColumnsDialogComponent(dialogRef, data) {
        this.dialogRef = dialogRef;
        this.columns = [];
        this.groupedColumns = [];
        this.groupedColumnTypes = [];
        if (Util.isArray(data.groupedColumns) && !Util.isArrayEmpty(data.groupedColumns)) {
            this.groupedColumns = data.groupedColumns.map(function (attr) {
                var indexCol = data.columnsData.findIndex(function (col) { return col.attr === attr; });
                if (indexCol > -1) {
                    return data.columnsData[indexCol];
                }
            });
        }
        var self = this;
        if (Util.isArray(data.columnsData)) {
            this.columns = data.columnsData.filter(function (oCol) { return oCol.visible && oCol.groupable && self.groupedColumns.findIndex(function (x) { return x.attr === oCol.attr; }) === -1; });
        }
        if (Util.isDefined(data.groupedColumnTypes)) {
            this.groupedColumnTypes = data.groupedColumnTypes;
        }
    }
    OTableGroupByColumnsDialogComponent.prototype.getGroupedColumns = function () {
        return this.dualListSelector.getSelectedItems().map(function (oCol) { return oCol.attr; });
    };
    OTableGroupByColumnsDialogComponent.prototype.getGroupedColumnTypes = function () {
        return this.dualListSelector.getGroupedColumnTypes();
    };
    OTableGroupByColumnsDialogComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-table-group-by-columns-dialog',
                    template: "<span mat-dialog-title>{{ 'TABLE.BUTTONS.GROUPBY' | oTranslate }}</span>\n\n<mat-dialog-content>\n  <o-dual-list-selector #dualListSelector [data-source]=\"columns\" [data-destination]=\"groupedColumns\" [grouped-column-types]=\"groupedColumnTypes\"\n    key=\"attr\" display=\"title\" title-list-data-source=\"TABLE_GROUP_BY_COLUMNS_DIALOG.ALL_COLUMNS\"\n    title-list-data-destination=\"TABLE_GROUP_BY_COLUMNS_DIALOG.GROUPED_COLUMNS\" description=\"TABLE_GROUP_BY_COLUMNS_DIALOG.DESCRIPTION\" fxFlexFill>\n  </o-dual-list-selector>\n</mat-dialog-content>\n\n<mat-dialog-actions fxLayoutAlign=\"end center\">\n  <button type=\"button\" mat-stroked-button [mat-dialog-close]=\"false\" class=\"o-button-default cancel\">{{ 'CANCEL' | oTranslate }}</button>\n  <button type=\"button\" mat-stroked-button [mat-dialog-close]=\"true\" class=\"o-button-primary\">{{ 'ACCEPT' | oTranslate }}</button>\n</mat-dialog-actions>\n",
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        '[class.o-table-group-by-column-dialog]': 'true'
                    },
                    styles: [".o-table-group-by-column-dialog{display:flex;flex-direction:column;height:100%}.o-table-group-by-column-dialog .mat-dialog-content{flex:1}"]
                }] }
    ];
    OTableGroupByColumnsDialogComponent.ctorParameters = function () { return [
        { type: MatDialogRef },
        { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
    ]; };
    OTableGroupByColumnsDialogComponent.propDecorators = {
        dualListSelector: [{ type: ViewChild, args: ['dualListSelector', { static: false },] }]
    };
    return OTableGroupByColumnsDialogComponent;
}());
export { OTableGroupByColumnsDialogComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby10YWJsZS1ncm91cC1ieS1jb2x1bW5zLWRpYWxvZy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9vbnRpbWl6ZS13ZWItbmd4LyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvdGFibGUvZXh0ZW5zaW9ucy9kaWFsb2cvZ3JvdXAtYnktY29sdW1ucy9vLXRhYmxlLWdyb3VwLWJ5LWNvbHVtbnMtZGlhbG9nLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekcsT0FBTyxFQUFFLGVBQWUsRUFBRSxZQUFZLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUVsRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDaEQsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sK0RBQStELENBQUM7QUFHM0c7SUFrQkUsNkNBQ1MsU0FBNEQsRUFDMUMsSUFBUztRQUQzQixjQUFTLEdBQVQsU0FBUyxDQUFtRDtRQVA5RCxZQUFPLEdBQW1CLEVBQUUsQ0FBQztRQUM3QixtQkFBYyxHQUFtQixFQUFFLENBQUM7UUFDcEMsdUJBQWtCLEdBQTBCLEVBQUUsQ0FBQztRQVNwRCxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUU7WUFDaEYsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxVQUFDLElBQVk7Z0JBQ3pELElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLFVBQUMsR0FBWSxJQUFLLE9BQUEsR0FBRyxDQUFDLElBQUksS0FBSyxJQUFJLEVBQWpCLENBQWlCLENBQUMsQ0FBQztnQkFDakYsSUFBSSxRQUFRLEdBQUcsQ0FBQyxDQUFDLEVBQUU7b0JBQ2pCLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztpQkFDbkM7WUFDSCxDQUFDLENBQUMsQ0FBQztTQUNKO1FBRUQsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUU7WUFDbEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxVQUFDLElBQWEsSUFBSyxPQUFBLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLElBQUksRUFBcEIsQ0FBb0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFqRyxDQUFpRyxDQUFDLENBQUM7U0FFOUo7UUFDRCxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEVBQUU7WUFDM0MsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQztTQUNuRDtJQUNILENBQUM7SUFFRCwrREFBaUIsR0FBakI7UUFDRSxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLEdBQUcsQ0FBQyxVQUFDLElBQWEsSUFBSyxPQUFBLElBQUksQ0FBQyxJQUFJLEVBQVQsQ0FBUyxDQUFDLENBQUM7SUFDcEYsQ0FBQztJQUVELG1FQUFxQixHQUFyQjtRQUNFLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLHFCQUFxQixFQUFFLENBQUM7SUFDdkQsQ0FBQzs7Z0JBaERGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsaUNBQWlDO29CQUMzQyxtNkJBQTZEO29CQUU3RCxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtvQkFDckMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07b0JBQy9DLElBQUksRUFBRTt3QkFDSix3Q0FBd0MsRUFBRSxNQUFNO3FCQUNqRDs7aUJBQ0Y7OztnQkFmeUIsWUFBWTtnREEwQmpDLE1BQU0sU0FBQyxlQUFlOzs7bUNBSnhCLFNBQVMsU0FBQyxrQkFBa0IsRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUU7O0lBaUNsRCwwQ0FBQztDQUFBLEFBakRELElBaURDO1NBdkNZLG1DQUFtQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIEluamVjdCwgVmlld0NoaWxkLCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTUFUX0RJQUxPR19EQVRBLCBNYXREaWFsb2dSZWYgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbCc7XG5pbXBvcnQgeyBPR3JvdXBlZENvbHVtblR5cGVzIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vdHlwZXMnO1xuaW1wb3J0IHsgVXRpbCB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3V0aWwvdXRpbCc7XG5pbXBvcnQgeyBPRHVhbExpc3RTZWxlY3RvckNvbXBvbmVudCB9IGZyb20gJy4uLy4uLy4uLy4uL2R1YWwtbGlzdC1zZWxlY3Rvci9vLWR1YWwtbGlzdC1zZWxlY3Rvci5jb21wb25lbnQnO1xuaW1wb3J0IHsgT0NvbHVtbiB9IGZyb20gJy4uLy4uLy4uL2NvbHVtbi9vLWNvbHVtbi5jbGFzcyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ28tdGFibGUtZ3JvdXAtYnktY29sdW1ucy1kaWFsb2cnLFxuICB0ZW1wbGF0ZVVybDogJ28tdGFibGUtZ3JvdXAtYnktY29sdW1ucy1kaWFsb2cuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnby10YWJsZS1ncm91cC1ieS1jb2x1bW5zLWRpYWxvZy5jb21wb25lbnQuc2NzcyddLFxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgaG9zdDoge1xuICAgICdbY2xhc3Muby10YWJsZS1ncm91cC1ieS1jb2x1bW4tZGlhbG9nXSc6ICd0cnVlJ1xuICB9XG59KVxuZXhwb3J0IGNsYXNzIE9UYWJsZUdyb3VwQnlDb2x1bW5zRGlhbG9nQ29tcG9uZW50IHtcblxuICBwdWJsaWMgY29sdW1uczogQXJyYXk8T0NvbHVtbj4gPSBbXTtcbiAgcHVibGljIGdyb3VwZWRDb2x1bW5zOiBBcnJheTxPQ29sdW1uPiA9IFtdO1xuICBwdWJsaWMgZ3JvdXBlZENvbHVtblR5cGVzOiBPR3JvdXBlZENvbHVtblR5cGVzW10gPSBbXTtcblxuICBAVmlld0NoaWxkKCdkdWFsTGlzdFNlbGVjdG9yJywgeyBzdGF0aWM6IGZhbHNlIH0pIGR1YWxMaXN0U2VsZWN0b3I6IE9EdWFsTGlzdFNlbGVjdG9yQ29tcG9uZW50O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBkaWFsb2dSZWY6IE1hdERpYWxvZ1JlZjxPVGFibGVHcm91cEJ5Q29sdW1uc0RpYWxvZ0NvbXBvbmVudD4sXG4gICAgQEluamVjdChNQVRfRElBTE9HX0RBVEEpIGRhdGE6IGFueVxuICApIHtcblxuICAgIGlmIChVdGlsLmlzQXJyYXkoZGF0YS5ncm91cGVkQ29sdW1ucykgJiYgIVV0aWwuaXNBcnJheUVtcHR5KGRhdGEuZ3JvdXBlZENvbHVtbnMpKSB7XG4gICAgICB0aGlzLmdyb3VwZWRDb2x1bW5zID0gZGF0YS5ncm91cGVkQ29sdW1ucy5tYXAoKGF0dHI6IHN0cmluZykgPT4ge1xuICAgICAgICBjb25zdCBpbmRleENvbCA9IGRhdGEuY29sdW1uc0RhdGEuZmluZEluZGV4KChjb2w6IE9Db2x1bW4pID0+IGNvbC5hdHRyID09PSBhdHRyKTtcbiAgICAgICAgaWYgKGluZGV4Q29sID4gLTEpIHtcbiAgICAgICAgICByZXR1cm4gZGF0YS5jb2x1bW5zRGF0YVtpbmRleENvbF07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGlmIChVdGlsLmlzQXJyYXkoZGF0YS5jb2x1bW5zRGF0YSkpIHtcbiAgICAgIHRoaXMuY29sdW1ucyA9IGRhdGEuY29sdW1uc0RhdGEuZmlsdGVyKChvQ29sOiBPQ29sdW1uKSA9PiBvQ29sLnZpc2libGUgJiYgb0NvbC5ncm91cGFibGUgJiYgc2VsZi5ncm91cGVkQ29sdW1ucy5maW5kSW5kZXgoeCA9PiB4LmF0dHIgPT09IG9Db2wuYXR0cikgPT09IC0xKTtcblxuICAgIH1cbiAgICBpZiAoVXRpbC5pc0RlZmluZWQoZGF0YS5ncm91cGVkQ29sdW1uVHlwZXMpKSB7XG4gICAgICB0aGlzLmdyb3VwZWRDb2x1bW5UeXBlcyA9IGRhdGEuZ3JvdXBlZENvbHVtblR5cGVzO1xuICAgIH1cbiAgfVxuXG4gIGdldEdyb3VwZWRDb2x1bW5zKCk6IEFycmF5PHN0cmluZz4ge1xuICAgIHJldHVybiB0aGlzLmR1YWxMaXN0U2VsZWN0b3IuZ2V0U2VsZWN0ZWRJdGVtcygpLm1hcCgob0NvbDogT0NvbHVtbikgPT4gb0NvbC5hdHRyKTtcbiAgfVxuXG4gIGdldEdyb3VwZWRDb2x1bW5UeXBlcygpOiBPR3JvdXBlZENvbHVtblR5cGVzW10ge1xuICAgIHJldHVybiB0aGlzLmR1YWxMaXN0U2VsZWN0b3IuZ2V0R3JvdXBlZENvbHVtblR5cGVzKCk7XG4gIH1cbn1cbiJdfQ==