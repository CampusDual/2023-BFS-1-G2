import { ChangeDetectionStrategy, Component, forwardRef, Inject, ViewChild, ViewEncapsulation } from "@angular/core";
import { OTableComponent } from "../../../o-table.component";
import { OMatSortHeader } from "../../sort/o-mat-sort-header";
import { OTableHeaderColumnFilterIconComponent } from "../table-header-column-filter-icon/o-table-header-column-filter-icon.component";
export var DEFAULT_INPUTS_O_TABLE_HEADER = [
    'column'
];
var OTableHeaderComponent = (function () {
    function OTableHeaderComponent(table) {
        this.table = table;
        this.resizable = this.table.resizable;
    }
    Object.defineProperty(OTableHeaderComponent.prototype, "columnFilterIcon", {
        set: function (value) {
            this._columnFilterIcon = value;
        },
        enumerable: true,
        configurable: true
    });
    OTableHeaderComponent.prototype.isModeColumnFilterable = function (column) {
        return this.table.isColumnFiltersActive && this.table.isColumnFilterable(column);
    };
    OTableHeaderComponent.prototype.setFilterIconHintVisible = function (visible) {
        if (this._columnFilterIcon) {
            this._columnFilterIcon.filterIconHintVisible.next(visible);
        }
    };
    OTableHeaderComponent.prototype.ngAfterViewInit = function () {
        this.table.registerTableHeaders(this);
    };
    OTableHeaderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-table-header',
                    inputs: DEFAULT_INPUTS_O_TABLE_HEADER,
                    template: "<o-table-header-column-filter-icon #columnFilterIcon *ngIf=\"isModeColumnFilterable(column)\" [column]=\"column\">\n</o-table-header-column-filter-icon>\n\n<ng-container *ngIf=\"column.orderable\">\n    <span o-mat-sort-header>{{ column.title | oTranslate }}</span>\n</ng-container>\n<ng-container *ngIf=\"!column.orderable\">\n    <span class=\"header-title-container\">{{ column.title | oTranslate }}</span>\n</ng-container>\n\n<o-table-column-resizer *ngIf=\"resizable\" [column]=\"column\"></o-table-column-resizer>",
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        '[class.o-table-header]': 'true',
                        '(mouseenter)': 'setFilterIconHintVisible(true)',
                        '(mouseleave)': 'setFilterIconHintVisible(false)'
                    }
                }] }
    ];
    OTableHeaderComponent.ctorParameters = function () { return [
        { type: OTableComponent, decorators: [{ type: Inject, args: [forwardRef(function () { return OTableComponent; }),] }] }
    ]; };
    OTableHeaderComponent.propDecorators = {
        columnFilterIcon: [{ type: ViewChild, args: ['columnFilterIcon', { static: false },] }],
        matSortHeader: [{ type: ViewChild, args: [OMatSortHeader, { static: false },] }]
    };
    return OTableHeaderComponent;
}());
export { OTableHeaderComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby10YWJsZS1oZWFkZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vb250aW1pemUtd2ViLW5neC8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3RhYmxlL2V4dGVuc2lvbnMvaGVhZGVyL3RhYmxlLWhlYWRlci9vLXRhYmxlLWhlYWRlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVySCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDN0QsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQzlELE9BQU8sRUFBRSxxQ0FBcUMsRUFBRSxNQUFNLGdGQUFnRixDQUFDO0FBRXZJLE1BQU0sQ0FBQyxJQUFNLDZCQUE2QixHQUFHO0lBQzNDLFFBQVE7Q0FDVCxDQUFBO0FBQ0Q7SUF3QkUsK0JBQ3VELEtBQXNCO1FBQXRCLFVBQUssR0FBTCxLQUFLLENBQWlCO1FBRTNFLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUM7SUFDeEMsQ0FBQztJQVZELHNCQUFzRCxtREFBZ0I7YUFBdEUsVUFBdUUsS0FBNEM7WUFDakgsSUFBSSxDQUFDLGlCQUFpQixHQUFHLEtBQUssQ0FBQztRQUNqQyxDQUFDOzs7T0FBQTtJQVdELHNEQUFzQixHQUF0QixVQUF1QixNQUFlO1FBQ3BDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ25GLENBQUM7SUFFRCx3REFBd0IsR0FBeEIsVUFBeUIsT0FBZ0I7UUFDdkMsSUFBSSxJQUFJLENBQUMsaUJBQWlCLEVBQUU7WUFDMUIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUM1RDtJQUNILENBQUM7SUFFRCwrQ0FBZSxHQUFmO1FBQ0UsSUFBSSxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN4QyxDQUFDOztnQkEzQ0YsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxnQkFBZ0I7b0JBQzFCLE1BQU0sRUFBRSw2QkFBNkI7b0JBQ3JDLG1oQkFBOEM7b0JBQzlDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO29CQUNyQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsSUFBSSxFQUFFO3dCQUNKLHdCQUF3QixFQUFFLE1BQU07d0JBQ2hDLGNBQWMsRUFBRSxnQ0FBZ0M7d0JBQ2hELGNBQWMsRUFBRSxpQ0FBaUM7cUJBQ2xEO2lCQUNGOzs7Z0JBbEJRLGVBQWUsdUJBZ0NuQixNQUFNLFNBQUMsVUFBVSxDQUFDLGNBQU0sT0FBQSxlQUFlLEVBQWYsQ0FBZSxDQUFDOzs7bUNBUDFDLFNBQVMsU0FBQyxrQkFBa0IsRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUU7Z0NBSS9DLFNBQVMsU0FBQyxjQUFjLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFOztJQXVCOUMsNEJBQUM7Q0FBQSxBQTdDRCxJQTZDQztTQWpDWSxxQkFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBmb3J3YXJkUmVmLCBJbmplY3QsIFZpZXdDaGlsZCwgVmlld0VuY2Fwc3VsYXRpb24gfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgT0NvbHVtbiB9IGZyb20gXCIuLi8uLi8uLi9jb2x1bW5cIjtcbmltcG9ydCB7IE9UYWJsZUNvbXBvbmVudCB9IGZyb20gXCIuLi8uLi8uLi9vLXRhYmxlLmNvbXBvbmVudFwiO1xuaW1wb3J0IHsgT01hdFNvcnRIZWFkZXIgfSBmcm9tIFwiLi4vLi4vc29ydC9vLW1hdC1zb3J0LWhlYWRlclwiO1xuaW1wb3J0IHsgT1RhYmxlSGVhZGVyQ29sdW1uRmlsdGVySWNvbkNvbXBvbmVudCB9IGZyb20gXCIuLi90YWJsZS1oZWFkZXItY29sdW1uLWZpbHRlci1pY29uL28tdGFibGUtaGVhZGVyLWNvbHVtbi1maWx0ZXItaWNvbi5jb21wb25lbnRcIjtcblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfSU5QVVRTX09fVEFCTEVfSEVBREVSID0gW1xuICAnY29sdW1uJ1xuXVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnby10YWJsZS1oZWFkZXInLFxuICBpbnB1dHM6IERFRkFVTFRfSU5QVVRTX09fVEFCTEVfSEVBREVSLFxuICB0ZW1wbGF0ZVVybDogJy4vby10YWJsZS1oZWFkZXIuY29tcG9uZW50Lmh0bWwnLFxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgaG9zdDoge1xuICAgICdbY2xhc3Muby10YWJsZS1oZWFkZXJdJzogJ3RydWUnLFxuICAgICcobW91c2VlbnRlciknOiAnc2V0RmlsdGVySWNvbkhpbnRWaXNpYmxlKHRydWUpJyxcbiAgICAnKG1vdXNlbGVhdmUpJzogJ3NldEZpbHRlckljb25IaW50VmlzaWJsZShmYWxzZSknXG4gIH1cbn0pXG5leHBvcnQgY2xhc3MgT1RhYmxlSGVhZGVyQ29tcG9uZW50IHtcblxuICBwdWJsaWMgY29sdW1uOiBPQ29sdW1uXG4gIHB1YmxpYyByZXNpemFibGU6IGJvb2xlYW47XG4gIHByb3RlY3RlZCBfY29sdW1uRmlsdGVySWNvbjogT1RhYmxlSGVhZGVyQ29sdW1uRmlsdGVySWNvbkNvbXBvbmVudDtcblxuICBAVmlld0NoaWxkKCdjb2x1bW5GaWx0ZXJJY29uJywgeyBzdGF0aWM6IGZhbHNlIH0pIHNldCBjb2x1bW5GaWx0ZXJJY29uKHZhbHVlOiBPVGFibGVIZWFkZXJDb2x1bW5GaWx0ZXJJY29uQ29tcG9uZW50KSB7XG4gICAgdGhpcy5fY29sdW1uRmlsdGVySWNvbiA9IHZhbHVlO1xuICB9XG5cbiAgQFZpZXdDaGlsZChPTWF0U29ydEhlYWRlciwgeyBzdGF0aWM6IGZhbHNlIH0pIG1hdFNvcnRIZWFkZXI6IE9NYXRTb3J0SGVhZGVyO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoZm9yd2FyZFJlZigoKSA9PiBPVGFibGVDb21wb25lbnQpKSBwcm90ZWN0ZWQgdGFibGU6IE9UYWJsZUNvbXBvbmVudFxuICApIHtcbiAgICB0aGlzLnJlc2l6YWJsZSA9IHRoaXMudGFibGUucmVzaXphYmxlO1xuICB9XG5cblxuICBpc01vZGVDb2x1bW5GaWx0ZXJhYmxlKGNvbHVtbjogT0NvbHVtbik6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnRhYmxlLmlzQ29sdW1uRmlsdGVyc0FjdGl2ZSAmJiB0aGlzLnRhYmxlLmlzQ29sdW1uRmlsdGVyYWJsZShjb2x1bW4pO1xuICB9XG5cbiAgc2V0RmlsdGVySWNvbkhpbnRWaXNpYmxlKHZpc2libGU6IGJvb2xlYW4pIHtcbiAgICBpZiAodGhpcy5fY29sdW1uRmlsdGVySWNvbikge1xuICAgICAgdGhpcy5fY29sdW1uRmlsdGVySWNvbi5maWx0ZXJJY29uSGludFZpc2libGUubmV4dCh2aXNpYmxlKTtcbiAgICB9XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG4gICAgdGhpcy50YWJsZS5yZWdpc3RlclRhYmxlSGVhZGVycyh0aGlzKTtcbiAgfVxuXG59Il19