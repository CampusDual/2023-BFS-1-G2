import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, Injector, ViewEncapsulation } from '@angular/core';
import { InputConverter } from '../../../../../decorators/input-converter';
export var DEFAULT_INPUTS_O_TABLE_OPTION = [
    'oattr: attr',
    'enabled',
    'icon',
    'showCheckboxOption : show-checkbox-option',
    'olabel: label',
    'active'
];
export var DEFAULT_OUTPUTS_O_TABLE_OPTION = [
    'onClick'
];
var OTableOptionComponent = (function () {
    function OTableOptionComponent(injector, elRef) {
        this.injector = injector;
        this.elRef = elRef;
        this.onClick = new EventEmitter();
        this.enabled = true;
        this.showCheckboxOption = false;
        this.active = false;
        try {
            this.cd = this.injector.get(ChangeDetectorRef);
        }
        catch (e) {
        }
    }
    OTableOptionComponent.prototype.innerOnClick = function () {
        this.onClick.emit();
        this.setActive(!this.active);
    };
    Object.defineProperty(OTableOptionComponent.prototype, "activeCheckboxOption", {
        get: function () {
            return this.showCheckboxOption && this.active;
        },
        enumerable: true,
        configurable: true
    });
    OTableOptionComponent.prototype.setActive = function (val) {
        this.active = val;
        this.cd.detectChanges();
    };
    OTableOptionComponent.O_TABLE_OPTION_ACTIVE_CLASS = 'o-table-option-active';
    OTableOptionComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-table-option',
                    template: "<ng-container *ngIf=\"showCheckboxOption; then checkboxTemplate; else buttonTemplate\"></ng-container>\n\n<ng-template #checkboxTemplate>\n  <span mat-menu-item>\n    <mat-checkbox [disabled]=\"!enabled\" [ngModel]=\"activeCheckboxOption\" (change)=\"innerOnClick()\" disableRipple=\"true\"> \n      {{ olabel | oTranslate }}\n      <mat-icon *ngIf=\"icon\"> {{ icon }}</mat-icon>\n    </mat-checkbox>\n  </span>\n</ng-template>\n\n<ng-template #buttonTemplate>\n  <button [disabled]=\"!enabled\" type=\"button\" (click)=\"innerOnClick()\" mat-menu-item fxLayout=\"row\"\n    fxLayoutAlign=\"start center\">\n    {{ olabel | oTranslate }}\n    <mat-icon *ngIf=\"icon\"> {{ icon }}</mat-icon>\n  </button>\n</ng-template>",
                    inputs: DEFAULT_INPUTS_O_TABLE_OPTION,
                    outputs: DEFAULT_OUTPUTS_O_TABLE_OPTION,
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        '[class.o-table-option]': 'true',
                    },
                    styles: [""]
                }] }
    ];
    OTableOptionComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: ElementRef }
    ]; };
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OTableOptionComponent.prototype, "enabled", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OTableOptionComponent.prototype, "showCheckboxOption", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OTableOptionComponent.prototype, "active", void 0);
    return OTableOptionComponent;
}());
export { OTableOptionComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby10YWJsZS1vcHRpb24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vb250aW1pemUtd2ViLW5neC8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3RhYmxlL2V4dGVuc2lvbnMvaGVhZGVyL3RhYmxlLW9wdGlvbi9vLXRhYmxlLW9wdGlvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCx1QkFBdUIsRUFDdkIsaUJBQWlCLEVBQ2pCLFNBQVMsRUFDVCxVQUFVLEVBQ1YsWUFBWSxFQUNaLFFBQVEsRUFFUixpQkFBaUIsRUFDbEIsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBRTNFLE1BQU0sQ0FBQyxJQUFNLDZCQUE2QixHQUFHO0lBQzNDLGFBQWE7SUFDYixTQUFTO0lBQ1QsTUFBTTtJQUVOLDJDQUEyQztJQUMzQyxlQUFlO0lBQ2YsUUFBUTtDQUNULENBQUM7QUFFRixNQUFNLENBQUMsSUFBTSw4QkFBOEIsR0FBRztJQUM1QyxTQUFTO0NBQ1YsQ0FBQztBQUVGO0lBK0JFLCtCQUNZLFFBQWtCLEVBQ3JCLEtBQWlCO1FBRGQsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUNyQixVQUFLLEdBQUwsS0FBSyxDQUFZO1FBaEIxQixZQUFPLEdBQXlCLElBQUksWUFBWSxFQUFVLENBQUM7UUFJM0QsWUFBTyxHQUFZLElBQUksQ0FBQztRQUl4Qix1QkFBa0IsR0FBWSxLQUFLLENBQUM7UUFFcEMsV0FBTSxHQUFZLEtBQUssQ0FBQztRQVF0QixJQUFJO1lBQ0YsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBb0IsaUJBQTRDLENBQUMsQ0FBQztTQUM5RjtRQUFDLE9BQU8sQ0FBQyxFQUFFO1NBQ1g7SUFDSCxDQUFDO0lBRUQsNENBQVksR0FBWjtRQUNFLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDcEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRUQsc0JBQUksdURBQW9CO2FBQXhCO1lBQ0UsT0FBTyxJQUFJLENBQUMsa0JBQWtCLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUNoRCxDQUFDOzs7T0FBQTtJQUVELHlDQUFTLEdBQVQsVUFBVSxHQUFZO1FBQ3BCLElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDO1FBQ2xCLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDMUIsQ0FBQztJQXRDYSxpREFBMkIsR0FBRyx1QkFBdUIsQ0FBQzs7Z0JBZnJFLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsZ0JBQWdCO29CQUMxQiw0dEJBQThDO29CQUU5QyxNQUFNLEVBQUUsNkJBQTZCO29CQUNyQyxPQUFPLEVBQUUsOEJBQThCO29CQUN2QyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtvQkFDckMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07b0JBQy9DLElBQUksRUFBRTt3QkFDSix3QkFBd0IsRUFBRSxNQUFNO3FCQUNqQzs7aUJBQ0Y7OztnQkFoQ0MsUUFBUTtnQkFGUixVQUFVOztJQTRDVjtRQURDLGNBQWMsRUFBRTs7MERBQ087SUFJeEI7UUFEQyxjQUFjLEVBQUU7O3FFQUNtQjtJQUVwQztRQURDLGNBQWMsRUFBRTs7eURBQ087SUE0QjFCLDRCQUFDO0NBQUEsQUF2REQsSUF1REM7U0ExQ1kscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIEV2ZW50RW1pdHRlcixcbiAgSW5qZWN0b3IsXG4gIFR5cGUsXG4gIFZpZXdFbmNhcHN1bGF0aW9uXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBJbnB1dENvbnZlcnRlciB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2RlY29yYXRvcnMvaW5wdXQtY29udmVydGVyJztcblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfSU5QVVRTX09fVEFCTEVfT1BUSU9OID0gW1xuICAnb2F0dHI6IGF0dHInLFxuICAnZW5hYmxlZCcsXG4gICdpY29uJyxcbiAgLy9zaG93LWNoZWNrYm94LW9wdGlvbiBbc3RyaW5nXVt5ZXN8bm98dHJ1ZXxmYWxzZV06IHNob3cgY2hlY2tib3ggb3B0aW9uLiBEZWZhdWx0IDpuby5cbiAgJ3Nob3dDaGVja2JveE9wdGlvbiA6IHNob3ctY2hlY2tib3gtb3B0aW9uJyxcbiAgJ29sYWJlbDogbGFiZWwnLFxuICAnYWN0aXZlJ1xuXTtcblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfT1VUUFVUU19PX1RBQkxFX09QVElPTiA9IFtcbiAgJ29uQ2xpY2snXG5dO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdvLXRhYmxlLW9wdGlvbicsXG4gIHRlbXBsYXRlVXJsOiAnLi9vLXRhYmxlLW9wdGlvbi5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL28tdGFibGUtb3B0aW9uLmNvbXBvbmVudC5zY3NzJ10sXG4gIGlucHV0czogREVGQVVMVF9JTlBVVFNfT19UQUJMRV9PUFRJT04sXG4gIG91dHB1dHM6IERFRkFVTFRfT1VUUFVUU19PX1RBQkxFX09QVElPTixcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIGhvc3Q6IHtcbiAgICAnW2NsYXNzLm8tdGFibGUtb3B0aW9uXSc6ICd0cnVlJyxcbiAgfVxufSlcblxuZXhwb3J0IGNsYXNzIE9UYWJsZU9wdGlvbkNvbXBvbmVudCB7XG5cbiAgcHVibGljIHN0YXRpYyBPX1RBQkxFX09QVElPTl9BQ1RJVkVfQ0xBU1MgPSAnby10YWJsZS1vcHRpb24tYWN0aXZlJztcblxuICBvbkNsaWNrOiBFdmVudEVtaXR0ZXI8b2JqZWN0PiA9IG5ldyBFdmVudEVtaXR0ZXI8b2JqZWN0PigpO1xuXG4gIG9hdHRyOiBzdHJpbmc7XG4gIEBJbnB1dENvbnZlcnRlcigpXG4gIGVuYWJsZWQ6IGJvb2xlYW4gPSB0cnVlO1xuICBpY29uOiBzdHJpbmc7XG4gIG9sYWJlbDogc3RyaW5nO1xuICBASW5wdXRDb252ZXJ0ZXIoKVxuICBzaG93Q2hlY2tib3hPcHRpb246IGJvb2xlYW4gPSBmYWxzZTtcbiAgQElucHV0Q29udmVydGVyKClcbiAgYWN0aXZlOiBib29sZWFuID0gZmFsc2U7XG5cbiAgY2Q6IENoYW5nZURldGVjdG9yUmVmO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCBpbmplY3RvcjogSW5qZWN0b3IsXG4gICAgcHVibGljIGVsUmVmOiBFbGVtZW50UmVmXG4gICkge1xuICAgIHRyeSB7XG4gICAgICB0aGlzLmNkID0gdGhpcy5pbmplY3Rvci5nZXQ8Q2hhbmdlRGV0ZWN0b3JSZWY+KENoYW5nZURldGVjdG9yUmVmIGFzIFR5cGU8Q2hhbmdlRGV0ZWN0b3JSZWY+KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgfVxuICB9XG5cbiAgaW5uZXJPbkNsaWNrKCkge1xuICAgIHRoaXMub25DbGljay5lbWl0KCk7XG4gICAgdGhpcy5zZXRBY3RpdmUoIXRoaXMuYWN0aXZlKTtcbiAgfVxuXG4gIGdldCBhY3RpdmVDaGVja2JveE9wdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5zaG93Q2hlY2tib3hPcHRpb24gJiYgdGhpcy5hY3RpdmU7XG4gIH1cblxuICBzZXRBY3RpdmUodmFsOiBib29sZWFuKSB7XG4gICAgdGhpcy5hY3RpdmUgPSB2YWw7XG4gICAgdGhpcy5jZC5kZXRlY3RDaGFuZ2VzKCk7XG4gIH1cblxufVxuIl19