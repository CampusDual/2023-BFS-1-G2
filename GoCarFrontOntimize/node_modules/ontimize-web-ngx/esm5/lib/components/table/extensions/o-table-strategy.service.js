import { Injectable } from "@angular/core";
import { Subject } from "rxjs";
import { distinctUntilChanged } from "rxjs/operators";
var OTableVirtualScrollStrategy = (function () {
    function OTableVirtualScrollStrategy() {
        this.indexChange = new Subject();
        this.scrolledIndexChange = this.indexChange.pipe(distinctUntilChanged());
        this.stickyChange = new Subject();
        this.bufferMultiplier = 1;
        this._dataLength = 0;
    }
    Object.defineProperty(OTableVirtualScrollStrategy.prototype, "dataLength", {
        get: function () {
            return this._dataLength;
        },
        set: function (value) {
            this._dataLength = value;
            this.onDataLengthChanged();
        },
        enumerable: true,
        configurable: true
    });
    OTableVirtualScrollStrategy.prototype.attach = function (viewport) {
        this.viewport = viewport;
        this.onDataLengthChanged();
        this.updateContent();
    };
    OTableVirtualScrollStrategy.prototype.detach = function () {
    };
    OTableVirtualScrollStrategy.prototype.destroy = function () {
        this.indexChange.complete();
        this.stickyChange.complete();
    };
    OTableVirtualScrollStrategy.prototype.onContentRendered = function () {
    };
    OTableVirtualScrollStrategy.prototype.onRenderedOffsetChanged = function () {
    };
    OTableVirtualScrollStrategy.prototype.scrollToIndex = function (index, behavior) {
    };
    OTableVirtualScrollStrategy.prototype.onContentScrolled = function () {
        this.updateContent();
    };
    OTableVirtualScrollStrategy.prototype.setConfig = function (rowHeight, headerHeight, footerHeight) {
        if (this.rowHeight === rowHeight
            && this.headerHeight === headerHeight
            && this.footerHeight === footerHeight) {
            return;
        }
        this.rowHeight = rowHeight;
        this.headerHeight = headerHeight;
        this.footerHeight = footerHeight;
        this.onDataLengthChanged();
    };
    OTableVirtualScrollStrategy.prototype.onDataLengthChanged = function () {
        if (this.viewport) {
            this.viewport.setTotalContentSize(this.dataLength * this.rowHeight + this.headerHeight + this.footerHeight);
            this.viewport.scrollToOffset(0);
            this.updateContent();
        }
    };
    OTableVirtualScrollStrategy.prototype.updateContent = function () {
        if (!this.viewport || !this.rowHeight || this.dataLength === 0) {
            return;
        }
        var scrollOffset = this.viewport.measureScrollOffset();
        var itemsDisplayed = Math.ceil(this.viewport.getViewportSize() / this.rowHeight);
        var renderedOffset = this.viewport.getOffsetToRenderedContentStart();
        var start = renderedOffset / this.rowHeight;
        var bufferItems = Math.ceil(itemsDisplayed * this.bufferMultiplier);
        var bufferOffset = renderedOffset + bufferItems * this.rowHeight;
        var relativeScrollOffset = scrollOffset - bufferOffset;
        var rowsScrolled = relativeScrollOffset / this.rowHeight;
        var displayed = scrollOffset / this.rowHeight;
        this.indexChange.next(displayed);
        var rowsToMove = Math.sign(rowsScrolled) * Math.floor(Math.abs(rowsScrolled));
        var adjustedRenderedOffset = Math.max(0, renderedOffset + rowsToMove * this.rowHeight);
        this.viewport.setRenderedContentOffset(adjustedRenderedOffset);
        var adjustedStart = Math.max(0, start + rowsToMove);
        var adjustedEnd = adjustedStart + itemsDisplayed + bufferItems;
        this.viewport.setRenderedRange({ start: adjustedStart, end: adjustedEnd });
        this.stickyChange.next(adjustedRenderedOffset);
    };
    OTableVirtualScrollStrategy.decorators = [
        { type: Injectable }
    ];
    return OTableVirtualScrollStrategy;
}());
export { OTableVirtualScrollStrategy };
//# sourceMappingURL=data:application/json;base64,