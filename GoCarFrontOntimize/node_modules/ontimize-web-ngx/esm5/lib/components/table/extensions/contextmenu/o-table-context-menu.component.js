import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, forwardRef, Inject, Injector, ViewChild } from '@angular/core';
import { BehaviorSubject, Subscription } from 'rxjs';
import { InputConverter } from '../../../../decorators/input-converter';
import { OTranslateService } from '../../../../services/translate/o-translate.service';
import { ColumnValueFilterOperator } from '../../../../types/table/o-column-value-filter.type';
import { Util } from '../../../../util/util';
import { OContextMenuComponent } from '../../../contextmenu/o-context-menu.component';
import { OTableComponent } from '../../o-table.component';
import { OTableGroupedRow } from '../row/o-table-row-group.class';
export var DEFAULT_TABLE_CONTEXT_MENU_INPUTS = [
    'contextMenu: context-menu',
    'showInsert: insert',
    'showEdit: edit',
    'showViewDetail: view-detail',
    'showCopy: copy',
    'showSelectAll: select-all',
    'showRefresh: refresh',
    'showDelete: delete',
    'showFilter: filter',
    'showGroupByRow: group-by-row'
];
var OTableContextMenuComponent = (function () {
    function OTableContextMenuComponent(injector, table) {
        this.injector = injector;
        this.table = table;
        this.isVisibleInsert = new BehaviorSubject(true);
        this.isVisibleEdit = new BehaviorSubject(true);
        this.isVisibleDetail = new BehaviorSubject(true);
        this.isVisibleCopy = new BehaviorSubject(true);
        this.isVisibleSelectAll = new BehaviorSubject(true);
        this.isVisibleRefresh = new BehaviorSubject(true);
        this.isVisibleDelete = new BehaviorSubject(true);
        this.isVisibleFilter = new BehaviorSubject(true);
        this.isVisibleGroupByRow = new BehaviorSubject(true);
        this.isEnabledGroupByColumn = new BehaviorSubject(true);
        this.isEnabledUnGroupByColumn = new BehaviorSubject(false);
        this.isEnabledUnGroupAllColumn = new BehaviorSubject(false);
        this.isDataCell = new BehaviorSubject(true);
        this.isTableGroupedRow = new BehaviorSubject(true);
        this.isGroupableCell = new BehaviorSubject(true);
        this.contextMenuSubscription = new Subscription();
        this.isDateColumn = new BehaviorSubject(false);
        this.translateService = this.injector.get(OTranslateService);
    }
    Object.defineProperty(OTableContextMenuComponent.prototype, "showInsert", {
        get: function () {
            return this.isVisibleInsert.getValue();
        },
        set: function (value) {
            if (typeof value !== 'boolean') {
                value = Util.parseBoolean(value);
            }
            this.isVisibleInsert.next(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableContextMenuComponent.prototype, "showEdit", {
        get: function () {
            return this.isVisibleEdit.getValue();
        },
        set: function (value) {
            if (typeof value !== 'boolean') {
                value = Util.parseBoolean(value);
            }
            this.isVisibleEdit.next(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableContextMenuComponent.prototype, "showViewDetail", {
        get: function () {
            return this.isVisibleDetail.getValue();
        },
        set: function (value) {
            if (typeof value !== 'boolean') {
                value = Util.parseBoolean(value);
            }
            this.isVisibleDetail.next(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableContextMenuComponent.prototype, "showCopy", {
        get: function () {
            return this.isVisibleCopy.getValue();
        },
        set: function (value) {
            if (typeof value !== 'boolean') {
                value = Util.parseBoolean(value);
            }
            this.isVisibleCopy.next(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableContextMenuComponent.prototype, "showSelectAll", {
        get: function () {
            return this.isVisibleSelectAll.getValue();
        },
        set: function (value) {
            if (typeof value !== 'boolean') {
                value = Util.parseBoolean(value);
            }
            this.table.isSelectionModeNone() ? this.isVisibleSelectAll.next(false) : this.isVisibleSelectAll.next(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableContextMenuComponent.prototype, "showRefresh", {
        get: function () {
            return this.isVisibleRefresh.getValue();
        },
        set: function (value) {
            if (typeof value !== 'boolean') {
                value = Util.parseBoolean(value);
            }
            this.isVisibleRefresh.next(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableContextMenuComponent.prototype, "showDelete", {
        get: function () {
            return this.isVisibleDelete.getValue();
        },
        set: function (value) {
            if (typeof value !== 'boolean') {
                value = Util.parseBoolean(value);
            }
            this.isVisibleDelete.next(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableContextMenuComponent.prototype, "showFilter", {
        get: function () {
            return this.isVisibleFilter.getValue();
        },
        set: function (value) {
            if (typeof value !== 'boolean') {
                value = Util.parseBoolean(value);
            }
            this.isVisibleFilter.next(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableContextMenuComponent.prototype, "showGroupByRow", {
        get: function () {
            return this.isVisibleGroupByRow.getValue();
        },
        set: function (value) {
            if (typeof value !== 'boolean') {
                value = Util.parseBoolean(value);
            }
            this.isVisibleGroupByRow.next(value);
        },
        enumerable: true,
        configurable: true
    });
    OTableContextMenuComponent.prototype.ngAfterViewInit = function () {
        if (!Util.isDefined(this.showSelectAll)) {
            this.isVisibleSelectAll.next(this.table.selectAllCheckbox);
        }
        if (!this.table.groupable) {
            this.isVisibleGroupByRow.next(this.table.groupable);
        }
        if (this.contextMenu) {
            this.defaultContextMenu.externalContextMenuItems = this.contextMenu.oContextMenuItems;
        }
        this.table.registerContextMenu(this.defaultContextMenu);
        this.registerContextMenuListeners();
    };
    OTableContextMenuComponent.prototype.registerContextMenuListeners = function () {
        var _this = this;
        this.contextMenuSubscription.add(this.defaultContextMenu.onClose.subscribe(function (param) {
            if (!_this.table.isSelectionModeMultiple()) {
                _this.table.clearSelection();
            }
        }));
        this.contextMenuSubscription.add(this.defaultContextMenu.onShow.subscribe(function (param) {
            _this.initProperties(param);
        }));
    };
    OTableContextMenuComponent.prototype.gotoDetails = function (event) {
        var data = event.data.rowValue;
        this.table.viewDetail(data);
    };
    OTableContextMenuComponent.prototype.edit = function (event) {
        this.table.doHandleClick(event.data.rowValue, event.data.cellName, event.data.rowIndex, event);
    };
    OTableContextMenuComponent.prototype.add = function () {
        this.table.add();
    };
    OTableContextMenuComponent.prototype.selectAll = function () {
        this.table.showAndSelectAllCheckbox();
    };
    OTableContextMenuComponent.prototype.unSelectAll = function () {
        this.table.selection.clear();
    };
    OTableContextMenuComponent.prototype.copyAll = function () {
        this.table.copyAll();
    };
    OTableContextMenuComponent.prototype.copyCell = function (event) {
        var cell_data = this.defaultContextMenu.origin.innerText;
        Util.copyToClipboard(cell_data);
    };
    OTableContextMenuComponent.prototype.copySelection = function () {
        this.table.copySelection();
    };
    OTableContextMenuComponent.prototype.copyRow = function (event) {
        var data = JSON.stringify(this.table.dataSource.getRenderedData([event.data.rowValue]));
        Util.copyToClipboard(data);
    };
    OTableContextMenuComponent.prototype.delete = function (event) {
        this.table.remove();
    };
    OTableContextMenuComponent.prototype.refresh = function () {
        this.table.refresh();
    };
    OTableContextMenuComponent.prototype.filterByValue = function () {
        var columValueFilter = {
            attr: this.column.attr,
            operator: ColumnValueFilterOperator.IN,
            values: [this.row[this.column.attr]],
            availableValues: undefined
        };
        this.table.filterByColumn(columValueFilter);
    };
    OTableContextMenuComponent.prototype.groupByColumn = function (dateType) {
        this.table.groupByColumn(this.column, dateType);
        this.isEnabledGroupByColumn.next(false);
    };
    OTableContextMenuComponent.prototype.unGroupByColumn = function () {
        this.table.unGroupByColumn(this.column);
    };
    OTableContextMenuComponent.prototype.unGroupAll = function () {
        this.table.unGroupByAllColumns();
    };
    Object.defineProperty(OTableContextMenuComponent.prototype, "labelFilterByColumn", {
        get: function () {
            return (this.column && this.column.title) ? this.translateService.get('TABLE_CONTEXT_MENU.FILTER_BY') + ' ' + this.translateService.get(this.column.title) : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableContextMenuComponent.prototype, "labelGroupByColumn", {
        get: function () {
            return (this.column && this.column.title) ? this.translateService.get('TABLE_CONTEXT_MENU.GROUP_BY_COLUMN') + ' ' + this.translateService.get(this.column.title) : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableContextMenuComponent.prototype, "labelUnGroupByColumn", {
        get: function () {
            return (this.column && this.column.title) ? this.translateService.get('TABLE_CONTEXT_MENU.UNGROUP_BY_COLUMN') + ' ' + this.translateService.get(this.column.title) : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableContextMenuComponent.prototype, "row", {
        get: function () {
            return this._row;
        },
        set: function (value) {
            this._row = value.rowValue;
            var isTableGroupedRow = this._row instanceof OTableGroupedRow;
            var columnName = value.cellName;
            if (isTableGroupedRow) {
                columnName = columnName.substring('groupHeader-'.length);
            }
            this.column = this.table.getOColumn(columnName);
            this.isColumnDate();
            this.isDataCell.next(!isTableGroupedRow);
            this.isTableGroupedRow.next(isTableGroupedRow);
            this.isGroupableCell.next(isTableGroupedRow && this._row.hasColumnData(this.column.attr));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableContextMenuComponent.prototype, "availableColumnAggregates", {
        get: function () {
            var result = Util.columnAggregates;
            if (this.row instanceof OTableGroupedRow) {
                var groupingComp = this.row.getColumnGroupingComponent(this.column.attr);
                if (Util.isDefined(groupingComp.aggregateName)) {
                    result = result.slice();
                    if (result.includes(groupingComp.aggregate)) {
                        result.splice(result.indexOf(groupingComp.aggregate), 1, groupingComp.aggregateName);
                    }
                    else {
                        result.push(groupingComp.aggregateName);
                    }
                }
            }
            return result;
        },
        enumerable: true,
        configurable: true
    });
    OTableContextMenuComponent.prototype.filterByColumn = function (event) {
        if (this.table.oTableMenu) {
            this.table.isColumnFiltersActive = true;
            this.table.openColumnFilterDialog(this.column, event.event);
        }
    };
    OTableContextMenuComponent.prototype.checkVisibleFilter = function () {
        var isVisible = false;
        if (this.column) {
            isVisible = this.showFilter && this.table.isColumnFilterable(this.column);
        }
        this.isVisibleFilter.next(isVisible);
    };
    OTableContextMenuComponent.prototype.checkGroupByRowOptions = function () {
        this.isEnabledUnGroupByColumn.next(false);
        this.isEnabledUnGroupAllColumn.next(false);
        var grouped = false;
        if (this.column.groupable && !Util.isArrayEmpty(this.table.groupedColumnsArray) && this.foundColumnInGroupedColumns(this.column)) {
            this.isEnabledUnGroupByColumn.next(true);
            grouped = true;
        }
        this.isEnabledGroupByColumn.next(this.column.groupable && !grouped);
        if (!Util.isArrayEmpty(this.table.groupedColumnsArray)) {
            this.isEnabledUnGroupAllColumn.next(true);
        }
    };
    OTableContextMenuComponent.prototype.foundColumnInGroupedColumns = function (column) {
        var found = false;
        this.table.groupedColumnsArray.forEach(function (groupedColumn) { if (groupedColumn == column.attr) {
            found = true;
        } });
        return found;
    };
    OTableContextMenuComponent.prototype.changeAggregateFunction = function (arg, aggregateFnName) {
        if (arg.data.rowValue instanceof OTableGroupedRow) {
            arg.data.rowValue.setColumnActiveAggregateFunction(this.column.attr, aggregateFnName);
        }
    };
    OTableContextMenuComponent.prototype.initProperties = function (param) {
        var data = param.data;
        if (!Util.isDefined(data)) {
            return;
        }
        this.row = { rowValue: data.rowValue, cellName: data.cellName };
        this.checkVisibleFilter();
        this.checkGroupByRowOptions();
    };
    OTableContextMenuComponent.prototype.expandRowGroupsSameLevel = function () {
        this.table.dataSource.setRowGroupLevelExpansion(this._row, true);
    };
    OTableContextMenuComponent.prototype.collapseRowGroupsSameLevel = function () {
        this.table.dataSource.setRowGroupLevelExpansion(this._row, false);
    };
    OTableContextMenuComponent.prototype.isColumnDate = function () {
        this.isDateColumn.next(this.column.type == 'date');
    };
    OTableContextMenuComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-table-context-menu',
                    template: "<o-context-menu #defaultContextMenu>\n\n  <ng-container *ngIf=\"isDataCell | async\">\n    <o-context-menu-item attr=\"refresh\" label=\"TABLE_CONTEXT_MENU.REFRESH\" svg-icon=\"ontimize:autorenew\" (execute)=\"refresh()\"\n      [visible]=\"isVisibleRefresh | async\"></o-context-menu-item>\n    <o-context-menu-item attr=\"detail\" icon=\"chevron_right\" label=\"TABLE_CONTEXT_MENU.VIEW_DETAIL\" (execute)=\"gotoDetails($event)\"\n      [visible]=\"isVisibleDetail | async\"></o-context-menu-item>\n    <o-context-menu-item attr=\"edit\" icon=\"edit\" label=\"TABLE_CONTEXT_MENU.EDIT\" (execute)=\"edit($event)\" [visible]=\"isVisibleEdit | async\">\n    </o-context-menu-item>\n    <o-context-menu-item attr=\"insert\" label=\"TABLE_CONTEXT_MENU.INSERT\" icon=\"add\" (execute)=\"add()\" [visible]=\"isVisibleInsert | async\">\n    </o-context-menu-item>\n    <o-context-menu-item attr=\"delete\" label=\"TABLE_CONTEXT_MENU.DELETE\" icon=\"delete\" (execute)=\"delete($event)\" [visible]=\"isVisibleDelete | async\">\n    </o-context-menu-item>\n    <!-- FILTER GROUP -->\n    <o-context-menu-group label=\"TABLE_CONTEXT_MENU.FILTER\" icon=\"filter_alt\" type=\"group\" [visible]=\"isVisibleFilter | async\">\n      <o-context-menu-item icon=\"filter_alt\" [label]=\"labelFilterByColumn\" (execute)=\"filterByColumn($event)\"></o-context-menu-item>\n      <o-context-menu-item icon=\"filter_alt\" label=\"TABLE_CONTEXT_MENU.FILTER_BY_VALUE\" (execute)=\"filterByValue()\"></o-context-menu-item>\n    </o-context-menu-group>\n    <!-- COPY GROUP -->\n    <o-context-menu-separator [visible]=\"isVisibleCopy | async\"></o-context-menu-separator>\n    <o-context-menu-group label=\"TABLE_CONTEXT_MENU.COPY\" icon=\"file_copy\" type=\"group\" [visible]=\"isVisibleCopy | async\">\n      <o-context-menu-item icon=\"file_copy\" label=\"TABLE_CONTEXT_MENU.COPY_CELL\" (execute)=\"copyCell($event)\"></o-context-menu-item>\n      <o-context-menu-item icon=\"file_copy\" label=\"TABLE_CONTEXT_MENU.COPY_ROW\" (execute)=\"copyRow($event)\"></o-context-menu-item>\n      <o-context-menu-item label=\"TABLE_CONTEXT_MENU.COPY_ALL\" icon=\"file_copy\" (execute)=\"copyAll()\"></o-context-menu-item>\n      <o-context-menu-item label=\"TABLE_CONTEXT_MENU.COPY_SELECTION\" icon=\"file_copy\" (execute)=\"copySelection()\"></o-context-menu-item>\n    </o-context-menu-group>\n    <o-context-menu-separator [visible]=\"isVisibleSelectAll | async\"></o-context-menu-separator>\n    <o-context-menu-item attr=\"select-all\" [label]=\"table.isAllSelected() ? 'TABLE_CONTEXT_MENU.DESELECT_ALL': 'TABLE_CONTEXT_MENU.SELECT_ALL'\"\n      icon=\"select_all\" (execute)=\"table.isAllSelected() ? unSelectAll() : selectAll()\" [visible]=\"isVisibleSelectAll | async\"></o-context-menu-item>\n\n    <!-- GROUP BY -->\n    <o-context-menu-separator [visible]=\"isVisibleGroupByRow | async\"></o-context-menu-separator>\n    <o-context-menu-group label=\"TABLE_CONTEXT_MENU.GROUP_BY\" icon=\"format_indent_increase\" type=\"group\" [visible]=\"isVisibleGroupByRow | async\">\n      <o-context-menu-item *ngIf=\"isDateColumn | async\" label=\"TABLE_CONTEXT_MENU.GROUP_BY_YEAR\" (execute)=\"groupByColumn('YEAR')\"\n        icon=\"format_indent_increase\" type=\"group\" [visible]=\"isVisibleGroupByRow | async\" [enabled]=\"isEnabledGroupByColumn | async\">\n      </o-context-menu-item>\n      <o-context-menu-item *ngIf=\"isDateColumn | async\" label=\"TABLE_CONTEXT_MENU.GROUP_BY_MONTH\" (execute)=\"groupByColumn('MONTH')\"\n        icon=\"format_indent_increase\" type=\"group\" [visible]=\"isVisibleGroupByRow | async\" [enabled]=\"isEnabledGroupByColumn | async\">\n      </o-context-menu-item>\n      <o-context-menu-item *ngIf=\"isDateColumn | async\" label=\"TABLE_CONTEXT_MENU.GROUP_BY_YEAR_MONTH\" icon=\"format_indent_increase\" type=\"group\"\n        (execute)=\"groupByColumn('YEAR_MONTH')\" [visible]=\"isVisibleGroupByRow | async\" [enabled]=\"isEnabledGroupByColumn | async\">\n      </o-context-menu-item>\n      <o-context-menu-item *ngIf=\"isDateColumn | async\" label=\"TABLE_CONTEXT_MENU.GROUP_BY_YEAR_MONTH_DAY\" icon=\"format_indent_increase\" type=\"group\"\n        (execute)=\"groupByColumn('YEAR_MONTH_DAY')\" [visible]=\"isVisibleGroupByRow | async\" [enabled]=\"isEnabledGroupByColumn | async\">\n      </o-context-menu-item>\n      <o-context-menu-item *ngIf=\"!(isDateColumn | async)\" icon=\"format_indent_increase\" [label]=\"labelGroupByColumn\" (execute)=\"groupByColumn()\"\n        [enabled]=\"isEnabledGroupByColumn | async\"></o-context-menu-item>\n      <o-context-menu-item *ngIf=\"isEnabledUnGroupByColumn | async\" icon=\"format_indent_decrease\" [label]=\"labelUnGroupByColumn\"\n        (execute)=\"unGroupByColumn()\" [enabled]=\"isEnabledUnGroupByColumn | async\"></o-context-menu-item>\n      <o-context-menu-item icon=\"format_line_spacing\" label=\"TABLE_CONTEXT_MENU.UNGROUP_ALLCOLUMNS\" (execute)=\"unGroupAll()\"\n        [enabled]=\"isEnabledUnGroupAllColumn | async\">\n      </o-context-menu-item>\n    </o-context-menu-group>\n  </ng-container>\n\n  <!-- GROUP BY HEADER CELL AGGREGATE FUNCTION -->\n  <ng-container *ngIf=\"isGroupableCell | async\">\n    <o-context-menu-group label=\"TABLE_CONTEXT_MENU.GROUP_BY.AGGREGATE_FUNCTION\" icon=\"format_indent_increase\" type=\"group\">\n      <o-context-menu-item *ngFor=\"let aggregateFn of availableColumnAggregates\" label=\"{{ 'AGGREGATE_NAME.' + aggregateFn }}\"\n        (execute)=\"changeAggregateFunction($event, aggregateFn)\"></o-context-menu-item>\n    </o-context-menu-group>\n  </ng-container>\n\n  <ng-container *ngIf=\"isTableGroupedRow | async\">\n    <o-context-menu-item icon=\"unfold_more\" label=\"TABLE_CONTEXT_MENU.EXPAND_ALL_GROUPS\" (execute)=\"expandRowGroupsSameLevel()\"></o-context-menu-item>\n    <o-context-menu-item icon=\"unfold_less\" label=\"TABLE_CONTEXT_MENU.COLLAPSE_ALL_GROUPS\" (execute)=\"collapseRowGroupsSameLevel()\">\n    </o-context-menu-item>\n  </ng-container>\n\n</o-context-menu>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    inputs: DEFAULT_TABLE_CONTEXT_MENU_INPUTS
                }] }
    ];
    OTableContextMenuComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: OTableComponent, decorators: [{ type: Inject, args: [forwardRef(function () { return OTableComponent; }),] }] }
    ]; };
    OTableContextMenuComponent.propDecorators = {
        defaultContextMenu: [{ type: ViewChild, args: ['defaultContextMenu', { static: false },] }]
    };
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], OTableContextMenuComponent.prototype, "showSelectAll", null);
    return OTableContextMenuComponent;
}());
export { OTableContextMenuComponent };
//# sourceMappingURL=data:application/json;base64,