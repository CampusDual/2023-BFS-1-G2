import { Subject } from 'rxjs';
import { Util } from '../../../../util/util';
var OTableGroupedRow = (function () {
    function OTableGroupedRow(arg) {
        this.level = 0;
        this.expanded = true;
        this.columnsData = {};
        this.aggregateFunctionChange = new Subject();
        if (Util.isDefined(arg)) {
            this.column = arg.column;
            this.keysAsString = arg.keysAsString;
            this.level = arg.level;
            this.parent = arg.parent;
        }
    }
    Object.defineProperty(OTableGroupedRow.prototype, "visible", {
        get: function () {
            return !this.parent || (this.parent.visible && this.parent.expanded);
        },
        enumerable: true,
        configurable: true
    });
    OTableGroupedRow.prototype.hasColumnData = function (columnAttr) {
        return Util.isDefined(this.columnsData[columnAttr]);
    };
    OTableGroupedRow.prototype.hasActiveAggregate = function (columnAttr) {
        return this.hasColumnData(columnAttr) && Util.isDefined(this.columnsData[columnAttr].activeAggregate);
    };
    OTableGroupedRow.prototype.getColumnGroupingComponent = function (columnAttr) {
        return this.hasColumnData(columnAttr) ? this.columnsData[columnAttr].component : null;
    };
    OTableGroupedRow.prototype.getColumnAggregateValue = function (columnAttr) {
        return this.columnsData[columnAttr].value;
    };
    OTableGroupedRow.prototype.setColumnAggregateValue = function (columnAttr, value) {
        this.columnsData[columnAttr].value = value;
    };
    OTableGroupedRow.prototype.expandSameLevel = function (defaultValue) {
        if (!this.hasColumnData(this.column)) {
            return defaultValue;
        }
        var groupingComponent = this.getColumnGroupingComponent(this.column);
        if (Util.isDefined(groupingComponent)) {
            return groupingComponent.expandGroupsSameLevel;
        }
        return defaultValue;
    };
    OTableGroupedRow.prototype.setColumnAggregateData = function (columnAttr, value) {
        if (this.hasColumnData(columnAttr)) {
            this.columnsData[columnAttr].data = value;
        }
    };
    OTableGroupedRow.prototype.getColumnAggregateData = function (columnAttr) {
        return this.hasColumnData(columnAttr) ? this.columnsData[columnAttr].data : [];
    };
    OTableGroupedRow.prototype.setColumnActiveAggregateFunction = function (columnAttr, aggregateFnName, emitEvent) {
        if (emitEvent === void 0) { emitEvent = true; }
        if (this.hasColumnData(columnAttr)) {
            this.columnsData[columnAttr].activeAggregate = aggregateFnName;
        }
        else {
            this.columnsData[columnAttr] = {
                component: null,
                activeAggregate: aggregateFnName,
                value: null,
                data: []
            };
        }
        if (emitEvent) {
            var changeAllGroupedRows = true;
            var groupingComponent = this.getColumnGroupingComponent(columnAttr);
            if (Util.isDefined(groupingComponent)) {
                changeAllGroupedRows = groupingComponent.changeAggregateSameLevel;
            }
            this.aggregateFunctionChange.next({
                columnAttr: columnAttr,
                activeAggregate: aggregateFnName,
                changeAllGroupedRows: changeAllGroupedRows,
                row: this
            });
        }
    };
    OTableGroupedRow.prototype.getColumnActiveAggregateTitle = function (columnAttr) {
        var conf = this.getActiveColumnAggregateConfiguration(columnAttr);
        if (conf.title) {
            return conf.title;
        }
        return "AGGREGATE_NAME." + (conf.aggregateName || conf.aggregate);
    };
    OTableGroupedRow.prototype.initializeColumnAggregate = function (columnAttr, component) {
        if (!this.columnsData.hasOwnProperty(columnAttr)) {
            this.columnsData[columnAttr] = {
                component: null,
                activeAggregate: 'sum',
                value: null,
                data: []
            };
        }
        if (Util.isDefined(component)) {
            this.columnsData[columnAttr].component = component;
            this.columnsData[columnAttr].activeAggregate = component.aggregate;
        }
    };
    OTableGroupedRow.prototype.getActiveColumnAggregateConfiguration = function (columnAttr) {
        if (!this.hasColumnData(columnAttr)) {
            return {
                attr: columnAttr,
                aggregate: 'sum'
            };
        }
        var activeAggregate = this.columnsData[columnAttr].activeAggregate;
        var groupingColumnComponent = this.columnsData[columnAttr].component;
        if (Util.isDefined(groupingColumnComponent) && groupingColumnComponent.aggregate === activeAggregate) {
            return groupingColumnComponent.getAggregateConfiguration();
        }
        return {
            attr: columnAttr,
            aggregate: this.columnsData[columnAttr].activeAggregate
        };
    };
    return OTableGroupedRow;
}());
export { OTableGroupedRow };
//# sourceMappingURL=data:application/json;base64,