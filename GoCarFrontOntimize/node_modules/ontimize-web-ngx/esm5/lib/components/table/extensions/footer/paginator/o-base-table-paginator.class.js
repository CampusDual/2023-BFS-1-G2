import { Codes, Util } from '../../../../../util';
var OBaseTablePaginator = (function () {
    function OBaseTablePaginator() {
        this._pageIndex = 0;
        this._pageSize = 10;
        this._pageSizeOptions = Codes.PAGE_SIZE_OPTIONS;
        this.showFirstLastButtons = true;
    }
    Object.defineProperty(OBaseTablePaginator.prototype, "pageLenght", {
        get: function () {
            return this._pageSize;
        },
        set: function (value) {
            this._pageSize = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OBaseTablePaginator.prototype, "pageIndex", {
        get: function () {
            return this._pageIndex;
        },
        set: function (value) {
            this._pageIndex = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OBaseTablePaginator.prototype, "pageSizeOptions", {
        get: function () {
            return this._pageSizeOptions;
        },
        set: function (value) {
            if (typeof value === 'string') {
                var opts = Util.parseArray(value, true);
                value = opts.map(function (o) { return parseInt(o, 10); }).filter(function (o) { return !isNaN(o); });
            }
            this._pageSizeOptions = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OBaseTablePaginator.prototype, "pageSize", {
        get: function () {
            return this._pageSize;
        },
        set: function (value) {
            var _this = this;
            var parsedValue = parseInt("" + value, 10);
            if (isNaN(parsedValue) || parsedValue < 0) {
                this._pageSize = this._pageSizeOptions[0];
            }
            else {
                this._pageSize = parsedValue;
            }
            var result = this.pageSizeOptions.find(function (option) { return option === _this._pageSize; });
            if (!result) {
                this._pageSizeOptions.push(this._pageSize);
                this._pageSizeOptions.sort(function (i, j) { return i - j; });
            }
        },
        enumerable: true,
        configurable: true
    });
    OBaseTablePaginator.prototype.isShowingAllRows = function (selectedLength) {
        return false;
    };
    return OBaseTablePaginator;
}());
export { OBaseTablePaginator };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1iYXNlLXRhYmxlLXBhZ2luYXRvci5jbGFzcy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL29udGltaXplLXdlYi1uZ3gvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90YWJsZS9leHRlbnNpb25zL2Zvb3Rlci9wYWdpbmF0b3Ivby1iYXNlLXRhYmxlLXBhZ2luYXRvci5jbGFzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRWxEO0lBQUE7UUFFWSxlQUFVLEdBQVcsQ0FBQyxDQUFDO1FBQ3ZCLGNBQVMsR0FBVyxFQUFFLENBQUM7UUFDdkIscUJBQWdCLEdBQWEsS0FBSyxDQUFDLGlCQUFpQixDQUFDO1FBQy9ELHlCQUFvQixHQUFZLElBQUksQ0FBQztJQXNEdkMsQ0FBQztJQXBEQyxzQkFBSSwyQ0FBVTthQUFkO1lBQ0UsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ3hCLENBQUM7YUFFRCxVQUFlLEtBQWE7WUFDMUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDekIsQ0FBQzs7O09BSkE7SUFNRCxzQkFBSSwwQ0FBUzthQUFiO1lBQ0UsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDO1FBQ3pCLENBQUM7YUFFRCxVQUFjLEtBQWE7WUFDekIsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7UUFDMUIsQ0FBQzs7O09BSkE7SUFNRCxzQkFBSSxnREFBZTthQUFuQjtZQUNFLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDO1FBQy9CLENBQUM7YUFFRCxVQUFvQixLQUFlO1lBQ2pDLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO2dCQUM3QixJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztnQkFDMUMsS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxRQUFRLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFmLENBQWUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFULENBQVMsQ0FBQyxDQUFDO2FBQy9EO1lBQ0QsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEtBQUssQ0FBQztRQUNoQyxDQUFDOzs7T0FSQTtJQVVELHNCQUFJLHlDQUFRO2FBQVo7WUFDRSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDeEIsQ0FBQzthQUVELFVBQWEsS0FBYTtZQUExQixpQkFZQztZQVhDLElBQU0sV0FBVyxHQUFHLFFBQVEsQ0FBQyxLQUFHLEtBQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztZQUM3QyxJQUFJLEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBSSxXQUFXLEdBQUcsQ0FBQyxFQUFFO2dCQUN6QyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUMzQztpQkFBTTtnQkFDTCxJQUFJLENBQUMsU0FBUyxHQUFHLFdBQVcsQ0FBQzthQUM5QjtZQUNELElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFVBQUEsTUFBTSxJQUFJLE9BQUEsTUFBTSxLQUFLLEtBQUksQ0FBQyxTQUFTLEVBQXpCLENBQXlCLENBQUMsQ0FBQztZQUM5RSxJQUFJLENBQUMsTUFBTSxFQUFFO2dCQUNYLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUMzQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFVBQUMsQ0FBUyxFQUFFLENBQVMsSUFBSyxPQUFBLENBQUMsR0FBRyxDQUFDLEVBQUwsQ0FBSyxDQUFDLENBQUM7YUFDN0Q7UUFDSCxDQUFDOzs7T0FkQTtJQWdCTSw4Q0FBZ0IsR0FBdkIsVUFBd0IsY0FBYztRQUdwQyxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFSCwwQkFBQztBQUFELENBQUMsQUEzREQsSUEyREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPVGFibGVQYWdpbmF0b3IgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9pbnRlcmZhY2VzL28tdGFibGUtcGFnaW5hdG9yLmludGVyZmFjZSc7XG5pbXBvcnQgeyBDb2RlcywgVXRpbCB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3V0aWwnO1xuXG5leHBvcnQgY2xhc3MgT0Jhc2VUYWJsZVBhZ2luYXRvciBpbXBsZW1lbnRzIE9UYWJsZVBhZ2luYXRvciB7XG5cbiAgcHJvdGVjdGVkIF9wYWdlSW5kZXg6IG51bWJlciA9IDA7XG4gIHByb3RlY3RlZCBfcGFnZVNpemU6IG51bWJlciA9IDEwO1xuICBwcm90ZWN0ZWQgX3BhZ2VTaXplT3B0aW9uczogbnVtYmVyW10gPSBDb2Rlcy5QQUdFX1NJWkVfT1BUSU9OUztcbiAgc2hvd0ZpcnN0TGFzdEJ1dHRvbnM6IGJvb2xlYW4gPSB0cnVlO1xuXG4gIGdldCBwYWdlTGVuZ2h0KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3BhZ2VTaXplO1xuICB9XG5cbiAgc2V0IHBhZ2VMZW5naHQodmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX3BhZ2VTaXplID0gdmFsdWU7XG4gIH1cblxuICBnZXQgcGFnZUluZGV4KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3BhZ2VJbmRleDtcbiAgfVxuXG4gIHNldCBwYWdlSW5kZXgodmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX3BhZ2VJbmRleCA9IHZhbHVlO1xuICB9XG5cbiAgZ2V0IHBhZ2VTaXplT3B0aW9ucygpOiBudW1iZXJbXSB7XG4gICAgcmV0dXJuIHRoaXMuX3BhZ2VTaXplT3B0aW9ucztcbiAgfVxuXG4gIHNldCBwYWdlU2l6ZU9wdGlvbnModmFsdWU6IG51bWJlcltdKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbnN0IG9wdHMgPSBVdGlsLnBhcnNlQXJyYXkodmFsdWUsIHRydWUpO1xuICAgICAgdmFsdWUgPSBvcHRzLm1hcChvID0+IHBhcnNlSW50KG8sIDEwKSkuZmlsdGVyKG8gPT4gIWlzTmFOKG8pKTtcbiAgICB9XG4gICAgdGhpcy5fcGFnZVNpemVPcHRpb25zID0gdmFsdWU7XG4gIH1cblxuICBnZXQgcGFnZVNpemUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fcGFnZVNpemU7XG4gIH1cblxuICBzZXQgcGFnZVNpemUodmFsdWU6IG51bWJlcikge1xuICAgIGNvbnN0IHBhcnNlZFZhbHVlID0gcGFyc2VJbnQoYCR7dmFsdWV9YCwgMTApO1xuICAgIGlmIChpc05hTihwYXJzZWRWYWx1ZSkgfHwgcGFyc2VkVmFsdWUgPCAwKSB7XG4gICAgICB0aGlzLl9wYWdlU2l6ZSA9IHRoaXMuX3BhZ2VTaXplT3B0aW9uc1swXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fcGFnZVNpemUgPSBwYXJzZWRWYWx1ZTtcbiAgICB9XG4gICAgY29uc3QgcmVzdWx0ID0gdGhpcy5wYWdlU2l6ZU9wdGlvbnMuZmluZChvcHRpb24gPT4gb3B0aW9uID09PSB0aGlzLl9wYWdlU2l6ZSk7XG4gICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgIHRoaXMuX3BhZ2VTaXplT3B0aW9ucy5wdXNoKHRoaXMuX3BhZ2VTaXplKTtcbiAgICAgIHRoaXMuX3BhZ2VTaXplT3B0aW9ucy5zb3J0KChpOiBudW1iZXIsIGo6IG51bWJlcikgPT4gaSAtIGopO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBpc1Nob3dpbmdBbGxSb3dzKHNlbGVjdGVkTGVuZ3RoKTogYm9vbGVhbiB7XG4gICAgLy8gcmV0dXJuIHRoaXMuX3BhZ2VTaXplT3B0aW9ucy5pbmRleE9mKHNlbGVjdGVkTGVuZ3RoKSA9PT0gKHRoaXMuX3BhZ2VTaXplT3B0aW9ucy5sZW5ndGggLSAxKTtcbiAgICAvLyB0ZW1wb3JhbCB3aGlsZSBub3QgaGF2aW5nIGFuIG9wdGlvbiBmb3Igc2hvd2luZyBhbGwgcmVjb3JkcyBpbiBwYWdpbmF0ZWQgdGFibGVzXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbn1cbiJdfQ==