import { moveItemInArray } from '@angular/cdk/drag-drop';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject, Injector, ViewEncapsulation } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';
import { DialogService } from '../../../../../services/dialog.service';
import { OTranslateService } from '../../../../../services/translate/o-translate.service';
import { Codes } from '../../../../../util/codes';
import { Util } from '../../../../../util/util';
var OTableVisibleColumnsDialogComponent = (function () {
    function OTableVisibleColumnsDialogComponent(injector, dialogRef, data) {
        var _this = this;
        this.injector = injector;
        this.dialogRef = dialogRef;
        this.columns = [];
        this.rowHeight = Codes.DEFAULT_ROW_HEIGHT;
        this.activeColumnValueFilters = [];
        this.activeSortColumns = [];
        this.activeGroupByColumns = [];
        this.dialogService = this.injector.get(DialogService);
        this.cd = this.injector.get(ChangeDetectorRef);
        this.translateService = this.injector.get(OTranslateService);
        if (Util.isDefined(data.table)) {
            this.table = data.table;
            var visibleColumns_1 = Util.parseArray(this.table.visibleColumns, true);
            this.table.oTableOptions.columns.filter(function (oCol) { return visibleColumns_1.indexOf(oCol.attr) !== -1 || oCol.definition !== undefined; }).forEach(function (oCol) {
                _this.columns.push({
                    attr: oCol.attr,
                    title: oCol.title,
                    visible: oCol.visible
                });
            });
            this.rowHeight = this.table.rowHeight;
            this.activeColumnValueFilters = this.table.dataSource.getColumnValueFilters().map(function (colValueFilter) { return colValueFilter.attr; });
            this.activeSortColumns = this.table.sortColArray.map(function (col) { return col.columnName; });
            this.activeGroupByColumns = this.table.groupedColumnsArray;
        }
    }
    OTableVisibleColumnsDialogComponent.prototype.onClickColumn = function (col) {
        var _this = this;
        var activeColFilter = this.activeColumnValueFilters.includes(col.attr);
        var activeSorting = this.activeSortColumns.includes(col.attr);
        var activeGrouping = this.activeGroupByColumns.includes(col.attr);
        if (col.visible && (activeColFilter || activeSorting || activeGrouping)) {
            var warnArgs = [];
            if (activeColFilter) {
                warnArgs.push(this.translateService.get('TABLE.VISIBLE_COLUMNS_DIALOG.VALUE_FILTER_WARN'));
            }
            if (activeSorting) {
                warnArgs.push(this.translateService.get('TABLE.VISIBLE_COLUMNS_DIALOG.SORT_WARN'));
            }
            if (activeGrouping) {
                warnArgs.push(this.translateService.get('TABLE.VISIBLE_COLUMNS_DIALOG.GROUPING_WARN'));
            }
            var dialogText = this.translateService.get('TABLE.VISIBLE_COLUMNS_DIALOG.HIDE_COLUMN_WARNING', warnArgs);
            this.dialogService.confirm('CONFIRM', dialogText).then(function (res) {
                if (res) {
                    col.deleteValueFilter = activeColFilter;
                    col.deleteSortColummn = activeSorting;
                    col.deleteGrupingColumn = activeGrouping;
                    col.visible = !col.visible;
                    _this.cd.detectChanges();
                }
            });
        }
        else {
            col.visible = !col.visible;
            if (col.visible) {
                col.deleteValueFilter = false;
                col.deleteSortColummn = false;
                col.deleteGrupingColumn = false;
            }
        }
    };
    OTableVisibleColumnsDialogComponent.prototype.drop = function (event) {
        moveItemInArray(this.columns, event.previousIndex, event.currentIndex);
    };
    OTableVisibleColumnsDialogComponent.prototype.closeDialog = function () {
        var columnSortingToRemove = this.getColumnSortingToRemove();
        var newSortColumns = columnSortingToRemove.length > 0 ?
            this.table.sortColArray.filter(function (col) { return !columnSortingToRemove.includes(col.columnName); }) :
            undefined;
        var columnGroupingToRemove = this.getColumnGroupingToRemove();
        var newGroupColumns = columnGroupingToRemove.length > 0 ?
            this.table.groupedColumnsArray.filter(function (col) { return !columnGroupingToRemove.includes(col); }) :
            undefined;
        this.dialogRef.close({
            visibleColArray: this.getVisibleColumns(),
            columnsOrder: this.getColumnsOrder(),
            sortColumns: newSortColumns,
            columnValueFiltersToRemove: this.getColumnValueFiltersToRemove(),
            groupColumns: newGroupColumns
        });
    };
    OTableVisibleColumnsDialogComponent.prototype.getVisibleColumns = function () {
        return this.columns.filter(function (col) { return col.visible; }).map(function (col) { return col.attr; });
    };
    OTableVisibleColumnsDialogComponent.prototype.getColumnsOrder = function () {
        return this.columns.map(function (col) { return col.attr; });
    };
    OTableVisibleColumnsDialogComponent.prototype.getColumnValueFiltersToRemove = function () {
        return this.columns.filter(function (col) { return col.deleteValueFilter; }).map(function (col) { return col.attr; });
    };
    OTableVisibleColumnsDialogComponent.prototype.getColumnSortingToRemove = function () {
        return this.columns.filter(function (col) { return col.deleteSortColummn; }).map(function (col) { return col.attr; });
    };
    OTableVisibleColumnsDialogComponent.prototype.getColumnGroupingToRemove = function () {
        return this.columns.filter(function (col) { return col.deleteGrupingColumn; }).map(function (col) { return col.attr; });
    };
    OTableVisibleColumnsDialogComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-table-visible-columns-dialog',
                    template: "<span mat-dialog-title>{{ 'TABLE.BUTTONS.COLVIS' | oTranslate }}</span>\n\n\n<mat-dialog-content>\n  <div class=\"mat-subheader\">{{'TABLE.VISIBLE_COLUMNS.DESCRIPTION' | oTranslate}}</div>\n\n  <div [ngClass]=\"rowHeight\">\n    <mat-list cdkDropList (cdkDropListDropped)=\"drop($event)\" dense>\n      <mat-list-item *ngFor=\"let column of columns\" cdkDrag (click)=\"onClickColumn(column)\" [ngClass]=\"{'column-hidden':!column.visible}\"\n        class=\"o-drag-list-item-box\">\n        <mat-icon mat-list-icon svgIcon=\"ontimize:drag_handle\"></mat-icon>\n        <span mat-line>{{ (column.title || column.attr) | oTranslate }}</span>\n        <mat-icon *ngIf=\"column.visible\" svgIcon=\"ontimize:visibility\" color=\"primary\"></mat-icon>\n        <mat-icon *ngIf=\"!column.visible\" svgIcon=\"ontimize:visibility_off\"></mat-icon>\n        <mat-divider></mat-divider>\n      </mat-list-item>\n    </mat-list>\n  </div>\n</mat-dialog-content>\n\n<mat-dialog-actions fxLayoutAlign=\"end center\">\n  <button type=\"button\" mat-stroked-button [mat-dialog-close]=\"null\" class=\"o-button-default cancel\">{{ 'CANCEL' | oTranslate }}</button>\n  <button type=\"button\" mat-stroked-button (click)=\"closeDialog()\" class=\"o-button-primary\">{{ 'ACCEPT' | oTranslate }}</button>\n</mat-dialog-actions>\n",
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        '[class.o-table-visible-columns-dialog]': 'true'
                    },
                    styles: [".o-table-visible-columns-dialog .mat-dialog-content.mat-dialog-content{overflow:auto;padding-top:0;margin-top:24px}.o-table-visible-columns-dialog .mat-dialog-content.mat-dialog-content .mat-subheader{display:block}.o-table-visible-columns-dialog .mat-dialog-content.mat-dialog-content .title_list{font-weight:600;margin-bottom:6px;margin-top:12px}.o-table-visible-columns-dialog .mat-dialog-content.mat-dialog-content .cdk-drop-list{padding:0 12px}.o-table-visible-columns-dialog .mat-dialog-content.mat-dialog-content .mat-list .mat-list-item{cursor:pointer;height:auto}.o-table-visible-columns-dialog .mat-dialog-content.mat-dialog-content .mat-list .mat-list-item.column-hidden{opacity:.4}.o-table-visible-columns-dialog .mat-dialog-content.mat-dialog-content .mat-list .mat-list-item .mat-list-item-content{padding:0;cursor:move}.o-table-visible-columns-dialog .mat-dialog-content.mat-dialog-content .mat-list .mat-list-item .mat-list-item-content div.mat-list-text{padding:0 8px}.o-table-visible-columns-dialog .mat-dialog-content.mat-dialog-content .mat-list .mat-list-item .mat-list-item-content .mat-list-icon{display:flex}.o-table-visible-columns-dialog .mat-dialog-content.mat-dialog-content .mat-icon[svgicon=\"ontimize:drag_handle\"],.o-table-visible-columns-dialog .mat-dialog-content.mat-dialog-content .mat-list-text{cursor:move}.o-table-visible-columns-dialog .mat-dialog-content.mat-dialog-content .mat-icon[svgicon=\"ontimize:visibility\"],.o-table-visible-columns-dialog .mat-dialog-content.mat-dialog-content .mat-icon[svgicon=\"ontimize:visibility_off\"]{width:32px}"]
                }] }
    ];
    OTableVisibleColumnsDialogComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: MatDialogRef },
        { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
    ]; };
    return OTableVisibleColumnsDialogComponent;
}());
export { OTableVisibleColumnsDialogComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby10YWJsZS12aXNpYmxlLWNvbHVtbnMtZGlhbG9nLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL29udGltaXplLXdlYi1uZ3gvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90YWJsZS9leHRlbnNpb25zL2RpYWxvZy92aXNpYmxlLWNvbHVtbnMvby10YWJsZS12aXNpYmxlLWNvbHVtbnMtZGlhbG9nLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWUsZUFBZSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDdEUsT0FBTyxFQUNMLHVCQUF1QixFQUN2QixpQkFBaUIsRUFDakIsU0FBUyxFQUNULE1BQU0sRUFDTixRQUFRLEVBRVIsaUJBQWlCLEVBQ2xCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxlQUFlLEVBQUUsWUFBWSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFbEUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVEQUF1RCxDQUFDO0FBQzFGLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNsRCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFhaEQ7SUFxQkUsNkNBQ1ksUUFBa0IsRUFDckIsU0FBNEQsRUFDMUMsSUFBUztRQUhwQyxpQkEyQkM7UUExQlcsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUNyQixjQUFTLEdBQVQsU0FBUyxDQUFtRDtRQVhyRSxZQUFPLEdBQW9DLEVBQUUsQ0FBQztRQUM5QyxjQUFTLEdBQVcsS0FBSyxDQUFDLGtCQUFrQixDQUFDO1FBSW5DLDZCQUF3QixHQUFhLEVBQUUsQ0FBQztRQUN4QyxzQkFBaUIsR0FBYSxFQUFFLENBQUM7UUFDakMseUJBQW9CLEdBQWEsRUFBRSxDQUFDO1FBTzVDLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFB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QUFBLEFBaElELElBZ0lDO1NBdEhZLG1DQUFtQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENka0RyYWdEcm9wLCBtb3ZlSXRlbUluQXJyYXkgfSBmcm9tICdAYW5ndWxhci9jZGsvZHJhZy1kcm9wJztcbmltcG9ydCB7XG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgQ29tcG9uZW50LFxuICBJbmplY3QsXG4gIEluamVjdG9yLFxuICBUeXBlLFxuICBWaWV3RW5jYXBzdWxhdGlvblxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1BVF9ESUFMT0dfREFUQSwgTWF0RGlhbG9nUmVmIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwnO1xuXG5pbXBvcnQgeyBEaWFsb2dTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc2VydmljZXMvZGlhbG9nLnNlcnZpY2UnO1xuaW1wb3J0IHsgT1RyYW5zbGF0ZVNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9zZXJ2aWNlcy90cmFuc2xhdGUvby10cmFuc2xhdGUuc2VydmljZSc7XG5pbXBvcnQgeyBDb2RlcyB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3V0aWwvY29kZXMnO1xuaW1wb3J0IHsgVXRpbCB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3V0aWwvdXRpbCc7XG5pbXBvcnQgeyBPQ29sdW1uIH0gZnJvbSAnLi4vLi4vLi4vY29sdW1uL28tY29sdW1uLmNsYXNzJztcbmltcG9ydCB7IE9UYWJsZUNvbXBvbmVudCB9IGZyb20gJy4uLy4uLy4uL28tdGFibGUuY29tcG9uZW50JztcblxuZXhwb3J0IHR5cGUgQ29sdW1uVmlzaWJpbGl0eUNvbmZpZ3VyYXRpb24gPSB7XG4gIGF0dHI6IHN0cmluZztcbiAgdGl0bGU6IHN0cmluZztcbiAgdmlzaWJsZTogYm9vbGVhbjtcbiAgZGVsZXRlVmFsdWVGaWx0ZXI/OiBib29sZWFuO1xuICBkZWxldGVTb3J0Q29sdW1tbj86IGJvb2xlYW47XG4gIGRlbGV0ZUdydXBpbmdDb2x1bW4/OiBib29sZWFuO1xufTtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnby10YWJsZS12aXNpYmxlLWNvbHVtbnMtZGlhbG9nJyxcbiAgdGVtcGxhdGVVcmw6ICdvLXRhYmxlLXZpc2libGUtY29sdW1ucy1kaWFsb2cuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnby10YWJsZS12aXNpYmxlLWNvbHVtbnMtZGlhbG9nLmNvbXBvbmVudC5zY3NzJ10sXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBob3N0OiB7XG4gICAgJ1tjbGFzcy5vLXRhYmxlLXZpc2libGUtY29sdW1ucy1kaWFsb2ddJzogJ3RydWUnXG4gIH1cbn0pXG5leHBvcnQgY2xhc3MgT1RhYmxlVmlzaWJsZUNvbHVtbnNEaWFsb2dDb21wb25lbnQge1xuXG4gIGNvbHVtbnM6IENvbHVtblZpc2liaWxpdHlDb25maWd1cmF0aW9uW10gPSBbXTtcbiAgcm93SGVpZ2h0OiBzdHJpbmcgPSBDb2Rlcy5ERUZBVUxUX1JPV19IRUlHSFQ7XG4gIHByb3RlY3RlZCBkaWFsb2dTZXJ2aWNlOiBEaWFsb2dTZXJ2aWNlO1xuICBwcm90ZWN0ZWQgY2Q6IENoYW5nZURldGVjdG9yUmVmO1xuICBwcm90ZWN0ZWQgdHJhbnNsYXRlU2VydmljZTogT1RyYW5zbGF0ZVNlcnZpY2U7XG4gIHByb3RlY3RlZCBhY3RpdmVDb2x1bW5WYWx1ZUZpbHRlcnM6IHN0cmluZ1tdID0gW107XG4gIHByb3RlY3RlZCBhY3RpdmVTb3J0Q29sdW1uczogc3RyaW5nW10gPSBbXTtcbiAgcHJvdGVjdGVkIGFjdGl2ZUdyb3VwQnlDb2x1bW5zOiBzdHJpbmdbXSA9IFtdO1xuICBwcm90ZWN0ZWQgdGFibGU6IE9UYWJsZUNvbXBvbmVudDtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIGluamVjdG9yOiBJbmplY3RvcixcbiAgICBwdWJsaWMgZGlhbG9nUmVmOiBNYXREaWFsb2dSZWY8T1RhYmxlVmlzaWJsZUNvbHVtbnNEaWFsb2dDb21wb25lbnQ+LFxuICAgIEBJbmplY3QoTUFUX0RJQUxPR19EQVRBKSBkYXRhOiBhbnlcbiAgKSB7XG4gICAgdGhpcy5kaWFsb2dTZXJ2aWNlID0gdGhpcy5pbmplY3Rvci5nZXQ8RGlhbG9nU2VydmljZT4oRGlhbG9nU2VydmljZSBhcyBUeXBlPERpYWxvZ1NlcnZpY2U+KTtcbiAgICB0aGlzLmNkID0gdGhpcy5pbmplY3Rvci5nZXQ8Q2hhbmdlRGV0ZWN0b3JSZWY+KENoYW5nZURldGVjdG9yUmVmIGFzIFR5cGU8Q2hhbmdlRGV0ZWN0b3JSZWY+KTtcbiAgICB0aGlzLnRyYW5zbGF0ZVNlcnZpY2UgPSB0aGlzLmluamVjdG9yLmdldDxPVHJhbnNsYXRlU2VydmljZT4oT1RyYW5zbGF0ZVNlcnZpY2UgYXMgVHlwZTxPVHJhbnNsYXRlU2VydmljZT4pO1xuXG4gICAgaWYgKFV0aWwuaXNEZWZpbmVkKGRhdGEudGFibGUpKSB7XG4gICAgICB0aGlzLnRhYmxlID0gZGF0YS50YWJsZTtcblxuICAgICAgY29uc3QgdmlzaWJsZUNvbHVtbnMgPSBVdGlsLnBhcnNlQXJyYXkodGhpcy50YWJsZS52aXNpYmxlQ29sdW1ucywgdHJ1ZSk7XG5cbiAgICAgIHRoaXMudGFibGUub1RhYmxlT3B0aW9ucy5jb2x1bW5zLmZpbHRlcihvQ29sID0+IHZpc2libGVDb2x1bW5zLmluZGV4T2Yob0NvbC5hdHRyKSAhPT0gLTEgfHwgb0NvbC5kZWZpbml0aW9uICE9PSB1bmRlZmluZWQpLmZvckVhY2goKG9Db2w6IE9Db2x1bW4pID0+IHtcbiAgICAgICAgdGhpcy5jb2x1bW5zLnB1c2goe1xuICAgICAgICAgIGF0dHI6IG9Db2wuYXR0cixcbiAgICAgICAgICB0aXRsZTogb0NvbC50aXRsZSxcbiAgICAgICAgICB2aXNpYmxlOiBvQ29sLnZpc2libGVcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgdGhpcy5yb3dIZWlnaHQgPSB0aGlzLnRhYmxlLnJvd0hlaWdodDtcbiAgICAgIHRoaXMuYWN0aXZlQ29sdW1uVmFsdWVGaWx0ZXJzID0gdGhpcy50YWJsZS5kYXRhU291cmNlLmdldENvbHVtblZhbHVlRmlsdGVycygpLm1hcChjb2xWYWx1ZUZpbHRlciA9PiBjb2xWYWx1ZUZpbHRlci5hdHRyKTtcbiAgICAgIHRoaXMuYWN0aXZlU29ydENvbHVtbnMgPSB0aGlzLnRhYmxlLnNvcnRDb2xBcnJheS5tYXAoY29sID0+IGNvbC5jb2x1bW5OYW1lKTtcbiAgICAgIHRoaXMuYWN0aXZlR3JvdXBCeUNvbHVtbnMgPSB0aGlzLnRhYmxlLmdyb3VwZWRDb2x1bW5zQXJyYXk7XG4gICAgfVxuICB9XG5cbiAgb25DbGlja0NvbHVtbihjb2w6IENvbHVtblZpc2liaWxpdHlDb25maWd1cmF0aW9uKTogdm9pZCB7XG4gICAgY29uc3QgYWN0aXZlQ29sRmlsdGVyID0gdGhpcy5hY3RpdmVDb2x1bW5WYWx1ZUZpbHRlcnMuaW5jbHVkZXMoY29sLmF0dHIpO1xuICAgIGNvbnN0IGFjdGl2ZVNvcnRpbmcgPSB0aGlzLmFjdGl2ZVNvcnRDb2x1bW5zLmluY2x1ZGVzKGNvbC5hdHRyKTtcbiAgICBjb25zdCBhY3RpdmVHcm91cGluZyA9IHRoaXMuYWN0aXZlR3JvdXBCeUNvbHVtbnMuaW5jbHVkZXMoY29sLmF0dHIpO1xuICAgIGlmIChjb2wudmlzaWJsZSAmJiAoYWN0aXZlQ29sRmlsdGVyIHx8IGFjdGl2ZVNvcnRpbmcgfHwgYWN0aXZlR3JvdXBpbmcpKSB7XG4gICAgICBjb25zdCB3YXJuQXJncyA9IFtdO1xuICAgICAgaWYgKGFjdGl2ZUNvbEZpbHRlcikge1xuICAgICAgICB3YXJuQXJncy5wdXNoKHRoaXMudHJhbnNsYXRlU2VydmljZS5nZXQoJ1RBQkxFLlZJU0lCTEVfQ09MVU1OU19ESUFMT0cuVkFMVUVfRklMVEVSX1dBUk4nKSk7XG4gICAgICB9XG4gICAgICBpZiAoYWN0aXZlU29ydGluZykge1xuICAgICAgICB3YXJuQXJncy5wdXNoKHRoaXMudHJhbnNsYXRlU2VydmljZS5nZXQoJ1RBQkxFLlZJU0lCTEVfQ09MVU1OU19ESUFMT0cuU09SVF9XQVJOJykpO1xuICAgICAgfVxuICAgICAgaWYgKGFjdGl2ZUdyb3VwaW5nKSB7XG4gICAgICAgIHdhcm5BcmdzLnB1c2godGhpcy50cmFuc2xhdGVTZXJ2aWNlLmdldCgnVEFCTEUuVklTSUJMRV9DT0xVTU5TX0RJQUxPRy5HUk9VUElOR19XQVJOJykpO1xuICAgICAgfVxuICAgICAgY29uc3QgZGlhbG9nVGV4dCA9IHRoaXMudHJhbnNsYXRlU2VydmljZS5nZXQoJ1RBQkxFLlZJU0lCTEVfQ09MVU1OU19ESUFMT0cuSElERV9DT0xVTU5fV0FSTklORycsIHdhcm5BcmdzKTtcbiAgICAgIHRoaXMuZGlhbG9nU2VydmljZS5jb25maXJtKCdDT05GSVJNJywgZGlhbG9nVGV4dCkudGhlbihyZXMgPT4ge1xuICAgICAgICBpZiAocmVzKSB7XG4gICAgICAgICAgY29sLmRlbGV0ZVZhbHVlRmlsdGVyID0gYWN0aXZlQ29sRmlsdGVyO1xuICAgICAgICAgIGNvbC5kZWxldGVTb3J0Q29sdW1tbiA9IGFjdGl2ZVNvcnRpbmc7XG4gICAgICAgICAgY29sLmRlbGV0ZUdydXBpbmdDb2x1bW4gPSBhY3RpdmVHcm91cGluZztcbiAgICAgICAgICBjb2wudmlzaWJsZSA9ICFjb2wudmlzaWJsZTtcbiAgICAgICAgICB0aGlzLmNkLmRldGVjdENoYW5nZXMoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbC52aXNpYmxlID0gIWNvbC52aXNpYmxlO1xuICAgICAgaWYgKGNvbC52aXNpYmxlKSB7XG4gICAgICAgIGNvbC5kZWxldGVWYWx1ZUZpbHRlciA9IGZhbHNlO1xuICAgICAgICBjb2wuZGVsZXRlU29ydENvbHVtbW4gPSBmYWxzZTtcbiAgICAgICAgY29sLmRlbGV0ZUdydXBpbmdDb2x1bW4gPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBkcm9wKGV2ZW50OiBDZGtEcmFnRHJvcDxzdHJpbmdbXT4pIHtcbiAgICBtb3ZlSXRlbUluQXJyYXkodGhpcy5jb2x1bW5zLCBldmVudC5wcmV2aW91c0luZGV4LCBldmVudC5jdXJyZW50SW5kZXgpO1xuICB9XG5cbiAgY2xvc2VEaWFsb2coKSB7XG4gICAgY29uc3QgY29sdW1uU29ydGluZ1RvUmVtb3ZlID0gdGhpcy5nZXRDb2x1bW5Tb3J0aW5nVG9SZW1vdmUoKTtcbiAgICBjb25zdCBuZXdTb3J0Q29sdW1ucyA9IGNvbHVtblNvcnRpbmdUb1JlbW92ZS5sZW5ndGggPiAwID9cbiAgICAgIHRoaXMudGFibGUuc29ydENvbEFycmF5LmZpbHRlcihjb2wgPT4gIWNvbHVtblNvcnRpbmdUb1JlbW92ZS5pbmNsdWRlcyhjb2wuY29sdW1uTmFtZSkpIDpcbiAgICAgIHVuZGVmaW5lZDtcblxuICAgIGNvbnN0IGNvbHVtbkdyb3VwaW5nVG9SZW1vdmUgPSB0aGlzLmdldENvbHVtbkdyb3VwaW5nVG9SZW1vdmUoKTtcbiAgICBjb25zdCBuZXdHcm91cENvbHVtbnMgPSBjb2x1bW5Hcm91cGluZ1RvUmVtb3ZlLmxlbmd0aCA+IDAgP1xuICAgICAgdGhpcy50YWJsZS5ncm91cGVkQ29sdW1uc0FycmF5LmZpbHRlcihjb2wgPT4gIWNvbHVtbkdyb3VwaW5nVG9SZW1vdmUuaW5jbHVkZXMoY29sKSkgOlxuICAgICAgdW5kZWZpbmVkO1xuXG4gICAgdGhpcy5kaWFsb2dSZWYuY2xvc2Uoe1xuICAgICAgdmlzaWJsZUNvbEFycmF5OiB0aGlzLmdldFZpc2libGVDb2x1bW5zKCksXG4gICAgICBjb2x1bW5zT3JkZXI6IHRoaXMuZ2V0Q29sdW1uc09yZGVyKCksXG4gICAgICBzb3J0Q29sdW1uczogbmV3U29ydENvbHVtbnMsXG4gICAgICBjb2x1bW5WYWx1ZUZpbHRlcnNUb1JlbW92ZTogdGhpcy5nZXRDb2x1bW5WYWx1ZUZpbHRlcnNUb1JlbW92ZSgpLFxuICAgICAgZ3JvdXBDb2x1bW5zOiBuZXdHcm91cENvbHVtbnNcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0VmlzaWJsZUNvbHVtbnMoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiB0aGlzLmNvbHVtbnMuZmlsdGVyKGNvbCA9PiBjb2wudmlzaWJsZSkubWFwKGNvbCA9PiBjb2wuYXR0cik7XG4gIH1cblxuICBwcml2YXRlIGdldENvbHVtbnNPcmRlcigpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIHRoaXMuY29sdW1ucy5tYXAoY29sID0+IGNvbC5hdHRyKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0Q29sdW1uVmFsdWVGaWx0ZXJzVG9SZW1vdmUoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiB0aGlzLmNvbHVtbnMuZmlsdGVyKGNvbCA9PiBjb2wuZGVsZXRlVmFsdWVGaWx0ZXIpLm1hcChjb2wgPT4gY29sLmF0dHIpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRDb2x1bW5Tb3J0aW5nVG9SZW1vdmUoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiB0aGlzLmNvbHVtbnMuZmlsdGVyKGNvbCA9PiBjb2wuZGVsZXRlU29ydENvbHVtbW4pLm1hcChjb2wgPT4gY29sLmF0dHIpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRDb2x1bW5Hcm91cGluZ1RvUmVtb3ZlKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gdGhpcy5jb2x1bW5zLmZpbHRlcihjb2wgPT4gY29sLmRlbGV0ZUdydXBpbmdDb2x1bW4pLm1hcChjb2wgPT4gY29sLmF0dHIpO1xuICB9XG59XG4iXX0=