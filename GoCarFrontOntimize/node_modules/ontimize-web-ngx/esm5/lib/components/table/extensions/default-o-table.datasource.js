import * as tslib_1 from "tslib";
import { DataSource } from '@angular/cdk/collections';
import { EventEmitter } from '@angular/core';
import { BehaviorSubject, merge, Subject, Subscription } from 'rxjs';
import { distinctUntilChanged, map } from 'rxjs/operators';
import { ColumnValueFilterOperator } from '../../../types/table/o-column-value-filter.type';
import { Codes } from '../../../util';
import { Util } from '../../../util/util';
import { OTableGroupedRow } from './row/o-table-row-group.class';
var OnRangeChangeVirtualScroll = (function () {
    function OnRangeChangeVirtualScroll(data) {
        this.range = data;
    }
    return OnRangeChangeVirtualScroll;
}());
export { OnRangeChangeVirtualScroll };
var DefaultOTableDataSource = (function (_super) {
    tslib_1.__extends(DefaultOTableDataSource, _super);
    function DefaultOTableDataSource(table) {
        var _this = _super.call(this) || this;
        _this.table = table;
        _this.dataTotalsChange = new BehaviorSubject([]);
        _this._virtualPageChange = new BehaviorSubject(new OnRangeChangeVirtualScroll({ start: 0, end: 0 }));
        _this._quickFilterChange = new BehaviorSubject('');
        _this._columnValueFilterChange = new BehaviorSubject(null);
        _this.groupByColumnChange = new Subject();
        _this.filteredData = [];
        _this.aggregateData = {};
        _this.onRenderedDataChange = new EventEmitter();
        _this._renderedData = [];
        _this.resultsLength = 0;
        _this.columnValueFilters = [];
        _this.groupedRowState = [];
        _this.activeAggregates = {};
        _this.groupedRowsSubscription = new Subscription();
        _this.levelsExpansionState = {};
        _this._database = table.daoTable;
        if (_this._database) {
            _this.resultsLength = _this._database.data.length;
        }
        if (table.paginator) {
            _this._paginator = table.matpaginator;
        }
        if (_this.table.virtualScrollViewport) {
            _this.table.virtualScrollViewport.renderedRangeStream
                .pipe(distinctUntilChanged())
                .subscribe(function (value) {
                _this._virtualPageChange.next(new OnRangeChangeVirtualScroll(value));
            });
        }
        _this._tableOptions = table.oTableOptions;
        _this._sort = table.sort;
        return _this;
    }
    Object.defineProperty(DefaultOTableDataSource.prototype, "data", {
        get: function () { return this.dataTotalsChange.value; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DefaultOTableDataSource.prototype, "quickFilter", {
        get: function () { return this._quickFilterChange.value || ''; },
        set: function (filter) {
            this._quickFilterChange.next(filter);
        },
        enumerable: true,
        configurable: true
    });
    DefaultOTableDataSource.prototype.sortFunction = function (a, b) {
        return this._sort.sortFunction(a, b);
    };
    Object.defineProperty(DefaultOTableDataSource.prototype, "renderedData", {
        get: function () {
            return this._renderedData;
        },
        set: function (arg) {
            this._renderedData = arg;
            this.onRenderedDataChange.emit();
        },
        enumerable: true,
        configurable: true
    });
    DefaultOTableDataSource.prototype.connect = function () {
        var _this = this;
        var displayDataChanges = [
            this._database.dataChange
        ];
        if (!this.table.pageable) {
            if (this._sort) {
                displayDataChanges.push(this._sort.oSortChange);
            }
            if (this._tableOptions.filter) {
                displayDataChanges.push(this._quickFilterChange);
            }
            if (this._paginator) {
                displayDataChanges.push(this._paginator.page);
            }
        }
        if (this.table.virtualScrollViewport) {
            displayDataChanges.push(this._virtualPageChange);
        }
        displayDataChanges.push(this._columnValueFilterChange);
        if (this.table.groupable) {
            displayDataChanges.push(this.groupByColumnChange);
        }
        return merge.apply(void 0, tslib_1.__spread(displayDataChanges)).pipe(map(function (x) {
            var data = Object.assign([], _this._database.data);
            if (x instanceof OnRangeChangeVirtualScroll) {
                data = _this.getVirtualScrollData(_this.renderedData, x);
            }
            else {
                if (_this.existsAnyCalculatedColumn()) {
                    data = _this.getColumnCalculatedData(data);
                }
                if (!_this.table.pageable) {
                    data = _this.getColumnValueFilterData(data);
                    data = _this.getQuickFilterData(data);
                    data = _this.getSortedData(data);
                }
                _this.filteredData = Object.assign([], data);
                if (_this.table.pageable) {
                    var totalRecordsNumber = _this.table.getTotalRecordsNumber();
                    _this.resultsLength = totalRecordsNumber !== undefined ? totalRecordsNumber : data.length;
                }
                else {
                    _this.resultsLength = data.length;
                    data = _this.getPaginationData(data);
                }
                if (_this.table.groupable && !Util.isArrayEmpty(_this.table.groupedColumnsArray) && data.length > 0) {
                    data = _this.getGroupedData(data);
                }
                _this.renderedData = data;
                if (_this.table.virtualScrollViewport && !_this._paginator) {
                    data = _this.getVirtualScrollData(data, new OnRangeChangeVirtualScroll({ start: 0, end: Codes.LIMIT_SCROLLVIRTUAL }));
                }
                _this.aggregateData = _this.getAggregatesData(_this.renderedData);
            }
            return data;
        }));
    };
    DefaultOTableDataSource.prototype.getGroupedData = function (data) {
        data = this.getSubGroupsOfGroupedRow(data);
        data = this.filterCollapsedRowGroup(data);
        return data;
    };
    DefaultOTableDataSource.prototype.getSubGroupsOfGroupedRow = function (data) {
        return data = this.getSublevel(data, 0);
    };
    DefaultOTableDataSource.prototype.getAggregatesData = function (data) {
        var _this = this;
        var obj = {};
        if (typeof this._tableOptions === 'undefined') {
            return obj;
        }
        this._tableOptions.columns.forEach(function (column) {
            var totalValue = '';
            if (column.aggregate && column.visible) {
                totalValue = _this.calculateAggregate(data, column.attr, column.aggregate.operator);
            }
            var key = column.attr;
            obj[key] = totalValue;
        });
        return obj;
    };
    DefaultOTableDataSource.prototype.getColumnCalculatedData = function (data) {
        var self = this;
        var calculatedCols = this._tableOptions.columns.filter(function (oCol) { return oCol.visible && oCol.calculate !== undefined; });
        return data.map(function (row) {
            calculatedCols.forEach(function (oColumn) {
                var value;
                if (typeof oColumn.calculate === 'string') {
                    value = self.transformFormula(oColumn.calculate, row);
                }
                else if (typeof oColumn.calculate === 'function') {
                    value = oColumn.calculate(row);
                }
                row[oColumn.attr] = isNaN(value) ? 0 : value;
            });
            return row;
        });
    };
    DefaultOTableDataSource.prototype.transformFormula = function (formulaArg, row) {
        var formula = formulaArg;
        var columnsAttr = this._tableOptions.columns.map(function (oCol) { return oCol.attr; });
        columnsAttr.forEach(function (column) {
            formula = formula.replace(column, row[column]);
        });
        var resultFormula = '';
        try {
            resultFormula = (new Function('return ' + formula))();
        }
        catch (e) {
            console.error('Operation defined in the calculated column is incorrect ');
        }
        return resultFormula;
    };
    DefaultOTableDataSource.prototype.getQuickFilterData = function (data) {
        var _this = this;
        if (Util.isDefined(this.quickFilter) && this.quickFilter.length > 0) {
            var filterData_1 = !this._tableOptions.filterCaseSensitive ? this.quickFilter.toLowerCase() : this.quickFilter;
            return data.filter(function (item) {
                var passCustomFilter = _this.fulfillsCustomFilterFunctions(filterData_1, item);
                var passSearchString = _this.fulfillsQuickfilter(filterData_1, item);
                return passCustomFilter || passSearchString;
            });
        }
        else {
            return data;
        }
    };
    DefaultOTableDataSource.prototype.getPaginationData = function (data) {
        if (!this._paginator || isNaN(this._paginator.pageSize)) {
            return data;
        }
        var startIndex = isNaN(this._paginator.pageSize) ? 0 : this._paginator.pageIndex * this._paginator.pageSize;
        if (data.length > 0 && data.length < startIndex) {
            startIndex = 0;
            this._paginator.pageIndex = 0;
        }
        return data.splice(startIndex, this._paginator.pageSize);
    };
    DefaultOTableDataSource.prototype.getVirtualScrollData = function (data, x) {
        return data.slice(x.range.start, x.range.end);
    };
    DefaultOTableDataSource.prototype.disconnect = function () {
        this.dataTotalsChange.complete();
        this._quickFilterChange.complete();
        this._columnValueFilterChange.complete();
        this.groupByColumnChange.complete();
        this._virtualPageChange.complete();
    };
    DefaultOTableDataSource.prototype.fulfillsCustomFilterFunctions = function (filter, item) {
        var customFilterCols = this.table.oTableOptions.columns.filter(function (oCol) { return oCol.useCustomFilterFunction(); });
        return customFilterCols.some(function (oCol) { return oCol.renderer.filterFunction(item[oCol.attr], item, filter); });
    };
    DefaultOTableDataSource.prototype.fulfillsQuickfilter = function (filter, item) {
        var columns = this._tableOptions.columns.filter(function (oCol) { return oCol.useQuickfilterFunction(); });
        var searchStr = columns.map(function (oCol) { return oCol.getFilterValue(item[oCol.attr], item).join(' '); }).join(' ');
        if (!this._tableOptions.filterCaseSensitive) {
            searchStr = searchStr.toLowerCase();
        }
        return searchStr.indexOf(filter) !== -1;
    };
    DefaultOTableDataSource.prototype.getSortedData = function (data) {
        return this._sort.getSortedData(data);
    };
    DefaultOTableDataSource.prototype.getTableData = function () {
        return this._database.data;
    };
    DefaultOTableDataSource.prototype.getCurrentData = function () {
        return this.getData();
    };
    DefaultOTableDataSource.prototype.getCurrentAllData = function () {
        return this.getAllData(false, false);
    };
    DefaultOTableDataSource.prototype.getCurrentRendererData = function () {
        return this.getRenderedData(this.renderedData);
    };
    DefaultOTableDataSource.prototype.getAllRendererData = function () {
        return this.getAllData(true, true);
    };
    Object.defineProperty(DefaultOTableDataSource.prototype, "sqlTypes", {
        get: function () {
            return this._database.sqlTypes;
        },
        enumerable: true,
        configurable: true
    });
    DefaultOTableDataSource.prototype.getData = function () {
        return this.renderedData;
    };
    DefaultOTableDataSource.prototype.getRenderedData = function (data) {
        var visibleColumns = this._tableOptions.columns.filter(function (oCol) { return oCol.visible; });
        return data.map(function (row) {
            var obj = {};
            visibleColumns.forEach(function (oCol) {
                var useRenderer = oCol.renderer && oCol.renderer.getCellData;
                obj[oCol.attr] = useRenderer ? oCol.renderer.getCellData(row[oCol.attr], row) : row[oCol.attr];
            });
            return obj;
        });
    };
    DefaultOTableDataSource.prototype.getAllData = function (usingRendererers, onlyVisibleColumns) {
        var tableColumns = this._tableOptions.columns;
        if (onlyVisibleColumns) {
            tableColumns = this._tableOptions.columns.filter(function (oCol) { return oCol.visible; });
        }
        return this.filteredData.map(function (row) {
            var obj = {};
            tableColumns.forEach(function (oCol) {
                var useRenderer = usingRendererers && oCol.renderer && oCol.renderer.getCellData;
                obj[oCol.attr] = useRenderer ? oCol.renderer.getCellData(row[oCol.attr], row) : row[oCol.attr];
            });
            return obj;
        });
    };
    DefaultOTableDataSource.prototype.getRenderersData = function (data, tableColumns) {
        return data.map(function (row) {
            var obj = Object.assign({}, row);
            tableColumns.forEach(function (oCol) {
                obj[oCol.attr] = oCol.renderer.getCellData(row[oCol.attr], row);
            });
            return obj;
        });
    };
    DefaultOTableDataSource.prototype.getColumnData = function (ocolumn) {
        return this.renderedData.map(function (row) {
            var obj = {};
            if (ocolumn) {
                obj[ocolumn] = row[ocolumn];
            }
            return obj;
        });
    };
    DefaultOTableDataSource.prototype.initializeColumnsFilters = function (filters) {
        var _this = this;
        this.columnValueFilters = [];
        filters.forEach(function (filter) {
            _this.columnValueFilters.push(filter);
        });
        if (!this.table.pageable) {
            this._columnValueFilterChange.next(null);
        }
    };
    DefaultOTableDataSource.prototype.isColumnValueFilterActive = function () {
        return this.columnValueFilters.length !== 0;
    };
    DefaultOTableDataSource.prototype.getColumnValueFilters = function () {
        return this.columnValueFilters;
    };
    DefaultOTableDataSource.prototype.getColumnValueFilterByAttr = function (attr) {
        return this.columnValueFilters.find(function (item) { return item.attr === attr; });
    };
    DefaultOTableDataSource.prototype.clearColumnFilters = function (trigger, columnsAttr) {
        if (trigger === void 0) { trigger = true; }
        if (Util.isDefined(columnsAttr)) {
            this.columnValueFilters = this.columnValueFilters.filter(function (x) { return !columnsAttr.includes(x.attr); });
        }
        else {
            this.columnValueFilters = [];
        }
        if (trigger) {
            this._columnValueFilterChange.next(null);
        }
    };
    DefaultOTableDataSource.prototype.clearColumnFilter = function (attr, trigger) {
        if (trigger === void 0) { trigger = true; }
        this.columnValueFilters = this.columnValueFilters.filter(function (x) { return x.attr !== attr; });
        if (trigger) {
            this._columnValueFilterChange.next(null);
        }
    };
    DefaultOTableDataSource.prototype.addColumnFilter = function (filter) {
        var existingFilterIndex = this.columnValueFilters.findIndex(function (item) { return item.attr === filter.attr; });
        if (existingFilterIndex > -1) {
            this.columnValueFilters.splice(existingFilterIndex, 1, filter);
        }
        else {
            var validFilter = Util.isDefined(filter.values);
            if (validFilter) {
                switch (filter.operator) {
                    case ColumnValueFilterOperator.IN:
                        validFilter = filter.values.length > 0;
                        break;
                    case ColumnValueFilterOperator.BETWEEN:
                        validFilter = filter.values.length === 2;
                        break;
                    case ColumnValueFilterOperator.EQUAL:
                    case ColumnValueFilterOperator.LESS_EQUAL:
                    case ColumnValueFilterOperator.MORE_EQUAL:
                        validFilter = true;
                        break;
                    default:
                        validFilter = false;
                }
                if (validFilter) {
                    this.columnValueFilters.push(filter);
                }
            }
        }
        if (!this.table.pageable) {
            this._columnValueFilterChange.next(null);
        }
    };
    DefaultOTableDataSource.prototype.getColumnValueFilterData = function (data) {
        var _this = this;
        this.columnValueFilters.forEach(function (filter) {
            var filterColumn = _this.table.oTableOptions.columns.find(function (col) { return col.attr === filter.attr; });
            if (filterColumn) {
                switch (filter.operator) {
                    case ColumnValueFilterOperator.IN:
                        var filterValues_1 = (filter.values || []).reduce(function (previous, current) {
                            return previous.concat(filterColumn.getFilterValue(current).map(function (f) { return Util.normalizeString(f); }));
                        }, []);
                        data = data.filter(function (item) {
                            if (filterColumn.renderer && filterColumn.renderer.filterFunction) {
                                return filterColumn.renderer.filterFunction(item[filter.attr], item);
                            }
                            else {
                                var colValues_1 = filterColumn.getFilterValue(item[filter.attr], item).map(function (f) { return Util.normalizeString(f); });
                                return filterValues_1.some(function (value) { return colValues_1.indexOf(value) !== -1; });
                            }
                        });
                        break;
                    case ColumnValueFilterOperator.EQUAL:
                        var normalizedValue_1 = Util.normalizeString(filter.values);
                        data = data.filter(function (item) {
                            var colValues = filterColumn.getFilterValue(item[filter.attr], item).map(function (f) { return Util.normalizeString(f); });
                            var regExp;
                            if (normalizedValue_1.includes('*')) {
                                regExp = new RegExp('^' + normalizedValue_1.split('*').join('.*') + '$');
                            }
                            return colValues.some(function (colValue) { return regExp ? regExp.test(colValue) : colValue.includes(normalizedValue_1); });
                        });
                        break;
                    case ColumnValueFilterOperator.BETWEEN:
                        data = data.filter(function (item) { return item[filter.attr] >= filter.values[0] && item[filter.attr] <= filter.values[1]; });
                        break;
                    case ColumnValueFilterOperator.MORE_EQUAL:
                        data = data.filter(function (item) { return item[filter.attr] >= filter.values; });
                        break;
                    case ColumnValueFilterOperator.LESS_EQUAL:
                        data = data.filter(function (item) { return item[filter.attr] <= filter.values; });
                        break;
                }
            }
        });
        return data;
    };
    DefaultOTableDataSource.prototype.getAggregateData = function (column) {
        var obj = {};
        var totalValue = '';
        if (typeof this._tableOptions === 'undefined') {
            return new Array(obj);
        }
        totalValue = this.aggregateData[column.attr];
        return totalValue;
    };
    DefaultOTableDataSource.prototype.calculateAggregate = function (data, columnAttr, operator) {
        var resultAggregate;
        if (typeof operator === 'string') {
            switch (operator.toLowerCase()) {
                case 'count':
                    resultAggregate = this.count(columnAttr, data);
                    break;
                case 'min':
                    resultAggregate = this.min(columnAttr, data);
                    break;
                case 'max':
                    resultAggregate = this.max(columnAttr, data);
                    break;
                case 'avg':
                    resultAggregate = this.avg(columnAttr, data);
                    break;
                default:
                    resultAggregate = this.sum(columnAttr, data);
                    break;
            }
        }
        else {
            var columnData = this.getColumnData(columnAttr);
            if (typeof operator === 'function') {
                resultAggregate = operator(columnData);
            }
        }
        return resultAggregate;
    };
    DefaultOTableDataSource.prototype.sum = function (column, data) {
        var value = 0;
        if (data) {
            if (data[0] instanceof OTableGroupedRow) {
                this.getDataFromFirstLevelTableGroupRow(data).forEach(function (x) {
                    value = x.getColumnAggregateData(column).reduce(function (acumulator, currentValue) {
                        return acumulator + (isNaN(currentValue[column]) ? 0 : currentValue[column]);
                    }, value);
                });
            }
            else {
                value = data.reduce(function (acumulator, currentValue) {
                    return acumulator + (isNaN(currentValue[column]) ? 0 : currentValue[column]);
                }, value);
            }
        }
        return +(value).toFixed(2);
    };
    DefaultOTableDataSource.prototype.count = function (column, data) {
        var value = 0;
        if (data) {
            if (data[0] instanceof OTableGroupedRow) {
                this.getDataFromFirstLevelTableGroupRow(data).forEach(function (x) {
                    value = x.getColumnAggregateData(column).reduce(function (acumulator) {
                        return acumulator + 1;
                    }, value);
                });
            }
            else {
                value = data.reduce(function (acumulator) {
                    return acumulator + 1;
                }, 0);
            }
        }
        return value;
    };
    DefaultOTableDataSource.prototype.avg = function (column, data) {
        var totalSum = this.sum(column, data);
        var totalCount = this.count(column, data);
        return +((totalSum === 0 || totalCount === 0) ? 0 : (totalSum / totalCount)).toFixed(2);
    };
    DefaultOTableDataSource.prototype.min = function (column, data) {
        var tempMin = [];
        if (data[0] instanceof OTableGroupedRow) {
            tempMin = this.getDataFromFirstLevelTableGroupRow(data).map(function (x) {
                return Math.min.apply(Math, tslib_1.__spread(x.getColumnAggregateData(column).map(function (x) { return x[column]; })));
            });
        }
        else {
            tempMin = data.map(function (x) { return x[column]; });
        }
        return tempMin.length > 0 ? Math.min.apply(Math, tslib_1.__spread(tempMin)) : 0;
    };
    DefaultOTableDataSource.prototype.max = function (column, data) {
        var tempMax = [];
        if (data[0] instanceof OTableGroupedRow) {
            tempMax = this.getDataFromFirstLevelTableGroupRow(data).map(function (x) {
                return Math.max.apply(Math, tslib_1.__spread(x.getColumnAggregateData(column).map(function (x) { return x[column]; })));
            });
        }
        else {
            tempMax = data.map(function (x) { return x[column]; });
        }
        return tempMax.length > 0 ? Math.max.apply(Math, tslib_1.__spread(tempMax)) : 0;
    };
    DefaultOTableDataSource.prototype.isFirstLevelTableGroupRow = function (tableRowGroupData) {
        return tableRowGroupData instanceof OTableGroupedRow && tableRowGroupData.level === 1;
    };
    DefaultOTableDataSource.prototype.getDataFromFirstLevelTableGroupRow = function (data) {
        var _this = this;
        return data.filter(function (x) { return _this.isFirstLevelTableGroupRow(x); });
    };
    DefaultOTableDataSource.prototype.existsAnyCalculatedColumn = function () {
        return this._tableOptions.columns.find(function (oCol) { return oCol.calculate !== undefined; }) !== undefined;
    };
    DefaultOTableDataSource.prototype.updateRenderedRowData = function (rowData) {
        var tableKeys = this.table.getKeys();
        var record = this.renderedData.find(function (data) {
            var found = true;
            for (var i = 0, len = tableKeys.length; i < len; i++) {
                var key = tableKeys[i];
                if (data[key] !== rowData[key]) {
                    found = false;
                    break;
                }
            }
            return found;
        });
        if (Util.isDefined(record)) {
            Object.assign(record, rowData);
        }
    };
    DefaultOTableDataSource.prototype.getDataInformationByGroup = function (data, level) {
        var _this = this;
        var recordHash = {};
        data.forEach(function (row, i) {
            var keys = {};
            for (var i_1 = 0; i_1 <= level; i_1++) {
                keys[_this.table.groupedColumnsArray[i_1]] = _this.table.getColumnDataByAttr(_this.table.groupedColumnsArray[i_1], row);
            }
            var recordKey = JSON.stringify(keys);
            if (recordHash.hasOwnProperty(recordKey)) {
                recordHash[recordKey].push(i);
            }
            else {
                recordHash[recordKey] = [i];
            }
        });
        return recordHash;
    };
    DefaultOTableDataSource.prototype.recalculateColumnAggregate = function (columnAttr, row) {
        var aggregateConf = row.getActiveColumnAggregateConfiguration(columnAttr);
        var data = row.getColumnAggregateData(columnAttr);
        var value = this.calculateAggregate(data, aggregateConf.attr, aggregateConf.aggregateFunction || aggregateConf.aggregate);
        row.setColumnAggregateValue(columnAttr, value);
    };
    DefaultOTableDataSource.prototype.getSublevel = function (data, level, parent) {
        var _this = this;
        if (level >= this.table.groupedColumnsArray.length) {
            return data;
        }
        var recordHash = this.getDataInformationByGroup(data, level);
        var result = [];
        Object.keys(recordHash).forEach(function (recordKey) {
            var row = new OTableGroupedRow({
                column: _this.table.groupedColumnsArray[level],
                keysAsString: recordKey,
                level: level + 1,
                parent: parent
            });
            _this.groupedRowsSubscription.add(row.aggregateFunctionChange.subscribe(function (arg) {
                if (arg.changeAllGroupedRows) {
                    _this.activeAggregates[arg.columnAttr] = arg.activeAggregate;
                    _this.renderedData.filter(function (row) { return row instanceof OTableGroupedRow; }).forEach(function (row) {
                        row.setColumnActiveAggregateFunction(arg.columnAttr, arg.activeAggregate, false);
                        _this.recalculateColumnAggregate(arg.columnAttr, row);
                    });
                }
                else {
                    _this.recalculateColumnAggregate(arg.columnAttr, arg.row);
                }
            }));
            var affectedIndexes = recordHash[row.keysAsString];
            var groupData = data.filter(function (row, index) { return affectedIndexes.includes(index); });
            _this.table.visibleColArray.forEach(function (columnAttr, i) {
                if (i === 0) {
                    row.title = _this.getTextGroupRow(row, affectedIndexes.length);
                }
                var useColumnAggregate = _this.table.useColumnGroupingAggregate(columnAttr);
                if (useColumnAggregate) {
                    row.initializeColumnAggregate(columnAttr, _this.table.getColumnGroupingComponent(columnAttr));
                    if (Util.isDefined(_this.activeAggregates[columnAttr])) {
                        row.setColumnActiveAggregateFunction(columnAttr, _this.activeAggregates[columnAttr], false);
                    }
                    if (row.hasActiveAggregate(columnAttr)) {
                        var aggregateData = groupData.map(function (x) { var obj = {}; obj[columnAttr] = x[columnAttr]; return obj; });
                        row.setColumnAggregateData(columnAttr, aggregateData);
                        var aggregateConf = row.getActiveColumnAggregateConfiguration(columnAttr);
                        var value = _this.calculateAggregate(aggregateData, aggregateConf.attr, aggregateConf.aggregateFunction || aggregateConf.aggregate);
                        row.setColumnAggregateValue(columnAttr, value);
                    }
                }
            });
            row.expanded = _this.getExpansionState(row);
            var subGroup = _this.getSublevel(groupData, level + 1, row);
            subGroup.unshift(row);
            result = result.concat(subGroup);
        });
        return result;
    };
    DefaultOTableDataSource.prototype.filterCollapsedRowGroup = function (data) {
        var _this = this;
        return data.filter(function (row) { return (row instanceof OTableGroupedRow) ? row.visible : _this.belongsToExpandedGroupedRow(data, row); });
    };
    DefaultOTableDataSource.prototype.belongsToExpandedGroupedRow = function (data, row) {
        var parent;
        var match = false;
        for (var index = 0; index < data.length && !match; index++) {
            if (data[index] instanceof OTableGroupedRow) {
                parent = data[index];
            }
            else if (Util.isEquivalent(data[index], row)) {
                match = true;
            }
        }
        return Util.isDefined(parent) ? (parent.visible && parent.expanded) : true;
    };
    DefaultOTableDataSource.prototype.updateGroupedColumns = function () {
        this.groupByColumnChange.next();
    };
    DefaultOTableDataSource.prototype.toggleGroupByColumn = function (rowGroup) {
        if (rowGroup.expandSameLevel(this.table.expandGroupsSameLevel)) {
            this.levelsExpansionState[rowGroup.level] = !rowGroup.expanded;
        }
        else {
            this.updateStateRowGrouped(rowGroup);
        }
        this.groupByColumnChange.next();
    };
    DefaultOTableDataSource.prototype.setRowGroupLevelExpansion = function (rowGroup, value) {
        this.levelsExpansionState[rowGroup.level] = value;
        this.groupByColumnChange.next();
    };
    DefaultOTableDataSource.prototype.updateStateRowGrouped = function (rowGroup) {
        var stateRowGrouped = this.groupedRowState.find(function (row) { return rowGroup.keysAsString === row.keysAsString && JSON.stringify(rowGroup.parent) === JSON.stringify(row.parent); });
        if (Util.isDefined(stateRowGrouped)) {
            stateRowGrouped.expanded = !stateRowGrouped.expanded;
        }
        else {
            rowGroup.expanded = !rowGroup.expanded;
            this.groupedRowState.push(rowGroup);
        }
    };
    DefaultOTableDataSource.prototype.getTextGroupRow = function (group, totalCounts) {
        var _this = this;
        var field = this.table.groupedColumnsArray[group.level - 1];
        var value = JSON.parse(group.keysAsString)[this.table.groupedColumnsArray[group.level - 1]];
        var oCol = this.table.getOColumn(field);
        if (!value && Util.isDefined(oCol.renderer) && this.table.isInstanceOfOTableCellRendererServiceComponent(oCol.renderer)) {
            value = ' - ';
            if (!this.table.onDataLoadedCellRendererSubscription) {
                this.table.onDataLoadedCellRendererSubscription = oCol.renderer.onDataLoaded.subscribe(function (x) {
                    _this.updateGroupedColumns();
                });
            }
        }
        return this.table.translateService.get(oCol.title) + ': ' + value + ' (' + totalCounts + ')';
    };
    DefaultOTableDataSource.prototype.getExpansionState = function (row) {
        var expansionState = !parent || !this.table.collapseGroupedColumns;
        if (row.expandSameLevel(this.table.expandGroupsSameLevel)) {
            expansionState = this.levelsExpansionState.hasOwnProperty(row.level) ? this.levelsExpansionState[row.level] : expansionState;
        }
        else {
            var rowGroup = this.groupedRowState.find(function (x) { return x.keysAsString === row.keysAsString && JSON.stringify(x.parent) === JSON.stringify(row.parent); });
            expansionState = rowGroup ? rowGroup.expanded : expansionState;
        }
        return expansionState;
    };
    return DefaultOTableDataSource;
}(DataSource));
export { DefaultOTableDataSource };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC1vLXRhYmxlLmRhdGFzb3VyY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9vbnRpbWl6ZS13ZWItbmd4LyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvdGFibGUvZXh0ZW5zaW9ucy9kZWZhdWx0LW8tdGFibGUuZGF0YXNvdXJjZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBYSxNQUFNLDBCQUEwQixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFN0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxLQUFLLEVBQWMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNqRixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFJM0QsT0FBTyxFQUFFLHlCQUF5QixFQUFzQixNQUFNLGlEQUFpRCxDQUFDO0FBQ2hILE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdEMsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBSTFDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBR2pFO0lBR0Usb0NBQVksSUFBZTtRQUN6QixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztJQUNwQixDQUFDO0lBQ0gsaUNBQUM7QUFBRCxDQUFDLEFBTkQsSUFNQzs7QUFFRDtJQUE2QyxtREFBZTtJQW1DMUQsaUNBQXNCLEtBQXNCO1FBQTVDLFlBQ0UsaUJBQU8sU0FxQlI7UUF0QnFCLFdBQUssR0FBTCxLQUFLLENBQWlCO1FBbEM1QyxzQkFBZ0IsR0FBRyxJQUFJLGVBQWUsQ0FBUSxFQUFFLENBQUMsQ0FBQztRQVN4Qyx3QkFBa0IsR0FBRyxJQUFJLGVBQWUsQ0FBNkIsSUFBSSwwQkFBMEIsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENB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LElBQUksT0FBQSxDQUFDLENBQUMsWUFBWSxLQUFLLEdBQUcsQ0FBQyxZQUFZLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQTlGLENBQThGLENBQUMsQ0FBQztZQUNoSixjQUFjLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUM7U0FDaEU7UUFDRCxPQUFPLGNBQWMsQ0FBQztJQUN4QixDQUFDO0lBQ0gsOEJBQUM7QUFBRCxDQUFDLEFBbnlCRCxDQUE2QyxVQUFVLEdBbXlCdEQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEYXRhU291cmNlLCBMaXN0UmFuZ2UgfSBmcm9tICdAYW5ndWxhci9jZGsvY29sbGVjdGlvbnMnO1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNYXRQYWdpbmF0b3IgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbCc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIG1lcmdlLCBPYnNlcnZhYmxlLCBTdWJqZWN0LCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRpc3RpbmN0VW50aWxDaGFuZ2VkLCBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IE9UYWJsZURhdGFTb3VyY2UgfSBmcm9tICcuLi8uLi8uLi9pbnRlcmZhY2VzL28tdGFibGUtZGF0YXNvdXJjZS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgT1RhYmxlT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uL2ludGVyZmFjZXMvby10YWJsZS1vcHRpb25zLmludGVyZmFjZSc7XG5pbXBvcnQgeyBDb2x1bW5WYWx1ZUZpbHRlck9wZXJhdG9yLCBPQ29sdW1uVmFsdWVGaWx0ZXIgfSBmcm9tICcuLi8uLi8uLi90eXBlcy90YWJsZS9vLWNvbHVtbi12YWx1ZS1maWx0ZXIudHlwZSc7XG5pbXBvcnQgeyBDb2RlcyB9IGZyb20gJy4uLy4uLy4uL3V0aWwnO1xuaW1wb3J0IHsgVXRpbCB9IGZyb20gJy4uLy4uLy4uL3V0aWwvdXRpbCc7XG5pbXBvcnQgeyBPQ29sdW1uIH0gZnJvbSAnLi4vY29sdW1uL28tY29sdW1uLmNsYXNzJztcbmltcG9ydCB7IE9UYWJsZUNvbXBvbmVudCB9IGZyb20gJy4uL28tdGFibGUuY29tcG9uZW50JztcbmltcG9ydCB7IE9UYWJsZURhbyB9IGZyb20gJy4vby10YWJsZS5kYW8nO1xuaW1wb3J0IHsgT1RhYmxlR3JvdXBlZFJvdyB9IGZyb20gJy4vcm93L28tdGFibGUtcm93LWdyb3VwLmNsYXNzJztcbmltcG9ydCB7IE9NYXRTb3J0IH0gZnJvbSAnLi9zb3J0L28tbWF0LXNvcnQnO1xuXG5leHBvcnQgY2xhc3MgT25SYW5nZUNoYW5nZVZpcnR1YWxTY3JvbGwge1xuICBwdWJsaWMgcmFuZ2U6IExpc3RSYW5nZTtcblxuICBjb25zdHJ1Y3RvcihkYXRhOiBMaXN0UmFuZ2UpIHtcbiAgICB0aGlzLnJhbmdlID0gZGF0YTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgRGVmYXVsdE9UYWJsZURhdGFTb3VyY2UgZXh0ZW5kcyBEYXRhU291cmNlPGFueT4gaW1wbGVtZW50cyBPVGFibGVEYXRhU291cmNlIHtcbiAgZGF0YVRvdGFsc0NoYW5nZSA9IG5ldyBCZWhhdmlvclN1YmplY3Q8YW55W10+KFtdKTtcblxuICBnZXQgZGF0YSgpOiBhbnlbXSB7IHJldHVybiB0aGlzLmRhdGFUb3RhbHNDaGFuZ2UudmFsdWU7IH1cblxuICBwcm90ZWN0ZWQgX2RhdGFiYXNlOiBPVGFibGVEYW87XG4gIHByb3RlY3RlZCBfcGFnaW5hdG9yOiBNYXRQYWdpbmF0b3I7XG4gIHByb3RlY3RlZCBfdGFibGVPcHRpb25zOiBPVGFibGVPcHRpb25zO1xuICBwcm90ZWN0ZWQgX3NvcnQ6IE9NYXRTb3J0O1xuXG4gIHByb3RlY3RlZCBfdmlydHVhbFBhZ2VDaGFuZ2UgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PE9uUmFuZ2VDaGFuZ2VWaXJ0dWFsU2Nyb2xsPihuZXcgT25SYW5nZUNoYW5nZVZpcnR1YWxTY3JvbGwoeyBzdGFydDogMCwgZW5kOiAwIH0pKTtcbiAgcHJvdGVjdGVkIF9xdWlja0ZpbHRlckNoYW5nZSA9IG5ldyBCZWhhdmlvclN1YmplY3QoJycpO1xuICBwcm90ZWN0ZWQgX2NvbHVtblZhbHVlRmlsdGVyQ2hhbmdlID0gbmV3IEJlaGF2aW9yU3ViamVjdChudWxsKTtcbiAgcHJvdGVjdGVkIGdyb3VwQnlDb2x1bW5DaGFuZ2UgPSBuZXcgU3ViamVjdCgpO1xuXG4gIHByb3RlY3RlZCBmaWx0ZXJlZERhdGE6IGFueVtdID0gW107XG4gIHByb3RlY3RlZCBhZ2dyZWdhdGVEYXRhOiBhbnkgPSB7fTtcblxuICBvblJlbmRlcmVkRGF0YUNoYW5nZTogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuXG4gIHByb3RlY3RlZCBfcmVuZGVyZWREYXRhOiBhbnlbXSA9IFtdO1xuICByZXN1bHRzTGVuZ3RoOiBudW1iZXIgPSAwO1xuXG4gIGdldCBxdWlja0ZpbHRlcigpOiBzdHJpbmcgeyByZXR1cm4gdGhpcy5fcXVpY2tGaWx0ZXJDaGFuZ2UudmFsdWUgfHwgJyc7IH1cbiAgc2V0IHF1aWNrRmlsdGVyKGZpbHRlcjogc3RyaW5nKSB7XG4gICAgdGhpcy5fcXVpY2tGaWx0ZXJDaGFuZ2UubmV4dChmaWx0ZXIpO1xuICB9XG5cbiAgcHJpdmF0ZSBjb2x1bW5WYWx1ZUZpbHRlcnM6IEFycmF5PE9Db2x1bW5WYWx1ZUZpbHRlcj4gPSBbXTtcbiAgcHJpdmF0ZSBncm91cGVkUm93U3RhdGU6IE9UYWJsZUdyb3VwZWRSb3dbXSA9IFtdO1xuICBwcml2YXRlIGFjdGl2ZUFnZ3JlZ2F0ZXMgPSB7fTtcbiAgcHJpdmF0ZSBncm91cGVkUm93c1N1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24oKTtcbiAgcHJpdmF0ZSBsZXZlbHNFeHBhbnNpb25TdGF0ZSA9IHt9O1xuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCB0YWJsZTogT1RhYmxlQ29tcG9uZW50KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9kYXRhYmFzZSA9IHRhYmxlLmRhb1RhYmxlO1xuICAgIGlmICh0aGlzLl9kYXRhYmFzZSkge1xuICAgICAgdGhpcy5yZXN1bHRzTGVuZ3RoID0gdGhpcy5fZGF0YWJhc2UuZGF0YS5sZW5ndGg7XG4gICAgfVxuICAgIGlmICh0YWJsZS5wYWdpbmF0b3IpIHtcbiAgICAgIHRoaXMuX3BhZ2luYXRvciA9IHRhYmxlLm1hdHBhZ2luYXRvcjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy50YWJsZS52aXJ0dWFsU2Nyb2xsVmlld3BvcnQpIHtcbiAgICAgIHRoaXMudGFibGUudmlydHVhbFNjcm9sbFZpZXdwb3J0LnJlbmRlcmVkUmFuZ2VTdHJlYW1cbiAgICAgICAgLnBpcGUoZGlzdGluY3RVbnRpbENoYW5nZWQoKSlcbiAgICAgICAgLnN1YnNjcmliZShcbiAgICAgICAgICAodmFsdWU6IExpc3RSYW5nZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fdmlydHVhbFBhZ2VDaGFuZ2UubmV4dChuZXcgT25SYW5nZUNoYW5nZVZpcnR1YWxTY3JvbGwodmFsdWUpKTtcbiAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLl90YWJsZU9wdGlvbnMgPSB0YWJsZS5vVGFibGVPcHRpb25zO1xuICAgIHRoaXMuX3NvcnQgPSB0YWJsZS5zb3J0O1xuXG4gIH1cblxuICBzb3J0RnVuY3Rpb24oYTogYW55LCBiOiBhbnkpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9zb3J0LnNvcnRGdW5jdGlvbihhLCBiKTtcbiAgfVxuXG4gIGdldCByZW5kZXJlZERhdGEoKTogYW55W10ge1xuICAgIHJldHVybiB0aGlzLl9yZW5kZXJlZERhdGE7XG4gIH1cblxuICBzZXQgcmVuZGVyZWREYXRhKGFyZzogYW55W10pIHtcbiAgICB0aGlzLl9yZW5kZXJlZERhdGEgPSBhcmc7XG4gICAgdGhpcy5vblJlbmRlcmVkRGF0YUNoYW5nZS5lbWl0KCk7XG4gIH1cblxuICAvKipcbiAgICogQ29ubmVjdCBmdW5jdGlvbiBjYWxsZWQgYnkgdGhlIHRhYmxlIHRvIHJldHJpZXZlIG9uZSBzdHJlYW0gY29udGFpbmluZyB0aGUgZGF0YSB0byByZW5kZXIuXG4gICAqL1xuICBjb25uZWN0KCk6IE9ic2VydmFibGU8YW55W10+IHtcbiAgICBjb25zdCBkaXNwbGF5RGF0YUNoYW5nZXM6IGFueVtdID0gW1xuICAgICAgdGhpcy5fZGF0YWJhc2UuZGF0YUNoYW5nZVxuICAgIF07XG5cbiAgICBpZiAoIXRoaXMudGFibGUucGFnZWFibGUpIHtcblxuXG4gICAgICBpZiAodGhpcy5fc29ydCkge1xuICAgICAgICBkaXNwbGF5RGF0YUNoYW5nZXMucHVzaCh0aGlzLl9zb3J0Lm9Tb3J0Q2hhbmdlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX3RhYmxlT3B0aW9ucy5maWx0ZXIpIHtcbiAgICAgICAgZGlzcGxheURhdGFDaGFuZ2VzLnB1c2godGhpcy5fcXVpY2tGaWx0ZXJDaGFuZ2UpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fcGFnaW5hdG9yKSB7XG4gICAgICAgIGRpc3BsYXlEYXRhQ2hhbmdlcy5wdXNoKHRoaXMuX3BhZ2luYXRvci5wYWdlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy50YWJsZS52aXJ0dWFsU2Nyb2xsVmlld3BvcnQpIHtcbiAgICAgIGRpc3BsYXlEYXRhQ2hhbmdlcy5wdXNoKHRoaXMuX3ZpcnR1YWxQYWdlQ2hhbmdlKTtcbiAgICB9XG5cbiAgICBkaXNwbGF5RGF0YUNoYW5nZXMucHVzaCh0aGlzLl9jb2x1bW5WYWx1ZUZpbHRlckNoYW5nZSk7XG5cbiAgICBpZiAodGhpcy50YWJsZS5ncm91cGFibGUpIHtcbiAgICAgIGRpc3BsYXlEYXRhQ2hhbmdlcy5wdXNoKHRoaXMuZ3JvdXBCeUNvbHVtbkNoYW5nZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lcmdlKC4uLmRpc3BsYXlEYXRhQ2hhbmdlcykucGlwZShcbiAgICAgIG1hcCgoeDogYW55KSA9PiB7XG4gICAgICAgIGxldCBkYXRhID0gT2JqZWN0LmFzc2lnbihbXSwgdGhpcy5fZGF0YWJhc2UuZGF0YSk7XG4gICAgICAgIGlmICh4IGluc3RhbmNlb2YgT25SYW5nZUNoYW5nZVZpcnR1YWxTY3JvbGwpIHtcbiAgICAgICAgICAvLyByZW5kZXIgc3Vic2V0IChyYW5nZSkgb2YgcmVuZGVyZWREYXRhIHdoZW4gbmV3IE9uUmFuZ2VDaGFuZ2VWaXJ0dWFsU2Nyb2xsIGV2ZW50IGlzIGVtaXR0ZWRcbiAgICAgICAgICBkYXRhID0gdGhpcy5nZXRWaXJ0dWFsU2Nyb2xsRGF0YSh0aGlzLnJlbmRlcmVkRGF0YSwgeCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLypcbiAgICAgICAgICAgIGl0IGlzIG5lY2Vzc2FyeSB0byBmaXJzdCBjYWxjdWxhdGUgdGhlIGNhbGN1bGF0ZWQgY29sdW1ucyBhbmRcbiAgICAgICAgICAgIHRoZW4gZmlsdGVyIGFuZCBzb3J0IHRoZSBkYXRhXG4gICAgICAgICAgKi9cblxuICAgICAgICAgIGlmICh0aGlzLmV4aXN0c0FueUNhbGN1bGF0ZWRDb2x1bW4oKSkge1xuICAgICAgICAgICAgZGF0YSA9IHRoaXMuZ2V0Q29sdW1uQ2FsY3VsYXRlZERhdGEoZGF0YSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCF0aGlzLnRhYmxlLnBhZ2VhYmxlKSB7XG4gICAgICAgICAgICBkYXRhID0gdGhpcy5nZXRDb2x1bW5WYWx1ZUZpbHRlckRhdGEoZGF0YSk7XG4gICAgICAgICAgICBkYXRhID0gdGhpcy5nZXRRdWlja0ZpbHRlckRhdGEoZGF0YSk7XG4gICAgICAgICAgICBkYXRhID0gdGhpcy5nZXRTb3J0ZWREYXRhKGRhdGEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMuZmlsdGVyZWREYXRhID0gT2JqZWN0LmFzc2lnbihbXSwgZGF0YSk7XG5cbiAgICAgICAgICBpZiAodGhpcy50YWJsZS5wYWdlYWJsZSkge1xuICAgICAgICAgICAgY29uc3QgdG90YWxSZWNvcmRzTnVtYmVyID0gdGhpcy50YWJsZS5nZXRUb3RhbFJlY29yZHNOdW1iZXIoKTtcbiAgICAgICAgICAgIHRoaXMucmVzdWx0c0xlbmd0aCA9IHRvdGFsUmVjb3Jkc051bWJlciAhPT0gdW5kZWZpbmVkID8gdG90YWxSZWNvcmRzTnVtYmVyIDogZGF0YS5sZW5ndGg7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucmVzdWx0c0xlbmd0aCA9IGRhdGEubGVuZ3RoO1xuICAgICAgICAgICAgZGF0YSA9IHRoaXMuZ2V0UGFnaW5hdGlvbkRhdGEoZGF0YSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0aGlzLnRhYmxlLmdyb3VwYWJsZSAmJiAhVXRpbC5pc0FycmF5RW1wdHkodGhpcy50YWJsZS5ncm91cGVkQ29sdW1uc0FycmF5KSAmJiBkYXRhLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGRhdGEgPSB0aGlzLmdldEdyb3VwZWREYXRhKGRhdGEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMucmVuZGVyZWREYXRhID0gZGF0YTtcblxuICAgICAgICAgIC8qXG4gICAgICAgICAgICB3aGVuIHRoZSBkYXRhIGlzIHZlcnkgbGFyZ2UsIHRoZSBhcHBsaWNhdGlvbiBjcmFzaGVzIHNvIGl0IGdldHMgYSBsaW1pdGVkIHJhbmdlIG9mIGRhdGEgdGhlIGZpcnN0IHRpbWVcbiAgICAgICAgICAgIGJlY2F1c2UgYXQgbmV4dCB0aGUgQ3VzdG9tVmlydHVhbFNjcm9sbFN0cmF0ZWd5IHdpbGwgZW1pdCBldmVudCBPblJhbmdlQ2hhbmdlVmlydHVhbFNjcm9sbFxuICAgICAgICAgICovXG4gICAgICAgICAgaWYgKHRoaXMudGFibGUudmlydHVhbFNjcm9sbFZpZXdwb3J0ICYmICF0aGlzLl9wYWdpbmF0b3IpIHtcbiAgICAgICAgICAgIGRhdGEgPSB0aGlzLmdldFZpcnR1YWxTY3JvbGxEYXRhKGRhdGEsIG5ldyBPblJhbmdlQ2hhbmdlVmlydHVhbFNjcm9sbCh7IHN0YXJ0OiAwLCBlbmQ6IENvZGVzLkxJTUlUX1NDUk9MTFZJUlRVQUwgfSkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMuYWdncmVnYXRlRGF0YSA9IHRoaXMuZ2V0QWdncmVnYXRlc0RhdGEodGhpcy5yZW5kZXJlZERhdGEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfSkpO1xuICB9XG5cbiAgZ2V0R3JvdXBlZERhdGEoZGF0YTogYW55W10pIHtcbiAgICBkYXRhID0gdGhpcy5nZXRTdWJHcm91cHNPZkdyb3VwZWRSb3coZGF0YSk7XG4gICAgLyoqIGRhdGEgY29udGFpbnMgcm93IGdyb3VwIGhlYWRlcnMgKE9UYWJsZUdyb3VwZWRSb3cpIGFuZCB0aGUgZGF0YSBiZWxvbmdpbmcgdG8gZXhwYW5kZWQgZ3JvdXBlZCByb3dzICovXG4gICAgZGF0YSA9IHRoaXMuZmlsdGVyQ29sbGFwc2VkUm93R3JvdXAoZGF0YSk7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyBzdWJncm91cHMgb2YgZ3JvdXBlZCByb3dcbiAgICogQHBhcmFtIGRhdGFcbiAgICogQHJldHVybnMgc3ViZ3JvdXBzIG9mIGdyb3VwZWQgcm93XG4gICAqL1xuICBnZXRTdWJHcm91cHNPZkdyb3VwZWRSb3coZGF0YTogYW55W10pOiBhbnlbXSB7XG4gICAgcmV0dXJuIGRhdGEgPSB0aGlzLmdldFN1YmxldmVsKGRhdGEsIDApO1xuICB9XG5cbiAgZ2V0QWdncmVnYXRlc0RhdGEoZGF0YTogYW55W10pOiBhbnkge1xuICAgIGNvbnN0IG9iaiA9IHt9O1xuXG4gICAgaWYgKHR5cGVvZiB0aGlzLl90YWJsZU9wdGlvbnMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gb2JqO1xuICAgIH1cblxuICAgIHRoaXMuX3RhYmxlT3B0aW9ucy5jb2x1bW5zLmZvckVhY2goKGNvbHVtbjogT0NvbHVtbikgPT4ge1xuICAgICAgbGV0IHRvdGFsVmFsdWUgPSAnJztcbiAgICAgIGlmIChjb2x1bW4uYWdncmVnYXRlICYmIGNvbHVtbi52aXNpYmxlKSB7XG4gICAgICAgIHRvdGFsVmFsdWUgPSB0aGlzLmNhbGN1bGF0ZUFnZ3JlZ2F0ZShkYXRhLCBjb2x1bW4uYXR0ciwgY29sdW1uLmFnZ3JlZ2F0ZS5vcGVyYXRvcik7XG4gICAgICB9XG4gICAgICBjb25zdCBrZXkgPSBjb2x1bW4uYXR0cjtcbiAgICAgIG9ialtrZXldID0gdG90YWxWYWx1ZTtcbiAgICB9KTtcblxuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICAvKipcbiAgICogTWV0aG9kIHRoYXQgZ2V0IHZhbHVlIHRoZSBjb2x1bW5zIGNhbGN1bGF0ZWRcbiAgICogQHBhcmFtIGRhdGEgZGF0YSBvZiB0aGUgZGF0YWJhc2VcbiAgICovXG4gIGdldENvbHVtbkNhbGN1bGF0ZWREYXRhKGRhdGE6IGFueVtdKTogYW55W10ge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGNvbnN0IGNhbGN1bGF0ZWRDb2xzID0gdGhpcy5fdGFibGVPcHRpb25zLmNvbHVtbnMuZmlsdGVyKChvQ29sOiBPQ29sdW1uKSA9PiBvQ29sLnZpc2libGUgJiYgb0NvbC5jYWxjdWxhdGUgIT09IHVuZGVmaW5lZCk7XG4gICAgcmV0dXJuIGRhdGEubWFwKChyb3c6IGFueSkgPT4ge1xuICAgICAgY2FsY3VsYXRlZENvbHMuZm9yRWFjaCgob0NvbHVtbjogT0NvbHVtbikgPT4ge1xuICAgICAgICBsZXQgdmFsdWU7XG4gICAgICAgIGlmICh0eXBlb2Ygb0NvbHVtbi5jYWxjdWxhdGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgdmFsdWUgPSBzZWxmLnRyYW5zZm9ybUZvcm11bGEob0NvbHVtbi5jYWxjdWxhdGUsIHJvdyk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG9Db2x1bW4uY2FsY3VsYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdmFsdWUgPSBvQ29sdW1uLmNhbGN1bGF0ZShyb3cpO1xuICAgICAgICB9XG4gICAgICAgIHJvd1tvQ29sdW1uLmF0dHJdID0gaXNOYU4odmFsdWUpID8gMCA6IHZhbHVlO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcm93O1xuICAgIH0pO1xuICB9XG5cbiAgcHJvdGVjdGVkIHRyYW5zZm9ybUZvcm11bGEoZm9ybXVsYUFyZywgcm93KTogc3RyaW5nIHtcbiAgICBsZXQgZm9ybXVsYSA9IGZvcm11bGFBcmc7XG4gICAgLy8gMS4gcmVwbGFjZSBjb2x1bW5zIGJ5IHZhbHVlcyBvZiByb3dcbiAgICBjb25zdCBjb2x1bW5zQXR0ciA9IHRoaXMuX3RhYmxlT3B0aW9ucy5jb2x1bW5zLm1hcCgob0NvbDogT0NvbHVtbikgPT4gb0NvbC5hdHRyKTtcbiAgICBjb2x1bW5zQXR0ci5mb3JFYWNoKChjb2x1bW46IHN0cmluZykgPT4ge1xuICAgICAgZm9ybXVsYSA9IGZvcm11bGEucmVwbGFjZShjb2x1bW4sIHJvd1tjb2x1bW5dKTtcbiAgICB9KTtcblxuICAgIGxldCByZXN1bHRGb3JtdWxhID0gJyc7XG4gICAgLy8gMi4gVHJhbnNmb3JtIGZvcm11bGFcbiAgICB0cnkge1xuICAgICAgcmVzdWx0Rm9ybXVsYSA9IChuZXcgRnVuY3Rpb24oJ3JldHVybiAnICsgZm9ybXVsYSkpKCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc29sZS5lcnJvcignT3BlcmF0aW9uIGRlZmluZWQgaW4gdGhlIGNhbGN1bGF0ZWQgY29sdW1uIGlzIGluY29ycmVjdCAnKTtcbiAgICB9XG4gICAgLy8gMy4gUmV0dXJuIHJlc3VsdFxuICAgIHJldHVybiByZXN1bHRGb3JtdWxhO1xuICB9XG5cbiAgZ2V0UXVpY2tGaWx0ZXJEYXRhKGRhdGE6IGFueVtdKTogYW55W10ge1xuICAgIGlmIChVdGlsLmlzRGVmaW5lZCh0aGlzLnF1aWNrRmlsdGVyKSAmJiB0aGlzLnF1aWNrRmlsdGVyLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IGZpbHRlckRhdGEgPSAhdGhpcy5fdGFibGVPcHRpb25zLmZpbHRlckNhc2VTZW5zaXRpdmUgPyB0aGlzLnF1aWNrRmlsdGVyLnRvTG93ZXJDYXNlKCkgOiB0aGlzLnF1aWNrRmlsdGVyO1xuICAgICAgcmV0dXJuIGRhdGEuZmlsdGVyKChpdGVtOiBhbnkpID0+IHtcbiAgICAgICAgLy8gR2V0dGluZyBjdXN0b20gY29sdW1ucyBmaWx0ZXIgY29sdW1ucyByZXN1bHRcbiAgICAgICAgY29uc3QgcGFzc0N1c3RvbUZpbHRlciA9IHRoaXMuZnVsZmlsbHNDdXN0b21GaWx0ZXJGdW5jdGlvbnMoZmlsdGVyRGF0YSwgaXRlbSk7XG4gICAgICAgIC8vIEdldHRpbmcgb3RoZXIgc2VhcmNoYWJsZSBjb2x1bW5zIHN0YW5kYXJkIHJlc3VsdFxuICAgICAgICBjb25zdCBwYXNzU2VhcmNoU3RyaW5nID0gdGhpcy5mdWxmaWxsc1F1aWNrZmlsdGVyKGZpbHRlckRhdGEsIGl0ZW0pO1xuICAgICAgICByZXR1cm4gcGFzc0N1c3RvbUZpbHRlciB8fCBwYXNzU2VhcmNoU3RyaW5nO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgfVxuXG4gIGdldFBhZ2luYXRpb25EYXRhKGRhdGE6IGFueVtdKTogYW55W10ge1xuICAgIGlmICghdGhpcy5fcGFnaW5hdG9yIHx8IGlzTmFOKHRoaXMuX3BhZ2luYXRvci5wYWdlU2l6ZSkpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBsZXQgc3RhcnRJbmRleCA9IGlzTmFOKHRoaXMuX3BhZ2luYXRvci5wYWdlU2l6ZSkgPyAwIDogdGhpcy5fcGFnaW5hdG9yLnBhZ2VJbmRleCAqIHRoaXMuX3BhZ2luYXRvci5wYWdlU2l6ZTtcbiAgICBpZiAoZGF0YS5sZW5ndGggPiAwICYmIGRhdGEubGVuZ3RoIDwgc3RhcnRJbmRleCkge1xuICAgICAgc3RhcnRJbmRleCA9IDA7XG4gICAgICB0aGlzLl9wYWdpbmF0b3IucGFnZUluZGV4ID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGEuc3BsaWNlKHN0YXJ0SW5kZXgsIHRoaXMuX3BhZ2luYXRvci5wYWdlU2l6ZSk7XG4gIH1cblxuICBnZXRWaXJ0dWFsU2Nyb2xsRGF0YShkYXRhOiBhbnlbXSwgeDogT25SYW5nZUNoYW5nZVZpcnR1YWxTY3JvbGwpOiBhbnlbXSB7XG4gICAgcmV0dXJuIGRhdGEuc2xpY2UoeC5yYW5nZS5zdGFydCwgeC5yYW5nZS5lbmQpXG4gIH1cblxuICBkaXNjb25uZWN0KCkge1xuICAgIHRoaXMuZGF0YVRvdGFsc0NoYW5nZS5jb21wbGV0ZSgpO1xuICAgIHRoaXMuX3F1aWNrRmlsdGVyQ2hhbmdlLmNvbXBsZXRlKCk7XG4gICAgdGhpcy5fY29sdW1uVmFsdWVGaWx0ZXJDaGFuZ2UuY29tcGxldGUoKTtcbiAgICB0aGlzLmdyb3VwQnlDb2x1bW5DaGFuZ2UuY29tcGxldGUoKTtcbiAgICB0aGlzLl92aXJ0dWFsUGFnZUNoYW5nZS5jb21wbGV0ZSgpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGZ1bGZpbGxzQ3VzdG9tRmlsdGVyRnVuY3Rpb25zKGZpbHRlcjogc3RyaW5nLCBpdGVtOiBhbnkpIHtcbiAgICBjb25zdCBjdXN0b21GaWx0ZXJDb2xzID0gdGhpcy50YWJsZS5vVGFibGVPcHRpb25zLmNvbHVtbnMuZmlsdGVyKG9Db2wgPT4gb0NvbC51c2VDdXN0b21GaWx0ZXJGdW5jdGlvbigpKTtcbiAgICByZXR1cm4gY3VzdG9tRmlsdGVyQ29scy5zb21lKG9Db2wgPT4gb0NvbC5yZW5kZXJlci5maWx0ZXJGdW5jdGlvbihpdGVtW29Db2wuYXR0cl0sIGl0ZW0sIGZpbHRlcikpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGZ1bGZpbGxzUXVpY2tmaWx0ZXIoZmlsdGVyOiBzdHJpbmcsIGl0ZW06IGFueSk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGNvbHVtbnMgPSB0aGlzLl90YWJsZU9wdGlvbnMuY29sdW1ucy5maWx0ZXIoKG9Db2w6IE9Db2x1bW4pID0+IG9Db2wudXNlUXVpY2tmaWx0ZXJGdW5jdGlvbigpKTtcbiAgICBsZXQgc2VhcmNoU3RyID0gY29sdW1ucy5tYXAoKG9Db2w6IE9Db2x1bW4pID0+IG9Db2wuZ2V0RmlsdGVyVmFsdWUoaXRlbVtvQ29sLmF0dHJdLCBpdGVtKS5qb2luKCcgJykpLmpvaW4oJyAnKTtcbiAgICBpZiAoIXRoaXMuX3RhYmxlT3B0aW9ucy5maWx0ZXJDYXNlU2Vuc2l0aXZlKSB7XG4gICAgICBzZWFyY2hTdHIgPSBzZWFyY2hTdHIudG9Mb3dlckNhc2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIHNlYXJjaFN0ci5pbmRleE9mKGZpbHRlcikgIT09IC0xO1xuICB9XG5cbiAgLyoqIFJldHVybnMgYSBzb3J0ZWQgY29weSBvZiB0aGUgZGF0YWJhc2UgZGF0YS4gKi9cbiAgcHJvdGVjdGVkIGdldFNvcnRlZERhdGEoZGF0YTogYW55W10pOiBhbnlbXSB7XG4gICAgcmV0dXJuIHRoaXMuX3NvcnQuZ2V0U29ydGVkRGF0YShkYXRhKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBkYXRhIHRoZSB0YWJsZSBzdG9yZXMuIE5vIGZpbHRlcnMgYXJlIGFwcGxpZWQuXG4gICAqL1xuICBnZXRUYWJsZURhdGEoKTogYW55W10ge1xuICAgIHJldHVybiB0aGlzLl9kYXRhYmFzZS5kYXRhO1xuICB9XG5cbiAgLyoqIFJldHVybiBkYXRhIG9mIHRoZSB2aXNpYmxlIGNvbHVtbnMgb2YgdGhlIHRhYmxlIHdpdGhvdXQgcmVuZGVyaW5nICovXG4gIGdldEN1cnJlbnREYXRhKCk6IGFueVtdIHtcbiAgICByZXR1cm4gdGhpcy5nZXREYXRhKCk7XG4gIH1cblxuICBnZXRDdXJyZW50QWxsRGF0YSgpOiBhbnlbXSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0QWxsRGF0YShmYWxzZSwgZmFsc2UpO1xuICB9XG5cbiAgLyoqIFJldHVybiBkYXRhIG9mIHRoZSB2aXNpYmxlIGNvbHVtbnMgb2YgdGhlIHRhYmxlICByZW5kZXJpbmcgKi9cbiAgZ2V0Q3VycmVudFJlbmRlcmVyRGF0YSgpOiBhbnlbXSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0UmVuZGVyZWREYXRhKHRoaXMucmVuZGVyZWREYXRhKTtcbiAgfVxuXG4gIC8qKiBSZXR1cm4gYWxsIGRhdGEgb2YgdGhlIHRhYmxlIHJlbmRlcmluZyAqL1xuICBnZXRBbGxSZW5kZXJlckRhdGEoKTogYW55W10ge1xuICAgIHJldHVybiB0aGlzLmdldEFsbERhdGEodHJ1ZSwgdHJ1ZSk7XG4gIH1cblxuICAvKiogUmV0dXJuIHNxbCB0eXBlcyBvZiB0aGUgY3VycmVudCBkYXRhICovXG4gIGdldCBzcWxUeXBlcygpOiBhbnkge1xuICAgIHJldHVybiB0aGlzLl9kYXRhYmFzZS5zcWxUeXBlcztcbiAgfVxuXG4gIHByb3RlY3RlZCBnZXREYXRhKCkge1xuICAgIHJldHVybiB0aGlzLnJlbmRlcmVkRGF0YTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRSZW5kZXJlZERhdGEoZGF0YTogYW55W10pOiBhbnlbXSB7XG4gICAgY29uc3QgdmlzaWJsZUNvbHVtbnMgPSB0aGlzLl90YWJsZU9wdGlvbnMuY29sdW1ucy5maWx0ZXIob0NvbCA9PiBvQ29sLnZpc2libGUpO1xuICAgIHJldHVybiBkYXRhLm1hcCgocm93KSA9PiB7XG4gICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgIHZpc2libGVDb2x1bW5zLmZvckVhY2goKG9Db2w6IE9Db2x1bW4pID0+IHtcbiAgICAgICAgY29uc3QgdXNlUmVuZGVyZXIgPSBvQ29sLnJlbmRlcmVyICYmIG9Db2wucmVuZGVyZXIuZ2V0Q2VsbERhdGE7XG4gICAgICAgIG9ialtvQ29sLmF0dHJdID0gdXNlUmVuZGVyZXIgPyBvQ29sLnJlbmRlcmVyLmdldENlbGxEYXRhKHJvd1tvQ29sLmF0dHJdLCByb3cpIDogcm93W29Db2wuYXR0cl07XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBvYmo7XG4gICAgfSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0QWxsRGF0YSh1c2luZ1JlbmRlcmVyZXJzPzogYm9vbGVhbiwgb25seVZpc2libGVDb2x1bW5zPzogYm9vbGVhbikge1xuICAgIGxldCB0YWJsZUNvbHVtbnMgPSB0aGlzLl90YWJsZU9wdGlvbnMuY29sdW1ucztcbiAgICBpZiAob25seVZpc2libGVDb2x1bW5zKSB7XG4gICAgICB0YWJsZUNvbHVtbnMgPSB0aGlzLl90YWJsZU9wdGlvbnMuY29sdW1ucy5maWx0ZXIob0NvbCA9PiBvQ29sLnZpc2libGUpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5maWx0ZXJlZERhdGEubWFwKChyb3cpID0+IHtcbiAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgdGFibGVDb2x1bW5zLmZvckVhY2goKG9Db2w6IE9Db2x1bW4pID0+IHtcbiAgICAgICAgY29uc3QgdXNlUmVuZGVyZXIgPSB1c2luZ1JlbmRlcmVyZXJzICYmIG9Db2wucmVuZGVyZXIgJiYgb0NvbC5yZW5kZXJlci5nZXRDZWxsRGF0YTtcbiAgICAgICAgb2JqW29Db2wuYXR0cl0gPSB1c2VSZW5kZXJlciA/IG9Db2wucmVuZGVyZXIuZ2V0Q2VsbERhdGEocm93W29Db2wuYXR0cl0sIHJvdykgOiByb3dbb0NvbC5hdHRyXTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG9iajtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0UmVuZGVyZXJzRGF0YShkYXRhOiBhbnlbXSwgdGFibGVDb2x1bW5zOiBPQ29sdW1uW10pOiBhbnlbXSB7XG4gICAgcmV0dXJuIGRhdGEubWFwKChyb3cpID0+IHtcbiAgICAgIC8vIHJlbmRlciBlYWNoIGNvbHVtblxuICAgICAgY29uc3Qgb2JqID0gT2JqZWN0LmFzc2lnbih7fSwgcm93KTtcbiAgICAgIHRhYmxlQ29sdW1ucy5mb3JFYWNoKChvQ29sOiBPQ29sdW1uKSA9PiB7XG4gICAgICAgIG9ialtvQ29sLmF0dHJdID0gb0NvbC5yZW5kZXJlci5nZXRDZWxsRGF0YShyb3dbb0NvbC5hdHRyXSwgcm93KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG9iajtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRDb2x1bW5EYXRhKG9jb2x1bW46IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLnJlbmRlcmVkRGF0YS5tYXAoKHJvdykgPT4ge1xuICAgICAgLy8gcmVuZGVyIGVhY2ggY29sdW1uXG4gICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgIGlmIChvY29sdW1uKSB7XG4gICAgICAgIG9ialtvY29sdW1uXSA9IHJvd1tvY29sdW1uXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmo7XG4gICAgfSk7XG4gIH1cblxuICBpbml0aWFsaXplQ29sdW1uc0ZpbHRlcnMoZmlsdGVyczogT0NvbHVtblZhbHVlRmlsdGVyW10pIHtcbiAgICB0aGlzLmNvbHVtblZhbHVlRmlsdGVycyA9IFtdO1xuICAgIGZpbHRlcnMuZm9yRWFjaChmaWx0ZXIgPT4ge1xuICAgICAgdGhpcy5jb2x1bW5WYWx1ZUZpbHRlcnMucHVzaChmaWx0ZXIpO1xuICAgIH0pO1xuICAgIGlmICghdGhpcy50YWJsZS5wYWdlYWJsZSkge1xuICAgICAgdGhpcy5fY29sdW1uVmFsdWVGaWx0ZXJDaGFuZ2UubmV4dChudWxsKTtcbiAgICB9XG4gIH1cblxuICBpc0NvbHVtblZhbHVlRmlsdGVyQWN0aXZlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmNvbHVtblZhbHVlRmlsdGVycy5sZW5ndGggIT09IDA7XG4gIH1cblxuICBnZXRDb2x1bW5WYWx1ZUZpbHRlcnMoKTogT0NvbHVtblZhbHVlRmlsdGVyW10ge1xuICAgIHJldHVybiB0aGlzLmNvbHVtblZhbHVlRmlsdGVycztcbiAgfVxuXG4gIGdldENvbHVtblZhbHVlRmlsdGVyQnlBdHRyKGF0dHI6IHN0cmluZyk6IE9Db2x1bW5WYWx1ZUZpbHRlciB7XG4gICAgcmV0dXJuIHRoaXMuY29sdW1uVmFsdWVGaWx0ZXJzLmZpbmQoaXRlbSA9PiBpdGVtLmF0dHIgPT09IGF0dHIpO1xuICB9XG5cbiAgY2xlYXJDb2x1bW5GaWx0ZXJzKHRyaWdnZXI6IGJvb2xlYW4gPSB0cnVlLCBjb2x1bW5zQXR0cj86IHN0cmluZ1tdKSB7XG4gICAgaWYgKFV0aWwuaXNEZWZpbmVkKGNvbHVtbnNBdHRyKSkge1xuICAgICAgdGhpcy5jb2x1bW5WYWx1ZUZpbHRlcnMgPSB0aGlzLmNvbHVtblZhbHVlRmlsdGVycy5maWx0ZXIoeCA9PiAhY29sdW1uc0F0dHIuaW5jbHVkZXMoeC5hdHRyKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY29sdW1uVmFsdWVGaWx0ZXJzID0gW107XG4gICAgfVxuICAgIGlmICh0cmlnZ2VyKSB7XG4gICAgICB0aGlzLl9jb2x1bW5WYWx1ZUZpbHRlckNoYW5nZS5uZXh0KG51bGwpO1xuICAgIH1cbiAgfVxuXG4gIGNsZWFyQ29sdW1uRmlsdGVyKGF0dHI6IHN0cmluZywgdHJpZ2dlcjogYm9vbGVhbiA9IHRydWUpIHtcbiAgICB0aGlzLmNvbHVtblZhbHVlRmlsdGVycyA9IHRoaXMuY29sdW1uVmFsdWVGaWx0ZXJzLmZpbHRlcih4ID0+IHguYXR0ciAhPT0gYXR0cik7XG4gICAgaWYgKHRyaWdnZXIpIHtcbiAgICAgIHRoaXMuX2NvbHVtblZhbHVlRmlsdGVyQ2hhbmdlLm5leHQobnVsbCk7XG4gICAgfVxuICB9XG5cbiAgYWRkQ29sdW1uRmlsdGVyKGZpbHRlcjogT0NvbHVtblZhbHVlRmlsdGVyKSB7XG4gICAgY29uc3QgZXhpc3RpbmdGaWx0ZXJJbmRleCA9IHRoaXMuY29sdW1uVmFsdWVGaWx0ZXJzLmZpbmRJbmRleChpdGVtID0+IGl0ZW0uYXR0ciA9PT0gZmlsdGVyLmF0dHIpO1xuICAgIGlmIChleGlzdGluZ0ZpbHRlckluZGV4ID4gLTEpIHtcbiAgICAgIHRoaXMuY29sdW1uVmFsdWVGaWx0ZXJzLnNwbGljZShleGlzdGluZ0ZpbHRlckluZGV4LCAxLCBmaWx0ZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgdmFsaWRGaWx0ZXIgPSBVdGlsLmlzRGVmaW5lZChmaWx0ZXIudmFsdWVzKTtcbiAgICAgIGlmICh2YWxpZEZpbHRlcikge1xuICAgICAgICBzd2l0Y2ggKGZpbHRlci5vcGVyYXRvcikge1xuICAgICAgICAgIGNhc2UgQ29sdW1uVmFsdWVGaWx0ZXJPcGVyYXRvci5JTjpcbiAgICAgICAgICAgIHZhbGlkRmlsdGVyID0gZmlsdGVyLnZhbHVlcy5sZW5ndGggPiAwO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBDb2x1bW5WYWx1ZUZpbHRlck9wZXJhdG9yLkJFVFdFRU46XG4gICAgICAgICAgICB2YWxpZEZpbHRlciA9IGZpbHRlci52YWx1ZXMubGVuZ3RoID09PSAyO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBDb2x1bW5WYWx1ZUZpbHRlck9wZXJhdG9yLkVRVUFMOlxuICAgICAgICAgIGNhc2UgQ29sdW1uVmFsdWVGaWx0ZXJPcGVyYXRvci5MRVNTX0VRVUFMOlxuICAgICAgICAgIGNhc2UgQ29sdW1uVmFsdWVGaWx0ZXJPcGVyYXRvci5NT1JFX0VRVUFMOlxuICAgICAgICAgICAgdmFsaWRGaWx0ZXIgPSB0cnVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHZhbGlkRmlsdGVyID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbGlkRmlsdGVyKSB7XG4gICAgICAgICAgdGhpcy5jb2x1bW5WYWx1ZUZpbHRlcnMucHVzaChmaWx0ZXIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC8vIElmIHRoZSB0YWJsZSBpcyBwYWdpbmF0ZWQsIGZpbHRlciB3aWxsIGJlIGFwcGxpZWQgb24gcmVtb3RlIHF1ZXJ5XG4gICAgaWYgKCF0aGlzLnRhYmxlLnBhZ2VhYmxlKSB7XG4gICAgICB0aGlzLl9jb2x1bW5WYWx1ZUZpbHRlckNoYW5nZS5uZXh0KG51bGwpO1xuICAgIH1cbiAgfVxuXG4gIGdldENvbHVtblZhbHVlRmlsdGVyRGF0YShkYXRhOiBhbnlbXSk6IGFueVtdIHtcbiAgICB0aGlzLmNvbHVtblZhbHVlRmlsdGVycy5mb3JFYWNoKGZpbHRlciA9PiB7XG4gICAgICBjb25zdCBmaWx0ZXJDb2x1bW4gPSB0aGlzLnRhYmxlLm9UYWJsZU9wdGlvbnMuY29sdW1ucy5maW5kKGNvbCA9PiBjb2wuYXR0ciA9PT0gZmlsdGVyLmF0dHIpO1xuICAgICAgaWYgKGZpbHRlckNvbHVtbikge1xuICAgICAgICBzd2l0Y2ggKGZpbHRlci5vcGVyYXRvcikge1xuICAgICAgICAgIGNhc2UgQ29sdW1uVmFsdWVGaWx0ZXJPcGVyYXRvci5JTjpcbiAgICAgICAgICAgIGNvbnN0IGZpbHRlclZhbHVlcyA9IChmaWx0ZXIudmFsdWVzIHx8IFtdKS5yZWR1Y2UoKHByZXZpb3VzLCBjdXJyZW50KSA9PlxuICAgICAgICAgICAgICBwcmV2aW91cy5jb25jYXQoZmlsdGVyQ29sdW1uLmdldEZpbHRlclZhbHVlKGN1cnJlbnQpLm1hcChmID0+IFV0aWwubm9ybWFsaXplU3RyaW5nKGYpKSksIFtdKTtcblxuICAgICAgICAgICAgZGF0YSA9IGRhdGEuZmlsdGVyKChpdGVtOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgaWYgKGZpbHRlckNvbHVtbi5yZW5kZXJlciAmJiBmaWx0ZXJDb2x1bW4ucmVuZGVyZXIuZmlsdGVyRnVuY3Rpb24pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmlsdGVyQ29sdW1uLnJlbmRlcmVyLmZpbHRlckZ1bmN0aW9uKGl0ZW1bZmlsdGVyLmF0dHJdLCBpdGVtKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb2xWYWx1ZXMgPSBmaWx0ZXJDb2x1bW4uZ2V0RmlsdGVyVmFsdWUoaXRlbVtmaWx0ZXIuYXR0cl0sIGl0ZW0pLm1hcChmID0+IFV0aWwubm9ybWFsaXplU3RyaW5nKGYpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmlsdGVyVmFsdWVzLnNvbWUodmFsdWUgPT4gY29sVmFsdWVzLmluZGV4T2YodmFsdWUpICE9PSAtMSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBDb2x1bW5WYWx1ZUZpbHRlck9wZXJhdG9yLkVRVUFMOlxuICAgICAgICAgICAgY29uc3Qgbm9ybWFsaXplZFZhbHVlID0gVXRpbC5ub3JtYWxpemVTdHJpbmcoZmlsdGVyLnZhbHVlcyk7XG4gICAgICAgICAgICBkYXRhID0gZGF0YS5maWx0ZXIoaXRlbSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IGNvbFZhbHVlcyA9IGZpbHRlckNvbHVtbi5nZXRGaWx0ZXJWYWx1ZShpdGVtW2ZpbHRlci5hdHRyXSwgaXRlbSkubWFwKGYgPT4gVXRpbC5ub3JtYWxpemVTdHJpbmcoZikpO1xuICAgICAgICAgICAgICBsZXQgcmVnRXhwO1xuICAgICAgICAgICAgICBpZiAobm9ybWFsaXplZFZhbHVlLmluY2x1ZGVzKCcqJykpIHtcbiAgICAgICAgICAgICAgICByZWdFeHAgPSBuZXcgUmVnRXhwKCdeJyArIG5vcm1hbGl6ZWRWYWx1ZS5zcGxpdCgnKicpLmpvaW4oJy4qJykgKyAnJCcpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBjb2xWYWx1ZXMuc29tZShjb2xWYWx1ZSA9PiByZWdFeHAgPyByZWdFeHAudGVzdChjb2xWYWx1ZSkgOiBjb2xWYWx1ZS5pbmNsdWRlcyhub3JtYWxpemVkVmFsdWUpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBDb2x1bW5WYWx1ZUZpbHRlck9wZXJhdG9yLkJFVFdFRU46XG4gICAgICAgICAgICBkYXRhID0gZGF0YS5maWx0ZXIoaXRlbSA9PiBpdGVtW2ZpbHRlci5hdHRyXSA+PSBmaWx0ZXIudmFsdWVzWzBdICYmIGl0ZW1bZmlsdGVyLmF0dHJdIDw9IGZpbHRlci52YWx1ZXNbMV0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBDb2x1bW5WYWx1ZUZpbHRlck9wZXJhdG9yLk1PUkVfRVFVQUw6XG4gICAgICAgICAgICBkYXRhID0gZGF0YS5maWx0ZXIoaXRlbSA9PiBpdGVtW2ZpbHRlci5hdHRyXSA+PSBmaWx0ZXIudmFsdWVzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgQ29sdW1uVmFsdWVGaWx0ZXJPcGVyYXRvci5MRVNTX0VRVUFMOlxuICAgICAgICAgICAgZGF0YSA9IGRhdGEuZmlsdGVyKGl0ZW0gPT4gaXRlbVtmaWx0ZXIuYXR0cl0gPD0gZmlsdGVyLnZhbHVlcyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgZ2V0QWdncmVnYXRlRGF0YShjb2x1bW46IE9Db2x1bW4pIHtcbiAgICBjb25zdCBvYmogPSB7fTtcbiAgICBsZXQgdG90YWxWYWx1ZSA9ICcnO1xuXG4gICAgaWYgKHR5cGVvZiB0aGlzLl90YWJsZU9wdGlvbnMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gbmV3IEFycmF5KG9iaik7XG4gICAgfVxuICAgIHRvdGFsVmFsdWUgPSB0aGlzLmFnZ3JlZ2F0ZURhdGFbY29sdW1uLmF0dHJdO1xuICAgIHJldHVybiB0b3RhbFZhbHVlO1xuICB9XG5cbiAgcHJvdGVjdGVkIGNhbGN1bGF0ZUFnZ3JlZ2F0ZShkYXRhOiBhbnlbXSwgY29sdW1uQXR0cjogc3RyaW5nLCBvcGVyYXRvcjogc3RyaW5nIHwgRnVuY3Rpb24pOiBhbnkge1xuICAgIGxldCByZXN1bHRBZ2dyZWdhdGU7XG4gICAgaWYgKHR5cGVvZiBvcGVyYXRvciA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHN3aXRjaCAob3BlcmF0b3IudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICBjYXNlICdjb3VudCc6XG4gICAgICAgICAgcmVzdWx0QWdncmVnYXRlID0gdGhpcy5jb3VudChjb2x1bW5BdHRyLCBkYXRhKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnbWluJzpcbiAgICAgICAgICByZXN1bHRBZ2dyZWdhdGUgPSB0aGlzLm1pbihjb2x1bW5BdHRyLCBkYXRhKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnbWF4JzpcbiAgICAgICAgICByZXN1bHRBZ2dyZWdhdGUgPSB0aGlzLm1heChjb2x1bW5BdHRyLCBkYXRhKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnYXZnJzpcbiAgICAgICAgICByZXN1bHRBZ2dyZWdhdGUgPSB0aGlzLmF2Zyhjb2x1bW5BdHRyLCBkYXRhKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXN1bHRBZ2dyZWdhdGUgPSB0aGlzLnN1bShjb2x1bW5BdHRyLCBkYXRhKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgY29sdW1uRGF0YTogYW55W10gPSB0aGlzLmdldENvbHVtbkRhdGEoY29sdW1uQXR0cik7XG4gICAgICBpZiAodHlwZW9mIG9wZXJhdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJlc3VsdEFnZ3JlZ2F0ZSA9IG9wZXJhdG9yKGNvbHVtbkRhdGEpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0QWdncmVnYXRlO1xuICB9XG5cbiAgcHJvdGVjdGVkIHN1bShjb2x1bW4sIGRhdGEpOiBudW1iZXIge1xuICAgIGxldCB2YWx1ZSA9IDA7XG4gICAgaWYgKGRhdGEpIHtcbiAgICAgIC8vSWYgdGhlIGRhdGEgaXMgZ3JvdXBlZCwgdGhlIHZhbHVlcyDigIvigItvZiB0aGUgc3ViZ3JvdXBzIGluIGxldmVsIDEgYXJlIHN1bW1lZFxuICAgICAgaWYgKGRhdGFbMF0gaW5zdGFuY2VvZiBPVGFibGVHcm91cGVkUm93KSB7XG4gICAgICAgIHRoaXMuZ2V0RGF0YUZyb21GaXJzdExldmVsVGFibGVHcm91cFJvdyhkYXRhKS5mb3JFYWNoKHggPT4ge1xuICAgICAgICAgIHZhbHVlID0geC5nZXRDb2x1bW5BZ2dyZWdhdGVEYXRhKGNvbHVtbikucmVkdWNlKChhY3VtdWxhdG9yLCBjdXJyZW50VmFsdWUpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBhY3VtdWxhdG9yICsgKGlzTmFOKGN1cnJlbnRWYWx1ZVtjb2x1bW5dKSA/IDAgOiBjdXJyZW50VmFsdWVbY29sdW1uXSk7XG4gICAgICAgICAgfSwgdmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlID0gZGF0YS5yZWR1Y2UoKGFjdW11bGF0b3IsIGN1cnJlbnRWYWx1ZSkgPT4ge1xuICAgICAgICAgIHJldHVybiBhY3VtdWxhdG9yICsgKGlzTmFOKGN1cnJlbnRWYWx1ZVtjb2x1bW5dKSA/IDAgOiBjdXJyZW50VmFsdWVbY29sdW1uXSk7XG4gICAgICAgIH0sIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuICsodmFsdWUpLnRvRml4ZWQoMik7XG4gIH1cblxuICBwcm90ZWN0ZWQgY291bnQoY29sdW1uLCBkYXRhKTogbnVtYmVyIHtcbiAgICBsZXQgdmFsdWUgPSAwO1xuICAgIGlmIChkYXRhKSB7XG4gICAgICAvL0lmIHRoZSBkYXRhIGlzIGdyb3VwZWQsIHRoZSBjb3VudCBpcyBjYWxjdWxhdGVkIGJ5IGFkZGluZyB0aGUgY291bnRzIGZvciBlYWNoIHN1Ymdyb3VwIGluIGxldmVsIDFcbiAgICAgIGlmIChkYXRhWzBdIGluc3RhbmNlb2YgT1RhYmxlR3JvdXBlZFJvdykge1xuICAgICAgICB0aGlzLmdldERhdGFGcm9tRmlyc3RMZXZlbFRhYmxlR3JvdXBSb3coZGF0YSkuZm9yRWFjaCh4ID0+IHtcbiAgICAgICAgICB2YWx1ZSA9IHguZ2V0Q29sdW1uQWdncmVnYXRlRGF0YShjb2x1bW4pLnJlZHVjZSgoYWN1bXVsYXRvcikgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGFjdW11bGF0b3IgKyAxO1xuICAgICAgICAgIH0sIHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSA9IGRhdGEucmVkdWNlKChhY3VtdWxhdG9yKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIGFjdW11bGF0b3IgKyAxO1xuICAgICAgICB9LCAwKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgcHJvdGVjdGVkIGF2Zyhjb2x1bW4sIGRhdGEpOiBudW1iZXIge1xuICAgIGNvbnN0IHRvdGFsU3VtID0gdGhpcy5zdW0oY29sdW1uLCBkYXRhKTtcbiAgICBjb25zdCB0b3RhbENvdW50ID0gdGhpcy5jb3VudChjb2x1bW4sIGRhdGEpO1xuICAgIHJldHVybiArKCh0b3RhbFN1bSA9PT0gMCB8fCB0b3RhbENvdW50ID09PSAwKSA/IDAgOiAodG90YWxTdW0gLyB0b3RhbENvdW50KSkudG9GaXhlZCgyKTtcblxuICB9XG5cbiAgcHJvdGVjdGVkIG1pbihjb2x1bW4sIGRhdGEpOiBudW1iZXIge1xuICAgIGxldCB0ZW1wTWluID0gW107XG4gICAgLy9JZiB0aGUgZGF0YSBpcyBncm91cGVkLCB0aGUgbWluaW11bSBpcyBjYWxjdWxhdGVkIHdpdGggdGhlIG1pbmltdW0gb2YgZWFjaCBzdWJncm91cCBpbiBsZXZlbCAxXG4gICAgaWYgKGRhdGFbMF0gaW5zdGFuY2VvZiBPVGFibGVHcm91cGVkUm93KSB7XG4gICAgICB0ZW1wTWluID0gdGhpcy5nZXREYXRhRnJvbUZpcnN0TGV2ZWxUYWJsZUdyb3VwUm93KGRhdGEpLm1hcCh4ID0+IHtcbiAgICAgICAgcmV0dXJuIE1hdGgubWluKC4uLnguZ2V0Q29sdW1uQWdncmVnYXRlRGF0YShjb2x1bW4pLm1hcCh4ID0+IHhbY29sdW1uXSkpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRlbXBNaW4gPSBkYXRhLm1hcCh4ID0+IHhbY29sdW1uXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRlbXBNaW4ubGVuZ3RoID4gMCA/IE1hdGgubWluKC4uLnRlbXBNaW4pIDogMDtcbiAgfVxuXG4gIHByb3RlY3RlZCBtYXgoY29sdW1uLCBkYXRhKTogbnVtYmVyIHtcbiAgICBsZXQgdGVtcE1heCA9IFtdO1xuICAgIGlmIChkYXRhWzBdIGluc3RhbmNlb2YgT1RhYmxlR3JvdXBlZFJvdykge1xuICAgICAgLy9JZiB0aGUgZGF0YSBhcmUgZ3JvdXBlZCwgdGhlIG1heGltdW0gaXMgY2FsY3VsYXRlZCB3aXRoIHRoZSBtYXhpbXVtIG9mIGVhY2ggc3ViZ3JvdXAgaW4gbGV2ZWwgMVxuICAgICAgdGVtcE1heCA9IHRoaXMuZ2V0RGF0YUZyb21GaXJzdExldmVsVGFibGVHcm91cFJvdyhkYXRhKS5tYXAoeCA9PiB7XG4gICAgICAgIHJldHVybiBNYXRoLm1heCguLi54LmdldENvbHVtbkFnZ3JlZ2F0ZURhdGEoY29sdW1uKS5tYXAoeCA9PiB4W2NvbHVtbl0pKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0ZW1wTWF4ID0gZGF0YS5tYXAoeCA9PiB4W2NvbHVtbl0pO1xuICAgIH1cbiAgICByZXR1cm4gdGVtcE1heC5sZW5ndGggPiAwID8gTWF0aC5tYXgoLi4udGVtcE1heCkgOiAwO1xuICB9XG5cbiAgcHJpdmF0ZSBpc0ZpcnN0TGV2ZWxUYWJsZUdyb3VwUm93KHRhYmxlUm93R3JvdXBEYXRhOiBhbnkpIHtcbiAgICByZXR1cm4gdGFibGVSb3dHcm91cERhdGEgaW5zdGFuY2VvZiBPVGFibGVHcm91cGVkUm93ICYmIHRhYmxlUm93R3JvdXBEYXRhLmxldmVsID09PSAxO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXREYXRhRnJvbUZpcnN0TGV2ZWxUYWJsZUdyb3VwUm93KGRhdGE6IGFueSkge1xuICAgIHJldHVybiBkYXRhLmZpbHRlcih4ID0+IHRoaXMuaXNGaXJzdExldmVsVGFibGVHcm91cFJvdyh4KSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgZXhpc3RzQW55Q2FsY3VsYXRlZENvbHVtbigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fdGFibGVPcHRpb25zLmNvbHVtbnMuZmluZCgob0NvbDogT0NvbHVtbikgPT4gb0NvbC5jYWxjdWxhdGUgIT09IHVuZGVmaW5lZCkgIT09IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHVwZGF0ZVJlbmRlcmVkUm93RGF0YShyb3dEYXRhOiBhbnkpIHtcbiAgICBjb25zdCB0YWJsZUtleXMgPSB0aGlzLnRhYmxlLmdldEtleXMoKTtcbiAgICBjb25zdCByZWNvcmQgPSB0aGlzLnJlbmRlcmVkRGF0YS5maW5kKChkYXRhOiBhbnkpID0+IHtcbiAgICAgIGxldCBmb3VuZCA9IHRydWU7XG4gICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gdGFibGVLZXlzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IHRhYmxlS2V5c1tpXTtcbiAgICAgICAgaWYgKGRhdGFba2V5XSAhPT0gcm93RGF0YVtrZXldKSB7XG4gICAgICAgICAgZm91bmQgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZvdW5kO1xuICAgIH0pO1xuICAgIGlmIChVdGlsLmlzRGVmaW5lZChyZWNvcmQpKSB7XG4gICAgICBPYmplY3QuYXNzaWduKHJlY29yZCwgcm93RGF0YSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXREYXRhSW5mb3JtYXRpb25CeUdyb3VwKGRhdGE6IGFueVtdLCBsZXZlbDogbnVtYmVyKSB7XG4gICAgY29uc3QgcmVjb3JkSGFzaCA9IHt9O1xuICAgIGRhdGEuZm9yRWFjaCgocm93LCBpKSA9PiB7XG4gICAgICBjb25zdCBrZXlzID0ge307XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8PSBsZXZlbDsgaSsrKSB7XG4gICAgICAgIGtleXNbdGhpcy50YWJsZS5ncm91cGVkQ29sdW1uc0FycmF5W2ldXSA9IHRoaXMudGFibGUuZ2V0Q29sdW1uRGF0YUJ5QXR0cih0aGlzLnRhYmxlLmdyb3VwZWRDb2x1bW5zQXJyYXlbaV0sIHJvdyk7XG4gICAgICB9XG4gICAgICBjb25zdCByZWNvcmRLZXkgPSBKU09OLnN0cmluZ2lmeShrZXlzKTtcbiAgICAgIGlmIChyZWNvcmRIYXNoLmhhc093blByb3BlcnR5KHJlY29yZEtleSkpIHtcbiAgICAgICAgcmVjb3JkSGFzaFtyZWNvcmRLZXldLnB1c2goaSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZWNvcmRIYXNoW3JlY29yZEtleV0gPSBbaV07XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlY29yZEhhc2g7XG4gIH1cblxuICBwcml2YXRlIHJlY2FsY3VsYXRlQ29sdW1uQWdncmVnYXRlKGNvbHVtbkF0dHI6IHN0cmluZywgcm93OiBPVGFibGVHcm91cGVkUm93KSB7XG4gICAgY29uc3QgYWdncmVnYXRlQ29uZiA9IHJvdy5nZXRBY3RpdmVDb2x1bW5BZ2dyZWdhdGVDb25maWd1cmF0aW9uKGNvbHVtbkF0dHIpO1xuICAgIGNvbnN0IGRhdGEgPSByb3cuZ2V0Q29sdW1uQWdncmVnYXRlRGF0YShjb2x1bW5BdHRyKTtcbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMuY2FsY3VsYXRlQWdncmVnYXRlKGRhdGEsIGFnZ3JlZ2F0ZUNvbmYuYXR0ciwgYWdncmVnYXRlQ29uZi5hZ2dyZWdhdGVGdW5jdGlvbiB8fCBhZ2dyZWdhdGVDb25mLmFnZ3JlZ2F0ZSk7XG4gICAgcm93LnNldENvbHVtbkFnZ3JlZ2F0ZVZhbHVlKGNvbHVtbkF0dHIsIHZhbHVlKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0U3VibGV2ZWwoZGF0YTogYW55W10sIGxldmVsOiBudW1iZXIsIHBhcmVudD86IE9UYWJsZUdyb3VwZWRSb3cpOiBhbnlbXSB7XG4gICAgaWYgKGxldmVsID49IHRoaXMudGFibGUuZ3JvdXBlZENvbHVtbnNBcnJheS5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBjb25zdCByZWNvcmRIYXNoID0gdGhpcy5nZXREYXRhSW5mb3JtYXRpb25CeUdyb3VwKGRhdGEsIGxldmVsKTtcblxuICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICBPYmplY3Qua2V5cyhyZWNvcmRIYXNoKS5mb3JFYWNoKHJlY29yZEtleSA9PiB7XG5cbiAgICAgIGNvbnN0IHJvdyA9IG5ldyBPVGFibGVHcm91cGVkUm93KHtcbiAgICAgICAgY29sdW1uOiB0aGlzLnRhYmxlLmdyb3VwZWRDb2x1bW5zQXJyYXlbbGV2ZWxdLFxuICAgICAgICBrZXlzQXNTdHJpbmc6IHJlY29yZEtleSxcbiAgICAgICAgbGV2ZWw6IGxldmVsICsgMSxcbiAgICAgICAgcGFyZW50OiBwYXJlbnRcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLmdyb3VwZWRSb3dzU3Vic2NyaXB0aW9uLmFkZChyb3cuYWdncmVnYXRlRnVuY3Rpb25DaGFuZ2Uuc3Vic2NyaWJlKGFyZyA9PiB7XG4gICAgICAgIGlmIChhcmcuY2hhbmdlQWxsR3JvdXBlZFJvd3MpIHtcbiAgICAgICAgICB0aGlzLmFjdGl2ZUFnZ3JlZ2F0ZXNbYXJnLmNvbHVtbkF0dHJdID0gYXJnLmFjdGl2ZUFnZ3JlZ2F0ZTtcbiAgICAgICAgICB0aGlzLnJlbmRlcmVkRGF0YS5maWx0ZXIocm93ID0+IHJvdyBpbnN0YW5jZW9mIE9UYWJsZUdyb3VwZWRSb3cpLmZvckVhY2gocm93ID0+IHtcbiAgICAgICAgICAgIHJvdy5zZXRDb2x1bW5BY3RpdmVBZ2dyZWdhdGVGdW5jdGlvbihhcmcuY29sdW1uQXR0ciwgYXJnLmFjdGl2ZUFnZ3JlZ2F0ZSwgZmFsc2UpO1xuICAgICAgICAgICAgdGhpcy5yZWNhbGN1bGF0ZUNvbHVtbkFnZ3JlZ2F0ZShhcmcuY29sdW1uQXR0ciwgcm93KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnJlY2FsY3VsYXRlQ29sdW1uQWdncmVnYXRlKGFyZy5jb2x1bW5BdHRyLCBhcmcucm93KTtcbiAgICAgICAgfVxuICAgICAgfSkpO1xuICAgICAgY29uc3QgYWZmZWN0ZWRJbmRleGVzID0gcmVjb3JkSGFzaFtyb3cua2V5c0FzU3RyaW5nXTtcbiAgICAgIGNvbnN0IGdyb3VwRGF0YSA9IGRhdGEuZmlsdGVyKChyb3csIGluZGV4KSA9PiBhZmZlY3RlZEluZGV4ZXMuaW5jbHVkZXMoaW5kZXgpKTtcbiAgICAgIHRoaXMudGFibGUudmlzaWJsZUNvbEFycmF5LmZvckVhY2goKGNvbHVtbkF0dHIsIGkpID0+IHtcbiAgICAgICAgaWYgKGkgPT09IDApIHtcbiAgICAgICAgICByb3cudGl0bGUgPSB0aGlzLmdldFRleHRHcm91cFJvdyhyb3csIGFmZmVjdGVkSW5kZXhlcy5sZW5ndGgpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHVzZUNvbHVtbkFnZ3JlZ2F0ZSA9IHRoaXMudGFibGUudXNlQ29sdW1uR3JvdXBpbmdBZ2dyZWdhdGUoY29sdW1uQXR0cik7XG4gICAgICAgIGlmICh1c2VDb2x1bW5BZ2dyZWdhdGUpIHtcbiAgICAgICAgICByb3cuaW5pdGlhbGl6ZUNvbHVtbkFnZ3JlZ2F0ZShjb2x1bW5BdHRyLCB0aGlzLnRhYmxlLmdldENvbHVtbkdyb3VwaW5nQ29tcG9uZW50KGNvbHVtbkF0dHIpKTtcblxuICAgICAgICAgIGlmIChVdGlsLmlzRGVmaW5lZCh0aGlzLmFjdGl2ZUFnZ3JlZ2F0ZXNbY29sdW1uQXR0cl0pKSB7XG4gICAgICAgICAgICByb3cuc2V0Q29sdW1uQWN0aXZlQWdncmVnYXRlRnVuY3Rpb24oY29sdW1uQXR0ciwgdGhpcy5hY3RpdmVBZ2dyZWdhdGVzW2NvbHVtbkF0dHJdLCBmYWxzZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHJvdy5oYXNBY3RpdmVBZ2dyZWdhdGUoY29sdW1uQXR0cikpIHtcbiAgICAgICAgICAgIGNvbnN0IGFnZ3JlZ2F0ZURhdGEgPSBncm91cERhdGEubWFwKHggPT4geyBjb25zdCBvYmogPSB7fTsgb2JqW2NvbHVtbkF0dHJdID0geFtjb2x1bW5BdHRyXTsgcmV0dXJuIG9iajsgfSk7XG4gICAgICAgICAgICByb3cuc2V0Q29sdW1uQWdncmVnYXRlRGF0YShjb2x1bW5BdHRyLCBhZ2dyZWdhdGVEYXRhKTtcblxuICAgICAgICAgICAgY29uc3QgYWdncmVnYXRlQ29uZiA9IHJvdy5nZXRBY3RpdmVDb2x1bW5BZ2dyZWdhdGVDb25maWd1cmF0aW9uKGNvbHVtbkF0dHIpO1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmNhbGN1bGF0ZUFnZ3JlZ2F0ZShhZ2dyZWdhdGVEYXRhLCBhZ2dyZWdhdGVDb25mLmF0dHIsIGFnZ3JlZ2F0ZUNvbmYuYWdncmVnYXRlRnVuY3Rpb24gfHwgYWdncmVnYXRlQ29uZi5hZ2dyZWdhdGUpO1xuICAgICAgICAgICAgcm93LnNldENvbHVtbkFnZ3JlZ2F0ZVZhbHVlKGNvbHVtbkF0dHIsIHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcm93LmV4cGFuZGVkID0gdGhpcy5nZXRFeHBhbnNpb25TdGF0ZShyb3cpO1xuICAgICAgY29uc3Qgc3ViR3JvdXAgPSB0aGlzLmdldFN1YmxldmVsKGdyb3VwRGF0YSwgbGV2ZWwgKyAxLCByb3cpO1xuICAgICAgc3ViR3JvdXAudW5zaGlmdChyb3cpO1xuICAgICAgcmVzdWx0ID0gcmVzdWx0LmNvbmNhdChzdWJHcm91cCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaWx0ZXJzIGNvbGxhcHNlZCByb3cgZ3JvdXBcbiAgICogQHBhcmFtIGRhdGFcbiAgICogQHJldHVybnMgY29sbGFwc2VkIHJvdyBncm91cFxuICAgKi9cbiAgZmlsdGVyQ29sbGFwc2VkUm93R3JvdXAoZGF0YTogYW55KTogYW55W10ge1xuICAgIHJldHVybiBkYXRhLmZpbHRlcigocm93OiBhbnkpID0+IChyb3cgaW5zdGFuY2VvZiBPVGFibGVHcm91cGVkUm93KSA/IHJvdy52aXNpYmxlIDogdGhpcy5iZWxvbmdzVG9FeHBhbmRlZEdyb3VwZWRSb3coZGF0YSwgcm93KSk7XG4gIH1cblxuICAvKipcbiAgICogQmVsb25ncyB0byBhbiBleHBhbmRlZCBncm91cGVkIHJvd1xuICAgKiBAcGFyYW0gZGF0YVxuICAgKiBAcGFyYW0gcm93XG4gICAqIEByZXR1cm5zIHRydWUgaWYgdG8gZXhwYW5kZWQgZ3JvdXBlZCByb3dcbiAgICovXG4gIGJlbG9uZ3NUb0V4cGFuZGVkR3JvdXBlZFJvdyhkYXRhOiBhbnksIHJvdzogYW55KTogYm9vbGVhbiB7XG4gICAgbGV0IHBhcmVudDogT1RhYmxlR3JvdXBlZFJvdztcbiAgICBsZXQgbWF0Y2ggPSBmYWxzZTtcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgZGF0YS5sZW5ndGggJiYgIW1hdGNoOyBpbmRleCsrKSB7XG4gICAgICBpZiAoZGF0YVtpbmRleF0gaW5zdGFuY2VvZiBPVGFibGVHcm91cGVkUm93KSB7XG4gICAgICAgIHBhcmVudCA9IGRhdGFbaW5kZXhdO1xuICAgICAgfSBlbHNlIGlmIChVdGlsLmlzRXF1aXZhbGVudChkYXRhW2luZGV4XSwgcm93KSkge1xuICAgICAgICBtYXRjaCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBVdGlsLmlzRGVmaW5lZChwYXJlbnQpID8gKHBhcmVudC52aXNpYmxlICYmIHBhcmVudC5leHBhbmRlZCkgOiB0cnVlO1xuICB9XG5cbiAgdXBkYXRlR3JvdXBlZENvbHVtbnMoKSB7XG4gICAgdGhpcy5ncm91cEJ5Q29sdW1uQ2hhbmdlLm5leHQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUb2dnbGVzIGdyb3VwIGJ5IGNvbHVtblxuICAgKiBAcGFyYW0gcm93R3JvdXBcbiAgICovXG4gIHRvZ2dsZUdyb3VwQnlDb2x1bW4ocm93R3JvdXA6IE9UYWJsZUdyb3VwZWRSb3cpIHtcbiAgICBpZiAocm93R3JvdXAuZXhwYW5kU2FtZUxldmVsKHRoaXMudGFibGUuZXhwYW5kR3JvdXBzU2FtZUxldmVsKSkge1xuICAgICAgdGhpcy5sZXZlbHNFeHBhbnNpb25TdGF0ZVtyb3dHcm91cC5sZXZlbF0gPSAhcm93R3JvdXAuZXhwYW5kZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudXBkYXRlU3RhdGVSb3dHcm91cGVkKHJvd0dyb3VwKTtcbiAgICB9XG4gICAgdGhpcy5ncm91cEJ5Q29sdW1uQ2hhbmdlLm5leHQoKTtcbiAgfVxuXG4gIHNldFJvd0dyb3VwTGV2ZWxFeHBhbnNpb24ocm93R3JvdXA6IE9UYWJsZUdyb3VwZWRSb3csIHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5sZXZlbHNFeHBhbnNpb25TdGF0ZVtyb3dHcm91cC5sZXZlbF0gPSB2YWx1ZTtcbiAgICB0aGlzLmdyb3VwQnlDb2x1bW5DaGFuZ2UubmV4dCgpO1xuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVTdGF0ZVJvd0dyb3VwZWQocm93R3JvdXA6IE9UYWJsZUdyb3VwZWRSb3cpIHtcbiAgICBjb25zdCBzdGF0ZVJvd0dyb3VwZWQgPSB0aGlzLmdyb3VwZWRSb3dTdGF0ZS5maW5kKHJvdyA9PiByb3dHcm91cC5rZXlzQXNTdHJpbmcgPT09IHJvdy5rZXlzQXNTdHJpbmcgJiYgSlNPTi5zdHJpbmdpZnkocm93R3JvdXAucGFyZW50KSA9PT0gSlNPTi5zdHJpbmdpZnkocm93LnBhcmVudCkpO1xuICAgIGlmIChVdGlsLmlzRGVmaW5lZChzdGF0ZVJvd0dyb3VwZWQpKSB7XG4gICAgICBzdGF0ZVJvd0dyb3VwZWQuZXhwYW5kZWQgPSAhc3RhdGVSb3dHcm91cGVkLmV4cGFuZGVkO1xuICAgIH0gZWxzZSB7XG4gICAgICByb3dHcm91cC5leHBhbmRlZCA9ICFyb3dHcm91cC5leHBhbmRlZDtcbiAgICAgIHRoaXMuZ3JvdXBlZFJvd1N0YXRlLnB1c2gocm93R3JvdXApO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZ2V0VGV4dEdyb3VwUm93KGdyb3VwOiBPVGFibGVHcm91cGVkUm93LCB0b3RhbENvdW50czogbnVtYmVyKSB7XG4gICAgY29uc3QgZmllbGQgPSB0aGlzLnRhYmxlLmdyb3VwZWRDb2x1bW5zQXJyYXlbZ3JvdXAubGV2ZWwgLSAxXTtcbiAgICBsZXQgdmFsdWUgPSBKU09OLnBhcnNlKGdyb3VwLmtleXNBc1N0cmluZylbdGhpcy50YWJsZS5ncm91cGVkQ29sdW1uc0FycmF5W2dyb3VwLmxldmVsIC0gMV1dO1xuXG4gICAgY29uc3Qgb0NvbCA9IHRoaXMudGFibGUuZ2V0T0NvbHVtbihmaWVsZCk7XG5cbiAgICBpZiAoIXZhbHVlICYmIFV0aWwuaXNEZWZpbmVkKG9Db2wucmVuZGVyZXIpICYmICh0aGlzLnRhYmxlIGFzIGFueSkuaXNJbnN0YW5jZU9mT1RhYmxlQ2VsbFJlbmRlcmVyU2VydmljZUNvbXBvbmVudChvQ29sLnJlbmRlcmVyKSkge1xuICAgICAgdmFsdWUgPSAnIC0gJztcbiAgICAgIGlmICghdGhpcy50YWJsZS5vbkRhdGFMb2FkZWRDZWxsUmVuZGVyZXJTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgdGhpcy50YWJsZS5vbkRhdGFMb2FkZWRDZWxsUmVuZGVyZXJTdWJzY3JpcHRpb24gPSAob0NvbC5yZW5kZXJlciBhcyBhbnkpLm9uRGF0YUxvYWRlZC5zdWJzY3JpYmUoeCA9PiB7XG4gICAgICAgICAgdGhpcy51cGRhdGVHcm91cGVkQ29sdW1ucygpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuICh0aGlzLnRhYmxlIGFzIGFueSkudHJhbnNsYXRlU2VydmljZS5nZXQob0NvbC50aXRsZSkgKyAnOiAnICsgdmFsdWUgKyAnICgnICsgdG90YWxDb3VudHMgKyAnKSc7XG4gIH1cblxuICBwcml2YXRlIGdldEV4cGFuc2lvblN0YXRlKHJvdzogT1RhYmxlR3JvdXBlZFJvdyk6IGJvb2xlYW4ge1xuICAgIGxldCBleHBhbnNpb25TdGF0ZSA9ICFwYXJlbnQgfHwgIXRoaXMudGFibGUuY29sbGFwc2VHcm91cGVkQ29sdW1ucztcbiAgICBpZiAocm93LmV4cGFuZFNhbWVMZXZlbCh0aGlzLnRhYmxlLmV4cGFuZEdyb3Vwc1NhbWVMZXZlbCkpIHtcbiAgICAgIGV4cGFuc2lvblN0YXRlID0gdGhpcy5sZXZlbHNFeHBhbnNpb25TdGF0ZS5oYXNPd25Qcm9wZXJ0eShyb3cubGV2ZWwpID8gdGhpcy5sZXZlbHNFeHBhbnNpb25TdGF0ZVtyb3cubGV2ZWxdIDogZXhwYW5zaW9uU3RhdGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHJvd0dyb3VwID0gdGhpcy5ncm91cGVkUm93U3RhdGUuZmluZCh4ID0+IHgua2V5c0FzU3RyaW5nID09PSByb3cua2V5c0FzU3RyaW5nICYmIEpTT04uc3RyaW5naWZ5KHgucGFyZW50KSA9PT0gSlNPTi5zdHJpbmdpZnkocm93LnBhcmVudCkpO1xuICAgICAgZXhwYW5zaW9uU3RhdGUgPSByb3dHcm91cCA/IHJvd0dyb3VwLmV4cGFuZGVkIDogZXhwYW5zaW9uU3RhdGU7XG4gICAgfVxuICAgIHJldHVybiBleHBhbnNpb25TdGF0ZTtcbiAgfVxufVxuXG5cblxuIl19