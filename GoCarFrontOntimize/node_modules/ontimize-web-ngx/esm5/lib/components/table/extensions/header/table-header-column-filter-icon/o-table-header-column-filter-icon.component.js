import { animate, state, style, transition, trigger } from '@angular/animations';
import { ChangeDetectionStrategy, Component, forwardRef, Inject, ViewEncapsulation } from '@angular/core';
import { AnimationDurations } from '@angular/material';
import { BehaviorSubject, Subscription } from 'rxjs';
import { Util } from '../../../../../util/util';
import { OTableComponent } from '../../../o-table.component';
export var DEFAULT_INPUTS_O_TABLE_COLUMN_FILTER_ICON = [
    'column'
];
var OTableHeaderColumnFilterIconComponent = (function () {
    function OTableHeaderColumnFilterIconComponent(table) {
        var _this = this;
        this.table = table;
        this.isColumnFilterActive = new BehaviorSubject(false);
        this.filterIconHintVisible = new BehaviorSubject(false);
        this.indicatorNumber = new BehaviorSubject('');
        this.subscription = new Subscription();
        this.filterIconStateView = new BehaviorSubject('INACTIVE');
        this.subscription.add(this.table.onFilterByColumnChange.subscribe(function () {
            _this.updateStateColumnFilter();
        }));
        this.subscription.add(this.filterIconHintVisible.subscribe(function (value) {
            _this.setFilterIconHintVisible(value);
        }));
    }
    OTableHeaderColumnFilterIconComponent.prototype.ngOnInit = function () {
        this.updateStateColumnFilter();
    };
    OTableHeaderColumnFilterIconComponent.prototype.updateStateColumnFilter = function () {
        this.indicatorNumber.next(this.getFilterIndicatorNumbered());
        this.isColumnFilterActive.next(Util.isDefined(this.getColumnValueFilterByAttr()));
        this.filterIconStateView.next(this.isColumnFilterActive.getValue() ? 'ACTIVE' : 'INACTIVE');
    };
    OTableHeaderColumnFilterIconComponent.prototype.getColumnValueFilterByAttr = function () {
        var _this = this;
        var columnValueFilters = this.table.dataSource.getColumnValueFilters();
        return columnValueFilters.find(function (item) { return item.attr === _this.column.attr; });
    };
    OTableHeaderColumnFilterIconComponent.prototype.openColumnFilterDialog = function (event) {
        this.table.openColumnFilterDialog(this.column, event);
    };
    OTableHeaderColumnFilterIconComponent.prototype.getFilterIndicatorNumbered = function () {
        var _this = this;
        var result = '';
        var columnValueFilters = this.table.dataSource.getColumnValueFilters();
        if (columnValueFilters.length < 2) {
            return result;
        }
        var index = columnValueFilters.findIndex(function (x) { return x.attr === _this.column.attr; });
        if (index > -1) {
            result += index + 1;
        }
        return result;
    };
    OTableHeaderColumnFilterIconComponent.prototype.setFilterIconHintVisible = function (visible) {
        if (this.filterIconStateView.getValue() === 'ACTIVE') {
            return;
        }
        this.filterIconStateView.next(visible ? 'HINT' : 'INACTIVE');
    };
    OTableHeaderColumnFilterIconComponent.prototype.ngOnDestroy = function () {
        this.subscription.unsubscribe();
    };
    OTableHeaderColumnFilterIconComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-table-header-column-filter-icon',
                    inputs: DEFAULT_INPUTS_O_TABLE_COLUMN_FILTER_ICON,
                    template: "<mat-icon class=\"column-filter-icon\" [ngClass]=\"{'column-filter-icon-active':isColumnFilterActive | async}\"\n  (click)=\"openColumnFilterDialog($event)\" [@iconState]=\"filterIconStateView | async\">\n  filter_alt\n</mat-icon>\n<span class=\"o-table-header-indicator-numbered\">\n  {{ indicatorNumber | async }}\n</span>",
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        '[class.o-table-column-filter-icon]': 'true'
                    },
                    animations: [
                        trigger('iconState', [
                            state('ACTIVE, HINT', style({ opacity: 1 })),
                            state('INACTIVE', style({ opacity: 0 })),
                            transition('* <=> HINT', animate(AnimationDurations.ENTERING))
                        ]),
                    ],
                    styles: [".o-table .o-table-container .mat-table .mat-header-cell .o-table-column-filter-icon{display:flex;position:absolute;left:0}.o-table .o-table-container .mat-table .mat-header-cell .o-table-column-filter-icon .o-table-header-indicator-numbered{right:-5px;bottom:-8px}"]
                }] }
    ];
    OTableHeaderColumnFilterIconComponent.ctorParameters = function () { return [
        { type: OTableComponent, decorators: [{ type: Inject, args: [forwardRef(function () { return OTableComponent; }),] }] }
    ]; };
    return OTableHeaderColumnFilterIconComponent;
}());
export { OTableHeaderColumnFilterIconComponent };
//# sourceMappingURL=data:application/json;base64,