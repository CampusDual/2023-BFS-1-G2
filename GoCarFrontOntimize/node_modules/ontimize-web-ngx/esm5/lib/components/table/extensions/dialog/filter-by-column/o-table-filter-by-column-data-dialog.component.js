import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Inject, ViewChild, ViewEncapsulation } from '@angular/core';
import { FormControl } from '@angular/forms';
import { MAT_DIALOG_DATA, MatDialogRef, MatSelectionList } from '@angular/material';
import { BehaviorSubject, fromEvent } from 'rxjs';
import { debounceTime, distinctUntilChanged } from 'rxjs/operators';
import { ColumnValueFilterOperator } from '../../../../../types/table/o-column-value-filter.type';
import { TableFilterByColumnDialogResult } from '../../../../../types/table/o-table-filter-by-column-data.type';
import { Codes } from '../../../../../util';
import { Util } from '../../../../../util/util';
var CUSTOM_FILTERS_OPERATORS = [ColumnValueFilterOperator.LESS_EQUAL, ColumnValueFilterOperator.MORE_EQUAL, ColumnValueFilterOperator.BETWEEN, ColumnValueFilterOperator.EQUAL];
var OTableFilterByColumnDataDialogComponent = (function () {
    function OTableFilterByColumnDataDialogComponent(dialogRef, data) {
        this.dialogRef = dialogRef;
        this.acceptAction = TableFilterByColumnDialogResult.ACCEPT;
        this.cancelAction = TableFilterByColumnDialogResult.CANCEL;
        this.clearAction = TableFilterByColumnDialogResult.CLEAR;
        this.preloadValues = true;
        this.startView = 'month';
        this.onSortFilterValuesChange = new EventEmitter();
        this.isCustomFilterSubject = new BehaviorSubject(false);
        this.isCustomFilter = this.isCustomFilterSubject.asObservable();
        this.isDefaultFilterSubject = new BehaviorSubject(false);
        this.isDefaultFilter = this.isDefaultFilterSubject.asObservable();
        this.fcText = new FormControl();
        this.fcFrom = new FormControl();
        this.fcTo = new FormControl();
        this.columnData = [];
        this.tableData = [];
        this.listDataSubject = new BehaviorSubject([]);
        this._listData = this.listDataSubject.asObservable();
        this.activeSortDirection = '';
        if (data.column) {
            this.column = data.column;
        }
        if (data.mode) {
            this.isDefaultFilterSubject.next(data.mode === 'default');
            this.isCustomFilterSubject.next(data.mode === 'custom');
            this.mode = data.mode;
        }
        var previousFilter = data.previousFilter || {
            attr: undefined,
            operator: undefined,
            rowValue: undefined,
            values: undefined,
            availableValues: undefined
        };
        if (Util.isDefined(previousFilter.operator)) {
            this.isCustomFilterSubject.next(CUSTOM_FILTERS_OPERATORS.indexOf(previousFilter.operator) !== -1);
        }
        if (data.hasOwnProperty('preloadValues')) {
            this.preloadValues = data.preloadValues;
        }
        if (data.activeSortDirection) {
            this.activeSortDirection = data.activeSortDirection;
        }
        if (data.startView) {
            this.startView = data.startView;
        }
        if (data.tableData && Array.isArray(data.tableData)) {
            this.tableData = data.tableData;
            this.getDistinctValues(previousFilter);
            this.initializeCustomFilterValues(previousFilter);
            this.initializeDataList(previousFilter);
        }
    }
    OTableFilterByColumnDataDialogComponent.prototype.ngAfterViewInit = function () {
        this.initializeFilterEvent();
    };
    Object.defineProperty(OTableFilterByColumnDataDialogComponent.prototype, "listData", {
        get: function () {
            return this._listData;
        },
        set: function (arg) {
            this._listData = arg;
        },
        enumerable: true,
        configurable: true
    });
    OTableFilterByColumnDataDialogComponent.prototype.initializeDataList = function (filter) {
        if (this.preloadValues || (filter && filter.operator === ColumnValueFilterOperator.IN)) {
            if (this.activeSortDirection === Codes.ASC_SORT || this.activeSortDirection === Codes.DESC_SORT) {
                this.sortData();
            }
            else {
                this.listDataSubject.next(this.columnData.slice());
            }
        }
    };
    OTableFilterByColumnDataDialogComponent.prototype.initializeFilterEvent = function () {
        var _this = this;
        if (this.filter) {
            fromEvent(this.filter.nativeElement, 'keyup')
                .pipe(debounceTime(150))
                .pipe(distinctUntilChanged())
                .subscribe(function () {
                var filterValue = _this.filter.nativeElement.value;
                filterValue = Util.normalizeString(filterValue);
                if (filterValue.indexOf('*') !== -1) {
                    _this.listDataSubject.next(_this.columnData.filter(function (item) { return new RegExp('^' + Util.normalizeString(filterValue).split('*').join('.*') + '$').test(Util.normalizeString(item.renderedValue)); }));
                }
                else {
                    _this.listDataSubject.next(_this.columnData.filter(function (item) { return (Util.normalizeString(item.renderedValue).indexOf(filterValue) !== -1); }));
                }
            });
        }
    };
    OTableFilterByColumnDataDialogComponent.prototype.initializeCustomFilterValues = function (filter) {
        switch (true) {
            case filter.operator === ColumnValueFilterOperator.EQUAL:
                if (this.isTextType()) {
                    this.fcText.setValue(filter.values);
                }
                break;
            case filter.operator === ColumnValueFilterOperator.BETWEEN:
                this.fcFrom.setValue(this.isDateType() ? new Date(filter.values[0]) : filter.values[0]);
                this.fcTo.setValue(this.isDateType() ? new Date(filter.values[1]) : filter.values[1]);
                break;
            case filter.operator === ColumnValueFilterOperator.MORE_EQUAL:
                this.fcFrom.setValue(this.isDateType() ? new Date(filter.values) : filter.values);
                break;
            case filter.operator === ColumnValueFilterOperator.LESS_EQUAL:
                this.fcTo.setValue(this.isDateType() ? new Date(filter.values) : filter.values);
                break;
            default:
                break;
        }
    };
    Object.defineProperty(OTableFilterByColumnDataDialogComponent.prototype, "selectedValues", {
        get: function () {
            return this.filterValueList ? this.filterValueList.selectedOptions.selected.map(function (selected) { return selected.value; }) : [];
        },
        enumerable: true,
        configurable: true
    });
    OTableFilterByColumnDataDialogComponent.prototype.areAllSelected = function () {
        return this.selectedValues.length === this.columnData.length;
    };
    OTableFilterByColumnDataDialogComponent.prototype.isIndeterminate = function () {
        var selectedValues = this.selectedValues;
        return selectedValues.length > 0 && selectedValues.length !== this.columnData.length;
    };
    OTableFilterByColumnDataDialogComponent.prototype.onSelect = function (event) {
        event.option.value.selected = event.option.selected;
    };
    OTableFilterByColumnDataDialogComponent.prototype.onSelectAllChange = function (event) {
        if (event.checked) {
            this.filterValueList.selectAll();
        }
        else {
            this.filterValueList.deselectAll();
        }
    };
    OTableFilterByColumnDataDialogComponent.prototype.getDistinctValues = function (filter) {
        var _this = this;
        if (Util.isDefined(filter.availableValues)) {
            this.columnData = filter.availableValues;
        }
        else {
            var colRenderedValues = this.getColumnDataUsingRenderer();
            var colValues_1 = this.tableData.map(function (elem) { return elem[_this.column.attr]; });
            colRenderedValues.forEach(function (renderedValue, i) {
                if (!_this.columnData.find(function (item) { return item.renderedValue === renderedValue; })) {
                    _this.columnData.push({
                        renderedValue: renderedValue,
                        value: colValues_1[i],
                        rowValue: _this.tableData[i],
                        selected: filter.operator === ColumnValueFilterOperator.IN && (filter.values || []).indexOf(colValues_1[i]) !== -1,
                        tableIndex: i
                    });
                }
            });
        }
    };
    OTableFilterByColumnDataDialogComponent.prototype.getColumnValuesFilter = function () {
        var filter = {
            attr: this.column.attr,
            operator: undefined,
            values: undefined,
            availableValues: undefined
        };
        if (!this.isCustomFilterSubject.getValue()) {
            var selectedValues = this.selectedValues;
            if (selectedValues.length) {
                filter.operator = ColumnValueFilterOperator.IN;
                filter.values = selectedValues.map(function (item) { return item.value; });
                filter.availableValues = this.columnData;
            }
        }
        else {
            if (this.fcText.value) {
                filter.operator = ColumnValueFilterOperator.EQUAL;
                filter.values = this.getTypedValue(this.fcText);
            }
            if (this.fcFrom.value && this.fcTo.value) {
                filter.operator = ColumnValueFilterOperator.BETWEEN;
                var fromValue = this.getTypedValue(this.fcFrom);
                var toValue = this.getTypedValue(this.fcTo);
                filter.values = fromValue <= toValue ? [fromValue, toValue] : [toValue, fromValue];
            }
            else {
                if (this.fcFrom.value) {
                    filter.operator = ColumnValueFilterOperator.MORE_EQUAL;
                    filter.values = this.getTypedValue(this.fcFrom);
                }
                if (this.fcTo.value) {
                    filter.operator = ColumnValueFilterOperator.LESS_EQUAL;
                    filter.values = this.getTypedValue(this.fcTo);
                }
            }
        }
        return filter;
    };
    OTableFilterByColumnDataDialogComponent.prototype.clearValues = function () {
        if (this.isTextType()) {
            this.fcText.setValue(undefined);
        }
        else if (this.isDateType() || this.isNumericType()) {
            this.fcFrom.setValue(undefined);
            this.fcTo.setValue(undefined);
        }
    };
    OTableFilterByColumnDataDialogComponent.prototype.onClickSortValues = function () {
        switch (this.activeSortDirection) {
            case 'asc':
                this.activeSortDirection = 'desc';
                break;
            case 'desc':
                this.activeSortDirection = '';
                break;
            default:
                this.activeSortDirection = 'asc';
                break;
        }
        this.onSortFilterValuesChange.emit(this.getFilterColumn());
        this.sortData();
    };
    OTableFilterByColumnDataDialogComponent.prototype.sortData = function () {
        var sortedData = Object.assign([], this.columnData);
        if (this.activeSortDirection !== '') {
            this.listDataSubject.next(sortedData.sort(this.sortFunction.bind(this)));
        }
        else {
            this.listDataSubject.next(sortedData);
        }
    };
    OTableFilterByColumnDataDialogComponent.prototype.sortFunction = function (a, b) {
        var _a;
        var propertyA = '';
        var propertyB = '';
        _a = tslib_1.__read([a['value'], b['value']], 2), propertyA = _a[0], propertyB = _a[1];
        var valueA = typeof propertyA === 'undefined' ? '' : propertyA === '' ? propertyA : isNaN(+propertyA) ? propertyA.toString().trim().toLowerCase() : +propertyA;
        var valueB = typeof propertyB === 'undefined' ? '' : propertyB === '' ? propertyB : isNaN(+propertyB) ? propertyB.toString().trim().toLowerCase() : +propertyB;
        return (valueA <= valueB ? -1 : 1) * (this.activeSortDirection === 'asc' ? 1 : -1);
    };
    OTableFilterByColumnDataDialogComponent.prototype.onSlideChange = function (e) {
        var _this = this;
        this.isCustomFilterSubject.next(e.checked);
        if (!e.checked) {
            this.initializeDataList();
            setTimeout(function () {
                _this.initializeFilterEvent();
            }, 0);
        }
    };
    OTableFilterByColumnDataDialogComponent.prototype.isTextType = function () {
        return !this.isNumericType() && !this.isDateType();
    };
    OTableFilterByColumnDataDialogComponent.prototype.isNumericType = function () {
        return ['integer', 'real', 'currency'].indexOf(this.column.type) !== -1;
    };
    OTableFilterByColumnDataDialogComponent.prototype.isDateType = function () {
        return 'date' === this.column.type;
    };
    OTableFilterByColumnDataDialogComponent.prototype.getFixedDimensionClass = function () {
        return this.mode === 'selection' || this.mode === 'default';
    };
    OTableFilterByColumnDataDialogComponent.prototype.getSortByAlphaIcon = function () {
        var icon = 'ontimize:sort_by_alpha';
        if (this.activeSortDirection !== '') {
            icon += '_' + this.activeSortDirection;
        }
        return icon;
    };
    OTableFilterByColumnDataDialogComponent.prototype.getFilterColumn = function () {
        var obj = { attr: '', sort: '', startView: '' };
        obj.attr = this.column.attr;
        obj.sort = this.activeSortDirection;
        obj.startView = this.startView;
        return obj;
    };
    OTableFilterByColumnDataDialogComponent.prototype.getStartedViewDatepicker = function () {
        return this.startView;
    };
    OTableFilterByColumnDataDialogComponent.prototype.getTypedValue = function (control) {
        var value = control.value;
        if (this.isNumericType()) {
            value = control.value;
        }
        if (this.isDateType()) {
            value = control.value.valueOf();
        }
        return value;
    };
    OTableFilterByColumnDataDialogComponent.prototype.getColumnDataUsingRenderer = function () {
        var _this = this;
        var useRenderer = this.column.renderer && this.column.renderer.getCellData;
        return this.tableData.map(function (row) { return useRenderer ? _this.column.renderer.getCellData(row[_this.column.attr], row) : row[_this.column.attr]; });
    };
    OTableFilterByColumnDataDialogComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-table-filter-by-column-data-dialog',
                    template: "<span mat-dialog-title>{{ 'TABLE.BUTTONS.FILTER_BY_COLUMN' | oTranslate }}: {{ column.title | oTranslate }}</span>\n<div mat-dialog-content fxLayout=\"row\" fxLayoutAlign=\"space-between stretch\" class=\"dialog-list-container\">\n  <div fxLayout=\"column\" class=\"content-wrapper\" [class.content-wrapper-fixed-dimension]=\"getFixedDimensionClass()\">\n    <mat-slide-toggle #customFilterSlide (change)=\"onSlideChange($event)\" [checked]=\"(isCustomFilter | async)\" *ngIf=\"isDefaultFilter | async\">\n      {{ 'TABLE.FILTER_BY_COLUMN.CUSTOM_FILTER' | oTranslate }}\n    </mat-slide-toggle>\n    <div fxFlex *ngIf=\"!(isCustomFilter | async);else customFilterTemplate\" fxLayout=\"column\">\n      <mat-form-field class=\"hinted\">\n        <mat-icon matPrefix svgIcon=\"ontimize:search\"></mat-icon>\n        <input matInput #filter placeholder=\"{{ 'TABLE.FILTER' | oTranslate }}\">\n        <mat-hint>{{ 'TABLE.FILTER_BY_COLUMN.HINT_STAR' | oTranslate }}</mat-hint>\n      </mat-form-field>\n      <div *ngIf=\"(listData | async).length > 0; else emptyListData\" fxLayout=\"row\" fxLayoutAlign=\"space-between start\">\n        <div fxLayout=\"row\" fxLayoutAlign=\"start start\">\n          <mat-checkbox (change)=\"onSelectAllChange($event)\" [checked]=\"areAllSelected()\" [indeterminate]=\"isIndeterminate()\" [disabled]=\"!listData\"\n            class=\"select-all-checkbox\">\n            {{ 'TABLE.FILTER_BY_COLUMN.CHECK_ALL' | oTranslate }}\n          </mat-checkbox>\n          <span *ngIf=\"!listData\" class=\"column-filter-empty-list\">\n            {{ 'TABLE.FILTER_BY_COLUMN.LIST_EMPTY_FILTER' | oTranslate }}\n          </span>\n        </div>\n        <button type=\"button\" mat-icon-button (click)=\"onClickSortValues()\">\n          <mat-icon [svgIcon]=\"getSortByAlphaIcon()\"></mat-icon>\n        </button>\n      </div>\n\n      <ng-template #emptyListData>\n        <span class=\"column-filter-empty-list\">\n          {{ 'TABLE.FILTER_BY_COLUMN.LIST_EMPTY' | oTranslate }}\n        </span>\n      </ng-template>\n\n      <mat-selection-list *ngIf=\"preloadValues || listData\" #filterValueList fxFlex fxLayout=\"column\" class=\"select-values-list\"\n        (selectionChange)=\"onSelect($event)\">\n        <mat-list-option *ngFor=\"let record of (listData | async); let i = index\" checkboxPosition=\"before\" [selected]=\"record.selected\"\n          [value]=\"record\">\n          <ng-container *ngIf=\"!column.renderer\">\n            {{ record.value || ('TABLE.FILTER_BY_COLUMN.EMPTY_VALUE' | oTranslate) }}\n          </ng-container>\n          <ng-template *ngIf=\"column.renderer\" [ngTemplateOutlet]=\"column.renderer.templateref\"\n            [ngTemplateOutletContext]=\"{ cellvalue: record.value, rowvalue: record.rowValue }\">\n          </ng-template>\n        </mat-list-option>\n      </mat-selection-list>\n    </div>\n  </div>\n</div>\n\n\n<mat-dialog-actions fxLayoutAlign=\"space-between center\">\n  <button type=\"button\" mat-stroked-button [mat-dialog-close]=\"clearAction\" class=\"o-button-info\">\n    {{ 'TABLE.BUTTONS.FILTER_CLEAR' | oTranslate }} </button>\n  <span align=\"end\">\n    <button type=\"button\" mat-stroked-button [mat-dialog-close]=\"cancelAction\" class=\"o-button-default cancel\">\n      {{ 'CANCEL' | oTranslate }} </button>\n    <button type=\"button\" mat-stroked-button [mat-dialog-close]=\"acceptAction\" class=\"o-button-primary\">\n      {{ 'ACCEPT' | oTranslate }} </button>\n  </span>\n</mat-dialog-actions>\n\n<!-- TEMPLATE CUSTOM FILTER-->\n<ng-template #customFilterTemplate>\n  <div *ngIf=\"isTextType()\">\n    <mat-form-field fxFlex class=\"hinted\">\n      <input matInput #filterText [formControl]=\"fcText\" placeholder=\"{{ 'TABLE.FILTER' | oTranslate }}\">\n      <mat-hint>{{ 'TABLE.FILTER_BY_COLUMN.HINT_STAR' | oTranslate }}</mat-hint>\n      <button type=\"button\" matSuffix mat-icon-button (click)=\"clearValues()\">\n        <mat-icon svgIcon=\"ontimize:close\"></mat-icon>\n      </button>\n    </mat-form-field>\n  </div>\n  <div *ngIf=\"isNumericType()\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\" fxLayoutGap=\"12px\">\n    <mat-form-field>\n      <input matInput [formControl]=\"fcFrom\" placeholder=\"{{ 'TABLE.FILTER_BY_COLUMN.FROM' | oTranslate }}\">\n    </mat-form-field>\n    <mat-form-field>\n      <input matInput [formControl]=\"fcTo\" placeholder=\"{{ 'TABLE.FILTER_BY_COLUMN.TO' | oTranslate }}\">\n    </mat-form-field>\n    <button type=\"button\" mat-icon-button (click)=\"clearValues()\">\n      <mat-icon svgIcon=\"ontimize:close\"></mat-icon>\n    </button>\n  </div>\n  <div *ngIf=\"isDateType()\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\" fxLayoutGap=\"12px\">\n    <mat-form-field>\n      <input matInput [matDatepicker]=\"datepickerFrom\" [max]=\"fcTo.value\" [formControl]=\"fcFrom\"\n        placeholder=\"{{ 'TABLE.FILTER_BY_COLUMN.FROM' | oTranslate }}\">\n      <mat-datepicker-toggle matSuffix [for]=\"datepickerFrom\">\n        <mat-icon matDatepickerToggleIcon>today</mat-icon>\n      </mat-datepicker-toggle>\n      <mat-datepicker #datepickerFrom [startView]=\"getStartedViewDatepicker()\"></mat-datepicker>\n    </mat-form-field>\n    <mat-form-field>\n      <input matInput [matDatepicker]=\"datepickerTo\" [min]=\"fcFrom.value\" [formControl]=\"fcTo\"\n        placeholder=\"{{ 'TABLE.FILTER_BY_COLUMN.TO' | oTranslate }}\">\n      <mat-datepicker-toggle matSuffix [for]=\"datepickerTo\">\n        <mat-icon matDatepickerToggleIcon>today</mat-icon>\n      </mat-datepicker-toggle>\n      <mat-datepicker #datepickerTo [startView]=\"getStartedViewDatepicker()\"></mat-datepicker>\n    </mat-form-field>\n    <button type=\"button\" matSuffix mat-icon-button (click)=\"clearValues()\">\n      <mat-icon svgIcon=\"ontimize:close\"></mat-icon>\n    </button>\n  </div>\n\n</ng-template>\n",
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        '[class.o-filter-by-column-dialog]': 'true'
                    },
                    styles: [".o-filter-by-column-dialog .mat-slide-toggle{padding-bottom:24px}.o-filter-by-column-dialog .content-wrapper{padding:24px 0 12px;margin:0}.o-filter-by-column-dialog .content-wrapper.content-wrapper-fixed-dimension{max-height:430px;min-height:430px;min-width:250px;width:100%}.o-filter-by-column-dialog .content-wrapper .mat-form-field.hinted{margin-bottom:24px}.o-filter-by-column-dialog .content-wrapper .select-all-checkbox{padding-bottom:6px}.o-filter-by-column-dialog .content-wrapper .select-values-list{padding-top:0;overflow-y:auto;overflow-x:hidden;outline:0}.o-filter-by-column-dialog .content-wrapper .select-values-list .mat-list-item{height:30px}.o-filter-by-column-dialog .content-wrapper .select-values-list .mat-list-item .mat-list-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.o-filter-by-column-dialog .content-wrapper .select-values-list .mat-list-item .mat-list-text .mat-icon{font-size:24px}.o-filter-by-column-dialog .content-wrapper .column-filter-empty-list{text-align:center}"]
                }] }
    ];
    OTableFilterByColumnDataDialogComponent.ctorParameters = function () { return [
        { type: MatDialogRef },
        { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
    ]; };
    OTableFilterByColumnDataDialogComponent.propDecorators = {
        filter: [{ type: ViewChild, args: ['filter', { static: false },] }],
        filterValueList: [{ type: ViewChild, args: ['filterValueList', { static: false },] }]
    };
    return OTableFilterByColumnDataDialogComponent;
}());
export { OTableFilterByColumnDataDialogComponent };
//# sourceMappingURL=data:application/json;base64,