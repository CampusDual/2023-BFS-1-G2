import { HttpErrorResponse } from '@angular/common/http';
import { ChangeDetectionStrategy, Component, Inject, Injector, ViewEncapsulation } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';
import { Subscription } from 'rxjs';
import { filter } from 'rxjs/operators';
import { AppConfig } from '../../../../../config/app-config';
import { OntimizeExportServiceProvider } from '../../../../../services/factories';
import { OntimizeExportService } from '../../../../../services/ontimize/ontimize-export.service';
import { SnackBarService } from '../../../../../services/snackbar.service';
import { OTranslateService } from '../../../../../services/translate/o-translate.service';
import { Codes } from '../../../../../util/codes';
import { Util } from '../../../../../util/util';
import { OTableExportButtonService } from '../../export-button/o-table-export-button.service';
import { OTableExportConfiguration } from '../../header/table-menu/o-table-export-configuration.class';
var OTableExportDialogComponent = (function () {
    function OTableExportDialogComponent(dialogRef, injector, config) {
        this.dialogRef = dialogRef;
        this.injector = injector;
        this.config = config;
        this.subscription = new Subscription();
        this.snackBarService = injector.get(SnackBarService);
        this.translateService = this.injector.get(OTranslateService);
        this.oTableExportButtonService = this.injector.get(OTableExportButtonService);
        this.appConfig = this.injector.get(AppConfig);
        if (config && Util.isDefined(config.visibleButtons)) {
            this.visibleButtons = Util.parseArray(config.visibleButtons.toLowerCase(), true);
        }
    }
    OTableExportDialogComponent.prototype.ngOnInit = function () {
        this.initialize();
    };
    OTableExportDialogComponent.prototype.ngOnDestroy = function () {
        this.subscription.unsubscribe();
    };
    OTableExportDialogComponent.prototype.initialize = function () {
        var _this = this;
        this.configureService();
        this.subscription.add(this.oTableExportButtonService.export$.pipe(filter(function (type) { return ['xlsx', 'html', 'pdf'].indexOf(type) === -1; })).subscribe(function (e) { return _this.export(e); }));
    };
    OTableExportDialogComponent.prototype.configureService = function () {
        var loadingService = OntimizeExportService;
        if (this.config.serviceType) {
            loadingService = this.config.serviceType;
        }
        this.exportService = this.injector.get(loadingService);
        var serviceCfg = this.exportService.getDefaultServiceConfiguration(this.config.service);
        this.exportService.configureService(serviceCfg);
    };
    OTableExportDialogComponent.prototype.export = function (exportType, button) {
        var _this = this;
        if (button) {
            button.disabled = true;
        }
        this.dialogRef.close(true);
        this.exportService.exportData(exportType).subscribe(function (res) {
            _this.snackBarService.open('MESSAGES.SUCCESS_EXPORT_TABLE_DATA', { icon: 'check_circle' });
        }, function (err) {
            _this.handleError(err);
        });
    };
    OTableExportDialogComponent.prototype.isButtonVisible = function (btn) {
        var useExportConfiguration3X = this.appConfig.useExportConfiguration();
        var isVisible = true;
        if (this.visibleButtons) {
            isVisible = this.visibleButtons.indexOf(btn) !== -1;
        }
        else {
            if (useExportConfiguration3X) {
                isVisible = Codes.VISIBLE_EXPORT_BUTTONS3X.indexOf(btn) !== -1;
            }
            else {
                isVisible = Codes.VISIBLE_EXPORT_BUTTONS.indexOf(btn) !== -1;
            }
        }
        return isVisible;
    };
    OTableExportDialogComponent.prototype.handleError = function (err) {
        if (err instanceof HttpErrorResponse) {
            this.snackBarService.open(err.message, { icon: 'error' });
        }
        else {
            this.snackBarService.open('MESSAGES.ERROR_EXPORT_TABLE_DATA', { icon: 'error' });
        }
    };
    OTableExportDialogComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-table-export-dialog',
                    template: "<span mat-dialog-title>{{ 'TABLE.BUTTONS.EXPORT' | oTranslate }}</span>\n<mat-dialog-content>\n  <div mat-subheader>{{ 'TABLE.DIALOG.EXPORT.DESCRIPTION' | oTranslate }}</div>\n  <div fxLayout=\"row wrap\" fxLayoutAlign=\"space-around center\" fxLayoutGap=\"8px\">\n    <o-table-export-button #excelButton *ngIf=\"isButtonVisible('xlsx')\" svg-icon=\"ontimize:EXCEL\" label=\"TABLE.BUTTONS.EXCEL\" export-type=\"xlsx\"\n      (onClick)=\"export('xlsx', excelButton)\" class=\"excel-button\"></o-table-export-button>\n    <o-table-export-button #htmlButton *ngIf=\"isButtonVisible('html')\" svg-icon=\"ontimize:HTML\" label=\"TABLE.BUTTONS.HTML\" export-type=\"html\"\n      (onClick)=\"export('html', htmlButton)\" class=\"html-button\"></o-table-export-button>\n    <o-table-export-button #pdfButton *ngIf=\"isButtonVisible('pdf')\" svg-icon=\"ontimize:PDF\" label=\"TABLE.BUTTONS.PDF\" export-type=\"pdf\"\n      (onClick)=\"export('pdf', pdfButton)\" class=\"pdf-button\"></o-table-export-button>\n    <o-table-export-button #csvButton *ngIf=\"isButtonVisible('csv')\" svg-icon=\"ontimize:CSV\" label=\"TABLE.BUTTONS.CSV\" export-type=\"pdf\"\n      (onClick)=\"export('csv', csvButton)\" class=\"pdf-button\"></o-table-export-button>\n    <ng-container *ngTemplateOutlet=\"config.options\"></ng-container>\n  </div>\n</mat-dialog-content>\n\n<mat-dialog-actions fxLayoutAlign=\"end center\">\n  <button type=\"button\" mat-stroked-button [mat-dialog-close]=\"false\" class=\"o-button-default cancel\">{{ 'CANCEL' | oTranslate }}</button>\n</mat-dialog-actions>\n",
                    providers: [
                        OntimizeExportServiceProvider
                    ],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        class: 'o-table-export-dialog'
                    },
                    encapsulation: ViewEncapsulation.None,
                    styles: [".o-table-export-dialog .mat-icon{padding:6px 6px 0;width:48px;height:48px;font-size:48px}.o-table-export-dialog .mat-raised-button{height:initial}.o-table-export-dialog .mat-raised-button .mat-button-wrapper>div{line-height:inherit}"]
                }] }
    ];
    OTableExportDialogComponent.ctorParameters = function () { return [
        { type: MatDialogRef },
        { type: Injector },
        { type: OTableExportConfiguration, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
    ]; };
    return OTableExportDialogComponent;
}());
export { OTableExportDialogComponent };
//# sourceMappingURL=data:application/json;base64,