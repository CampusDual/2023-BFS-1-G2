import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, ContentChild, EventEmitter, Output, TemplateRef, ViewEncapsulation } from '@angular/core';
import { InputConverter } from '../../../../../decorators/input-converter';
export var DEFAULT_OUTPUTS_O_TABLE_ROW_EXPANDABLE = [
    'onExpanded',
    'onCollapsed'
];
export var DEFAULT_INPUTS_O_TABLE_ROW_EXPANDABLE = [
    'iconExpand:icon-expand',
    'iconCollapse:icon-collapse',
    'expandableColumnVisible:expandable-column-visible',
    'multiple'
];
var OTableRowExpandedChange = (function () {
    function OTableRowExpandedChange() {
    }
    return OTableRowExpandedChange;
}());
export { OTableRowExpandedChange };
var OTableRowExpandableComponent = (function () {
    function OTableRowExpandableComponent() {
        this.onExpanded = new EventEmitter();
        this.onCollapsed = new EventEmitter();
        this._iconCollapse = 'remove';
        this._iconExpand = 'add';
        this.expandableColumnVisible = true;
        this.multiple = false;
    }
    Object.defineProperty(OTableRowExpandableComponent.prototype, "iconCollapse", {
        get: function () {
            return this._iconCollapse;
        },
        set: function (value) {
            this._iconCollapse = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableRowExpandableComponent.prototype, "iconExpand", {
        get: function () {
            return this._iconExpand;
        },
        set: function (value) {
            this._iconExpand = value;
        },
        enumerable: true,
        configurable: true
    });
    OTableRowExpandableComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-table-row-expandable',
                    template: ' ',
                    outputs: DEFAULT_OUTPUTS_O_TABLE_ROW_EXPANDABLE,
                    inputs: DEFAULT_INPUTS_O_TABLE_ROW_EXPANDABLE,
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    OTableRowExpandableComponent.propDecorators = {
        templateRef: [{ type: ContentChild, args: [TemplateRef, { static: false },] }],
        onExpanded: [{ type: Output }],
        onCollapsed: [{ type: Output }]
    };
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OTableRowExpandableComponent.prototype, "expandableColumnVisible", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OTableRowExpandableComponent.prototype, "multiple", void 0);
    return OTableRowExpandableComponent;
}());
export { OTableRowExpandableComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby10YWJsZS1yb3ctZXhwYW5kYWJsZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9vbnRpbWl6ZS13ZWItbmd4LyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvdGFibGUvZXh0ZW5zaW9ucy9yb3cvdGFibGUtcm93LWV4cGFuZGFibGUvby10YWJsZS1yb3ctZXhwYW5kYWJsZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULFlBQVksRUFDWixZQUFZLEVBQ1osTUFBTSxFQUNOLFdBQVcsRUFDWCxpQkFBaUIsRUFDbEIsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBRTNFLE1BQU0sQ0FBQyxJQUFNLHNDQUFzQyxHQUFHO0lBQ3BELFlBQVk7SUFDWixhQUFhO0NBQ2QsQ0FBQztBQUVGLE1BQU0sQ0FBQyxJQUFNLHFDQUFxQyxHQUFHO0lBRW5ELHdCQUF3QjtJQUV4Qiw0QkFBNEI7SUFFNUIsbURBQW1EO0lBRW5ELFVBQVU7Q0FDWCxDQUFDO0FBR0Y7SUFBQTtJQUtBLENBQUM7SUFBRCw4QkFBQztBQUFELENBQUMsQUFMRCxJQUtDOztBQUdEO0lBQUE7UUFXWSxlQUFVLEdBQUcsSUFBSSxZQUFZLEVBQTJCLENBQUM7UUFDekQsZ0JBQVcsR0FBRyxJQUFJLFlBQVksRUFBMkIsQ0FBQztRQUM1RCxrQkFBYSxHQUFXLFFBQVEsQ0FBQztRQUNqQyxnQkFBVyxHQUFXLEtBQUssQ0FBQztRQUc3Qiw0QkFBdUIsR0FBWSxJQUFJLENBQUM7UUFHeEMsYUFBUSxHQUFZLEtBQUssQ0FBQztJQWtCbkMsQ0FBQztJQWhCQyxzQkFBSSxzREFBWTthQUloQjtZQUNFLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQztRQUM1QixDQUFDO2FBTkQsVUFBaUIsS0FBYTtZQUM1QixJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztRQUM3QixDQUFDOzs7T0FBQTtJQU1ELHNCQUFJLG9EQUFVO2FBSWQ7WUFDRSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDMUIsQ0FBQzthQU5ELFVBQWUsS0FBYTtZQUMxQixJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztRQUMzQixDQUFDOzs7T0FBQTs7Z0JBaENGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsd0JBQXdCO29CQUNsQyxRQUFRLEVBQUUsR0FBRztvQkFDYixPQUFPLEVBQUUsc0NBQXNDO29CQUMvQyxNQUFNLEVBQUUscUNBQXFDO29CQUM3QyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtvQkFDckMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07aUJBQ2hEOzs7OEJBR0UsWUFBWSxTQUFDLFdBQVcsRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUU7NkJBQzNDLE1BQU07OEJBQ04sTUFBTTs7SUFLUDtRQURDLGNBQWMsRUFBRTs7aUZBQzhCO0lBRy9DO1FBREMsY0FBYyxFQUFFOztrRUFDZ0I7SUFrQm5DLG1DQUFDO0NBQUEsQUF0Q0QsSUFzQ0M7U0E5QlksNEJBQTRCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENvbXBvbmVudCxcbiAgQ29udGVudENoaWxkLFxuICBFdmVudEVtaXR0ZXIsXG4gIE91dHB1dCxcbiAgVGVtcGxhdGVSZWYsXG4gIFZpZXdFbmNhcHN1bGF0aW9uXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBJbnB1dENvbnZlcnRlciB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2RlY29yYXRvcnMvaW5wdXQtY29udmVydGVyJztcblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfT1VUUFVUU19PX1RBQkxFX1JPV19FWFBBTkRBQkxFID0gW1xuICAnb25FeHBhbmRlZCcsXG4gICdvbkNvbGxhcHNlZCdcbl07XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX0lOUFVUU19PX1RBQkxFX1JPV19FWFBBTkRBQkxFID0gW1xuICAvLyBpY29uLWV4cGFuZCA6IEljb24gbmFtZSB0byBleHBhbmQuIERlZmF1bHQ6IGFkZFxuICAnaWNvbkV4cGFuZDppY29uLWV4cGFuZCcsXG4gIC8vIGljb24tY29sbGFwc2UgOiBJY29uIG5hbWUgdG8gZXhwYW5kLiBEZWZhdWx0OnJlbW92ZVxuICAnaWNvbkNvbGxhcHNlOmljb24tY29sbGFwc2UnLFxuICAvLyBJbmRpY2F0ZXMgd2hldGhlciBvciBub3QgdG8gc2hvdyBhIGV4cGFuZGFibGUgY29sdW1uLiBEZWZhdWx0OnRydWVcbiAgJ2V4cGFuZGFibGVDb2x1bW5WaXNpYmxlOmV4cGFuZGFibGUtY29sdW1uLXZpc2libGUnLFxuICAvL1tib29sZWFuXTogbXVsdGlwbGUgcm93IGV4cGFuZGVkIC5EZWZhdWx0OiBuby5cbiAgJ211bHRpcGxlJ1xuXTtcblxuLyoqIENoYW5nZSBldmVudCBvYmplY3QgZW1pdHRlZCBieSBPVGFibGVSb3dFeHBhbmRlZC4gKi9cbmV4cG9ydCBjbGFzcyBPVGFibGVSb3dFeHBhbmRlZENoYW5nZSB7XG4gIC8qKiBUaGUgZGF0YSBmb3Igcm93IGV4cGFuZGFibGUuICovXG4gIGRhdGE6IGFueTtcbiAgLyoqIHJvdyBpbmRleCBmb3Igcm93IGV4cGFuZGFibGUgKi9cbiAgcm93SW5kZXg6IG51bWJlcjtcbn1cblxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdvLXRhYmxlLXJvdy1leHBhbmRhYmxlJyxcbiAgdGVtcGxhdGU6ICcgJyxcbiAgb3V0cHV0czogREVGQVVMVF9PVVRQVVRTX09fVEFCTEVfUk9XX0VYUEFOREFCTEUsXG4gIGlucHV0czogREVGQVVMVF9JTlBVVFNfT19UQUJMRV9ST1dfRVhQQU5EQUJMRSxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgT1RhYmxlUm93RXhwYW5kYWJsZUNvbXBvbmVudCB7XG5cbiAgQENvbnRlbnRDaGlsZChUZW1wbGF0ZVJlZiwgeyBzdGF0aWM6IGZhbHNlIH0pIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICBAT3V0cHV0KCkgb25FeHBhbmRlZCA9IG5ldyBFdmVudEVtaXR0ZXI8T1RhYmxlUm93RXhwYW5kZWRDaGFuZ2U+KCk7XG4gIEBPdXRwdXQoKSBvbkNvbGxhcHNlZCA9IG5ldyBFdmVudEVtaXR0ZXI8T1RhYmxlUm93RXhwYW5kZWRDaGFuZ2U+KCk7XG4gIHByaXZhdGUgX2ljb25Db2xsYXBzZTogc3RyaW5nID0gJ3JlbW92ZSc7XG4gIHByaXZhdGUgX2ljb25FeHBhbmQ6IHN0cmluZyA9ICdhZGQnO1xuXG4gIEBJbnB1dENvbnZlcnRlcigpXG4gIHB1YmxpYyBleHBhbmRhYmxlQ29sdW1uVmlzaWJsZTogYm9vbGVhbiA9IHRydWU7XG5cbiAgQElucHV0Q29udmVydGVyKClcbiAgcHVibGljIG11bHRpcGxlOiBib29sZWFuID0gZmFsc2U7XG5cbiAgc2V0IGljb25Db2xsYXBzZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5faWNvbkNvbGxhcHNlID0gdmFsdWU7XG4gIH1cblxuICBnZXQgaWNvbkNvbGxhcHNlKCkge1xuICAgIHJldHVybiB0aGlzLl9pY29uQ29sbGFwc2U7XG4gIH1cblxuICBzZXQgaWNvbkV4cGFuZCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5faWNvbkV4cGFuZCA9IHZhbHVlO1xuICB9XG5cbiAgZ2V0IGljb25FeHBhbmQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ljb25FeHBhbmQ7XG4gIH1cblxufVxuIl19