import { ChangeDetectionStrategy, Component, ContentChildren, forwardRef, Inject, Injector, QueryList } from '@angular/core';
import { Util } from '../../../../../util/util';
import { OTableComponent } from '../../../o-table.component';
import { OTableColumnsGroupingColumnComponent } from './columns/o-table-columns-grouping-column.component';
export var DEFAULT_INPUTS_O_TABLE_COLUMN_GROUPING = [
    'columns',
    'excludedAggregateColumns: excluded-aggregate-columns'
];
export var DEFAULT_OUTPUTS_O_TABLE_COLUMN_GROUPING = [];
var OTableColumnsGroupingComponent = (function () {
    function OTableColumnsGroupingComponent(injector, table) {
        this.injector = injector;
        this.table = table;
        this._columnsArray = [];
        this._excludedAggregateColumnsArray = [];
    }
    Object.defineProperty(OTableColumnsGroupingComponent.prototype, "columns", {
        set: function (arg) {
            this._columnsArray = Util.parseArray(arg, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableColumnsGroupingComponent.prototype, "columnsArray", {
        get: function () {
            return this._columnsArray;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableColumnsGroupingComponent.prototype, "excludedAggregateColumns", {
        set: function (arg) {
            this._excludedAggregateColumnsArray = Util.parseArray(arg, true);
        },
        enumerable: true,
        configurable: true
    });
    OTableColumnsGroupingComponent.prototype.ngOnInit = function () {
        if (this._columnsArray.length === 0) {
            this._columnsArray = this.table.groupedColumnsArray;
        }
        this.table.setOTableColumnsGrouping(this);
    };
    OTableColumnsGroupingComponent.prototype.useColumnAggregate = function (columnAttr, hasDefaultAggregate) {
        if (this._excludedAggregateColumnsArray.includes(columnAttr)) {
            return false;
        }
        var columnConf = this.getColumnGrouping(columnAttr);
        return hasDefaultAggregate || Util.isDefined(columnConf);
    };
    OTableColumnsGroupingComponent.prototype.getColumnGrouping = function (columnAttr) {
        return this.groupingColumns.find(function (col) { return col.attr === columnAttr; });
    };
    OTableColumnsGroupingComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-table-columns-grouping',
                    template: ' ',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    inputs: DEFAULT_INPUTS_O_TABLE_COLUMN_GROUPING,
                    outputs: DEFAULT_OUTPUTS_O_TABLE_COLUMN_GROUPING
                }] }
    ];
    OTableColumnsGroupingComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: OTableComponent, decorators: [{ type: Inject, args: [forwardRef(function () { return OTableComponent; }),] }] }
    ]; };
    OTableColumnsGroupingComponent.propDecorators = {
        groupingColumns: [{ type: ContentChildren, args: [OTableColumnsGroupingColumnComponent, { descendants: true },] }]
    };
    return OTableColumnsGroupingComponent;
}());
export { OTableColumnsGroupingComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby10YWJsZS1jb2x1bW5zLWdyb3VwaW5nLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL29udGltaXplLXdlYi1uZ3gvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90YWJsZS9leHRlbnNpb25zL2hlYWRlci90YWJsZS1jb2x1bW5zLWdyb3VwaW5nL28tdGFibGUtY29sdW1ucy1ncm91cGluZy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsZUFBZSxFQUNmLFVBQVUsRUFDVixNQUFNLEVBQ04sUUFBUSxFQUVSLFNBQVMsRUFDVixNQUFNLGVBQWUsQ0FBQztBQUd2QixPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDaEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzdELE9BQU8sRUFBRSxvQ0FBb0MsRUFBRSxNQUFNLHFEQUFxRCxDQUFDO0FBRTNHLE1BQU0sQ0FBQyxJQUFNLHNDQUFzQyxHQUFHO0lBRXBELFNBQVM7SUFDVCxzREFBc0Q7Q0FDdkQsQ0FBQztBQUVGLE1BQU0sQ0FBQyxJQUFNLHVDQUF1QyxHQUFHLEVBQ3RELENBQUM7QUFFRjtJQWdCRSx3Q0FDWSxRQUFrQixFQUN5QixLQUFzQjtRQURqRSxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQ3lCLFVBQUssR0FBTCxLQUFLLENBQWlCO1FBUm5FLGtCQUFhLEdBQWEsRUFBRSxDQUFDO1FBQzdCLG1DQUE4QixHQUFhLEVBQUUsQ0FBQztJQVFwRCxDQUFDO0lBR0wsc0JBQUksbURBQU87YUFBWCxVQUFZLEdBQVc7WUFDckIsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNsRCxDQUFDOzs7T0FBQTtJQUVELHNCQUFJLHdEQUFZO2FBQWhCO1lBQ0UsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDO1FBQzVCLENBQUM7OztPQUFBO0lBRUQsc0JBQUksb0VBQXdCO2FBQTVCLFVBQTZCLEdBQVc7WUFDdEMsSUFBSSxDQUFDLDhCQUE4QixHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ25FLENBQUM7OztPQUFBO0lBRUQsaURBQVEsR0FBUjtRQUNFLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ25DLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQztTQUNyRDtRQUNELElBQUksQ0FBQyxLQUFLLENBQUMsd0JBQXdCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVELDJEQUFrQixHQUFsQixVQUFtQixVQUFrQixFQUFFLG1CQUE0QjtRQUNqRSxJQUFJLElBQUksQ0FBQyw4QkFBOEIsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDNUQsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUNELElBQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN0RCxPQUFPLG1CQUFtQixJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDM0QsQ0FBQztJQUVELDBEQUFpQixHQUFqQixVQUFrQixVQUFVO1FBQzFCLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxHQUFHLENBQUMsSUFBSSxLQUFLLFVBQVUsRUFBdkIsQ0FBdUIsQ0FBQyxDQUFDO0lBQ25FLENBQUM7O2dCQW5ERixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLDBCQUEwQjtvQkFDcEMsUUFBUSxFQUFFLEdBQUc7b0JBQ2IsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07b0JBQy9DLE1BQU0sRUFBRSxzQ0FBc0M7b0JBQzlDLE9BQU8sRUFBRSx1Q0FBdUM7aUJBQ2pEOzs7Z0JBekJDLFFBQVE7Z0JBT0QsZUFBZSx1QkE4Qm5CLE1BQU0sU0FBQyxVQUFVLENBQUMsY0FBTSxPQUFBLGVBQWUsRUFBZixDQUFlLENBQUM7OztrQ0FMMUMsZUFBZSxTQUFDLG9DQUFvQyxFQUFFLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRTs7SUF3QzlFLHFDQUFDO0NBQUEsQUFyREQsSUFxREM7U0E3Q1ksOEJBQThCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENvbXBvbmVudCxcbiAgQ29udGVudENoaWxkcmVuLFxuICBmb3J3YXJkUmVmLFxuICBJbmplY3QsXG4gIEluamVjdG9yLFxuICBPbkluaXQsXG4gIFF1ZXJ5TGlzdFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgT1RhYmxlQ29sdW1uc0dyb3VwaW5nIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vaW50ZXJmYWNlcy9vLXRhYmxlLWNvbHVtbnMtZ3JvdXBpbmctaW50ZXJmYWNlJztcbmltcG9ydCB7IFV0aWwgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi91dGlsL3V0aWwnO1xuaW1wb3J0IHsgT1RhYmxlQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vLi4vby10YWJsZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgT1RhYmxlQ29sdW1uc0dyb3VwaW5nQ29sdW1uQ29tcG9uZW50IH0gZnJvbSAnLi9jb2x1bW5zL28tdGFibGUtY29sdW1ucy1ncm91cGluZy1jb2x1bW4uY29tcG9uZW50JztcblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfSU5QVVRTX09fVEFCTEVfQ09MVU1OX0dST1VQSU5HID0gW1xuICAvLyBjb2x1bW5zIFtzdHJpbmddOiBjb2x1bW5zIHRoYXQgbWlnaHQgYmUgZmlsdGVyZWQsIHNlcGFyYXRlZCBieSAnOycuIERlZmF1bHQ6IGFsbCB2aXNpYmxlIGNvbHVtbnMuXG4gICdjb2x1bW5zJyxcbiAgJ2V4Y2x1ZGVkQWdncmVnYXRlQ29sdW1uczogZXhjbHVkZWQtYWdncmVnYXRlLWNvbHVtbnMnXG5dO1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9PVVRQVVRTX09fVEFCTEVfQ09MVU1OX0dST1VQSU5HID0gW1xuXTtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnby10YWJsZS1jb2x1bW5zLWdyb3VwaW5nJyxcbiAgdGVtcGxhdGU6ICcgJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIGlucHV0czogREVGQVVMVF9JTlBVVFNfT19UQUJMRV9DT0xVTU5fR1JPVVBJTkcsXG4gIG91dHB1dHM6IERFRkFVTFRfT1VUUFVUU19PX1RBQkxFX0NPTFVNTl9HUk9VUElOR1xufSlcblxuZXhwb3J0IGNsYXNzIE9UYWJsZUNvbHVtbnNHcm91cGluZ0NvbXBvbmVudCBpbXBsZW1lbnRzIE9UYWJsZUNvbHVtbnNHcm91cGluZywgT25Jbml0IHtcblxuICBwcm90ZWN0ZWQgX2NvbHVtbnNBcnJheTogc3RyaW5nW10gPSBbXTtcbiAgcHJvdGVjdGVkIF9leGNsdWRlZEFnZ3JlZ2F0ZUNvbHVtbnNBcnJheTogc3RyaW5nW10gPSBbXTtcblxuICBAQ29udGVudENoaWxkcmVuKE9UYWJsZUNvbHVtbnNHcm91cGluZ0NvbHVtbkNvbXBvbmVudCwgeyBkZXNjZW5kYW50czogdHJ1ZSB9KVxuICBncm91cGluZ0NvbHVtbnM6IFF1ZXJ5TGlzdDxPVGFibGVDb2x1bW5zR3JvdXBpbmdDb2x1bW5Db21wb25lbnQ+O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCBpbmplY3RvcjogSW5qZWN0b3IsXG4gICAgQEluamVjdChmb3J3YXJkUmVmKCgpID0+IE9UYWJsZUNvbXBvbmVudCkpIHByb3RlY3RlZCB0YWJsZTogT1RhYmxlQ29tcG9uZW50XG4gICkgeyB9XG5cblxuICBzZXQgY29sdW1ucyhhcmc6IHN0cmluZykge1xuICAgIHRoaXMuX2NvbHVtbnNBcnJheSA9IFV0aWwucGFyc2VBcnJheShhcmcsIHRydWUpO1xuICB9XG5cbiAgZ2V0IGNvbHVtbnNBcnJheSgpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbHVtbnNBcnJheTtcbiAgfVxuXG4gIHNldCBleGNsdWRlZEFnZ3JlZ2F0ZUNvbHVtbnMoYXJnOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9leGNsdWRlZEFnZ3JlZ2F0ZUNvbHVtbnNBcnJheSA9IFV0aWwucGFyc2VBcnJheShhcmcsIHRydWUpO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgaWYgKHRoaXMuX2NvbHVtbnNBcnJheS5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMuX2NvbHVtbnNBcnJheSA9IHRoaXMudGFibGUuZ3JvdXBlZENvbHVtbnNBcnJheTtcbiAgICB9XG4gICAgdGhpcy50YWJsZS5zZXRPVGFibGVDb2x1bW5zR3JvdXBpbmcodGhpcyk7XG4gIH1cblxuICB1c2VDb2x1bW5BZ2dyZWdhdGUoY29sdW1uQXR0cjogc3RyaW5nLCBoYXNEZWZhdWx0QWdncmVnYXRlOiBib29sZWFuKTogYm9vbGVhbiB7XG4gICAgaWYgKHRoaXMuX2V4Y2x1ZGVkQWdncmVnYXRlQ29sdW1uc0FycmF5LmluY2x1ZGVzKGNvbHVtbkF0dHIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IGNvbHVtbkNvbmYgPSB0aGlzLmdldENvbHVtbkdyb3VwaW5nKGNvbHVtbkF0dHIpO1xuICAgIHJldHVybiBoYXNEZWZhdWx0QWdncmVnYXRlIHx8IFV0aWwuaXNEZWZpbmVkKGNvbHVtbkNvbmYpO1xuICB9XG5cbiAgZ2V0Q29sdW1uR3JvdXBpbmcoY29sdW1uQXR0cikge1xuICAgIHJldHVybiB0aGlzLmdyb3VwaW5nQ29sdW1ucy5maW5kKGNvbCA9PiBjb2wuYXR0ciA9PT0gY29sdW1uQXR0cik7XG4gIH1cblxufVxuIl19