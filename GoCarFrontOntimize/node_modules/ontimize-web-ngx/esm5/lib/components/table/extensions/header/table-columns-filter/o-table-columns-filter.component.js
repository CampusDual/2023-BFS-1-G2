import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, ContentChildren, forwardRef, Inject, Injector, QueryList } from '@angular/core';
import { InputConverter } from '../../../../../decorators/input-converter';
import { Codes } from '../../../../../util/codes';
import { Util } from '../../../../../util/util';
import { OTableComponent } from '../../../o-table.component';
import { OTableColumnsFilterColumnComponent } from './columns/o-table-columns-filter-column.component';
export var DEFAULT_INPUTS_O_TABLE_COLUMN_FILTER = [
    'columns',
    'preloadValues: preload-values',
    'mode'
];
export var DEFAULT_OUTPUTS_O_TABLE_COLUMN_FILTER = [];
var OTableColumnsFilterComponent = (function () {
    function OTableColumnsFilterComponent(injector, table) {
        this.injector = injector;
        this.table = table;
        this._mode = 'default';
        this.preloadValues = true;
        this._columnsArray = [];
        this.columnsComparisonProperty = {};
    }
    Object.defineProperty(OTableColumnsFilterComponent.prototype, "mode", {
        get: function () {
            return this._mode;
        },
        set: function (val) {
            var m = OTableColumnsFilterComponent.OTableColumnsFilterModes.find(function (e) { return e === val; });
            if (Util.isDefined(m)) {
                this._mode = m;
            }
            else {
                console.error('Invalid `o-table-columns-filter` mode (' + val + ')');
            }
        },
        enumerable: true,
        configurable: true
    });
    OTableColumnsFilterComponent.prototype.ngOnInit = function () {
        if (this.columnsArray.length === 0) {
            this.columnsArray = this.table.oTableOptions.visibleColumns;
        }
        var self = this;
        var columns = Util.parseArray(this._columns, true);
        columns.forEach(function (colData, i, arr) {
            var colDef = colData.split(Codes.TYPE_SEPARATOR);
            var colName = colDef[0];
            var compType = (colDef[1] || '').toUpperCase();
            if ([OTableColumnsFilterComponent.DEFAULT_COMPARISON_TYPE, OTableColumnsFilterComponent.MODEL_COMPARISON_TYPE].indexOf(compType) === -1) {
                compType = OTableColumnsFilterComponent.DEFAULT_COMPARISON_TYPE;
            }
            arr[i] = colName;
            self.columnsComparisonProperty[colName] = compType;
        });
        this.table.setOTableColumnsFilter(this);
    };
    OTableColumnsFilterComponent.prototype.ngAfterContentInit = function () {
        if (Util.isDefined(this.filterColumns)) {
            this.columnsArray = this.columnsArray.concat(this.parseFilterColumns(this.filterColumns));
        }
    };
    OTableColumnsFilterComponent.prototype.isColumnFilterable = function (attr) {
        return Util.isDefined(this.columnsArray.find(function (x) { return x.attr === attr; }));
    };
    OTableColumnsFilterComponent.prototype.getSortValueOfFilterColumn = function (attr) {
        var sortValue = '';
        if (Util.isDefined(this.columnsArray)) {
            this.columnsArray.forEach(function (column) {
                if (column.attr == attr) {
                    sortValue = column.sort;
                }
            });
        }
        return sortValue;
    };
    OTableColumnsFilterComponent.prototype.getStartViewValueOfFilterColumn = function (attr) {
        var startView = '';
        if (Util.isDefined(this.columnsArray)) {
            this.columnsArray.forEach(function (column) {
                if (column.attr == attr) {
                    startView = column.startView;
                }
            });
        }
        return startView;
    };
    OTableColumnsFilterComponent.prototype.getColumnComparisonValue = function (column, val) {
        if (!column || this.columnsComparisonProperty[column.attr] === OTableColumnsFilterComponent.MODEL_COMPARISON_TYPE) {
            return val;
        }
        else {
            return column.renderer ? column.renderer.getCellData(val) : val;
        }
    };
    Object.defineProperty(OTableColumnsFilterComponent.prototype, "columns", {
        set: function (arg) {
            this._columns = arg;
            this._columnsArray = this.parseColumns(this._columns);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableColumnsFilterComponent.prototype, "columnsArray", {
        get: function () {
            return this._columnsArray;
        },
        set: function (arg) {
            this._columnsArray = arg;
        },
        enumerable: true,
        configurable: true
    });
    OTableColumnsFilterComponent.prototype.parseColumns = function (columns) {
        return columns.split(';')
            .map(function (x) {
            var obj = { attr: '', sort: '', startView: '' };
            obj.attr = x;
            obj.sort = '';
            obj.startView = '';
            return obj;
        });
    };
    OTableColumnsFilterComponent.prototype.parseFilterColumns = function (columns) {
        return columns
            .map(function (x) {
            var obj = { attr: '', sort: '', startView: '' };
            obj.attr = x.attr;
            obj.sort = x.sort;
            obj.startView = x.startView;
            return obj;
        });
    };
    OTableColumnsFilterComponent.DEFAULT_COMPARISON_TYPE = 'VIEW';
    OTableColumnsFilterComponent.MODEL_COMPARISON_TYPE = 'MODEL';
    OTableColumnsFilterComponent.OTableColumnsFilterModes = ['default', 'selection', 'custom'];
    OTableColumnsFilterComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-table-columns-filter',
                    template: ' ',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    inputs: DEFAULT_INPUTS_O_TABLE_COLUMN_FILTER,
                    outputs: DEFAULT_OUTPUTS_O_TABLE_COLUMN_FILTER
                }] }
    ];
    OTableColumnsFilterComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: OTableComponent, decorators: [{ type: Inject, args: [forwardRef(function () { return OTableComponent; }),] }] }
    ]; };
    OTableColumnsFilterComponent.propDecorators = {
        filterColumns: [{ type: ContentChildren, args: [OTableColumnsFilterColumnComponent, { descendants: true },] }]
    };
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OTableColumnsFilterComponent.prototype, "preloadValues", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], OTableColumnsFilterComponent.prototype, "mode", null);
    return OTableColumnsFilterComponent;
}());
export { OTableColumnsFilterComponent };
//# sourceMappingURL=data:application/json;base64,