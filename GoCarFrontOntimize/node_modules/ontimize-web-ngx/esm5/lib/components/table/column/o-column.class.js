import { BehaviorSubject } from 'rxjs';
import { Codes, Util } from '../../../util';
var OColumn = (function () {
    function OColumn() {
        this._editing = false;
        this.multilineSubject = new BehaviorSubject(this.multiline);
        this.isMultiline = this.multilineSubject.asObservable();
    }
    Object.defineProperty(OColumn.prototype, "editing", {
        get: function () {
            return this._editing;
        },
        set: function (val) {
            if (this.type === 'boolean' && this.editor && this.editor.autoCommit) {
                this._editing = false;
            }
            this._editing = this.editor != null && val;
            this.editor.setEditingRowClass(this._editing);
        },
        enumerable: true,
        configurable: true
    });
    OColumn.prototype.setDefaultProperties = function (args) {
        this.type = 'string';
        this.className = 'o-column-' + (this.type) + ' ';
        this.orderable = args.orderable;
        this.resizable = args.resizable;
        this.groupable = args.groupable;
        this.searchable = true;
        this.searching = true;
        this.name = this.attr;
        this.title = this.attr;
        this.multiline = false;
    };
    OColumn.prototype.setColumnProperties = function (column) {
        this.title = Util.isDefined(column.title) ? column.title : column.attr;
        this.definition = column;
        this.multiline = column.multiline;
        if (Util.isDefined(column.minWidth)) {
            this.minWidth = column.minWidth;
        }
        if (Util.isDefined(column.maxWidth)) {
            this.maxWidth = column.maxWidth;
        }
        if (Util.isDefined(column.orderable)) {
            this.orderable = column.orderable;
        }
        if (Util.isDefined(column.resizable)) {
            this.resizable = column.resizable;
        }
        if (Util.isDefined(column.searchable)) {
            this.searchable = column.searchable;
        }
        if (Util.isDefined(column.groupable)) {
            this.groupable = column.groupable;
        }
        if (Util.isDefined(column.renderer)) {
            this.renderer = column.renderer;
        }
        if (Util.isDefined(column.editor)) {
            this.editor = column.editor;
        }
        if (Util.isDefined(column.type)) {
            this.type = column.type;
            this.className = 'o-column-' + (this.type) + ' ';
        }
        if (Util.isDefined(column.getSQLType)) {
            this.sqlType = column.getSQLType();
        }
        if (Util.isDefined(column.class)) {
            this.className = Util.isDefined(this.className) ? (this.className + ' ' + column.class) : column.class;
        }
        if (Util.isDefined(column.operation) || Util.isDefined(column.functionOperation)) {
            this.calculate = column.operation ? column.operation : column.functionOperation;
        }
        if (Util.isDefined(column.tooltip) && column.tooltip) {
            this.tooltip = {
                value: column.tooltipValue,
                function: column.tooltipFunction
            };
        }
        if (Util.isDefined(column.filterExpressionFunction)) {
            this.filterExpressionFunction = column.filterExpressionFunction;
        }
    };
    Object.defineProperty(OColumn.prototype, "searchable", {
        get: function () {
            return this._searchable;
        },
        set: function (val) {
            this._searchable = val;
            this.searching = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OColumn.prototype, "multiline", {
        get: function () {
            return this._multiline;
        },
        set: function (val) {
            val = Util.parseBoolean(String(val));
            this._multiline = val;
            this.multilineSubject.next(this._multiline);
        },
        enumerable: true,
        configurable: true
    });
    OColumn.prototype.hasTooltip = function () {
        return Util.isDefined(this.tooltip);
    };
    OColumn.prototype.getTooltip = function (rowData) {
        if (!this.hasTooltip()) {
            return undefined;
        }
        var tooltip;
        if (Util.isDefined(this.tooltip.value)) {
            tooltip = this.tooltip.value;
        }
        else if (Util.isDefined(this.tooltip.function)) {
            try {
                tooltip = this.tooltip.function(rowData);
            }
            catch (e) {
                console.warn('o-table-column tooltip-function didnt worked');
            }
        }
        else {
            tooltip = Util.isDefined(this.renderer) ? this.renderer.getTooltip(rowData[this.name], rowData) : rowData[this.name];
        }
        return tooltip;
    };
    OColumn.prototype.getMinWidth = function () {
        if (Util.isDefined(this.width)) {
            return this.width;
        }
        return this.minWidth;
    };
    OColumn.prototype.getMinWidthValue = function () {
        return Util.extractPixelsValue(this.minWidth, Codes.DEFAULT_COLUMN_MIN_WIDTH);
    };
    OColumn.prototype.getMaxWidthValue = function () {
        var value = Util.extractPixelsValue(this.maxWidth);
        return value ? value : undefined;
    };
    OColumn.prototype.setRenderWidth = function (horizontalScrolled, clientWidth) {
        if (Util.isDefined(this.width)) {
            return;
        }
        var defaultWidth = (horizontalScrolled) ? undefined : 'auto';
        this.width = Util.isDefined(this.DOMWidth) ? (this.getDOMWidth(clientWidth) + 'px') : defaultWidth;
    };
    OColumn.prototype.getDOMWidth = function (val) {
        var DOMWidth;
        var pxVal = Util.extractPixelsValue(val);
        if (Util.isDefined(pxVal)) {
            DOMWidth = pxVal;
            var minValue = this.getMinWidthValue();
            if (Util.isDefined(minValue) && pxVal > 0 && pxVal < minValue) {
                DOMWidth = minValue;
            }
            if (Util.isDefined(this.maxWidth)) {
                var maxValue = Util.extractPixelsValue(this.maxWidth);
                if (Util.isDefined(maxValue) && pxVal > maxValue) {
                    DOMWidth = maxValue;
                }
            }
        }
        return DOMWidth;
    };
    Object.defineProperty(OColumn.prototype, "width", {
        get: function () {
            return this._width;
        },
        set: function (val) {
            var widthVal = val;
            var DOMWidth = this.getDOMWidth(val);
            var pxVal = Util.extractPixelsValue(DOMWidth);
            if (Util.isDefined(pxVal)) {
                this.DOMWidth = pxVal;
                widthVal = pxVal + 'px';
            }
            this._width = widthVal;
        },
        enumerable: true,
        configurable: true
    });
    OColumn.prototype.getWidthToStore = function () {
        return this._width;
    };
    OColumn.prototype.setWidth = function (val) {
        this.width = val + 'px';
        this.DOMWidth = val;
    };
    OColumn.prototype.getTitleAlignClass = function () {
        if (Util.isDefined(this.definition)) {
            return this.definition.titleAlign || Codes.COLUMN_TITLE_ALIGN_CENTER;
        }
        return Codes.COLUMN_TITLE_ALIGN_CENTER;
    };
    OColumn.prototype.getFilterValue = function (cellValue, rowValue) {
        if (this.renderer) {
            return this.renderer.getFilter(cellValue, rowValue);
        }
        else {
            return [cellValue];
        }
    };
    OColumn.prototype.useCustomFilterFunction = function () {
        return this.searching && this.visible && this.renderer != null && this.renderer.filterFunction != null;
    };
    OColumn.prototype.useQuickfilterFunction = function () {
        return this.searching && this.visible && !(this.renderer != null && this.renderer.filterFunction != null);
    };
    return OColumn;
}());
export { OColumn };
//# sourceMappingURL=data:application/json;base64,