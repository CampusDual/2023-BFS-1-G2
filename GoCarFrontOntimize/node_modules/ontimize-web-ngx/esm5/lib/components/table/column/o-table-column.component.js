import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, ComponentFactoryResolver, EventEmitter, forwardRef, Inject, Injector, ViewChild, ViewContainerRef } from '@angular/core';
import { Subscription } from 'rxjs';
import { InputConverter } from '../../../decorators/input-converter';
import { Codes } from '../../../util/codes';
import { SQLTypes } from '../../../util/sqltypes';
import { Util } from '../../../util/util';
import { OTableComponent } from '../o-table.component';
import { editorsMapping, O_TABLE_CELL_EDITORS_INPUTS, O_TABLE_CELL_EDITORS_OUTPUTS } from './cell-editor/cell-editor';
import { O_TABLE_CELL_RENDERERS_INPUTS, O_TABLE_CELL_RENDERERS_OUTPUTS, renderersMapping } from './cell-renderer/cell-renderer';
export var DEFAULT_INPUTS_O_TABLE_COLUMN = tslib_1.__spread([
    'attr',
    'title',
    'titleAlign: title-align',
    'contentAlign: content-align',
    'orderable',
    'searchable',
    'groupable',
    'type',
    'editable',
    'width',
    'minWidth: min-width',
    'maxWidth: max-width',
    'asyncLoad : async-load',
    'sqlType: sql-type',
    'tooltip',
    'tooltipValue: tooltip-value',
    'tooltipFunction: tooltip-function',
    'multiline',
    'resizable',
    'filterExpressionFunction: filter-expression-function',
    'class',
    'angularValidatorsFn: validators'
], O_TABLE_CELL_RENDERERS_INPUTS, O_TABLE_CELL_EDITORS_INPUTS);
export var DEFAULT_OUTPUTS_O_TABLE_COLUMN = tslib_1.__spread(O_TABLE_CELL_RENDERERS_OUTPUTS, O_TABLE_CELL_EDITORS_OUTPUTS);
var OTableColumnComponent = (function () {
    function OTableColumnComponent(table, resolver, injector) {
        this.table = table;
        this.resolver = resolver;
        this.injector = injector;
        this._defaultSQLTypeKey = 'OTHER';
        this._searchable = true;
        this.editable = false;
        this.tooltip = false;
        this._multiline = false;
        this.angularValidatorsFn = [];
        this._filterSource = 'render';
        this.grouping = true;
        this.thousandSeparator = ',';
        this.decimalSeparator = '.';
        this.renderType = 'string';
        this.booleanType = 'boolean';
        this.queryMethod = Codes.QUERY_METHOD;
        this.translate = false;
        this.oDateFormat = 'L';
        this.oHourFormat = 24;
        this.valueBase = 1;
        this.orequired = false;
        this.showPlaceHolder = false;
        this.updateRecordOnEdit = true;
        this.showNotificationOnEdit = false;
        this.oStartView = 'month';
        this.oTouchUi = false;
        this.dateValueType = 'timestamp';
        this.minDecimalDigits = 2;
        this.maxDecimalDigits = 2;
        this.indeterminateOnNull = false;
        this.onClick = new EventEmitter();
        this.editionStarted = new EventEmitter();
        this.editionCancelled = new EventEmitter();
        this.editionCommitted = new EventEmitter();
        this.onPostUpdateRecord = new EventEmitter();
        this.asyncLoad = false;
        this.subscriptions = new Subscription();
    }
    Object.defineProperty(OTableColumnComponent.prototype, "multiline", {
        get: function () {
            return this._multiline;
        },
        set: function (val) {
            val = Util.parseBoolean(String(val));
            this._multiline = val;
        },
        enumerable: true,
        configurable: true
    });
    OTableColumnComponent.addEditor = function (type, editorClassReference) {
        if (!editorsMapping.hasOwnProperty(type) && Util.isDefined(editorClassReference)) {
            editorsMapping[type] = editorClassReference;
        }
    };
    OTableColumnComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.grouping = Util.parseBoolean(this.grouping, true);
        this.titleAlign = this.parseTitleAlign();
        this.table.registerColumn(this);
        this.subscriptions.add(this.table.onReinitialize.subscribe(function () { return _this.table.registerColumn(_this); }));
    };
    OTableColumnComponent.prototype.ngAfterViewInit = function () {
        this.createRenderer();
        this.createEditor();
    };
    OTableColumnComponent.prototype.ngOnDestroy = function () {
        this.subscriptions.unsubscribe();
    };
    OTableColumnComponent.prototype.parseTitleAlign = function () {
        var align = (this.titleAlign || '').toLowerCase();
        return Codes.AVAILABLE_COLUMN_TITLE_ALIGNS.indexOf(align) !== -1 ? align : undefined;
    };
    Object.defineProperty(OTableColumnComponent.prototype, "originalWidth", {
        get: function () {
            var originalWidth = this.width;
            var pxVal = Util.extractPixelsValue(originalWidth);
            if (Util.isDefined(pxVal)) {
                originalWidth = pxVal + '';
            }
            return originalWidth;
        },
        enumerable: true,
        configurable: true
    });
    OTableColumnComponent.prototype.createRenderer = function () {
        if (!Util.isDefined(this.renderer) && Util.isDefined(this.type)) {
            var componentRef = renderersMapping[this.type];
            if (componentRef !== undefined) {
                var factory = this.resolver.resolveComponentFactory(componentRef);
                if (factory) {
                    var ref = this.container.createComponent(factory);
                    var newRenderer = ref.instance;
                    newRenderer.filterSource = this.filterSource;
                    newRenderer.filterFunction = this.filterFunction;
                    switch (this.type) {
                        case 'currency':
                            newRenderer.currencySymbol = this.currencySymbol;
                            newRenderer.currencySymbolPosition = this.currencySymbolPosition;
                            newRenderer.decimalSeparator = this.decimalSeparator;
                            newRenderer.minDecimalDigits = this.minDecimalDigits;
                            newRenderer.maxDecimalDigits = this.maxDecimalDigits;
                            newRenderer.grouping = this.grouping;
                            newRenderer.thousandSeparator = this.thousandSeparator;
                            break;
                        case 'date':
                            newRenderer.format = this.format;
                            break;
                        case 'time':
                            newRenderer.format = this.format;
                            break;
                        case 'integer':
                            newRenderer.grouping = this.grouping;
                            newRenderer.thousandSeparator = this.thousandSeparator;
                            break;
                        case 'boolean':
                            newRenderer.trueValue = this.trueValue;
                            newRenderer.falseValue = this.falseValue;
                            newRenderer.renderTrueValue = this.renderTrueValue;
                            newRenderer.renderFalseValue = this.renderFalseValue;
                            newRenderer.renderType = this.renderType;
                            newRenderer.booleanType = this.booleanType;
                            break;
                        case 'percentage':
                            newRenderer.valueBase = this.valueBase;
                        case 'real':
                            newRenderer.decimalSeparator = this.decimalSeparator;
                            newRenderer.minDecimalDigits = this.minDecimalDigits;
                            newRenderer.maxDecimalDigits = this.maxDecimalDigits;
                            newRenderer.grouping = this.grouping;
                            newRenderer.thousandSeparator = this.thousandSeparator;
                            break;
                        case 'image':
                            newRenderer.imageType = this.imageType;
                            newRenderer.avatar = this.avatar;
                            newRenderer.emptyImage = this.emptyImage;
                            break;
                        case 'action':
                            newRenderer.icon = this.icon;
                            newRenderer.action = this.action;
                            newRenderer.text = this.text;
                            newRenderer.iconPosition = this.iconPosition;
                            newRenderer.onClick = this.onClick;
                            break;
                        case 'service':
                            newRenderer.entity = this.entity;
                            newRenderer.service = this.service;
                            newRenderer.columns = this.columns;
                            newRenderer.valueColumn = this.valueColumn;
                            newRenderer.parentKeys = this.parentKeys;
                            newRenderer.queryMethod = this.queryMethod;
                            newRenderer.serviceType = this.serviceType;
                            newRenderer.translate = this.translate;
                            break;
                        case 'translate':
                            newRenderer.translateArgsFn = this.translateArgsFn;
                            break;
                    }
                    this.registerRenderer(newRenderer);
                }
            }
        }
    };
    OTableColumnComponent.prototype.buildCellEditor = function (type, resolver, container, propsOrigin, registerInColumn) {
        if (registerInColumn === void 0) { registerInColumn = true; }
        var editor;
        var componentRef = editorsMapping[type] || editorsMapping.text;
        if (componentRef === undefined) {
            return editor;
        }
        var factory = resolver.resolveComponentFactory(componentRef);
        if (factory) {
            var ref = container.createComponent(factory);
            editor = ref.instance;
            if (propsOrigin !== undefined) {
                switch (type) {
                    case 'date':
                        editor.format = propsOrigin.format;
                        editor.locale = propsOrigin.locale;
                        editor.oStartView = propsOrigin.oStartView;
                        editor.oMinDate = propsOrigin.oMinDate;
                        editor.oMaxDate = propsOrigin.oMaxDate;
                        editor.oTouchUi = propsOrigin.oTouchUi;
                        editor.oStartAt = propsOrigin.oStartAt;
                        editor.filterDate = propsOrigin.filterDate;
                        editor.dateValueType = propsOrigin.dateValueType;
                        break;
                    case 'time':
                        editor.oDateFormat = propsOrigin.oDateFormat;
                        editor.oHourFormat = propsOrigin.oHourFormat;
                        editor.oDateLocale = propsOrigin.oDateLocale;
                        editor.oMinDate = propsOrigin.oMinDate;
                        editor.oMaxDate = propsOrigin.oMaxDate;
                        editor.oTouchUi = propsOrigin.oTouchUi;
                        editor.oDateStartAt = propsOrigin.oDateStartAt;
                        editor.oDateTextInputEnabled = propsOrigin.oDateTextInputEnabled;
                        editor.oHourMin = propsOrigin.oHourMin;
                        editor.oHourMax = propsOrigin.oHourMax;
                        editor.oHourTextInputEnabled = propsOrigin.oHourTextInputEnabled;
                        editor.oHourPlaceholder = propsOrigin.oHourPlaceholder;
                        editor.oDatePlaceholder = propsOrigin.oDatePlaceholder;
                        break;
                    case 'boolean':
                        editor.booleanType = propsOrigin.booleanType;
                        editor.indeterminateOnNull = propsOrigin.indeterminateOnNull;
                        editor.autoCommit = propsOrigin.autoCommit;
                        editor.trueValue = propsOrigin.trueValue;
                        editor.falseValue = propsOrigin.falseValue;
                        break;
                    case 'integer':
                    case 'percentage':
                    case 'currency':
                    case 'real':
                        editor.min = propsOrigin.min;
                        editor.max = propsOrigin.max;
                        editor.step = Util.isDefined(propsOrigin.step) ? propsOrigin.step : editor.step;
                        break;
                    case 'image':
                        break;
                    default:
                        break;
                }
                editor.olabel = propsOrigin.olabel;
                editor.type = propsOrigin.type;
            }
            editor.registerInColumn = registerInColumn;
        }
        return editor;
    };
    OTableColumnComponent.prototype.createEditor = function () {
        if (!Util.isDefined(this.editor) && this.editable) {
            var newEditor = this.buildCellEditor(this.type, this.resolver, this.container, this);
            if (newEditor) {
                newEditor.orequired = this.orequired;
                newEditor.showPlaceHolder = this.showPlaceHolder;
                newEditor.updateRecordOnEdit = this.updateRecordOnEdit;
                newEditor.showNotificationOnEdit = this.showNotificationOnEdit;
                newEditor.editionStarted = this.editionStarted;
                newEditor.editionCancelled = this.editionCancelled;
                newEditor.editionCommitted = this.editionCommitted;
                newEditor.onPostUpdateRecord = this.onPostUpdateRecord;
                this.registerEditor(newEditor);
            }
        }
    };
    OTableColumnComponent.prototype.registerRenderer = function (renderer) {
        this.renderer = renderer;
        var oCol = this.table.getOColumn(this.attr);
        if (oCol !== undefined) {
            oCol.renderer = this.renderer;
        }
        this.renderer.initialize();
    };
    OTableColumnComponent.prototype.registerEditor = function (editor) {
        this.editor = editor;
        var oCol = this.table.getOColumn(this.attr);
        if (oCol !== undefined) {
            oCol.editor = this.editor;
        }
        this.editor.initialize();
    };
    Object.defineProperty(OTableColumnComponent.prototype, "orderable", {
        get: function () {
            return this._orderable;
        },
        set: function (val) {
            this._orderable = typeof val === 'boolean' ? val : Util.parseBoolean(val, true);
            var oCol = this.table.getOColumn(this.attr);
            if (oCol) {
                oCol.orderable = this._orderable;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableColumnComponent.prototype, "resizable", {
        get: function () {
            return this._resizable;
        },
        set: function (val) {
            this._resizable = typeof val === 'boolean' ? val : Util.parseBoolean(val, true);
            var oCol = this.table.getOColumn(this.attr);
            if (oCol) {
                oCol.resizable = this._resizable;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableColumnComponent.prototype, "searchable", {
        get: function () {
            return this._searchable;
        },
        set: function (val) {
            this._searchable = typeof val === 'boolean' ? val : Util.parseBoolean(val, true);
            var oCol = this.table.getOColumn(this.attr);
            if (oCol) {
                oCol.searchable = this._searchable;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableColumnComponent.prototype, "groupable", {
        get: function () {
            return this._groupable;
        },
        set: function (val) {
            this._groupable = typeof val === 'boolean' ? val : Util.parseBoolean(val, true);
            var oCol = this.table.getOColumn(this.attr);
            if (oCol) {
                oCol.groupable = this._groupable;
            }
        },
        enumerable: true,
        configurable: true
    });
    OTableColumnComponent.prototype.getSQLType = function () {
        if (!(this.sqlType && this.sqlType.length > 0)) {
            switch (this.type) {
                case 'date':
                    this.sqlType = 'TIMESTAMP';
                    break;
                case 'integer':
                    this.sqlType = 'INTEGER';
                    break;
                case 'boolean':
                    this.sqlType = 'BOOLEAN';
                    break;
                case 'real':
                case 'percentage':
                case 'currency':
                    this.sqlType = 'DOUBLE';
                    break;
            }
        }
        var sqlt = this.sqlType && this.sqlType.length > 0 ? this.sqlType : this._defaultSQLTypeKey;
        this._SQLType = SQLTypes.getSQLTypeValue(sqlt);
        return this._SQLType;
    };
    Object.defineProperty(OTableColumnComponent.prototype, "filterSource", {
        get: function () {
            return this._filterSource;
        },
        set: function (val) {
            var lowerVal = (val || '').toLowerCase();
            this._filterSource = (lowerVal === 'render' || lowerVal === 'data' || lowerVal === 'both') ? lowerVal : 'render';
        },
        enumerable: true,
        configurable: true
    });
    OTableColumnComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-table-column',
                    template: "<span #container>\n</span>",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    inputs: DEFAULT_INPUTS_O_TABLE_COLUMN,
                    outputs: DEFAULT_OUTPUTS_O_TABLE_COLUMN,
                    styles: [""]
                }] }
    ];
    OTableColumnComponent.ctorParameters = function () { return [
        { type: OTableComponent, decorators: [{ type: Inject, args: [forwardRef(function () { return OTableComponent; }),] }] },
        { type: ComponentFactoryResolver },
        { type: Injector }
    ]; };
    OTableColumnComponent.propDecorators = {
        container: [{ type: ViewChild, args: ['container', { read: ViewContainerRef, static: true },] }]
    };
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OTableColumnComponent.prototype, "editable", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OTableColumnComponent.prototype, "tooltip", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OTableColumnComponent.prototype, "translate", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OTableColumnComponent.prototype, "orequired", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OTableColumnComponent.prototype, "showPlaceHolder", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OTableColumnComponent.prototype, "updateRecordOnEdit", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OTableColumnComponent.prototype, "showNotificationOnEdit", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OTableColumnComponent.prototype, "oTouchUi", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Number)
    ], OTableColumnComponent.prototype, "min", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Number)
    ], OTableColumnComponent.prototype, "max", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Number)
    ], OTableColumnComponent.prototype, "step", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Number)
    ], OTableColumnComponent.prototype, "minDecimalDigits", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Number)
    ], OTableColumnComponent.prototype, "maxDecimalDigits", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OTableColumnComponent.prototype, "indeterminateOnNull", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OTableColumnComponent.prototype, "autoCommit", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OTableColumnComponent.prototype, "asyncLoad", void 0);
    return OTableColumnComponent;
}());
export { OTableColumnComponent };
//# sourceMappingURL=data:application/json;base64,