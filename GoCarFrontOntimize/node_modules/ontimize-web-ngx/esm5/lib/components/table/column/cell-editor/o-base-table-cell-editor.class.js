import * as tslib_1 from "tslib";
import { ContentChildren, EventEmitter, HostListener, QueryList, Renderer2, ViewChild } from '@angular/core';
import { FormControl, FormGroup, Validators } from '@angular/forms';
import { InputConverter } from '../../../../decorators/input-converter';
import { SnackBarService } from '../../../../services/snackbar.service';
import { OTranslateService } from '../../../../services/translate/o-translate.service';
import { OValidatorComponent } from '../../../../shared/components/validation/o-validator.component';
import { ObservableWrapper } from '../../../../util/async';
import { Util } from '../../../../util/util';
import { OTableColumnComponent } from '../o-table-column.component';
export var DEFAULT_INPUTS_O_TABLE_CELL_EDITOR = [
    'orequired: required',
    'showPlaceHolder: show-placeholder',
    'olabel: label',
    'updateRecordOnEdit: update-record-on-edit',
    'showNotificationOnEdit: show-notification-on-edit',
    'enabled'
];
export var DEFAULT_OUTPUTS_O_TABLE_CELL_EDITOR = [
    'editionStarted',
    'editionCancelled',
    'editionCommitted',
    'onPostUpdateRecord'
];
var OBaseTableCellEditor = (function () {
    function OBaseTableCellEditor(injector) {
        this.injector = injector;
        this.orequired = false;
        this.showPlaceHolder = false;
        this.updateRecordOnEdit = true;
        this.showNotificationOnEdit = true;
        this._enabled = true;
        this.formGroup = new FormGroup({});
        this.editionStarted = new EventEmitter();
        this.editionCancelled = new EventEmitter();
        this.editionCommitted = new EventEmitter();
        this.onPostUpdateRecord = new EventEmitter();
        this.editorCreated = new EventEmitter();
        this.registerInColumn = true;
        this.errorsData = [];
        this.snackBarService = this.injector.get(SnackBarService);
        this.tableColumn = this.injector.get(OTableColumnComponent);
        this.translateService = this.injector.get(OTranslateService);
        this.cellEditorId = Util.randomNumber().toString(36);
        this.renderer = this.injector.get(Renderer2);
    }
    OBaseTableCellEditor.prototype.onDocumentKeyup = function (event) {
        this.handleKeyup(event);
    };
    OBaseTableCellEditor.prototype.ngOnInit = function () {
        this.initialize();
    };
    OBaseTableCellEditor.prototype.ngOnChanges = function () {
        this.updateValidators();
    };
    OBaseTableCellEditor.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (this.validatorChildren) {
            this.validatorsSubscription = this.validatorChildren.changes.subscribe(function () {
                _this.updateValidators();
            });
            if (this.validatorChildren.length > 0) {
                this.updateValidators();
            }
        }
    };
    OBaseTableCellEditor.prototype.initialize = function () {
        this.createFormControl();
        this.registerEditor();
        this.editorCreated.emit(this);
    };
    OBaseTableCellEditor.prototype.handleKeyup = function (event) {
        var oColumn = this.table.getOColumn(this.tableColumnAttr);
        if (!oColumn || !oColumn.editing) {
            return;
        }
        var escClicked = this.checkKey(event, 'Escape', 27);
        var enterClicked = this.checkKey(event, 'Enter', 13);
        var tabClicked = this.checkKey(event, 'Tab', 9);
        if (!escClicked && !enterClicked && !tabClicked) {
            return;
        }
        if (escClicked) {
            this.onEscClicked();
            return;
        }
        if (this.table.editingCell && !this.table.editingCell.contains(event.target)) {
            return;
        }
        if (enterClicked || tabClicked) {
            this.commitEdition();
        }
    };
    OBaseTableCellEditor.prototype.checkKey = function (event, key, keyCode) {
        return (event.key && event.key === key) || (event.keyCode && event.keyCode === keyCode);
    };
    OBaseTableCellEditor.prototype.createFormControl = function () {
        if (!this.formControl) {
            var validators = this.resolveValidators();
            var cfg = {
                value: undefined,
                disabled: !this.enabled
            };
            this.formControl = new FormControl(cfg, validators);
        }
        if (!Util.isDefined(this.formGroup.get(this.cellEditorId))) {
            this.formGroup.addControl(this.cellEditorId, this.formControl);
        }
    };
    OBaseTableCellEditor.prototype.registerEditor = function () {
        if (this.registerInColumn && !Util.isDefined(this.tableColumn.editor)) {
            this.tableColumn.registerEditor(this);
            if (!Util.isDefined(this.type) && Util.isDefined(this.tableColumn.type)) {
                this.type = this.tableColumn.type;
            }
        }
    };
    OBaseTableCellEditor.prototype.getCellData = function () {
        return this._rowData[this.tableColumnAttr];
    };
    OBaseTableCellEditor.prototype.startEdition = function (data) {
        this.formGroup.reset();
        this.rowData = data;
        if (!this.isSilentControl()) {
            this.editionStarted.emit(this._rowData);
        }
        this.table.cd.detectChanges();
        var inputEl = document.getElementById(this.cellEditorId);
        if (inputEl) {
            inputEl.select();
        }
        this.setEditingRowClass(true);
    };
    OBaseTableCellEditor.prototype.endEdition = function (saveChanges) {
        var _this = this;
        var oColumn = this.table.getOColumn(this.tableColumnAttr);
        if (oColumn) {
            var updateObserver = this.table.updateCellData(oColumn, this._rowData, saveChanges);
            if (updateObserver) {
                updateObserver.subscribe(function (res) {
                    _this.onUpdateSuccess(res);
                    _this.table.daoTable.setDataArray(_this.table.daoTable.data);
                }, function (error) {
                    _this._rowData[_this.tableColumnAttr] = _this.oldValue;
                    _this.table.dataSource.updateRenderedRowData(_this._rowData);
                    _this.table.showDialogError(error, 'MESSAGES.ERROR_UPDATE');
                    _this.table.cd.detectChanges();
                });
            }
            else {
                this.table.cd.detectChanges();
            }
        }
    };
    OBaseTableCellEditor.prototype.commitEdition = function () {
        if (!this.formControl.invalid) {
            this.oldValue = this._rowData[this.tableColumnAttr];
            this._rowData[this.tableColumnAttr] = this.formControl.value;
            if (!this.isSilentControl()) {
                this.endEdition(true);
                this.editionCommitted.emit(this._rowData);
            }
        }
    };
    Object.defineProperty(OBaseTableCellEditor.prototype, "tableColumn", {
        get: function () {
            return this._tableColumn;
        },
        set: function (arg) {
            this._tableColumn = arg;
            if (arg) {
                this._table = arg.table;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OBaseTableCellEditor.prototype, "tableColumnAttr", {
        get: function () {
            if (this._tableColumn) {
                return this._tableColumn.attr;
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OBaseTableCellEditor.prototype, "table", {
        get: function () {
            return this._table;
        },
        set: function (arg) {
            this._table = arg;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OBaseTableCellEditor.prototype, "rowData", {
        get: function () {
            return this._rowData;
        },
        set: function (arg) {
            this._rowData = arg;
            var cellData = this.getCellData();
            this.formControl.setValue(cellData);
            this.formControl.markAsTouched();
        },
        enumerable: true,
        configurable: true
    });
    OBaseTableCellEditor.prototype.resolveValidators = function () {
        var validators = [];
        if (this.tableColumn.angularValidatorsFn) {
            this.tableColumn.angularValidatorsFn.forEach(function (fn) {
                validators.push(fn);
            });
        }
        if (this.orequired) {
            validators.push(Validators.required);
        }
        return validators;
    };
    OBaseTableCellEditor.prototype.getActiveOErrors = function () {
        return this.formControl.errors ? Object.keys(this.formControl.errors) : [];
    };
    OBaseTableCellEditor.prototype.getErrorText = function (oError) {
        if (this.tableColumn && this.tableColumn.editor && this.tableColumn.editor.errorsData) {
            var error = this.tableColumn.editor.errorsData.find(function (item) { return item.name === oError; });
            return error ? error.text : '';
        }
        else {
            return '';
        }
    };
    OBaseTableCellEditor.prototype.updateValidators = function () {
        var _this = this;
        if (!this.formControl) {
            return;
        }
        this.formControl.clearValidators();
        var validators = this.resolveValidators();
        if (this.validatorChildren) {
            this.validatorChildren.forEach(function (oValidator) {
                var _a;
                var validatorFunction = oValidator.getValidatorFn();
                if (validatorFunction) {
                    validators.push(validatorFunction);
                }
                var errorsData = oValidator.getErrorsData();
                (_a = _this.errorsData).push.apply(_a, tslib_1.__spread(errorsData));
            });
        }
        this.formControl.setValidators(validators);
    };
    OBaseTableCellEditor.prototype.hasError = function (error) {
        return this.formControl && this.formControl.touched && (this.hasErrorExclusive(error) || this.formControl.hasError(error));
    };
    OBaseTableCellEditor.prototype.hasErrorExclusive = function (error) {
        var hasError = false;
        var errorsOrder = ['matDatepickerMax', 'matDatepickerMin', 'matDatepickerFilter', 'matDatepickerParse', 'required'];
        var errors = this.formControl.errors;
        if (Util.isDefined(errors)) {
            if (Object.keys(errors).length === 1) {
                return errors.hasOwnProperty(error);
            }
            else {
                for (var i = 0, len = errorsOrder.length; i < len; i++) {
                    hasError = errors.hasOwnProperty(errorsOrder[i]);
                    if (hasError) {
                        hasError = (errorsOrder[i] === error);
                        break;
                    }
                }
            }
        }
        return hasError;
    };
    OBaseTableCellEditor.prototype.getErrorValue = function (error, prop) {
        return this.formControl.hasError(error) ? this.formControl.getError(error)[prop] || '' : '';
    };
    OBaseTableCellEditor.prototype.onEscClicked = function () {
        if (!this.isSilentControl()) {
            this.endEdition(false);
            this.editionCancelled.emit(this._rowData);
        }
    };
    OBaseTableCellEditor.prototype.isSilentControl = function () {
        return this.controlArgs !== undefined && this.controlArgs.silent;
    };
    OBaseTableCellEditor.prototype.getPlaceholder = function () {
        return this.showPlaceHolder ?
            this.translateService.get(this.olabel || this.tableColumn ? (this.tableColumn.title || this.tableColumnAttr) : this.tableColumnAttr) :
            undefined;
    };
    OBaseTableCellEditor.prototype.onUpdateSuccess = function (res) {
        ObservableWrapper.callEmit(this.onPostUpdateRecord, this._rowData);
        if (this.showNotificationOnEdit) {
            this.snackBarService.open('MESSAGES.UPDATED', { icon: 'check_circle' });
        }
    };
    Object.defineProperty(OBaseTableCellEditor.prototype, "enabled", {
        get: function () {
            return this._enabled;
        },
        set: function (arg) {
            this._enabled = arg;
            if (this.formControl) {
                this._enabled ? this.formControl.enable() : this.formControl.disable();
            }
        },
        enumerable: true,
        configurable: true
    });
    OBaseTableCellEditor.prototype.getFormControl = function () {
        return this.formControl;
    };
    OBaseTableCellEditor.prototype.setEditingRowClass = function (addClass) {
        var inputEl = document.getElementById(this.cellEditorId);
        if (inputEl) {
            var tableRowEl = inputEl.closest('tr');
            if (tableRowEl) {
                addClass ? this.renderer.addClass(tableRowEl, 'o-table-editing-row') :
                    this.renderer.removeClass(tableRowEl, 'o-table-editing-row');
                this.table.cd.detectChanges();
            }
        }
    };
    OBaseTableCellEditor.propDecorators = {
        inputRef: [{ type: ViewChild, args: ['input', { static: false },] }],
        validatorChildren: [{ type: ContentChildren, args: [OValidatorComponent,] }],
        onDocumentKeyup: [{ type: HostListener, args: ['document:keyup', ['$event'],] }]
    };
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OBaseTableCellEditor.prototype, "orequired", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OBaseTableCellEditor.prototype, "showPlaceHolder", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OBaseTableCellEditor.prototype, "updateRecordOnEdit", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OBaseTableCellEditor.prototype, "showNotificationOnEdit", void 0);
    return OBaseTableCellEditor;
}());
export { OBaseTableCellEditor };
//# sourceMappingURL=data:application/json;base64,