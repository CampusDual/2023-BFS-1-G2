import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, EventEmitter, Injector, TemplateRef, ViewChild } from '@angular/core';
import { Observable, Subscription } from 'rxjs';
import { InputConverter } from '../../../../../decorators/input-converter';
import { OTranslatePipe } from '../../../../../pipes/o-translate.pipe';
import { DialogService } from '../../../../../services/dialog.service';
import { OntimizeServiceProvider } from '../../../../../services/factories';
import { OntimizeService } from '../../../../../services/ontimize/ontimize.service';
import { Codes } from '../../../../../util/codes';
import { FilterExpressionUtils } from '../../../../../util/filter-expression.utils';
import { ServiceUtils } from '../../../../../util/service.utils';
import { SQLTypes } from '../../../../../util/sqltypes';
import { Util } from '../../../../../util/util';
import { DEFAULT_INPUTS_O_BASE_TABLE_CELL_RENDERER, OBaseTableCellRenderer } from '../o-base-table-cell-renderer.class';
export var DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_SERVICE = tslib_1.__spread(DEFAULT_INPUTS_O_BASE_TABLE_CELL_RENDERER, [
    'entity',
    'service',
    'columns',
    'translate',
    'valueColumn: value-column',
    'valueColumnType: value-column-type',
    'parentKeys: parent-keys',
    'queryMethod: query-method',
    'serviceType : service-type',
    'translateArgsFn: translate-params'
]);
export var DEFAULT_OUTPUTS_O_TABLE_CELL_RENDERER_SERVICE = [
    'onDataLoaded'
];
var OTableCellRendererServiceComponent = (function (_super) {
    tslib_1.__extends(OTableCellRendererServiceComponent, _super);
    function OTableCellRendererServiceComponent(injector) {
        var _this = _super.call(this, injector) || this;
        _this.injector = injector;
        _this.cellValues = [];
        _this.responseMap = {};
        _this.translate = false;
        _this.valueColumnType = Codes.TYPE_INT;
        _this.queryMethod = Codes.QUERY_METHOD;
        _this.onDataLoaded = new EventEmitter();
        _this.colArray = [];
        _this._pKeysEquiv = {};
        _this.pipeArguments = {};
        _this.subscritpions = new Subscription();
        _this.tableColumn.type = 'service';
        _this.dialogService = injector.get(DialogService);
        _this.setComponentPipe();
        return _this;
    }
    OTableCellRendererServiceComponent.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        if (this.table) {
            var oCol = this.table.getOColumn(this.column);
            oCol.definition.contentAlign = oCol.definition.contentAlign ? oCol.definition.contentAlign : 'center';
        }
        this.colArray = Util.parseArray(this.columns, true);
        var pkArray = Util.parseArray(this.parentKeys);
        this._pKeysEquiv = Util.parseParentKeysEquivalences(pkArray);
        this.configureService();
    };
    OTableCellRendererServiceComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        var oCol = this.table.getOColumn(this.column);
        if (Util.isDefined(oCol.editor)) {
            this.subscritpions.add(oCol.editor.onPostUpdateRecord.subscribe(function (data) {
                _this.queryData(data[_this.tableColumn.attr], data);
            }));
        }
    };
    OTableCellRendererServiceComponent.prototype.ngOnDestroy = function () {
        if (this.subscritpions) {
            this.subscritpions.unsubscribe();
        }
    };
    OTableCellRendererServiceComponent.prototype.getDescriptionValue = function (cellvalue, rowValue) {
        if (Util.isDefined(cellvalue) && this.cellValues.indexOf(cellvalue) === -1) {
            this.queryData(cellvalue, rowValue);
            this.cellValues.push(cellvalue);
        }
        return '';
    };
    OTableCellRendererServiceComponent.prototype.queryData = function (cellvalue, parentItem) {
        var _this = this;
        if (!this.dataService || !(this.queryMethod in this.dataService) || !this.entity) {
            console.warn('Service not properly configured! aborting query');
            return;
        }
        var filter = ServiceUtils.getFilterUsingParentKeys(parentItem, this._pKeysEquiv);
        var tableColAlias = Object.keys(this._pKeysEquiv).find(function (key) { return _this._pKeysEquiv[key] === _this.column; });
        if (Util.isDefined(tableColAlias)) {
            if (!filter[tableColAlias]) {
                filter[tableColAlias] = cellvalue;
            }
        }
        else {
            filter[this.column] = cellvalue;
        }
        var sqlTypes = this.getSqlTypesForFilter(filter);
        this.dataService[this.queryMethod](filter, this.colArray, this.entity, sqlTypes)
            .subscribe(function (resp) {
            if (resp.isSuccessful()) {
                _this.responseMap[cellvalue] = resp.data[0][_this.valueColumn];
                _this.onDataLoaded.emit(_this.responseMap[cellvalue]);
            }
        }, function (err) {
            console.error(err);
            if (err && typeof err !== 'object') {
                _this.dialogService.alert('ERROR', err);
            }
            else {
                _this.dialogService.alert('ERROR', 'MESSAGES.ERROR_QUERY');
            }
        });
    };
    OTableCellRendererServiceComponent.prototype.getSqlTypesForFilter = function (filter) {
        var _this = this;
        var sqlType = {};
        var tableSqlTypes = this.table.getSqlTypes();
        Object.keys(filter).forEach(function (filterKey) {
            var pKeyEquiv = Object.keys(_this._pKeysEquiv).find(function (keyEquiv) { return keyEquiv === filterKey; });
            var keyEquiv = Util.isDefined(pKeyEquiv) ? _this._pKeysEquiv[pKeyEquiv] : filterKey;
            sqlType[filterKey] = tableSqlTypes[keyEquiv];
        });
        return sqlType;
    };
    OTableCellRendererServiceComponent.prototype.configureService = function () {
        var configureServiceArgs = { injector: this.injector, baseService: OntimizeService, entity: this.entity, service: this.service, serviceType: this.serviceType };
        this.dataService = Util.configureService(configureServiceArgs);
    };
    OTableCellRendererServiceComponent.prototype.getCellData = function (cellvalue, rowvalue) {
        return this.responseMap[cellvalue];
    };
    OTableCellRendererServiceComponent.prototype.getFilterExpression = function (quickFilter) {
        var _this = this;
        var oCol = this.table.getOColumn(this.column);
        var result;
        var cacheValue = Object.keys(this.responseMap).find(function (key) { return Util.normalizeString(_this.responseMap[key]).indexOf(Util.normalizeString(quickFilter)) !== -1; });
        if (cacheValue) {
            cacheValue = this.parseByValueColumnType(cacheValue);
            result = FilterExpressionUtils.buildExpressionEquals(this.column, SQLTypes.parseUsingSQLType(cacheValue, SQLTypes.getSQLTypeKey(oCol.sqlType)));
        }
        return result;
    };
    OTableCellRendererServiceComponent.prototype.setComponentPipe = function () {
        this.componentPipe = new OTranslatePipe(this.injector);
    };
    OTableCellRendererServiceComponent.prototype.responseValue = function (cellvalue, rowvalue) {
        if (this.translate) {
            this.pipeArguments = this.translateArgsFn ? { values: this.translateArgsFn(rowvalue) } : {};
            return _super.prototype.getCellData.call(this, cellvalue, rowvalue);
        }
        else {
            return cellvalue;
        }
    };
    OTableCellRendererServiceComponent.prototype.parseByValueColumnType = function (val) {
        var value = val;
        if (this.valueColumnType === Codes.TYPE_INT) {
            var parsed = parseInt(value, 10);
            if (!isNaN(parsed)) {
                value = parsed;
            }
        }
        return value;
    };
    OTableCellRendererServiceComponent.prototype.queryAllData = function () {
        var _this = this;
        return new Observable(function (observer) {
            if (!_this.dataService || !(_this.queryMethod in _this.dataService) || !_this.entity) {
                console.warn('Service not properly configured! aborting query');
                observer.next();
            }
            _this.dataService[_this.queryMethod]({}, _this.colArray, _this.entity)
                .subscribe(function (resp) {
                if (resp.isSuccessful()) {
                    (resp.data || []).forEach(function (item) {
                        if (Util.isDefined(item[_this.column])) {
                            _this.cellValues.push(item[_this.column]);
                            _this.responseMap[item[_this.column]] = item[_this.valueColumn];
                        }
                    });
                    _this.onDataLoaded.emit(_this.responseMap);
                }
                observer.next();
            }, function (err) {
                console.error(err);
                observer.next();
            });
        });
    };
    OTableCellRendererServiceComponent.DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_SERVICE = DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_SERVICE;
    OTableCellRendererServiceComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-table-cell-renderer-service',
                    template: "<ng-template #templateref let-cellvalue=\"cellvalue\" let-rowvalue=\"rowvalue\">\n  {{ getDescriptionValue(cellvalue, rowvalue) }}{{ responseValue(responseMap[cellvalue]) }}\n</ng-template>\n",
                    inputs: DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_SERVICE,
                    outputs: DEFAULT_OUTPUTS_O_TABLE_CELL_RENDERER_SERVICE,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        OntimizeServiceProvider
                    ]
                }] }
    ];
    OTableCellRendererServiceComponent.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    OTableCellRendererServiceComponent.propDecorators = {
        templateref: [{ type: ViewChild, args: ['templateref', { read: TemplateRef, static: true },] }]
    };
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OTableCellRendererServiceComponent.prototype, "translate", void 0);
    return OTableCellRendererServiceComponent;
}(OBaseTableCellRenderer));
export { OTableCellRendererServiceComponent };
//# sourceMappingURL=data:application/json;base64,