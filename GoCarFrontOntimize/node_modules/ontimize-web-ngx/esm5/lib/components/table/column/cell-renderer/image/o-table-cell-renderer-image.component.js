import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, Injector, TemplateRef, ViewChild } from '@angular/core';
import { Util } from '../../../../../util/util';
import { DEFAULT_INPUTS_O_BASE_TABLE_CELL_RENDERER, OBaseTableCellRenderer } from '../o-base-table-cell-renderer.class';
export var DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_IMAGE = tslib_1.__spread(DEFAULT_INPUTS_O_BASE_TABLE_CELL_RENDERER, [
    'imageType: image-type',
    'emptyImage: empty-image',
    'avatar'
]);
export var DEFAULT_OUTPUTS_O_TABLE_CELL_RENDERER_IMAGE = [
    'onClick'
];
var OTableCellRendererImageComponent = (function (_super) {
    tslib_1.__extends(OTableCellRendererImageComponent, _super);
    function OTableCellRendererImageComponent(injector) {
        var _this = _super.call(this, injector) || this;
        _this.injector = injector;
        _this.tableColumn.type = 'image';
        _this.tableColumn.orderable = false;
        _this.tableColumn.searchable = false;
        _this.tableColumn.groupable = false;
        return _this;
    }
    OTableCellRendererImageComponent.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        if (this.table) {
            var oCol = this.table.getOColumn(this.tableColumn.attr);
            oCol.title = Util.isDefined(this.tableColumn.title) ? this.tableColumn.title : undefined;
            oCol.definition.contentAlign = oCol.definition.contentAlign ? oCol.definition.contentAlign : 'center';
        }
    };
    OTableCellRendererImageComponent.prototype.getSource = function (cellData) {
        this._source = '';
        switch (this.imageType) {
            case 'base64':
                this._source = cellData ? ('data:image/png;base64,' + ((typeof (cellData.bytes) !== 'undefined') ? cellData.bytes : cellData)) : this.emptyImage;
                break;
            case 'url':
                this._source = cellData ? cellData : this.emptyImage;
                break;
            default:
                this._source = this.emptyImage;
                break;
        }
        return this._source;
    };
    OTableCellRendererImageComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-table-cell-renderer-image',
                    template: "<ng-template #templateref let-cellvalue=\"cellvalue\">\n  <div [ngClass]=\"{'image-avatar':avatar,'image-plain':!avatar} \">\n    <img [src]=\"getSource(cellvalue)\" alt=\"renderer cell image\">\n  </div>\n</ng-template>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    inputs: DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_IMAGE
                }] }
    ];
    OTableCellRendererImageComponent.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    OTableCellRendererImageComponent.propDecorators = {
        templateref: [{ type: ViewChild, args: ['templateref', { read: TemplateRef, static: true },] }]
    };
    return OTableCellRendererImageComponent;
}(OBaseTableCellRenderer));
export { OTableCellRendererImageComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby10YWJsZS1jZWxsLXJlbmRlcmVyLWltYWdlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL29udGltaXplLXdlYi1uZ3gvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90YWJsZS9jb2x1bW4vY2VsbC1yZW5kZXJlci9pbWFnZS9vLXRhYmxlLWNlbGwtcmVuZGVyZXItaW1hZ2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBVSxXQUFXLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTdHLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUVoRCxPQUFPLEVBQUUseUNBQXlDLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUV4SCxNQUFNLENBQUMsSUFBTSwwQ0FBMEMsb0JBQ2xELHlDQUF5QztJQUU1Qyx1QkFBdUI7SUFFdkIseUJBQXlCO0lBRXpCLFFBQVE7RUFDVCxDQUFDO0FBRUYsTUFBTSxDQUFDLElBQU0sMkNBQTJDLEdBQUc7SUFDekQsU0FBUztDQUNWLENBQUM7QUFFRjtJQU1zRCw0REFBc0I7SUFRMUUsMENBQXNCLFFBQWtCO1FBQXhDLFlBQ0Usa0JBQU0sUUFBUSxDQUFDLFNBS2hCO1FBTnFCLGNBQVEsR0FBUixRQUFRLENBQVU7UUFFdEMsS0FBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDO1FBQ2hDLEtBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztRQUNuQyxLQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7UUFDcEMsS0FBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDOztJQUNyQyxDQUFDO0lBRUQscURBQVUsR0FBVjtRQUNFLGlCQUFNLFVBQVUsV0FBRSxDQUFDO1FBQ25CLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNkLElBQU0sSUFBSSxHQUFZLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDbkUsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7WUFDekYsSUFBSSxDQUFDLFVBQVUsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7U0FDdkc7SUFDSCxDQUFDO0lBRUQsb0RBQVMsR0FBVCxVQUFVLFFBQWE7UUFDckIsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFDbEIsUUFBUSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ3RCLEtBQUssUUFBUTtnQkFDWCxJQUFJLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyx3QkFBd0IsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQztnQkFDakosTUFBTTtZQUNSLEtBQUssS0FBSztnQkFDUixJQUFJLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO2dCQUNyRCxNQUFNO1lBQ1I7Z0JBQ0UsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO2dCQUMvQixNQUFNO1NBQ1Q7UUFDRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQzs7Z0JBN0NGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsNkJBQTZCO29CQUN2QywwT0FBMkQ7b0JBQzNELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxNQUFNLEVBQUUsMENBQTBDO2lCQUNuRDs7O2dCQXpCNEMsUUFBUTs7OzhCQWdDbEQsU0FBUyxTQUFDLGFBQWEsRUFBRSxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTs7SUFtQy9ELHVDQUFDO0NBQUEsQUEvQ0QsQ0FNc0Qsc0JBQXNCLEdBeUMzRTtTQXpDWSxnQ0FBZ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBJbmplY3RvciwgT25Jbml0LCBUZW1wbGF0ZVJlZiwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFV0aWwgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi91dGlsL3V0aWwnO1xuaW1wb3J0IHsgT0NvbHVtbiB9IGZyb20gJy4uLy4uL28tY29sdW1uLmNsYXNzJztcbmltcG9ydCB7IERFRkFVTFRfSU5QVVRTX09fQkFTRV9UQUJMRV9DRUxMX1JFTkRFUkVSLCBPQmFzZVRhYmxlQ2VsbFJlbmRlcmVyIH0gZnJvbSAnLi4vby1iYXNlLXRhYmxlLWNlbGwtcmVuZGVyZXIuY2xhc3MnO1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9JTlBVVFNfT19UQUJMRV9DRUxMX1JFTkRFUkVSX0lNQUdFID0gW1xuICAuLi5ERUZBVUxUX0lOUFVUU19PX0JBU0VfVEFCTEVfQ0VMTF9SRU5ERVJFUixcbiAgLy8gaW1hZ2UtdHlwZSBbYmFzZTY0fHVybF06IGltYWdlIHR5cGUgKGV4dGVybiB1cmwgb3IgYmFzZTY0KS4gRGVmYXVsdDogbm8gdmFsdWUuXG4gICdpbWFnZVR5cGU6IGltYWdlLXR5cGUnLFxuICAvLyBlbXB0eS1pbWFnZSBbc3RyaW5nXTogdXJsIG9mIHRoZSBpbWFnZSB0byBiZSBzaG93biBpZiB0aGUgY29sdW1uIGhhcyBub3QgYW55IHZhbHVlLiBEZWZhdWx0OiBubyB2YWx1ZS5cbiAgJ2VtcHR5SW1hZ2U6IGVtcHR5LWltYWdlJyxcbiAgLy8gYXZhdGFyIFtub3x5ZXNdOiB2aWV3IGltYWdlIGFzIGF2YXRhciAoY2lyY2xlKSwgb25seSBhdCBwcmVzZW50YXRpb24gbGV2ZWwuIERlZmF1bHQ6IG5vLlxuICAnYXZhdGFyJ1xuXTtcblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfT1VUUFVUU19PX1RBQkxFX0NFTExfUkVOREVSRVJfSU1BR0UgPSBbXG4gICdvbkNsaWNrJ1xuXTtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnby10YWJsZS1jZWxsLXJlbmRlcmVyLWltYWdlJyxcbiAgdGVtcGxhdGVVcmw6ICcuL28tdGFibGUtY2VsbC1yZW5kZXJlci1pbWFnZS5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBpbnB1dHM6IERFRkFVTFRfSU5QVVRTX09fVEFCTEVfQ0VMTF9SRU5ERVJFUl9JTUFHRVxufSlcbmV4cG9ydCBjbGFzcyBPVGFibGVDZWxsUmVuZGVyZXJJbWFnZUNvbXBvbmVudCBleHRlbmRzIE9CYXNlVGFibGVDZWxsUmVuZGVyZXIgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIHB1YmxpYyBpbWFnZVR5cGU6IHN0cmluZztcbiAgcHVibGljIGVtcHR5SW1hZ2U6IHN0cmluZztcbiAgcHJvdGVjdGVkIF9zb3VyY2U6IHN0cmluZztcbiAgYXZhdGFyOiBzdHJpbmc7XG4gIEBWaWV3Q2hpbGQoJ3RlbXBsYXRlcmVmJywgeyByZWFkOiBUZW1wbGF0ZVJlZiwgc3RhdGljOiB0cnVlIH0pIHB1YmxpYyB0ZW1wbGF0ZXJlZjogVGVtcGxhdGVSZWY8YW55PjtcblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgaW5qZWN0b3I6IEluamVjdG9yKSB7XG4gICAgc3VwZXIoaW5qZWN0b3IpO1xuICAgIHRoaXMudGFibGVDb2x1bW4udHlwZSA9ICdpbWFnZSc7XG4gICAgdGhpcy50YWJsZUNvbHVtbi5vcmRlcmFibGUgPSBmYWxzZTtcbiAgICB0aGlzLnRhYmxlQ29sdW1uLnNlYXJjaGFibGUgPSBmYWxzZTtcbiAgICB0aGlzLnRhYmxlQ29sdW1uLmdyb3VwYWJsZSA9IGZhbHNlO1xuICB9XG5cbiAgaW5pdGlhbGl6ZSgpIHtcbiAgICBzdXBlci5pbml0aWFsaXplKCk7XG4gICAgaWYgKHRoaXMudGFibGUpIHtcbiAgICAgIGNvbnN0IG9Db2w6IE9Db2x1bW4gPSB0aGlzLnRhYmxlLmdldE9Db2x1bW4odGhpcy50YWJsZUNvbHVtbi5hdHRyKTtcbiAgICAgIG9Db2wudGl0bGUgPSBVdGlsLmlzRGVmaW5lZCh0aGlzLnRhYmxlQ29sdW1uLnRpdGxlKSA/IHRoaXMudGFibGVDb2x1bW4udGl0bGUgOiB1bmRlZmluZWQ7XG4gICAgICBvQ29sLmRlZmluaXRpb24uY29udGVudEFsaWduID0gb0NvbC5kZWZpbml0aW9uLmNvbnRlbnRBbGlnbiA/IG9Db2wuZGVmaW5pdGlvbi5jb250ZW50QWxpZ24gOiAnY2VudGVyJztcbiAgICB9XG4gIH1cblxuICBnZXRTb3VyY2UoY2VsbERhdGE6IGFueSkge1xuICAgIHRoaXMuX3NvdXJjZSA9ICcnO1xuICAgIHN3aXRjaCAodGhpcy5pbWFnZVR5cGUpIHtcbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHRoaXMuX3NvdXJjZSA9IGNlbGxEYXRhID8gKCdkYXRhOmltYWdlL3BuZztiYXNlNjQsJyArICgodHlwZW9mIChjZWxsRGF0YS5ieXRlcykgIT09ICd1bmRlZmluZWQnKSA/IGNlbGxEYXRhLmJ5dGVzIDogY2VsbERhdGEpKSA6IHRoaXMuZW1wdHlJbWFnZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd1cmwnOlxuICAgICAgICB0aGlzLl9zb3VyY2UgPSBjZWxsRGF0YSA/IGNlbGxEYXRhIDogdGhpcy5lbXB0eUltYWdlO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRoaXMuX3NvdXJjZSA9IHRoaXMuZW1wdHlJbWFnZTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9zb3VyY2U7XG4gIH1cblxufVxuIl19