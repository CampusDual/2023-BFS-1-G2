import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, Injector, TemplateRef, ViewChild, ViewEncapsulation, } from '@angular/core';
import { InputConverter } from '../../../../../decorators/input-converter';
import { Util } from '../../../../../util/util';
import { DEFAULT_INPUTS_O_TABLE_CELL_EDITOR, DEFAULT_OUTPUTS_O_TABLE_CELL_EDITOR, OBaseTableCellEditor, } from '../o-base-table-cell-editor.class';
export var DEFAULT_INPUTS_O_TABLE_CELL_EDITOR_BOOLEAN = tslib_1.__spread(DEFAULT_INPUTS_O_TABLE_CELL_EDITOR, [
    'indeterminateOnNull: indeterminate-on-null',
    'trueValue: true-value',
    'falseValue: false-value',
    'booleanType: boolean-type',
    'autoCommit: auto-commit'
]);
export var DEFAULT_OUTPUTS_O_TABLE_CELL_EDITOR_BOOLEAN = tslib_1.__spread(DEFAULT_OUTPUTS_O_TABLE_CELL_EDITOR);
var OTableCellEditorBooleanComponent = (function (_super) {
    tslib_1.__extends(OTableCellEditorBooleanComponent, _super);
    function OTableCellEditorBooleanComponent(injector) {
        var _this = _super.call(this, injector) || this;
        _this.injector = injector;
        _this.indeterminate = false;
        _this.indeterminateOnNull = false;
        _this._booleanType = 'boolean';
        _this.autoCommit = true;
        return _this;
    }
    OTableCellEditorBooleanComponent.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        this.parseInputs();
    };
    Object.defineProperty(OTableCellEditorBooleanComponent.prototype, "booleanType", {
        get: function () {
            return this._booleanType;
        },
        set: function (arg) {
            arg = (arg || '').toLowerCase();
            if (['number', 'boolean', 'string'].indexOf(arg) === -1) {
                arg = 'boolean';
            }
            this._booleanType = arg;
        },
        enumerable: true,
        configurable: true
    });
    OTableCellEditorBooleanComponent.prototype.parseInputs = function () {
        switch (this.booleanType) {
            case 'string':
                this.parseStringInputs();
                break;
            case 'number':
                this.parseNumberInputs();
                break;
            default:
                this.trueValue = true;
                this.falseValue = false;
                break;
        }
    };
    OTableCellEditorBooleanComponent.prototype.parseStringInputs = function () {
        if ((this.trueValue || '').length === 0) {
            this.trueValue = undefined;
        }
        if ((this.falseValue || '').length === 0) {
            this.falseValue = undefined;
        }
    };
    OTableCellEditorBooleanComponent.prototype.parseNumberInputs = function () {
        this.trueValue = parseInt(this.trueValue, 10);
        if (isNaN(this.trueValue)) {
            this.trueValue = 1;
        }
        this.falseValue = parseInt(this.falseValue, 10);
        if (isNaN(this.falseValue)) {
            this.falseValue = 0;
        }
    };
    OTableCellEditorBooleanComponent.prototype.startEdition = function (data) {
        var _this = this;
        _super.prototype.startEdition.call(this, data);
        setTimeout(function () {
            var isCurrentValueTrue = (_this.formControl.value === _this.trueValue);
            if (_this.autoCommit) {
                _this.formControl.setValue(isCurrentValueTrue ? _this.falseValue : _this.trueValue, { emitEvent: false });
                _this.commitEdition();
            }
            else {
                _this.formControl.setValue(isCurrentValueTrue ? _this.trueValue : _this.falseValue, { emitEvent: false });
            }
        }, 0);
    };
    OTableCellEditorBooleanComponent.prototype.getCellData = function () {
        var cellData = _super.prototype.getCellData.call(this);
        this.indeterminate = this.indeterminateOnNull && !Util.isDefined(cellData);
        if (!this.indeterminate) {
            cellData = this.parseValueByType(cellData);
        }
        return cellData;
    };
    OTableCellEditorBooleanComponent.prototype.hasCellDataTrueValue = function (cellData) {
        var result;
        if (Util.isDefined(cellData)) {
            result = (cellData === this.trueValue);
            if (this.booleanType === 'string' && !Util.isDefined(this.trueValue)) {
                result = Util.parseBoolean(cellData, false);
            }
        }
        return result;
    };
    OTableCellEditorBooleanComponent.prototype.parseValueByType = function (val) {
        var result = val;
        var cellIsTrue = this.hasCellDataTrueValue(val);
        var value = cellIsTrue ? this.trueValue : this.falseValue;
        switch (this.booleanType) {
            case 'string':
                result = this.translateService.get(value);
                break;
            case 'number':
                result = parseInt(value, 10);
                break;
            default:
                break;
        }
        return result;
    };
    OTableCellEditorBooleanComponent.prototype.onChange = function (arg) {
        this.formControl.setValue(arg.checked ? this.trueValue : this.falseValue, { emitEvent: false });
        this.commitEdition();
    };
    OTableCellEditorBooleanComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-table-cell-editor-boolean',
                    template: "<ng-template #templateref let-cellvalue=\"cellvalue\" let-rowvalue=\"rowvalue\">\n  <div class=\"o-table-cell-editor-boolean o-table-cell-editor\" [formGroup]=\"formGroup\">\n    <mat-checkbox #checkbox (click)=\"$event.stopPropagation()\" (change)=\"onChange($event)\" [indeterminate]=\"indeterminate\"\n      [formControl]=\"formControl\" [class.hidden-checkbox]=\"autoCommit\">\n    </mat-checkbox>\n  </div>\n</ng-template>",
                    inputs: DEFAULT_INPUTS_O_TABLE_CELL_EDITOR_BOOLEAN,
                    outputs: DEFAULT_OUTPUTS_O_TABLE_CELL_EDITOR_BOOLEAN,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                    styles: [".o-table-cell-editor-boolean{height:100%;display:flex;align-items:center;justify-content:center}.o-table-cell-editor-boolean .mat-checkbox-ripple,.o-table-cell-editor-boolean .mat-checkbox.hidden-checkbox{display:none}"]
                }] }
    ];
    OTableCellEditorBooleanComponent.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    OTableCellEditorBooleanComponent.propDecorators = {
        templateref: [{ type: ViewChild, args: ['templateref', { read: TemplateRef, static: true },] }]
    };
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OTableCellEditorBooleanComponent.prototype, "indeterminateOnNull", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OTableCellEditorBooleanComponent.prototype, "autoCommit", void 0);
    return OTableCellEditorBooleanComponent;
}(OBaseTableCellEditor));
export { OTableCellEditorBooleanComponent };
//# sourceMappingURL=data:application/json;base64,