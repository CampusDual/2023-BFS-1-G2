import { FilterExpressionUtils } from '../../../../util/filter-expression.utils';
import { Util } from '../../../../util/util';
import { OTableColumnComponent } from '../o-table-column.component';
export var DEFAULT_INPUTS_O_BASE_TABLE_CELL_RENDERER = [
    'filterSource: filter-source',
    'filterFunction: filter-function'
];
var OBaseTableCellRenderer = (function () {
    function OBaseTableCellRenderer(injector) {
        this.injector = injector;
        this._filterSource = 'render';
        this.tableColumn = this.injector.get(OTableColumnComponent);
    }
    OBaseTableCellRenderer.prototype.ngOnInit = function () {
        this.initialize();
    };
    OBaseTableCellRenderer.prototype.initialize = function () {
    };
    OBaseTableCellRenderer.prototype.ngAfterContentInit = function () {
        if (typeof this.filterFunction !== 'function') {
            this.filterFunction = undefined;
        }
        this.registerRenderer();
    };
    Object.defineProperty(OBaseTableCellRenderer.prototype, "table", {
        get: function () {
            return this.tableColumn.table;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OBaseTableCellRenderer.prototype, "column", {
        get: function () {
            return this.tableColumn.attr;
        },
        enumerable: true,
        configurable: true
    });
    OBaseTableCellRenderer.prototype.registerRenderer = function () {
        this.tableColumn.registerRenderer(this);
        if (!Util.isDefined(this.type) && Util.isDefined(this.tableColumn.type)) {
            this.type = this.tableColumn.type;
        }
    };
    OBaseTableCellRenderer.prototype.getCellData = function (cellvalue, rowvalue) {
        var parsedValue;
        if (this.componentPipe && this.pipeArguments !== undefined && cellvalue !== undefined) {
            parsedValue = this.componentPipe.transform(cellvalue, this.pipeArguments);
        }
        else {
            parsedValue = cellvalue;
        }
        return parsedValue;
    };
    OBaseTableCellRenderer.prototype.getTooltip = function (cellValue, rowValue) {
        return this.getCellData(cellValue, rowValue);
    };
    Object.defineProperty(OBaseTableCellRenderer.prototype, "filterSource", {
        get: function () {
            return this._filterSource;
        },
        set: function (val) {
            var lowerVal = (val || '').toLowerCase();
            this._filterSource = (lowerVal === 'render' || lowerVal === 'data' || lowerVal === 'both') ? lowerVal : 'render';
        },
        enumerable: true,
        configurable: true
    });
    OBaseTableCellRenderer.prototype.getFilter = function (cellValue, rowValue) {
        var result;
        switch (this.filterSource) {
            case 'render':
                result = [this.getCellData(cellValue, rowValue)];
                break;
            case 'data':
                result = [cellValue];
                break;
            case 'both':
                result = [cellValue, this.getCellData(cellValue, rowValue)];
                break;
        }
        return result;
    };
    OBaseTableCellRenderer.prototype.getFilterExpression = function (quickFilter) {
        return FilterExpressionUtils.buildExpressionLike(this.tableColumn.attr, quickFilter);
    };
    return OBaseTableCellRenderer;
}());
export { OBaseTableCellRenderer };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1iYXNlLXRhYmxlLWNlbGwtcmVuZGVyZXIuY2xhc3MuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9vbnRpbWl6ZS13ZWItbmd4LyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvdGFibGUvY29sdW1uL2NlbGwtcmVuZGVyZXIvby1iYXNlLXRhYmxlLWNlbGwtcmVuZGVyZXIuY2xhc3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFDakYsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRTdDLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRXBFLE1BQU0sQ0FBQyxJQUFNLHlDQUF5QyxHQUFHO0lBQ3ZELDZCQUE2QjtJQUM3QixpQ0FBaUM7Q0FDbEMsQ0FBQztBQUVGO0lBV0UsZ0NBQXNCLFFBQWtCO1FBQWxCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFQakMsa0JBQWEsR0FBK0IsUUFBUSxDQUFDO1FBUTFELElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQztJQUM5RCxDQUFDO0lBRU0seUNBQVEsR0FBZjtRQUNFLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBRU0sMkNBQVUsR0FBakI7SUFFQSxDQUFDO0lBRU0sbURBQWtCLEdBQXpCO1FBQ0UsSUFBSSxPQUFPLElBQUksQ0FBQyxjQUFjLEtBQUssVUFBVSxFQUFFO1lBQzdDLElBQUksQ0FBQyxjQUFjLEdBQUcsU0FBUyxDQUFDO1NBQ2pDO1FBQ0QsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUVELHNCQUFJLHlDQUFLO2FBQVQ7WUFDRSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDO1FBQ2hDLENBQUM7OztPQUFBO0lBRUQsc0JBQUksMENBQU07YUFBVjtZQUNFLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUM7UUFDL0IsQ0FBQzs7O09BQUE7SUFLTSxpREFBZ0IsR0FBdkI7UUFDRSxJQUFJLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDdkUsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQztTQUNuQztJQUNILENBQUM7SUFPTSw0Q0FBVyxHQUFsQixVQUFtQixTQUFjLEVBQUUsUUFBYztRQUMvQyxJQUFJLFdBQW1CLENBQUM7UUFDeEIsSUFBSSxJQUFJLENBQUMsYUFBYSxJQUFJLElBQUksQ0FBQyxhQUFhLEtBQUssU0FBUyxJQUFJLFNBQVMsS0FBSyxTQUFTLEVBQUU7WUFDckYsV0FBVyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDM0U7YUFBTTtZQUNMLFdBQVcsR0FBRyxTQUFTLENBQUM7U0FDekI7UUFDRCxPQUFPLFdBQVcsQ0FBQztJQUNyQixDQUFDO0lBRU0sMkNBQVUsR0FBakIsVUFBa0IsU0FBYyxFQUFFLFFBQWE7UUFDN0MsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRUQsc0JBQUksZ0RBQVk7YUFLaEI7WUFDRSxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUM7UUFDNUIsQ0FBQzthQVBELFVBQWlCLEdBQVc7WUFDMUIsSUFBTSxRQUFRLEdBQUcsQ0FBQyxHQUFHLElBQUksRUFBRSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDM0MsSUFBSSxDQUFDLGFBQWEsR0FBRyxDQUFDLFFBQVEsS0FBSyxRQUFRLElBQUksUUFBUSxLQUFLLE1BQU0sSUFBSSxRQUFRLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDO1FBQ25ILENBQUM7OztPQUFBO0lBWUQsMENBQVMsR0FBVCxVQUFVLFNBQWMsRUFBRSxRQUFjO1FBQ3RDLElBQUksTUFBTSxDQUFDO1FBQ1gsUUFBUSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ3pCLEtBQUssUUFBUTtnQkFDWCxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO2dCQUNqRCxNQUFNO1lBQ1IsS0FBSyxNQUFNO2dCQUNULE1BQU0sR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUNyQixNQUFNO1lBQ1IsS0FBSyxNQUFNO2dCQUNULE1BQU0sR0FBRyxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO2dCQUM1RCxNQUFNO1NBQ1Q7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRU0sb0RBQW1CLEdBQTFCLFVBQTJCLFdBQW1CO1FBQzVDLE9BQU8scUJBQXFCLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDdkYsQ0FBQztJQUNILDZCQUFDO0FBQUQsQ0FBQyxBQXJHRCxJQXFHQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyQ29udGVudEluaXQsIEluamVjdG9yLCBPbkluaXQsIFBpcGVUcmFuc2Zvcm0sIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IE9UYWJsZUNvbHVtbiB9IGZyb20gJy4uLy4uLy4uLy4uL2ludGVyZmFjZXMvby10YWJsZS1jb2x1bW4uaW50ZXJmYWNlJztcbmltcG9ydCB7IEV4cHJlc3Npb24gfSBmcm9tICcuLi8uLi8uLi8uLi90eXBlcy9leHByZXNzaW9uLnR5cGUnO1xuaW1wb3J0IHsgRmlsdGVyRXhwcmVzc2lvblV0aWxzIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbC9maWx0ZXItZXhwcmVzc2lvbi51dGlscyc7XG5pbXBvcnQgeyBVdGlsIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbC91dGlsJztcbmltcG9ydCB7IE9UYWJsZUNvbXBvbmVudCB9IGZyb20gJy4uLy4uL28tdGFibGUuY29tcG9uZW50JztcbmltcG9ydCB7IE9UYWJsZUNvbHVtbkNvbXBvbmVudCB9IGZyb20gJy4uL28tdGFibGUtY29sdW1uLmNvbXBvbmVudCc7XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX0lOUFVUU19PX0JBU0VfVEFCTEVfQ0VMTF9SRU5ERVJFUiA9IFtcbiAgJ2ZpbHRlclNvdXJjZTogZmlsdGVyLXNvdXJjZScsXG4gICdmaWx0ZXJGdW5jdGlvbjogZmlsdGVyLWZ1bmN0aW9uJ1xuXTtcblxuZXhwb3J0IGNsYXNzIE9CYXNlVGFibGVDZWxsUmVuZGVyZXIgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyQ29udGVudEluaXQge1xuXG4gIHB1YmxpYyB0ZW1wbGF0ZXJlZjogVGVtcGxhdGVSZWY8YW55PjtcbiAgcHVibGljIHRhYmxlQ29sdW1uOiBPVGFibGVDb2x1bW47XG4gIHB1YmxpYyBfZmlsdGVyU291cmNlOiAncmVuZGVyJyB8ICdkYXRhJyB8ICdib3RoJyA9ICdyZW5kZXInO1xuICBwdWJsaWMgZmlsdGVyRnVuY3Rpb246IChjZWxsVmFsdWU6IGFueSwgcm93VmFsdWU6IGFueSwgcXVpY2tGaWx0ZXI/OiBzdHJpbmcpID0+IGJvb2xlYW47XG5cbiAgcHJvdGVjdGVkIHR5cGU6IHN0cmluZztcbiAgcHJvdGVjdGVkIHBpcGVBcmd1bWVudHM6IGFueTtcbiAgcHJvdGVjdGVkIGNvbXBvbmVudFBpcGU6IFBpcGVUcmFuc2Zvcm07XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGluamVjdG9yOiBJbmplY3Rvcikge1xuICAgIHRoaXMudGFibGVDb2x1bW4gPSB0aGlzLmluamVjdG9yLmdldChPVGFibGVDb2x1bW5Db21wb25lbnQpO1xuICB9XG5cbiAgcHVibGljIG5nT25Jbml0KCkge1xuICAgIHRoaXMuaW5pdGlhbGl6ZSgpO1xuICB9XG5cbiAgcHVibGljIGluaXRpYWxpemUoKTogdm9pZCB7XG5cbiAgfVxuXG4gIHB1YmxpYyBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZCB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLmZpbHRlckZ1bmN0aW9uICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzLmZpbHRlckZ1bmN0aW9uID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICB0aGlzLnJlZ2lzdGVyUmVuZGVyZXIoKTtcbiAgfVxuXG4gIGdldCB0YWJsZSgpOiBPVGFibGVDb21wb25lbnQge1xuICAgIHJldHVybiB0aGlzLnRhYmxlQ29sdW1uLnRhYmxlO1xuICB9XG5cbiAgZ2V0IGNvbHVtbigpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnRhYmxlQ29sdW1uLmF0dHI7XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXJzIHJlbmRlcmVyXG4gICAqL1xuICBwdWJsaWMgcmVnaXN0ZXJSZW5kZXJlcigpOiB2b2lkIHtcbiAgICB0aGlzLnRhYmxlQ29sdW1uLnJlZ2lzdGVyUmVuZGVyZXIodGhpcyk7XG4gICAgaWYgKCFVdGlsLmlzRGVmaW5lZCh0aGlzLnR5cGUpICYmIFV0aWwuaXNEZWZpbmVkKHRoaXMudGFibGVDb2x1bW4udHlwZSkpIHtcbiAgICAgIHRoaXMudHlwZSA9IHRoaXMudGFibGVDb2x1bW4udHlwZTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZGlzcGxheWVkIHRhYmxlIGNlbGwgdmFsdWVcbiAgICogQHBhcmFtIGNlbGx2YWx1ZSB0aGUgaW50ZXJuYWwgdGFibGUgY2VsbCB2YWx1ZVxuICAgKiBAcGFyYW0gcm93dmFsdWUgdGhlIHRhYmxlIHJvdyB2YWx1ZVxuICAgKi9cbiAgcHVibGljIGdldENlbGxEYXRhKGNlbGx2YWx1ZTogYW55LCByb3d2YWx1ZT86IGFueSk6IHN0cmluZyB7XG4gICAgbGV0IHBhcnNlZFZhbHVlOiBzdHJpbmc7XG4gICAgaWYgKHRoaXMuY29tcG9uZW50UGlwZSAmJiB0aGlzLnBpcGVBcmd1bWVudHMgIT09IHVuZGVmaW5lZCAmJiBjZWxsdmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcGFyc2VkVmFsdWUgPSB0aGlzLmNvbXBvbmVudFBpcGUudHJhbnNmb3JtKGNlbGx2YWx1ZSwgdGhpcy5waXBlQXJndW1lbnRzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFyc2VkVmFsdWUgPSBjZWxsdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBwYXJzZWRWYWx1ZTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRUb29sdGlwKGNlbGxWYWx1ZTogYW55LCByb3dWYWx1ZTogYW55KTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5nZXRDZWxsRGF0YShjZWxsVmFsdWUsIHJvd1ZhbHVlKTtcbiAgfVxuXG4gIHNldCBmaWx0ZXJTb3VyY2UodmFsOiBzdHJpbmcpIHtcbiAgICBjb25zdCBsb3dlclZhbCA9ICh2YWwgfHwgJycpLnRvTG93ZXJDYXNlKCk7XG4gICAgdGhpcy5fZmlsdGVyU291cmNlID0gKGxvd2VyVmFsID09PSAncmVuZGVyJyB8fCBsb3dlclZhbCA9PT0gJ2RhdGEnIHx8IGxvd2VyVmFsID09PSAnYm90aCcpID8gbG93ZXJWYWwgOiAncmVuZGVyJztcbiAgfVxuXG4gIGdldCBmaWx0ZXJTb3VyY2UoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fZmlsdGVyU291cmNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgdmFsdWVzIHRvIGZpbHRlclxuICAgKiBAcGFyYW0gY2VsbFZhbHVlXG4gICAqIEBwYXJhbSBbcm93VmFsdWVdXG4gICAqIEByZXR1cm5zIGZpbHRlclxuICAgKi9cbiAgZ2V0RmlsdGVyKGNlbGxWYWx1ZTogYW55LCByb3dWYWx1ZT86IGFueSk6IGFueVtdIHtcbiAgICBsZXQgcmVzdWx0O1xuICAgIHN3aXRjaCAodGhpcy5maWx0ZXJTb3VyY2UpIHtcbiAgICAgIGNhc2UgJ3JlbmRlcic6XG4gICAgICAgIHJlc3VsdCA9IFt0aGlzLmdldENlbGxEYXRhKGNlbGxWYWx1ZSwgcm93VmFsdWUpXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdkYXRhJzpcbiAgICAgICAgcmVzdWx0ID0gW2NlbGxWYWx1ZV07XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnYm90aCc6XG4gICAgICAgIHJlc3VsdCA9IFtjZWxsVmFsdWUsIHRoaXMuZ2V0Q2VsbERhdGEoY2VsbFZhbHVlLCByb3dWYWx1ZSldO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHB1YmxpYyBnZXRGaWx0ZXJFeHByZXNzaW9uKHF1aWNrRmlsdGVyOiBzdHJpbmcpOiBFeHByZXNzaW9uIHtcbiAgICByZXR1cm4gRmlsdGVyRXhwcmVzc2lvblV0aWxzLmJ1aWxkRXhwcmVzc2lvbkxpa2UodGhpcy50YWJsZUNvbHVtbi5hdHRyLCBxdWlja0ZpbHRlcik7XG4gIH1cbn1cbiJdfQ==