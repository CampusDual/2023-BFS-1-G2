import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, Injector, TemplateRef, ViewChild, ViewEncapsulation, } from '@angular/core';
import { DateAdapter, MAT_DATE_LOCALE } from '@angular/material';
import moment from 'moment';
import { InputConverter } from '../../../../../decorators/input-converter';
import { MomentService } from '../../../../../services/moment.service';
import { OntimizeMomentDateAdapter } from '../../../../../shared/material/date/ontimize-moment-date-adapter';
import { Util } from '../../../../../util/util';
import { DEFAULT_INPUTS_O_TABLE_CELL_EDITOR, DEFAULT_OUTPUTS_O_TABLE_CELL_EDITOR, OBaseTableCellEditor, } from '../o-base-table-cell-editor.class';
export var DEFAULT_INPUTS_O_TABLE_CELL_EDITOR_DATE = tslib_1.__spread(DEFAULT_INPUTS_O_TABLE_CELL_EDITOR, [
    'format',
    'locale',
    'oStartView: start-view',
    'min',
    'max',
    'oTouchUi: touch-ui',
    'startAt: start-at',
    'filterDate: filter-date',
    'dateValueType: date-value-type'
]);
export var DEFAULT_OUTPUTS_O_TABLE_CELL_EDITOR_DATE = tslib_1.__spread(DEFAULT_OUTPUTS_O_TABLE_CELL_EDITOR);
var OTableCellEditorDateComponent = (function (_super) {
    tslib_1.__extends(OTableCellEditorDateComponent, _super);
    function OTableCellEditorDateComponent(injector, momentDateAdapter) {
        var _this = _super.call(this, injector) || this;
        _this.injector = injector;
        _this.momentDateAdapter = momentDateAdapter;
        _this.format = 'L';
        _this.oStartView = 'month';
        _this.oTouchUi = false;
        _this._dateValueType = 'timestamp';
        _this.momentSrv = _this.injector.get(MomentService);
        return _this;
    }
    OTableCellEditorDateComponent.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        if (!this.locale) {
            this.locale = this.momentSrv.getLocale();
        }
        if (this.format) {
            this.momentDateAdapter.oFormat = this.format;
        }
        this.momentDateAdapter.setLocale(this.locale);
        if (this.startAt) {
            this.oStartAt = new Date(this.startAt);
        }
        if (this.min) {
            var date = new Date(this.min);
            var momentD = moment(date);
            if (momentD.isValid()) {
                this.oMinDate = date;
                this.minDateString = momentD.format(this.format);
            }
        }
        if (this.max) {
            var date = new Date(this.max);
            var momentD = moment(date);
            if (momentD.isValid()) {
                this.oMaxDate = date;
                this.maxDateString = momentD.format(this.format);
            }
        }
    };
    OTableCellEditorDateComponent.prototype.handleKeyup = function (event) {
        var oColumn = this.table.getOColumn(this.tableColumn.attr);
        if (!oColumn) {
            return;
        }
        if (!oColumn.editing && this.datepicker && this.datepicker.opened) {
            this.datepicker.close();
        }
        else {
            _super.prototype.handleKeyup.call(this, event);
        }
    };
    OTableCellEditorDateComponent.prototype.startEdition = function (data) {
        _super.prototype.startEdition.call(this, data);
        if (!this.startAt) {
            this.oStartAt = this.getCellData();
        }
    };
    OTableCellEditorDateComponent.prototype.getCellData = function () {
        var value = _super.prototype.getCellData.call(this);
        if (Util.isDefined(value)) {
            var result = value;
            var m = void 0;
            switch (this.dateValueType) {
                case 'string':
                    m = moment(value, this.format);
                    break;
                case 'date':
                    break;
                case 'iso-8601':
                case 'timestamp':
                default:
                    m = moment(value);
                    break;
            }
            if (Util.isDefined(m)) {
                result = m.toDate();
            }
            return result;
        }
        return value;
    };
    OTableCellEditorDateComponent.prototype.commitEdition = function () {
        if (!this.formControl.invalid) {
            this.oldValue = this._rowData[this.tableColumnAttr];
            this._rowData[this.tableColumnAttr] = this.getValueByValyType();
            if (!this.isSilentControl()) {
                this.endEdition(true);
                this.editionCommitted.emit(this._rowData);
            }
        }
    };
    OTableCellEditorDateComponent.prototype.getValueByValyType = function () {
        var result = this.formControl.value;
        var m = moment(this.formControl.value);
        switch (this.dateValueType) {
            case 'string':
                result = m.format(this.format);
                break;
            case 'date':
                result = new Date(result);
                break;
            case 'iso-8601':
                result = m.toISOString();
                break;
            case 'timestamp':
            default:
                result = m.valueOf();
                break;
        }
        return result;
    };
    OTableCellEditorDateComponent.prototype.onDateChange = function (event) {
        var isValid = event.value && event.value.isValid && event.value.isValid();
        var val = isValid ? event.value.valueOf() : event.value;
        var m = moment(val);
        switch (this.dateValueType) {
            case 'string':
                if (val) {
                    val = m.format(this.format);
                }
                break;
            case 'date':
                val = new Date(val);
                break;
            case 'iso-8601':
                val = m.toISOString();
                break;
            case 'timestamp':
            default:
                break;
        }
        this.formControl.setValue(val, {
            emitModelToViewChange: false,
            emitEvent: false
        });
    };
    OTableCellEditorDateComponent.prototype.openDatepicker = function (d) {
        this.datepicker = d;
        d.open();
    };
    Object.defineProperty(OTableCellEditorDateComponent.prototype, "dateValueType", {
        get: function () {
            return this._dateValueType;
        },
        set: function (val) {
            this._dateValueType = Util.convertToODateValueType(val);
        },
        enumerable: true,
        configurable: true
    });
    OTableCellEditorDateComponent.prototype.onClosed = function () {
        if (this.inputRef) {
            this.inputRef.nativeElement.focus();
        }
    };
    OTableCellEditorDateComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-table-cell-editor-date',
                    template: "<ng-template #templateref let-cellvalue=\"cellvalue\" let-rowvalue=\"rowvalue\">\n  <div [formGroup]=\"formGroup\" class=\"o-table-cell-editor-date o-table-cell-editor\">\n    <mat-form-field floatLabel=\"never\" cdkFocusInitial>\n      <input #input matInput [id]=\"cellEditorId\" [placeholder]=\"getPlaceholder()\" [formControl]=\"formControl\"\n        [required]=\"orequired\" [matDatepicker]=\"d\" [matDatepickerFilter]=\"filterDate\"\n        (dateChange)=\"onDateChange($event)\" [min]=\"oMinDate\" [max]=\"oMaxDate\">\n\n      <mat-datepicker #d [startView]=\"oStartView\" [startAt]=\"oStartAt\" [touchUi]=\"oTouchUi\" (closed)=\"onClosed()\">\n      </mat-datepicker>\n\n      <span class=\"icon-btn\" (click)=\"openDatepicker(d)\" matSuffix>\n        <mat-icon svgIcon=\"ontimize:today\"></mat-icon>\n      </span>\n\n      <mat-error *oMatError=\"hasError('required')\">\n        {{ 'FORM_VALIDATION.REQUIRED' | oTranslate }}\n      </mat-error>\n      <mat-error *oMatError=\"hasError('matDatepickerParse')\">\n        {{ 'FORM_VALIDATION.DATE_PARSE' | oTranslate }} {{ format }}\n      </mat-error>\n      <mat-error *oMatError=\"hasError('matDatepickerFilter')\">\n        {{ 'FORM_VALIDATION.DATE_FILTER' | oTranslate }}\n      </mat-error>\n      <mat-error *oMatError=\"hasError('matDatepickerMin')\">\n        {{ 'FORM_VALIDATION.DATE_MIN' | oTranslate }} {{ minDateString }}\n      </mat-error>\n      <mat-error *oMatError=\"hasError('matDatepickerMax')\">\n        {{ 'FORM_VALIDATION.DATE_MAX' | oTranslate }} {{ maxDateString }}\n      </mat-error>\n      <mat-error *ngFor=\"let oError of getActiveOErrors()\">\n        {{ getErrorText(oError) }}\n      </mat-error>\n    </mat-form-field>\n  </div>\n</ng-template>\n",
                    inputs: DEFAULT_INPUTS_O_TABLE_CELL_EDITOR_DATE,
                    outputs: DEFAULT_OUTPUTS_O_TABLE_CELL_EDITOR_DATE,
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: DateAdapter, useClass: OntimizeMomentDateAdapter, deps: [MAT_DATE_LOCALE] }
                    ],
                    styles: [""]
                }] }
    ];
    OTableCellEditorDateComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: DateAdapter }
    ]; };
    OTableCellEditorDateComponent.propDecorators = {
        templateref: [{ type: ViewChild, args: ['templateref', { read: TemplateRef, static: true },] }]
    };
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OTableCellEditorDateComponent.prototype, "oTouchUi", void 0);
    return OTableCellEditorDateComponent;
}(OBaseTableCellEditor));
export { OTableCellEditorDateComponent };
//# sourceMappingURL=data:application/json;base64,