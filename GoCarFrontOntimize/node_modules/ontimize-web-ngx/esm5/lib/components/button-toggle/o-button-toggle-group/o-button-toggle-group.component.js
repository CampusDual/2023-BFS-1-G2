import * as tslib_1 from "tslib";
import { Component, ComponentFactoryResolver, ContentChildren, EventEmitter, forwardRef, QueryList, ViewChild, ViewContainerRef, ViewEncapsulation } from '@angular/core';
import { MatButtonToggleGroup } from '@angular/material';
import { InputConverter } from '../../../decorators/input-converter';
import { Util } from '../../../util/util';
import { OButtonToggleComponent } from '../o-button-toggle.component';
export var DEFAULT_INPUTS_O_BUTTON_TOGGLE_GROUP = [
    'oattr: attr',
    'name',
    'enabled',
    'layout',
    'multiple',
    'value'
];
export var DEFAULT_OUTPUTS_O_BUTTON_TOGGLE_GROUP = [
    'onChange'
];
var OButtonToggleGroupComponent = (function () {
    function OButtonToggleGroupComponent(resolver) {
        this.resolver = resolver;
        this.DEFAULT_INPUTS_O_BUTTON_TOGGLE_GROUP = DEFAULT_INPUTS_O_BUTTON_TOGGLE_GROUP;
        this.DEFAULT_OUTPUTS_O_BUTTON_TOGGLE_GROUP = DEFAULT_OUTPUTS_O_BUTTON_TOGGLE_GROUP;
        this._enabled = true;
        this.layout = 'row';
        this.multiple = false;
        this.onChange = new EventEmitter();
    }
    Object.defineProperty(OButtonToggleGroupComponent.prototype, "enabled", {
        get: function () {
            if (this._innerButtonToggleGroup instanceof MatButtonToggleGroup) {
                return !this._innerButtonToggleGroup.disabled;
            }
            return true;
        },
        set: function (val) {
            if (this._innerButtonToggleGroup instanceof MatButtonToggleGroup) {
                val = Util.parseBoolean(String(val));
                this._innerButtonToggleGroup.disabled = !val;
            }
        },
        enumerable: true,
        configurable: true
    });
    OButtonToggleGroupComponent.prototype.ngOnInit = function () {
        if (!Util.isDefined(this.name)) {
            this.name = this.oattr;
        }
    };
    OButtonToggleGroupComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.buildChildren();
        this._children.changes.subscribe(function () { return _this.buildChildren(); });
    };
    OButtonToggleGroupComponent.prototype.buildChildren = function () {
        var _this = this;
        var factory = this.resolver.resolveComponentFactory(OButtonToggleComponent);
        this._viewContainerRef.clear();
        var childList = this._children.map(function (child) {
            var componentRef = _this._viewContainerRef.createComponent(factory);
            componentRef.instance.oattr = child.oattr;
            componentRef.instance.label = child.label;
            componentRef.instance.icon = child.icon;
            componentRef.instance.iconPosition = child.iconPosition;
            componentRef.instance.checked = child.checked;
            componentRef.instance.enabled = child.enabled;
            componentRef.instance.value = child.value;
            componentRef.instance.name = _this.name;
            componentRef.instance.onChange = child.onChange;
            componentRef.changeDetectorRef.detectChanges();
            return componentRef.instance;
        });
        this._innerButtonToggleGroup._buttonToggles.reset(childList.map(function (c) { return c._innerButtonToggle; }));
        this._children.reset(childList);
    };
    OButtonToggleGroupComponent.prototype.getValue = function () {
        return this._innerButtonToggleGroup ? this._innerButtonToggleGroup.value : void 0;
    };
    OButtonToggleGroupComponent.prototype.setValue = function (val) {
        this._innerButtonToggleGroup.value = val;
    };
    OButtonToggleGroupComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-button-toggle-group',
                    template: "<mat-button-toggle-group [disabled]=\"!enabled\" [name]=\"name\" [value]=\"value\" [vertical]=\"layout==='column'\" [multiple]=\"multiple\"\n  (change)=\"onChange.emit($event)\">\n  <ng-container #childContainer></ng-container>\n</mat-button-toggle-group>\n",
                    inputs: DEFAULT_INPUTS_O_BUTTON_TOGGLE_GROUP,
                    outputs: DEFAULT_OUTPUTS_O_BUTTON_TOGGLE_GROUP,
                    encapsulation: ViewEncapsulation.None,
                    host: {
                        '[class.o-button-toggle-group]': 'true'
                    },
                    entryComponents: [OButtonToggleComponent]
                }] }
    ];
    OButtonToggleGroupComponent.ctorParameters = function () { return [
        { type: ComponentFactoryResolver }
    ]; };
    OButtonToggleGroupComponent.propDecorators = {
        _innerButtonToggleGroup: [{ type: ViewChild, args: [MatButtonToggleGroup, { static: false },] }],
        _viewContainerRef: [{ type: ViewChild, args: ['childContainer', { read: ViewContainerRef, static: false },] }],
        _children: [{ type: ContentChildren, args: [forwardRef(function () { return OButtonToggleComponent; }),] }]
    };
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OButtonToggleGroupComponent.prototype, "multiple", void 0);
    return OButtonToggleGroupComponent;
}());
export { OButtonToggleGroupComponent };
//# sourceMappingURL=data:application/json;base64,