import * as tslib_1 from "tslib";
import { Component, ContentChildren, ElementRef, forwardRef, Inject, Injector, Optional, QueryList, ViewChild, ViewChildren } from '@angular/core';
import { MediaObserver } from '@angular/flex-layout';
import { MatPaginator } from '@angular/material';
import { Subscription } from 'rxjs';
import { InputConverter } from '../../decorators/input-converter';
import { ComponentStateServiceProvider, O_COMPONENT_STATE_SERVICE, OntimizeServiceProvider } from '../../services/factories';
import { OGridComponentStateService } from '../../services/state/o-grid-component-state.service';
import { Codes } from '../../util/codes';
import { ServiceUtils } from '../../util/service.utils';
import { Util } from '../../util/util';
import { OFormComponent } from '../form/o-form.component';
import { AbstractOServiceComponent, DEFAULT_INPUTS_O_SERVICE_COMPONENT, DEFAULT_OUTPUTS_O_SERVICE_COMPONENT } from '../o-service-component.class';
import { OMatSort } from '../table/extensions/sort/o-mat-sort';
import { OGridItemComponent } from './grid-item/o-grid-item.component';
import { OGridItemDirective } from './grid-item/o-grid-item.directive';
export var DEFAULT_INPUTS_O_GRID = tslib_1.__spread(DEFAULT_INPUTS_O_SERVICE_COMPONENT, [
    'cols',
    'showPageSize: show-page-size',
    'showSort: orderable',
    'sortableColumns: sortable-columns',
    'sortColumn: sort-column',
    'quickFilterColumns: quick-filter-columns',
    'gridItemHeight: grid-item-height',
    'refreshButton: refresh-button',
    'gutterSize:gutter-size',
    'fixedHeader:fixed-header',
    'showFooter:show-footer',
    'insertButtonPosition:insert-button-position',
    'insertButtonFloatable:insert-button-floatable',
    'showButtonsText: show-buttons-text'
]);
export var DEFAULT_OUTPUTS_O_GRID = tslib_1.__spread(DEFAULT_OUTPUTS_O_SERVICE_COMPONENT);
var PAGE_SIZE_OPTIONS = [8, 16, 24, 32, 64];
var OGridComponent = (function (_super) {
    tslib_1.__extends(OGridComponent, _super);
    function OGridComponent(injector, elRef, form) {
        var _this = _super.call(this, injector, elRef, form) || this;
        _this._queryRows = 32;
        _this.fixedHeader = false;
        _this.showPageSize = false;
        _this.showSort = false;
        _this.showFooter = true;
        _this.gridItemHeight = '1:1';
        _this.refreshButton = true;
        _this.insertButton = false;
        _this.insertButtonFloatable = true;
        _this.showButtonsText = false;
        _this.insertButtonPosition = 'bottom';
        _this.paginationControls = false;
        _this.gutterSize = '1px';
        _this._quickFilterAppearance = 'outline';
        _this._sortableColumns = [];
        _this._colsDefault = 1;
        _this._pageSizeOptions = PAGE_SIZE_OPTIONS;
        _this.storePaginationState = false;
        _this._gridItems = [];
        _this.subscription = new Subscription();
        _this.media = _this.injector.get(MediaObserver);
        _this.oMatSort = new OMatSort();
        return _this;
    }
    Object.defineProperty(OGridComponent.prototype, "cols", {
        get: function () {
            return this._cols || this._colsDefault;
        },
        set: function (value) {
            this._cols = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OGridComponent.prototype, "sortableColumns", {
        get: function () {
            return this._sortableColumns;
        },
        set: function (val) {
            var parsed = [];
            if (!Util.isArray(val)) {
                parsed = ServiceUtils.parseSortColumns(String(val));
            }
            this._sortableColumns = parsed;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OGridComponent.prototype, "gridItems", {
        get: function () {
            return this._gridItems;
        },
        set: function (value) {
            this._gridItems = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OGridComponent.prototype, "state", {
        get: function () {
            return this.componentStateService.state;
        },
        enumerable: true,
        configurable: true
    });
    OGridComponent.prototype.ngOnInit = function () {
        this.initialize();
    };
    OGridComponent.prototype.initialize = function () {
        var _this = this;
        _super.prototype.initialize.call(this);
        if (!Util.isDefined(this.quickFilterColumns)) {
            this.quickFilterColumns = this.columns;
        }
        this.quickFilterColArray = Util.parseArray(this.quickFilterColumns, true);
        if (Util.isDefined(this.state.sortColumn)) {
            this.sortColumn = this.state.sortColumn;
        }
        this.parseSortColumn();
        var existingOption = this.pageSizeOptions.find(function (option) { return option === _this.queryRows; });
        if (!Util.isDefined(existingOption)) {
            this._pageSizeOptions.push(this.queryRows);
            this._pageSizeOptions.sort(function (i, j) { return i - j; });
        }
        if (Util.isDefined(this.state.currentPage)) {
            this.currentPage = this.state.currentPage;
        }
        if (Util.isDefined(this.state.queryRows)) {
            this.queryRows = this.state.queryRows;
        }
    };
    OGridComponent.prototype.ngAfterViewInit = function () {
        _super.prototype.afterViewInit.call(this);
        this.filterCaseSensitive = Util.isDefined(this.state.filterCaseSensitive) ?
            this.state.filterCaseSensitive :
            this.filterCaseSensitive;
        this.setGridItemDirectivesData();
        this.subscribeToMediaChanges();
        this.registerQuickFilter(this.searchInputComponent);
        if (this.queryOnInit) {
            this.queryData();
        }
    };
    OGridComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.gridItems = this.inputGridItems.toArray();
        this.subscription.add(this.inputGridItems.changes.subscribe(function (queryChanges) {
            _this.gridItems = queryChanges._results;
        }));
    };
    OGridComponent.prototype.subscribeToMediaChanges = function () {
        var _this = this;
        this.subscription.add(this.media.asObservable().subscribe(function (change) {
            if (change && change[0]) {
                switch (change[0].mqAlias) {
                    case 'xs':
                    case 'sm':
                        _this._colsDefault = 1;
                        break;
                    case 'md':
                        _this._colsDefault = 2;
                        break;
                    case 'lg':
                    case 'xl':
                        _this._colsDefault = 4;
                }
            }
        }));
    };
    OGridComponent.prototype.reloadData = function () {
        var queryArgs = {};
        if (this.pageable) {
            this.state.queryRecordOffset = 0;
            queryArgs = {
                offset: this.paginationControls ? (this.currentPage * this.queryRows) : 0,
                length: Math.max(this.queryRows, this.dataResponseArray.length),
                replace: true
            };
        }
        this.queryData(void 0, queryArgs);
    };
    OGridComponent.prototype.reloadPaginatedDataFromStart = function () {
        this.currentPage = 0;
        this.dataResponseArray = [];
        this.reloadData();
    };
    OGridComponent.prototype.getSortedDataFromArray = function (dataArray) {
        if (Util.isDefined(this.sortColumnOrder)) {
            return this.oMatSort.getSortedDataBySQLOrder(dataArray, [this.sortColumnOrder]);
        }
        return dataArray;
    };
    OGridComponent.prototype.registerGridItemDirective = function (item) {
        var _this = this;
        if (item) {
            if (this.detailMode === Codes.DETAIL_MODE_CLICK) {
                item.onClick(function (gridItem) { return _this.onItemDetailClick(gridItem); });
            }
            if (Codes.isDoubleClickMode(this.detailMode)) {
                item.onDoubleClick(function (gridItem) { return _this.onItemDetailDblClick(gridItem); });
            }
        }
    };
    OGridComponent.prototype.onItemDetailClick = function (item) {
        this.handleItemClick(item);
    };
    OGridComponent.prototype.onItemDetailDblClick = function (item) {
        this.handleItemDblClick(item);
    };
    OGridComponent.prototype.ngOnDestroy = function () {
        this.destroy();
    };
    OGridComponent.prototype.ngOnChanges = function (changes) {
        if (changes.staticData !== undefined) {
            this.dataResponseArray = changes.staticData.currentValue;
            this.onDataLoaded.emit(this.dataResponseArray);
            if (this.quickFilterComponent) {
                this.filterData();
            }
        }
    };
    OGridComponent.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    };
    OGridComponent.prototype.loadMore = function () {
        this.currentPage += 1;
        if (this.pageable) {
            var queryArgs = {
                offset: this.state.queryRecordOffset,
                length: this.queryRows
            };
            this.queryData(void 0, queryArgs);
        }
        else {
            this.filterData(void 0, true);
        }
    };
    OGridComponent.prototype.getQueryArguments = function (filter, ovrrArgs) {
        var queryArguments = _super.prototype.getQueryArguments.call(this, filter, ovrrArgs);
        if (this.pageable && Util.isDefined(this.sortColumn)) {
            queryArguments[6] = this.sortColumnOrder ? [this.sortColumnOrder] : this.sortColumnOrder;
        }
        return queryArguments;
    };
    OGridComponent.prototype.parseSortColumn = function () {
        var parsed = (ServiceUtils.parseSortColumns(this.sortColumn) || [])[0];
        var index = this.findSortableColumnIndex(parsed);
        if (Util.isDefined(index) && index !== -1) {
            this.sortColumnOrder = parsed;
        }
    };
    Object.defineProperty(OGridComponent.prototype, "currentOrderColumn", {
        get: function () {
            return this.findSortableColumnIndex(this.sortColumnOrder);
        },
        set: function (val) {
            this.sortColumnOrder = this.sortableColumns[val];
        },
        enumerable: true,
        configurable: true
    });
    OGridComponent.prototype.findSortableColumnIndex = function (sortableColumn) {
        if (!Util.isDefined(sortableColumn)) {
            return null;
        }
        return this.sortableColumns
            .findIndex(function (item) { return item.columnName === sortableColumn.columnName
            && item.ascendent === sortableColumn.ascendent; });
    };
    OGridComponent.prototype.getDataToStore = function () {
        return this.componentStateService.getDataToStore();
    };
    OGridComponent.prototype.getSortOptionText = function (col) {
        var result;
        var colTextKey = "GRID.SORT_BY_" + col.columnName.toUpperCase() + "_" + (col.ascendent ? 'ASC' : 'DESC');
        result = this.translateService.get(colTextKey);
        if (result !== colTextKey) {
            return result;
        }
        colTextKey = 'GRID.SORT_BY_' + (col.ascendent ? 'ASC' : 'DESC');
        result = this.translateService.get(colTextKey, [(this.translateService.get(col.columnName) || '')]);
        return result;
    };
    OGridComponent.prototype.add = function () {
        _super.prototype.insertDetail.call(this);
    };
    OGridComponent.prototype.parseResponseArray = function (data, replace) {
        var result = data;
        if (this.pageable && !replace) {
            result = this.paginationControls ? data : (this.dataResponseArray || []).concat(data);
        }
        else if (!this.pageable) {
            result = data;
        }
        return result;
    };
    OGridComponent.prototype.saveDataNavigationInLocalStorage = function () {
        _super.prototype.saveDataNavigationInLocalStorage.call(this);
        this.storePaginationState = true;
    };
    OGridComponent.prototype.setGridItemDirectivesData = function () {
        var _this = this;
        this.gridItemDirectives.changes.subscribe(function () {
            _this.gridItemDirectives.toArray().forEach(function (element, index) {
                element.setItemData(_this.dataArray[index]);
                element.setGridComponent(_this);
                _this.registerGridItemDirective(element);
            });
        });
    };
    OGridComponent.prototype.pageSizeChanged = function () {
        if (this.pageable) {
            this.reloadData();
        }
        else {
            this.filterData();
        }
    };
    OGridComponent.prototype.sortColumnChanged = function (event) {
        this.currentOrderColumn = event.value;
        if (this.pageable) {
            this.reloadData();
        }
        else {
            this.filterData();
        }
    };
    OGridComponent.prototype.registerQuickFilter = function (arg) {
        _super.prototype.registerQuickFilter.call(this, arg);
        if (Util.isDefined(this.quickFilterComponent) && Util.isDefined(this.state.quickFilterActiveColumns)) {
            var parsedArr = Util.parseArray(this.state.quickFilterActiveColumns, true);
            this.quickFilterComponent.setActiveColumns(parsedArr);
        }
    };
    OGridComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-grid',
                    providers: [
                        OntimizeServiceProvider,
                        ComponentStateServiceProvider,
                        { provide: O_COMPONENT_STATE_SERVICE, useClass: OGridComponentStateService },
                    ],
                    inputs: DEFAULT_INPUTS_O_GRID,
                    outputs: DEFAULT_OUTPUTS_O_GRID,
                    template: "<div [style.display]=\"isVisible()? '' : 'none'\" class=\"o-grid-container\" fxLayout=\"column\" fxLayoutAlign=\"start stretch\">\n\n  <!--TOOLBAR-->\n  <o-data-toolbar *ngIf=\"hasControls()\" class=\"o-grid-toolbar\" [title]=\"title\" [show-title]=\"hasTitle()\">\n    <ng-container o-data-toolbar-projection-start>\n      <ng-container *ngIf=\"showButtonsText;else showButtonsWithoutText\">\n        <!-- button new-->\n        <button *ngIf=\"insertButton && !insertButtonFloatable\" type=\"button\" class=\"o-grid-add-button o-grid-button text\"  mat-stroked-button aria-label=\"Insert\"\n          (click)=\"add()\">\n          <mat-icon svgIcon=\"ontimize:add\"></mat-icon>\n          <span>{{ 'INSERT' | oTranslate }}</span>\n        </button>\n\n        <!--button refresh-->\n        <button type=\"button\" mat-stroked-button aria-label=\"Refresh\" (click)=\"reloadData()\" *ngIf=\"refreshButton\" class=\"o-grid-button text\">\n          <mat-icon svgIcon=\"ontimize:autorenew\"></mat-icon>\n          <span>{{ 'REFRESH' | oTranslate }}</span>\n        </button>\n      </ng-container>\n\n      <ng-template #showButtonsWithoutText>\n        <!-- button new-->\n        <button *ngIf=\"insertButton && !insertButtonFloatable\" type=\"button\" class=\"o-grid-button o-grid-add-button no-text\" mat-icon-button aria-label=\"Insert\"\n          (click)=\"add()\">\n          <mat-icon svgIcon=\"ontimize:add\"></mat-icon>\n        </button>\n\n        <!--button refresh-->\n        <button type=\"button\" mat-icon-button aria-label=\"Refresh\" (click)=\"reloadData()\" *ngIf=\"refreshButton\" class=\"o-grid-button no-text\">\n          <mat-icon svgIcon=\"ontimize:autorenew\"></mat-icon>\n        </button>\n      </ng-template>\n\n      <!--O-GRID-PAGINATOR-->\n      <div class=\"o-grid-paginator\" *ngIf=\"showPageSize\">\n        <div class=\"o-grid-page-size-label\">{{ 'GRID.ITEMS_PER_PAGE' | oTranslate }}:</div>\n        <mat-form-field class=\"o-grid-select-page\" floatLabel=\"never\">\n          <mat-select placeholder=\"\" #pageSizeSelect [(value)]=\"queryRows\" (selectionChange)=\"pageSizeChanged()\">\n            <mat-option *ngFor=\"let page of pageSizeOptions\" [value]=\"page\">\n              {{ page }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </div>\n\n      <!--O-GRID-SORT-->\n      <div class=\"o-grid-sort\" *ngIf=\"showSort && sortableColumns.length > 0\">\n        <mat-form-field class=\"o-grid-select-sort\" floatLabel=\"never\">\n          <mat-icon matPrefix>sort</mat-icon>\n          <mat-select #sortSelect [value]=\"currentOrderColumn\" (selectionChange)=\"sortColumnChanged($event)\"\n            placeholder=\" {{ 'GRID.SORT_BY' | oTranslate }}\">\n            <mat-option *ngFor=\"let column of sortableColumns; let i = index\" [value]=\"i\">\n              {{ getSortOptionText(column) }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </div>\n\n    </ng-container>\n    <ng-content select=\"[o-grid-toolbar][position=start]\" ngProjectAs=\"[o-data-toolbar-custom-projection-start]\">\n    </ng-content>\n    <ng-content select=\"[o-grid-toolbar][position=end]\" ngProjectAs=\"[o-data-toolbar-custom-projection-end]\">\n    </ng-content>\n    <ng-content select=\"[o-grid-toolbar]\" ngProjectAs=\"[o-data-toolbar-custom-projection-start]\">\n    </ng-content>\n    <ng-container o-data-toolbar-projection-end>\n      <o-search-input *ngIf=\"quickFilter\" [columns]=\"quickFilterColumns\" [filter-case-sensitive]=\"filterCaseSensitive\"\n        [show-case-sensitive-checkbox]=\"showCaseSensitiveCheckbox()\" [placeholder]=\"quickFilterPlaceholder\" [appearance]=\"quickFilterAppearance\"\n        float-label=\"never\"></o-search-input>\n    </ng-container>\n  </o-data-toolbar>\n\n  <!--no results-->\n  <div class=\"o-grid-no-results fill-remaining\" *ngIf=\"gridItems.length === 0\" fxLayoutAlign=\"center start\" layout-padding>\n    {{'GRID.EMPTY' | oTranslate}}\n    <ng-container *ngIf=\"quickFilter && searchInputComponent && searchInputComponent.getValue() && searchInputComponent.getValue().length > 0\">\n      {{ 'GRID.EMPTY_USING_FILTER' | oTranslate : { values: [ searchInputComponent.getValue()] } }}\n    </ng-container>\n  </div>\n\n  <!--MAT-GRID-LIST-->\n  <mat-grid-list [cols]=\"cols\" [gutterSize]=\"gutterSize\" [rowHeight]=\"gridItemHeight\" class=\"o-mat-grid-list fill-remaining\"\n    *ngIf=\"gridItems.length > 0\">\n    <mat-grid-tile o-grid-item *ngFor=\"let item of gridItems\" [colspan]=\"item.colspan\" [rowspan]=\"item.rowspan\">\n      <ng-container *ngTemplateOutlet=\"item.template\"></ng-container>\n    </mat-grid-tile>\n  </mat-grid-list>\n\n  <button type=\"button\" aria-label=\"Insert\" *ngIf=\"insertButton && insertButtonFloatable\" mat-fab (click)=\"add()\" class=\"o-grid-add-floatable-button\"\n    [class.o-grid-add-bottom-floatable-button]=\"insertButtonPosition ==='bottom'\"\n    [class.o-grid-add-top-floatable-button]=\"insertButtonPosition ==='top'\">\n    <mat-icon svgIcon=\"ontimize:add\"></mat-icon>\n  </button>\n\n  <!-- GRID FOOTER -->\n  <div *ngIf=\"!paginationControls && showFooter\" fxLayout=\"row\" fxLayoutAlign=\"center center\" class=\"o-grid-footer\">\n    <button type=\"button\" mat-button *ngIf=\"getDataArray().length < totalRecords && getDataArray().length>0\" (click)=\"loadMore()\"\n      class=\"mat-raised-button\">\n      {{ 'GRID.BUTTON_NEXT' | oTranslate }}\n    </button>\n    <span fxFlex></span>\n    <span class=\"o-grid-totals\">{{ 'GRID.TEXT_SHOWN_ITEMS' | oTranslate :{values: [getDataArray().length, totalRecords]}\n      }}</span>\n  </div>\n\n  <mat-paginator class=\"o-mat-paginator\" #paginator *ngIf=\"paginationControls && showFooter\" [length]=\"totalRecords\" [pageSize]=\"queryRows\"\n    [pageSizeOptions]=\"pageSizeOptions\" [pageIndex]=\"currentPage\" [showFirstLastButtons]=\"true\" (page)=\"onChangePage($event)\"></mat-paginator>\n\n  <div *ngIf=\"loading | async\" fxLayout=\"row\" fxLayoutAlign=\"center end\" class=\"o-loading-blocker\">\n    <div fxLayoutAlign=\"center center\" [class.o-spinner-container-controls]=\"hasControls()\" class=\"o-spinner-container\">\n      <mat-progress-spinner mode=\"indeterminate\" strokeWidth=\"3\"></mat-progress-spinner>\n    </div>\n  </div>\n\n</div>\n",
                    host: {
                        '[class.o-grid]': 'true',
                        '[class.o-grid-fixed]': 'fixedHeader'
                    },
                    styles: [":host.o-grid{height:100%}:host.o-grid .o-grid-container{position:relative;height:100%;display:flex}:host.o-grid .o-grid-container .o-grid-no-results{padding:16px}:host.o-grid .o-grid-container .o-grid-paginator,:host.o-grid .o-grid-container .o-grid-sort{margin-right:1em}:host.o-grid .o-grid-container .o-grid-paginator{display:flex}:host.o-grid .o-grid-container .o-grid-paginator .o-grid-select-page{width:60px}:host.o-grid .o-grid-container .o-grid-paginator .o-grid-page-size-label{margin:0 4px 0 8px;align-self:center}:host.o-grid .o-grid-container .o-grid-footer .o-grid-totals{margin-right:8px;font-size:14px}:host.o-grid .o-grid-container .o-grid-footer,:host.o-grid .o-grid-container .o-mat-paginator{flex-shrink:0}:host.o-grid .o-grid-container .o-loading-blocker{position:absolute;top:0;left:0;right:0;bottom:0;z-index:500;visibility:visible;opacity:1;transition:opacity .25s linear}:host.o-grid .o-grid-container .o-loading-blocker .o-spinner-container{width:100%;height:100%}:host.o-grid .o-grid-container .o-loading-blocker .o-spinner-container.o-spinner-container-controls{height:calc(100% - 64px)}:host.o-grid.o-grid-fixed{max-height:100%;height:100%}:host.o-grid.o-grid-fixed .o-grid-container{max-height:100%;height:100%}:host.o-grid.o-grid-fixed .o-mat-grid-list{overflow:auto;padding-bottom:0!important}:host.o-grid.o-grid-fixed .o-grid-footer,:host.o-grid.o-grid-fixed .o-mat-paginator{flex:0 0 auto}:host.o-grid .o-grid-add-floatable-button{right:12px;position:absolute}:host.o-grid .o-grid-add-floatable-button.o-grid-add-bottom-floatable-button{bottom:36px}:host.o-grid .o-grid-add-floatable-button.o-grid-add-top-floatable-button{top:66px}"]
                }] }
    ];
    OGridComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: ElementRef },
        { type: OFormComponent, decorators: [{ type: Optional }, { type: Inject, args: [forwardRef(function () { return OFormComponent; }),] }] }
    ]; };
    OGridComponent.propDecorators = {
        inputGridItems: [{ type: ContentChildren, args: [forwardRef(function () { return OGridItemComponent; }),] }],
        gridItemDirectives: [{ type: ViewChildren, args: [OGridItemDirective,] }],
        matpaginator: [{ type: ViewChild, args: [MatPaginator, { static: false },] }]
    };
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OGridComponent.prototype, "fixedHeader", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OGridComponent.prototype, "showPageSize", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OGridComponent.prototype, "showSort", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OGridComponent.prototype, "showFooter", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OGridComponent.prototype, "refreshButton", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OGridComponent.prototype, "insertButton", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OGridComponent.prototype, "insertButtonFloatable", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], OGridComponent.prototype, "showButtonsText", void 0);
    return OGridComponent;
}(AbstractOServiceComponent));
export { OGridComponent };
//# sourceMappingURL=data:application/json;base64,