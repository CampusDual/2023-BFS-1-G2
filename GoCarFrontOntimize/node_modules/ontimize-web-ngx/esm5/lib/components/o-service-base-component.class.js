import * as tslib_1 from "tslib";
import { ChangeDetectorRef, HostListener, isDevMode } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { BehaviorSubject } from 'rxjs';
import { InputConverter } from '../decorators/input-converter';
import { DialogService } from '../services/dialog.service';
import { LocalStorageService } from '../services/local-storage.service';
import { OErrorDialogManager } from '../services/o-error-dialog-manager.service';
import { OntimizeService } from '../services/ontimize/ontimize.service';
import { AbstractComponentStateService } from '../services/state/o-component-state.service';
import { Codes } from '../util/codes';
import { ServiceUtils } from '../util/service.utils';
import { Util } from '../util/util';
import { OExpandableContainerComponent } from './expandable-container/o-expandable-container.component';
import { OFormComponent } from './form/o-form.component';
export var DEFAULT_INPUTS_O_SERVICE_BASE_COMPONENT = [
    'oattr: attr',
    'service',
    'serviceType : service-type',
    'entity',
    'queryOnInit: query-on-init',
    'queryOnBind: query-on-bind',
    'queryOnEvent: query-on-event',
    'pageable',
    'columns',
    'keys',
    'parentKeys: parent-keys',
    'staticData: static-data',
    'queryMethod: query-method',
    'paginatedQueryMethod : paginated-query-method',
    'oQueryRows: query-rows',
    'insertMethod: insert-method',
    'updateMethod: update-method',
    'deleteMethod: delete-method',
    'storeState: store-state',
    'queryWithNullParentKeys: query-with-null-parent-keys',
    'queryFallbackFunction: query-fallback-function'
];
var AbstractOServiceBaseComponent = (function () {
    function AbstractOServiceBaseComponent(injector) {
        this.injector = injector;
        this.queryOnInit = true;
        this.queryOnBind = true;
        this.pageable = false;
        this.queryMethod = Codes.QUERY_METHOD;
        this.paginatedQueryMethod = Codes.PAGINATED_QUERY_METHOD;
        this.originalQueryRows = Codes.DEFAULT_QUERY_ROWS;
        this._queryRows = this.originalQueryRows;
        this.insertMethod = Codes.INSERT_METHOD;
        this.updateMethod = Codes.UPDATE_METHOD;
        this.deleteMethod = Codes.DELETE_METHOD;
        this.storeState = true;
        this.queryWithNullParentKeys = false;
        this.colArray = [];
        this.keysArray = [];
        this._pKeysEquiv = {};
        this.dataArray = [];
        this.oattrFromEntity = false;
        this.loadingSubject = new BehaviorSubject(false);
        this.loading = this.loadingSubject.asObservable();
        this.alreadyStored = false;
        this.sqlTypes = undefined;
        this.abortQuery = new BehaviorSubject(false);
        this.dialogService = this.injector.get(DialogService);
        this.oErrorDialogManager = this.injector.get(OErrorDialogManager);
        this.localStorageService = this.injector.get(LocalStorageService);
        this.componentStateService = this.injector.get(AbstractComponentStateService);
        this.router = this.injector.get(Router);
        this.actRoute = this.injector.get(ActivatedRoute);
        try {
            this.cd = this.injector.get(ChangeDetectorRef);
            this.form = this.injector.get(OFormComponent);
        }
        catch (e) {
        }
        try {
            this.expandableContainer = this.injector.get(OExpandableContainerComponent);
        }
        catch (e) {
        }
    }
    Object.defineProperty(AbstractOServiceBaseComponent.prototype, "oQueryRows", {
        set: function (value) {
            if (Util.isDefined(value)) {
                value = typeof value !== 'number' ? parseInt(value, 10) : value;
                this.originalQueryRows = value;
                this._queryRows = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractOServiceBaseComponent.prototype, "queryRows", {
        get: function () {
            return this._queryRows;
        },
        set: function (value) {
            if (Util.isDefined(value)) {
                this._queryRows = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractOServiceBaseComponent.prototype, "state", {
        get: function () {
            return this.componentStateService.state;
        },
        enumerable: true,
        configurable: true
    });
    AbstractOServiceBaseComponent.prototype.initialize = function () {
        var _this = this;
        if (!Util.isDefined(this.oattr) && Util.isDefined(this.entity)) {
            this.oattr = this.entity.replace('.', '_');
            this.oattrFromEntity = true;
        }
        this.keysArray = Util.parseArray(this.keys);
        this.checkColumns();
        var pkArray = Util.parseArray(this.parentKeys);
        this._pKeysEquiv = Util.parseParentKeysEquivalences(pkArray, Codes.COLUMNS_ALIAS_SEPARATOR);
        this.componentStateService.initialize(this);
        if (this.staticData) {
            this.queryOnBind = false;
            this.queryOnInit = false;
            this.setDataArray(this.staticData);
        }
        else {
            this.configureService();
        }
        if (this.form && Util.isDefined(this.dataService)) {
            this.setFormComponent(this.form);
        }
        if (Util.isDefined(this.queryOnEvent) && Util.isDefined(this.queryOnEvent.subscribe)) {
            var self_1 = this;
            this.queryOnEventSubscription = this.queryOnEvent.subscribe(function (value) {
                if (Util.isDefined(value) || _this.queryWithNullParentKeys) {
                    self_1.queryData();
                }
            });
        }
        if (typeof this.queryFallbackFunction !== 'function') {
            this.queryFallbackFunction = undefined;
        }
    };
    AbstractOServiceBaseComponent.prototype.checkColumns = function () {
        var _this = this;
        this.colArray = Util.parseArray(this.columns, true);
        if (isDevMode()) {
            this.keysArray.forEach(function (key) {
                if (_this.columns.indexOf(key) === -1) {
                    console.warn("In the component '" + _this.oattr + "', the key '" + key + "' is not included in the columns definition and some functionalities may not work correctly");
                }
            });
        }
    };
    AbstractOServiceBaseComponent.prototype.afterViewInit = function () {
        var _this = this;
        this.registerLocalStorageServiceRouteChange();
        this.abortQuery.subscribe(function (value) {
            if (value) {
                if (_this.querySubscription) {
                    _this.querySubscription.unsubscribe();
                }
                _this.setData([]);
            }
        });
    };
    AbstractOServiceBaseComponent.prototype.destroy = function () {
        if (this.onFormDataSubscribe) {
            this.onFormDataSubscribe.unsubscribe();
        }
        if (this.querySubscription) {
            this.querySubscription.unsubscribe();
        }
        if (this.onRouteChangeStorageSubscription) {
            this.onRouteChangeStorageSubscription.unsubscribe();
        }
        if (this.queryOnEventSubscription) {
            this.queryOnEventSubscription.unsubscribe();
        }
    };
    AbstractOServiceBaseComponent.prototype.ngOnChanges = function (changes) {
        if (Util.isDefined(changes.staticData)) {
            this.setDataArray(changes.staticData.currentValue);
        }
    };
    AbstractOServiceBaseComponent.prototype.beforeunloadHandler = function () {
        this.updateStateStorage();
    };
    AbstractOServiceBaseComponent.prototype.getAttribute = function () {
        return this.oattr;
    };
    AbstractOServiceBaseComponent.prototype.getComponentKey = function () {
        return this.getAttribute();
    };
    AbstractOServiceBaseComponent.prototype.getDataToStore = function () {
        return this.state;
    };
    AbstractOServiceBaseComponent.prototype.getRouteKey = function () {
        var route = this.router.url;
        this.actRoute.params.subscribe(function (params) {
            Object.keys(params).forEach(function (key) {
                route = route.replace(params[key], key);
            });
        });
        return route;
    };
    AbstractOServiceBaseComponent.prototype.getKeys = function () {
        return this.keysArray;
    };
    AbstractOServiceBaseComponent.prototype.configureService = function () {
        var configureServiceArgs = { injector: this.injector, baseService: OntimizeService, entity: this.entity, service: this.service, serviceType: this.serviceType };
        this.dataService = Util.configureService(configureServiceArgs);
    };
    AbstractOServiceBaseComponent.prototype.getDataArray = function () {
        return this.dataArray;
    };
    AbstractOServiceBaseComponent.prototype.setDataArray = function (data) {
        if (Util.isArray(data)) {
            this.dataArray = data;
        }
        else if (Util.isObject(data)) {
            this.dataArray = [data];
        }
        else {
            console.warn('Component has received not supported service data. Supported data are Array or Object');
            this.dataArray = [];
        }
    };
    AbstractOServiceBaseComponent.prototype.setFormComponent = function (form) {
        var _this = this;
        if (!Util.isDefined(this.form)) {
            this.form = form;
        }
        if (this.queryOnBind) {
            this.onFormDataSubscribe = this.form.onDataLoaded.subscribe(function () { return _this.pageable ? _this.reloadPaginatedDataFromStart() : _this.reloadData(); });
        }
    };
    AbstractOServiceBaseComponent.prototype.getParentKeysFromContext = function (parentKeys, context) {
        var result = {};
        var checkRouteParamsRecursive = this.router.paramsInheritanceStrategy !== 'always';
        if (context instanceof OExpandableContainerComponent) {
            result = ServiceUtils.getParentKeysFromExpandableContainer(parentKeys, context, this.actRoute, checkRouteParamsRecursive);
        }
        else {
            result = ServiceUtils.getParentKeysFromForm(parentKeys, context, this.actRoute, checkRouteParamsRecursive);
        }
        return result;
    };
    AbstractOServiceBaseComponent.prototype.queryData = function (filter, ovrrArgs) {
        var _this = this;
        var queryMethodName = this.pageable ? this.paginatedQueryMethod : this.queryMethod;
        if (!this.dataService || !(queryMethodName in this.dataService) || !this.entity) {
            return;
        }
        var filterParentKeys = this.getParentKeysValues();
        if (!ServiceUtils.filterContainsAllParentKeys(filterParentKeys, this._pKeysEquiv) && !this.queryWithNullParentKeys) {
            this.setData([], []);
        }
        else {
            if (this.querySubscription) {
                this.querySubscription.unsubscribe();
            }
            this.loadingSubject.next(true);
            this.abortQuery.next(false);
            this.queryArguments = this.getQueryArguments(filter, ovrrArgs);
            if (this.abortQuery.value) {
                this.state.queryRecordOffset = 0;
                this.state.totalQueryRecordsNumber = 0;
                this.setData([], []);
                this.cd.detectChanges();
                this.loadingSubject.next(false);
                return;
            }
            this.querySubscription = this.dataService[queryMethodName].apply(this.dataService, this.queryArguments)
                .subscribe(function (res) {
                var data;
                _this.sqlTypes = undefined;
                if (Util.isArray(res)) {
                    data = res;
                    _this.sqlTypes = {};
                }
                else if (res.isSuccessful()) {
                    var arrData = (res.data !== undefined) ? res.data : [];
                    data = Util.isArray(arrData) ? arrData : [];
                    _this.sqlTypes = res.sqlTypes;
                    if (_this.pageable) {
                        _this.updatePaginationInfo(res);
                    }
                }
                _this.setData(data, _this.sqlTypes, (ovrrArgs && ovrrArgs.replace));
                _this.loadingSubject.next(false);
            }, function (err) {
                _this.setData([], []);
                _this.loadingSubject.next(false);
                if (Util.isDefined(_this.queryFallbackFunction)) {
                    _this.queryFallbackFunction(err);
                }
                else {
                    _this.oErrorDialogManager.openErrorDialog(err);
                    console.error(err);
                }
            });
        }
    };
    AbstractOServiceBaseComponent.prototype.reloadData = function () {
        this.queryData();
    };
    AbstractOServiceBaseComponent.prototype.reloadPaginatedDataFromStart = function () {
        this.reloadData();
    };
    AbstractOServiceBaseComponent.prototype.extractKeysFromRecord = function (item) {
        var result = {};
        if (Util.isObject(item)) {
            this.keysArray.forEach(function (key) {
                if (Util.isDefined(item[key])) {
                    result[key] = item[key];
                }
            });
        }
        return result;
    };
    AbstractOServiceBaseComponent.prototype.getAttributesValuesToQuery = function () {
        var result = this.colArray;
        this.keysArray.forEach(function (key) {
            if (result.indexOf(key) === -1) {
                result.push(key);
            }
        });
        return result;
    };
    AbstractOServiceBaseComponent.prototype.getQueryArguments = function (filter, ovrrArgs) {
        var compFilter = this.getComponentFilter(filter);
        var queryCols = this.getAttributesValuesToQuery();
        var sqlTypes = (ovrrArgs && ovrrArgs.hasOwnProperty('sqltypes')) ? ovrrArgs.sqltypes : this.form ? this.form.getAttributesSQLTypes() : {};
        var queryArguments = [compFilter, queryCols, this.entity, sqlTypes];
        if (this.pageable) {
            var queryOffset = (ovrrArgs && ovrrArgs.hasOwnProperty('offset')) ? ovrrArgs.offset : this.state.queryRecordOffset;
            var queryRowsN = (ovrrArgs && ovrrArgs.hasOwnProperty('length')) ? ovrrArgs.length : this.queryRows;
            queryArguments = queryArguments.concat([queryOffset, queryRowsN, undefined]);
        }
        return queryArguments;
    };
    AbstractOServiceBaseComponent.prototype.updatePaginationInfo = function (queryRes) {
        var resultEndIndex = queryRes.startRecordIndex + (queryRes.data ? queryRes.data.length : 0);
        if (queryRes.startRecordIndex !== undefined) {
            this.state.queryRecordOffset = resultEndIndex;
        }
        if (queryRes.totalQueryRecordsNumber !== undefined) {
            this.state.totalQueryRecordsNumber = queryRes.totalQueryRecordsNumber;
        }
    };
    AbstractOServiceBaseComponent.prototype.getTotalRecordsNumber = function () {
        return Util.isDefined(this.state.totalQueryRecordsNumber) ? this.state.totalQueryRecordsNumber : undefined;
    };
    AbstractOServiceBaseComponent.prototype.getContextComponent = function () {
        return this.expandableContainer || this.form;
    };
    AbstractOServiceBaseComponent.prototype.getComponentFilter = function (existingFilter) {
        if (existingFilter === void 0) { existingFilter = {}; }
        var filterParentKeys = this.getParentKeysFromContext(this._pKeysEquiv, this.getContextComponent());
        existingFilter = Object.assign(existingFilter || {}, filterParentKeys);
        return existingFilter;
    };
    AbstractOServiceBaseComponent.prototype.getSqlTypes = function () {
        return Util.isDefined(this.sqlTypes) ? this.sqlTypes : {};
    };
    AbstractOServiceBaseComponent.prototype.getParentKeysValues = function () {
        var context = this.getContextComponent();
        return this.getParentKeysFromContext(this._pKeysEquiv, context);
    };
    AbstractOServiceBaseComponent.prototype.updateStateStorage = function () {
        if (this.localStorageService && this.storeState && !this.alreadyStored) {
            this.alreadyStored = true;
            this.localStorageService.updateComponentStorage(this, this.getRouteKey());
        }
    };
    AbstractOServiceBaseComponent.prototype.setData = function (data, sqlTypes, replace) {
    };
    AbstractOServiceBaseComponent.prototype.registerLocalStorageServiceRouteChange = function () {
        var _this = this;
        if (this.storeState) {
            this.onRouteChangeStorageSubscription = this.localStorageService.onRouteChange.subscribe(function (res) {
                _this.updateStateStorage();
            });
        }
    };
    AbstractOServiceBaseComponent.propDecorators = {
        beforeunloadHandler: [{ type: HostListener, args: ['window:beforeunload', [],] }]
    };
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], AbstractOServiceBaseComponent.prototype, "queryOnInit", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], AbstractOServiceBaseComponent.prototype, "queryOnBind", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], AbstractOServiceBaseComponent.prototype, "pageable", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], AbstractOServiceBaseComponent.prototype, "storeState", void 0);
    tslib_1.__decorate([
        InputConverter(),
        tslib_1.__metadata("design:type", Boolean)
    ], AbstractOServiceBaseComponent.prototype, "queryWithNullParentKeys", void 0);
    return AbstractOServiceBaseComponent;
}());
export { AbstractOServiceBaseComponent };
var DefaultOServiceBaseComponent = (function (_super) {
    tslib_1.__extends(DefaultOServiceBaseComponent, _super);
    function DefaultOServiceBaseComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return DefaultOServiceBaseComponent;
}(AbstractOServiceBaseComponent));
export { DefaultOServiceBaseComponent };
var OServiceBaseComponent = (function (_super) {
    tslib_1.__extends(OServiceBaseComponent, _super);
    function OServiceBaseComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return OServiceBaseComponent;
}(AbstractOServiceBaseComponent));
export { OServiceBaseComponent };
//# sourceMappingURL=data:application/json;base64,