import { Component, ElementRef, EventEmitter, forwardRef, Input, NgZone, Output, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { Util } from '../../../util/util';
var defaults = {
    contentsCss: [''],
    customConfig: ''
};
var CKEditorComponent = (function () {
    function CKEditorComponent(ngZone) {
        this.ngZone = ngZone;
        this.innerValue = '';
        this._readonly = false;
        this.config = {};
        this.skin = 'moono-lisa';
        this.language = 'en';
        this.fullPage = false;
        this.inline = false;
        this.change = new EventEmitter();
        this.ready = new EventEmitter();
        this.blur = new EventEmitter();
        this.focus = new EventEmitter();
    }
    Object.defineProperty(CKEditorComponent.prototype, "instance", {
        get: function () {
            return this.ckIns;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CKEditorComponent.prototype, "readonly", {
        get: function () {
            return this._readonly;
        },
        set: function (value) {
            var _this = this;
            this._readonly = value;
            setTimeout(function () {
                if (Util.isDefined(_this.ckIns) && Util.isDefined(_this.ckIns.editable())) {
                    _this.ckIns.setReadOnly(_this.readonly);
                }
            });
        },
        enumerable: true,
        configurable: true
    });
    CKEditorComponent.getRandomIdentifier = function (id) {
        if (id === void 0) { id = ''; }
        return 'editor-' + (id !== '' ? id : Math.round(Util.randomNumber() * 100000000));
    };
    CKEditorComponent.prototype.ngOnDestroy = function () {
        this.destroyCKEditor();
    };
    CKEditorComponent.prototype.ngAfterViewInit = function () {
        this.destroyCKEditor();
        this.initCKEditor(CKEditorComponent.getRandomIdentifier(this.id));
    };
    CKEditorComponent.prototype.initCKEditor = function (identifier) {
        var _this = this;
        if (typeof CKEDITOR === 'undefined') {
            return console.warn('CKEditor 4.x is missing (http://ckeditor.com/)');
        }
        this.identifier = identifier;
        this.ck.nativeElement.setAttribute('name', this.identifier);
        var opt = Object.assign({}, defaults, this.config, {
            readOnly: this.readonly,
            skin: this.skin,
            language: this.language,
            fullPage: this.fullPage,
            inline: this.inline,
            width: '100%'
        });
        this.ckIns = this.inline
            ? CKEDITOR.inline(this.ck.nativeElement, opt)
            : CKEDITOR.replace(this.ck.nativeElement, opt);
        this.ckIns.setData(this.innerValue);
        this.ckIns.on('change', function () {
            var val = _this.ckIns.getData();
            _this.updateValue(val);
        });
        this.ckIns.on('instanceReady', function (evt) {
            _this.ngZone.run(function () {
                _this.ready.emit(evt);
            });
        });
        this.ckIns.on('blur', function (evt) {
            _this.ngZone.run(function () {
                _this.blur.emit(evt);
                _this.propagateTouch();
            });
        });
        this.ckIns.on('focus', function (evt) {
            _this.ngZone.run(function () {
                _this.focus.emit(evt);
            });
        });
    };
    CKEditorComponent.prototype.destroyCKEditor = function () {
        if (this.ckIns) {
            this.ckIns.removeAllListeners();
            if (CKEDITOR.instances.hasOwnProperty(this.ckIns.name)) {
                CKEDITOR.remove(CKEDITOR.instances[this.ckIns.name]);
            }
            this.ckIns.destroy();
            this.ckIns = null;
            var editorEl = document.querySelector('#cke_' + this.identifier);
            if (Util.isDefined(editorEl) && Util.isDefined(editorEl.parentElement)) {
                editorEl.parentElement.removeChild(editorEl);
            }
        }
    };
    CKEditorComponent.prototype.updateValue = function (value) {
        var _this = this;
        this.ngZone.run(function () {
            _this.innerValue = value;
            _this.propagateChange(value);
            _this.propagateTouch();
            _this.change.emit(value);
        });
    };
    CKEditorComponent.prototype.writeValue = function (value) {
        this.innerValue = value || '';
        if (this.ckIns) {
            this.ckIns.setData(this.innerValue);
            var val = this.ckIns.getData();
            this.ckIns.setData(val);
        }
    };
    CKEditorComponent.prototype.propagateChange = function (_) {
    };
    CKEditorComponent.prototype.propagateTouch = function () {
    };
    CKEditorComponent.prototype.registerOnChange = function (fn) {
        this.propagateChange = fn;
    };
    CKEditorComponent.prototype.registerOnTouched = function (fn) {
        this.propagateTouch = fn;
    };
    CKEditorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ck-editor',
                    template: "<textarea #ck></textarea>",
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return CKEditorComponent; }),
                            multi: true
                        }],
                    exportAs: 'ckEditor'
                }] }
    ];
    CKEditorComponent.ctorParameters = function () { return [
        { type: NgZone }
    ]; };
    CKEditorComponent.propDecorators = {
        readonly: [{ type: Input }],
        config: [{ type: Input }],
        skin: [{ type: Input }],
        language: [{ type: Input }],
        fullPage: [{ type: Input }],
        inline: [{ type: Input }],
        id: [{ type: Input }],
        change: [{ type: Output }],
        ready: [{ type: Output }],
        blur: [{ type: Output }],
        focus: [{ type: Output }],
        ck: [{ type: ViewChild, args: ['ck', { static: false },] }]
    };
    return CKEditorComponent;
}());
export { CKEditorComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2stZWRpdG9yLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL29udGltaXplLXdlYi1uZ3gvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9tYXRlcmlhbC9ja2VkaXRvci9jay1lZGl0b3IuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFFTCxTQUFTLEVBQ1QsVUFBVSxFQUNWLFlBQVksRUFDWixVQUFVLEVBQ1YsS0FBSyxFQUNMLE1BQU0sRUFFTixNQUFNLEVBQ04sU0FBUyxFQUNWLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBd0IsaUJBQWlCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUV6RSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFJMUMsSUFBTSxRQUFRLEdBQUc7SUFDZixXQUFXLEVBQUUsQ0FBQyxFQUFFLENBQUM7SUFDakIsWUFBWSxFQUFFLEVBQUU7Q0FDakIsQ0FBQztBQUVGO0lBbURFLDJCQUNZLE1BQWM7UUFBZCxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBckNoQixlQUFVLEdBQVcsRUFBRSxDQUFDO1FBTXhCLGNBQVMsR0FBWSxLQUFLLENBQUM7UUFnQnJCLFdBQU0sR0FBUSxFQUFFLENBQUM7UUFDakIsU0FBSSxHQUFXLFlBQVksQ0FBQztRQUM1QixhQUFRLEdBQVcsSUFBSSxDQUFDO1FBQ3hCLGFBQVEsR0FBWSxLQUFLLENBQUM7UUFDMUIsV0FBTSxHQUFZLEtBQUssQ0FBQztRQUc5QixXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUM1QixVQUFLLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUMzQixTQUFJLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUMxQixVQUFLLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQU1qQyxDQUFDO0lBcENMLHNCQUFXLHVDQUFRO2FBQW5CO1lBQ0UsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3BCLENBQUM7OztPQUFBO0lBSUQsc0JBQ0ksdUNBQVE7YUFTWjtZQUNFLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUN4QixDQUFDO2FBWkQsVUFDYSxLQUFjO1lBRDNCLGlCQVFDO1lBTkMsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7WUFDdkIsVUFBVSxDQUFDO2dCQUNULElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFJLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQUU7b0JBQ3ZFLEtBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLEtBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztpQkFDdkM7WUFDSCxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUM7OztPQUFBO0lBd0JnQixxQ0FBbUIsR0FBcEMsVUFBcUMsRUFBZTtRQUFmLG1CQUFBLEVBQUEsT0FBZTtRQUNsRCxPQUFPLFNBQVMsR0FBRyxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQztJQUNwRixDQUFDO0lBRUQsdUNBQVcsR0FBWDtRQUNFLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBRUQsMkNBQWUsR0FBZjtRQUNFLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsWUFBWSxDQUFDLGlCQUFpQixDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3BFLENBQUM7SUFFTSx3Q0FBWSxHQUFuQixVQUFvQixVQUFrQjtRQUF0QyxpQkE0Q0M7UUEzQ0MsSUFBSSxPQUFPLFFBQVEsS0FBSyxXQUFXLEVBQUU7WUFDbkMsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLGdEQUFnRCxDQUFDLENBQUM7U0FDdkU7UUFFRCxJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUU1RCxJQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNuRCxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7WUFDdkIsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO1lBQ2YsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO1lBQ3ZCLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtZQUN2QixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07WUFDbkIsS0FBSyxFQUFFLE1BQU07U0FDZCxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNO1lBQ3RCLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLEdBQUcsQ0FBQztZQUM3QyxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNqRCxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFcEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFO1lBQ3RCLElBQU0sR0FBRyxHQUFHLEtBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDakMsS0FBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN4QixDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLGVBQWUsRUFBRSxVQUFDLEdBQVE7WUFDdEMsS0FBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7Z0JBQ2QsS0FBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDdkIsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxVQUFDLEdBQVE7WUFDN0IsS0FBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7Z0JBQ2QsS0FBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ3BCLEtBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUN4QixDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLFVBQUMsR0FBUTtZQUM5QixLQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztnQkFDZCxLQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN2QixDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVNLDJDQUFlLEdBQXRCO1FBQ0UsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ2QsSUFBSSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1lBQ2hDLElBQUksUUFBUSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDdEQsUUFBUSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQzthQUN0RDtZQUNELElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDckIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7WUFDbEIsSUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ25FLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsRUFBRTtnQkFDdEUsUUFBUSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDOUM7U0FDRjtJQUNILENBQUM7SUFFUyx1Q0FBVyxHQUFyQixVQUFzQixLQUFhO1FBQW5DLGlCQU9DO1FBTkMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7WUFDZCxLQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztZQUN4QixLQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzVCLEtBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUN0QixLQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMxQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxzQ0FBVSxHQUFWLFVBQVcsS0FBVTtRQUNuQixJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssSUFBSSxFQUFFLENBQUM7UUFDOUIsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBRWQsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ3BDLElBQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDakMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDekI7SUFDSCxDQUFDO0lBRVMsMkNBQWUsR0FBekIsVUFBMEIsQ0FBTTtJQUVoQyxDQUFDO0lBRVMsMENBQWMsR0FBeEI7SUFFQSxDQUFDO0lBRUQsNENBQWdCLEdBQWhCLFVBQWlCLEVBQU87UUFDdEIsSUFBSSxDQUFDLGVBQWUsR0FBRyxFQUFFLENBQUM7SUFDNUIsQ0FBQztJQUVELDZDQUFpQixHQUFqQixVQUFrQixFQUFPO1FBQ3ZCLElBQUksQ0FBQyxjQUFjLEdBQUcsRUFBRSxDQUFDO0lBQzNCLENBQUM7O2dCQWxLRixTQUFTLFNBQUM7b0JBRVQsUUFBUSxFQUFFLFdBQVc7b0JBQ3JCLFFBQVEsRUFBRSwyQkFBMkI7b0JBQ3JDLFNBQVMsRUFBRSxDQUFDOzRCQUNWLE9BQU8sRUFBRSxpQkFBaUI7NEJBQzFCLFdBQVcsRUFBRSxVQUFVLENBQUMsY0FBTSxPQUFBLGlCQUFpQixFQUFqQixDQUFpQixDQUFDOzRCQUNoRCxLQUFLLEVBQUUsSUFBSTt5QkFDWixDQUFDO29CQUNGLFFBQVEsRUFBRSxVQUFVO2lCQUNyQjs7O2dCQTFCQyxNQUFNOzs7MkJBdUNMLEtBQUs7eUJBY0wsS0FBSzt1QkFDTCxLQUFLOzJCQUNMLEtBQUs7MkJBQ0wsS0FBSzt5QkFDTCxLQUFLO3FCQUNMLEtBQUs7eUJBRUwsTUFBTTt3QkFDTixNQUFNO3VCQUNOLE1BQU07d0JBQ04sTUFBTTtxQkFFTixTQUFTLFNBQUMsSUFBSSxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRTs7SUFtSHBDLHdCQUFDO0NBQUEsQUFwS0QsSUFvS0M7U0F6SlksaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBFdmVudEVtaXR0ZXIsXG4gIGZvcndhcmRSZWYsXG4gIElucHV0LFxuICBOZ1pvbmUsXG4gIE9uRGVzdHJveSxcbiAgT3V0cHV0LFxuICBWaWV3Q2hpbGRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciwgTkdfVkFMVUVfQUNDRVNTT1IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmltcG9ydCB7IFV0aWwgfSBmcm9tICcuLi8uLi8uLi91dGlsL3V0aWwnO1xuXG5kZWNsYXJlIHZhciBDS0VESVRPUjogYW55O1xuXG5jb25zdCBkZWZhdWx0cyA9IHtcbiAgY29udGVudHNDc3M6IFsnJ10sXG4gIGN1c3RvbUNvbmZpZzogJydcbn07XG5cbkBDb21wb25lbnQoe1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IGNvbXBvbmVudC1zZWxlY3RvclxuICBzZWxlY3RvcjogJ2NrLWVkaXRvcicsXG4gIHRlbXBsYXRlOiBgPHRleHRhcmVhICNjaz48L3RleHRhcmVhPmAsXG4gIHByb3ZpZGVyczogW3tcbiAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBDS0VkaXRvckNvbXBvbmVudCksXG4gICAgbXVsdGk6IHRydWVcbiAgfV0sXG4gIGV4cG9ydEFzOiAnY2tFZGl0b3InXG59KVxuZXhwb3J0IGNsYXNzIENLRWRpdG9yQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95LCBDb250cm9sVmFsdWVBY2Nlc3NvciB7XG5cbiAgcHJvdGVjdGVkIGNrSW5zOiBhbnk7XG4gIHByb3RlY3RlZCBpZGVudGlmaWVyOiBzdHJpbmc7XG4gIHByb3RlY3RlZCBpbm5lclZhbHVlOiBzdHJpbmcgPSAnJztcblxuICBwdWJsaWMgZ2V0IGluc3RhbmNlKCkge1xuICAgIHJldHVybiB0aGlzLmNrSW5zO1xuICB9XG5cbiAgcHJvdGVjdGVkIF9yZWFkb25seTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIEBJbnB1dCgpXG4gIHNldCByZWFkb25seSh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX3JlYWRvbmx5ID0gdmFsdWU7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAoVXRpbC5pc0RlZmluZWQodGhpcy5ja0lucykgJiYgVXRpbC5pc0RlZmluZWQodGhpcy5ja0lucy5lZGl0YWJsZSgpKSkge1xuICAgICAgICB0aGlzLmNrSW5zLnNldFJlYWRPbmx5KHRoaXMucmVhZG9ubHkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZ2V0IHJlYWRvbmx5KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9yZWFkb25seTtcbiAgfVxuXG4gIEBJbnB1dCgpIHB1YmxpYyBjb25maWc6IGFueSA9IHt9O1xuICBASW5wdXQoKSBwdWJsaWMgc2tpbjogc3RyaW5nID0gJ21vb25vLWxpc2EnO1xuICBASW5wdXQoKSBwdWJsaWMgbGFuZ3VhZ2U6IHN0cmluZyA9ICdlbic7XG4gIEBJbnB1dCgpIHB1YmxpYyBmdWxsUGFnZTogYm9vbGVhbiA9IGZhbHNlO1xuICBASW5wdXQoKSBwdWJsaWMgaW5saW5lOiBib29sZWFuID0gZmFsc2U7XG4gIEBJbnB1dCgpIHB1YmxpYyBpZDogc3RyaW5nO1xuXG4gIEBPdXRwdXQoKSBjaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBPdXRwdXQoKSByZWFkeSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgQE91dHB1dCgpIGJsdXIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBPdXRwdXQoKSBmb2N1cyA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBAVmlld0NoaWxkKCdjaycsIHsgc3RhdGljOiBmYWxzZSB9KSBwdWJsaWMgY2s6IEVsZW1lbnRSZWY7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIG5nWm9uZTogTmdab25lXG4gICkgeyB9XG5cbiAgcHJvdGVjdGVkIHN0YXRpYyBnZXRSYW5kb21JZGVudGlmaWVyKGlkOiBzdHJpbmcgPSAnJykge1xuICAgIHJldHVybiAnZWRpdG9yLScgKyAoaWQgIT09ICcnID8gaWQgOiBNYXRoLnJvdW5kKFV0aWwucmFuZG9tTnVtYmVyKCkgKiAxMDAwMDAwMDApKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuZGVzdHJveUNLRWRpdG9yKCk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5kZXN0cm95Q0tFZGl0b3IoKTtcbiAgICB0aGlzLmluaXRDS0VkaXRvcihDS0VkaXRvckNvbXBvbmVudC5nZXRSYW5kb21JZGVudGlmaWVyKHRoaXMuaWQpKTtcbiAgfVxuXG4gIHB1YmxpYyBpbml0Q0tFZGl0b3IoaWRlbnRpZmllcjogc3RyaW5nKSB7XG4gICAgaWYgKHR5cGVvZiBDS0VESVRPUiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiBjb25zb2xlLndhcm4oJ0NLRWRpdG9yIDQueCBpcyBtaXNzaW5nIChodHRwOi8vY2tlZGl0b3IuY29tLyknKTtcbiAgICB9XG5cbiAgICB0aGlzLmlkZW50aWZpZXIgPSBpZGVudGlmaWVyO1xuICAgIHRoaXMuY2submF0aXZlRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ25hbWUnLCB0aGlzLmlkZW50aWZpZXIpO1xuXG4gICAgY29uc3Qgb3B0ID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdHMsIHRoaXMuY29uZmlnLCB7XG4gICAgICByZWFkT25seTogdGhpcy5yZWFkb25seSxcbiAgICAgIHNraW46IHRoaXMuc2tpbixcbiAgICAgIGxhbmd1YWdlOiB0aGlzLmxhbmd1YWdlLFxuICAgICAgZnVsbFBhZ2U6IHRoaXMuZnVsbFBhZ2UsXG4gICAgICBpbmxpbmU6IHRoaXMuaW5saW5lLFxuICAgICAgd2lkdGg6ICcxMDAlJ1xuICAgIH0pO1xuICAgIHRoaXMuY2tJbnMgPSB0aGlzLmlubGluZVxuICAgICAgPyBDS0VESVRPUi5pbmxpbmUodGhpcy5jay5uYXRpdmVFbGVtZW50LCBvcHQpXG4gICAgICA6IENLRURJVE9SLnJlcGxhY2UodGhpcy5jay5uYXRpdmVFbGVtZW50LCBvcHQpO1xuICAgIHRoaXMuY2tJbnMuc2V0RGF0YSh0aGlzLmlubmVyVmFsdWUpO1xuXG4gICAgdGhpcy5ja0lucy5vbignY2hhbmdlJywgKCkgPT4ge1xuICAgICAgY29uc3QgdmFsID0gdGhpcy5ja0lucy5nZXREYXRhKCk7XG4gICAgICB0aGlzLnVwZGF0ZVZhbHVlKHZhbCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLmNrSW5zLm9uKCdpbnN0YW5jZVJlYWR5JywgKGV2dDogYW55KSA9PiB7XG4gICAgICB0aGlzLm5nWm9uZS5ydW4oKCkgPT4ge1xuICAgICAgICB0aGlzLnJlYWR5LmVtaXQoZXZ0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdGhpcy5ja0lucy5vbignYmx1cicsIChldnQ6IGFueSkgPT4ge1xuICAgICAgdGhpcy5uZ1pvbmUucnVuKCgpID0+IHtcbiAgICAgICAgdGhpcy5ibHVyLmVtaXQoZXZ0KTtcbiAgICAgICAgdGhpcy5wcm9wYWdhdGVUb3VjaCgpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0aGlzLmNrSW5zLm9uKCdmb2N1cycsIChldnQ6IGFueSkgPT4ge1xuICAgICAgdGhpcy5uZ1pvbmUucnVuKCgpID0+IHtcbiAgICAgICAgdGhpcy5mb2N1cy5lbWl0KGV2dCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBkZXN0cm95Q0tFZGl0b3IoKSB7XG4gICAgaWYgKHRoaXMuY2tJbnMpIHtcbiAgICAgIHRoaXMuY2tJbnMucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gICAgICBpZiAoQ0tFRElUT1IuaW5zdGFuY2VzLmhhc093blByb3BlcnR5KHRoaXMuY2tJbnMubmFtZSkpIHtcbiAgICAgICAgQ0tFRElUT1IucmVtb3ZlKENLRURJVE9SLmluc3RhbmNlc1t0aGlzLmNrSW5zLm5hbWVdKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuY2tJbnMuZGVzdHJveSgpO1xuICAgICAgdGhpcy5ja0lucyA9IG51bGw7XG4gICAgICBjb25zdCBlZGl0b3JFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNja2VfJyArIHRoaXMuaWRlbnRpZmllcik7XG4gICAgICBpZiAoVXRpbC5pc0RlZmluZWQoZWRpdG9yRWwpICYmIFV0aWwuaXNEZWZpbmVkKGVkaXRvckVsLnBhcmVudEVsZW1lbnQpKSB7XG4gICAgICAgIGVkaXRvckVsLnBhcmVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoZWRpdG9yRWwpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCB1cGRhdGVWYWx1ZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5uZ1pvbmUucnVuKCgpID0+IHtcbiAgICAgIHRoaXMuaW5uZXJWYWx1ZSA9IHZhbHVlO1xuICAgICAgdGhpcy5wcm9wYWdhdGVDaGFuZ2UodmFsdWUpO1xuICAgICAgdGhpcy5wcm9wYWdhdGVUb3VjaCgpO1xuICAgICAgdGhpcy5jaGFuZ2UuZW1pdCh2YWx1ZSk7XG4gICAgfSk7XG4gIH1cblxuICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLmlubmVyVmFsdWUgPSB2YWx1ZSB8fCAnJztcbiAgICBpZiAodGhpcy5ja0lucykge1xuICAgICAgLy8gRml4IGJ1ZyB0aGF0IGNhbid0IGVtaXQgY2hhbmdlIGV2ZW50IHdoZW4gc2V0IG5vbi1odG1sIHRhZyB2YWx1ZSB0d2ljZSBpbiBmdWxscGFnZSBtb2RlLlxuICAgICAgdGhpcy5ja0lucy5zZXREYXRhKHRoaXMuaW5uZXJWYWx1ZSk7XG4gICAgICBjb25zdCB2YWwgPSB0aGlzLmNrSW5zLmdldERhdGEoKTtcbiAgICAgIHRoaXMuY2tJbnMuc2V0RGF0YSh2YWwpO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBwcm9wYWdhdGVDaGFuZ2UoXzogYW55KSB7XG4gICAgLy8gZG8gbm90aGluZ1xuICB9XG5cbiAgcHJvdGVjdGVkIHByb3BhZ2F0ZVRvdWNoKCkge1xuICAgIC8vIGRvIG5vdGhpbmdcbiAgfVxuXG4gIHJlZ2lzdGVyT25DaGFuZ2UoZm46IGFueSk6IHZvaWQge1xuICAgIHRoaXMucHJvcGFnYXRlQ2hhbmdlID0gZm47XG4gIH1cblxuICByZWdpc3Rlck9uVG91Y2hlZChmbjogYW55KTogdm9pZCB7XG4gICAgdGhpcy5wcm9wYWdhdGVUb3VjaCA9IGZuO1xuICB9XG5cbn1cbiJdfQ==