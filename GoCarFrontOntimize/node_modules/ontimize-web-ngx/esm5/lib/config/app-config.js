import { InjectionToken } from '@angular/core';
import { Util } from '../util/util';
var DEFAULT_LOCAL_STORAGE_KEY = undefined;
var DEFAULT_CONFIG = {
    uuid: DEFAULT_LOCAL_STORAGE_KEY,
    title: 'Ontimize Web App'
};
export var O_INPUTS_OPTIONS = new InjectionToken('o-inputs-options');
export var APP_CONFIG = new InjectionToken('app.config');
var AppConfig = (function () {
    function AppConfig(config) {
        this._config = (config && Util.isObject(config) && !Array.isArray(config)) ? config : {};
    }
    AppConfig.prototype.getConfiguration = function () {
        return Object.assign(DEFAULT_CONFIG, this._config);
    };
    AppConfig.prototype.getServiceConfiguration = function () {
        return this._config.servicesConfiguration || {};
    };
    AppConfig.prototype.getMenuConfiguration = function () {
        return this._config.appMenuConfiguration || [];
    };
    AppConfig.prototype.useRemoteBundle = function () {
        return Util.isDefined(this._config.bundle);
    };
    AppConfig.prototype.getBundleEndpoint = function () {
        var result;
        var existsBundleConf = this.useRemoteBundle();
        if (existsBundleConf && Util.isDefined(this._config.bundle.endpoint)) {
            result = this._config.bundle.endpoint;
        }
        else if (existsBundleConf && Util.isDefined(this._config.bundle.path)) {
            result = this._config.apiEndpoint + '/' + this._config.bundle.path;
        }
        return result;
    };
    AppConfig.prototype.getI18nAssetsConfiguration = function () {
        if (Util.isDefined(this._config.assets) && Util.isDefined(this._config.assets.i18n)) {
            return this._config.assets.i18n;
        }
        return undefined;
    };
    AppConfig.prototype.getCssAssetsConfiguration = function () {
        if (Util.isDefined(this._config.assets) && Util.isDefined(this._config.assets.css)) {
            return this._config.assets.css;
        }
        return undefined;
    };
    AppConfig.prototype.getImagesAssetsConfiguration = function () {
        if (Util.isDefined(this._config.assets) && Util.isDefined(this._config.assets.images)) {
            return this._config.assets.images;
        }
        return undefined;
    };
    AppConfig.prototype.getJsAssetsConfiguration = function () {
        if (Util.isDefined(this._config.assets) && Util.isDefined(this._config.assets.js)) {
            return this._config.assets.js;
        }
        return undefined;
    };
    AppConfig.prototype.getRemoteConfigurationConfig = function () {
        return this._config.remoteConfig;
    };
    AppConfig.prototype.useRemoteConfiguration = function () {
        return Util.isDefined(this._config.remoteConfig);
    };
    AppConfig.prototype.getRemoteConfigurationEndpoint = function () {
        var result;
        var existsRemoteConf = this.useRemoteConfiguration();
        if (existsRemoteConf && Util.isDefined(this._config.remoteConfig.endpoint)) {
            result = this._config.remoteConfig.endpoint;
        }
        else if (existsRemoteConf && Util.isDefined(this._config.remoteConfig.path)) {
            result = this._config.apiEndpoint + '/' + this._config.remoteConfig.path;
        }
        return result;
    };
    AppConfig.prototype.useExportConfiguration = function () {
        return Util.isDefined(this._config.exportConfiguration);
    };
    AppConfig.prototype.getExportPath = function () {
        var result;
        var existsRemoteConf = this.useExportConfiguration();
        if (existsRemoteConf && Util.isDefined(this._config.exportConfiguration.path)) {
            result = this._config.exportConfiguration.path;
        }
        else {
            result = this._config.apiEndpoint + '/export';
        }
        return result;
    };
    return AppConfig;
}());
export { AppConfig };
//# sourceMappingURL=data:application/json;base64,