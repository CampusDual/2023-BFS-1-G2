var SQLTypes = (function () {
    function SQLTypes() {
    }
    SQLTypes.getSQLTypeValue = function (type) {
        var value;
        type = type ? type.toUpperCase() : '';
        switch (type) {
            case 'BIT':
                value = SQLTypes.BIT;
                break;
            case 'TINYINT':
                value = SQLTypes.TINYINT;
                break;
            case 'SMALLINT':
                value = SQLTypes.SMALLINT;
                break;
            case 'INTEGER':
                value = SQLTypes.INTEGER;
                break;
            case 'BIGINT':
                value = SQLTypes.BIGINT;
                break;
            case 'FLOAT':
                value = SQLTypes.FLOAT;
                break;
            case 'REAL':
                value = SQLTypes.REAL;
                break;
            case 'DOUBLE':
                value = SQLTypes.DOUBLE;
                break;
            case 'NUMERIC':
                value = SQLTypes.NUMERIC;
                break;
            case 'DECIMAL':
                value = SQLTypes.DECIMAL;
                break;
            case 'CHAR':
                value = SQLTypes.CHAR;
                break;
            case 'VARCHAR':
                value = SQLTypes.VARCHAR;
                break;
            case 'LONGVARCHAR':
                value = SQLTypes.LONGVARCHAR;
                break;
            case 'DATE':
                value = SQLTypes.DATE;
                break;
            case 'TIME':
                value = SQLTypes.TIME;
                break;
            case 'TIMESTAMP':
                value = SQLTypes.TIMESTAMP;
                break;
            case 'BINARY':
                value = SQLTypes.BINARY;
                break;
            case 'VARBINARY':
                value = SQLTypes.VARBINARY;
                break;
            case 'LONGVARBINARY':
                value = SQLTypes.LONGVARBINARY;
                break;
            case 'NULL':
                value = SQLTypes.NULL;
                break;
            case 'OTHER':
                value = SQLTypes.OTHER;
                break;
            case 'JAVA_OBJECT':
                value = SQLTypes.JAVA_OBJECT;
                break;
            case 'DISTINCT':
                value = SQLTypes.DISTINCT;
                break;
            case 'STRUCT':
                value = SQLTypes.STRUCT;
                break;
            case 'ARRAY':
                value = SQLTypes.ARRAY;
                break;
            case 'BLOB':
                value = SQLTypes.BLOB;
                break;
            case 'CLOB':
                value = SQLTypes.CLOB;
                break;
            case 'REF':
                value = SQLTypes.REF;
                break;
            case 'DATALINK':
                value = SQLTypes.DATALINK;
                break;
            case 'BOOLEAN':
                value = SQLTypes.BOOLEAN;
                break;
            case 'ROWID':
                value = SQLTypes.ROWID;
                break;
            case 'NCHAR':
                value = SQLTypes.NCHAR;
                break;
            case 'NVARCHAR':
                value = SQLTypes.NVARCHAR;
                break;
            case 'LONGNVARCHAR':
                value = SQLTypes.LONGNVARCHAR;
                break;
            case 'NCLOB':
                value = SQLTypes.NCLOB;
                break;
            case 'SQLXML':
                value = SQLTypes.SQLXML;
                break;
            case 'BASE64':
                value = SQLTypes.BASE64;
                break;
            case 'UUID':
                value = SQLTypes.UUID;
                break;
            default:
                value = SQLTypes.OTHER;
                break;
        }
        return value;
    };
    SQLTypes.getSQLTypeKey = function (type) {
        var value;
        switch (type) {
            case SQLTypes.BIT:
                value = 'BIT';
                break;
            case SQLTypes.TINYINT:
                value = 'TINYINT';
                break;
            case SQLTypes.SMALLINT:
                value = 'SMALLINT';
                break;
            case SQLTypes.INTEGER:
                value = 'INTEGER';
                break;
            case SQLTypes.BIGINT:
                value = 'BIGINT';
                break;
            case SQLTypes.FLOAT:
                value = 'FLOAT';
                break;
            case SQLTypes.REAL:
                value = 'REAL';
                break;
            case SQLTypes.DOUBLE:
                value = 'DOUBLE';
                break;
            case SQLTypes.NUMERIC:
                value = 'NUMERIC';
                break;
            case SQLTypes.DECIMAL:
                value = 'DECIMAL';
                break;
            case SQLTypes.CHAR:
                value = 'CHAR';
                break;
            case SQLTypes.VARCHAR:
                value = 'VARCHAR';
                break;
            case SQLTypes.LONGVARCHAR:
                value = 'LONGVARCHAR';
                break;
            case SQLTypes.DATE:
                value = 'DATE';
                break;
            case SQLTypes.TIME:
                value = 'TIME';
                break;
            case SQLTypes.TIMESTAMP:
                value = 'TIMESTAMP';
                break;
            case SQLTypes.BINARY:
                value = 'BINARY';
                break;
            case SQLTypes.VARBINARY:
                value = 'VARBINARY';
                break;
            case SQLTypes.LONGVARBINARY:
                value = 'LONGVARBINARY';
                break;
            case SQLTypes.NULL:
                value = 'NULL';
                break;
            case SQLTypes.OTHER:
                value = 'OTHER';
                break;
            case SQLTypes.JAVA_OBJECT:
                value = 'JAVA_OBJECT';
                break;
            case SQLTypes.DISTINCT:
                value = 'DISTINCT';
                break;
            case SQLTypes.STRUCT:
                value = 'STRUCT';
                break;
            case SQLTypes.ARRAY:
                value = 'ARRAY';
                break;
            case SQLTypes.BLOB:
                value = 'BLOB';
                break;
            case SQLTypes.CLOB:
                value = 'CLOB';
                break;
            case SQLTypes.REF:
                value = 'REF';
                break;
            case SQLTypes.DATALINK:
                value = 'DATALINK';
                break;
            case SQLTypes.BOOLEAN:
                value = 'BOOLEAN';
                break;
            case SQLTypes.ROWID:
                value = 'ROWID';
                break;
            case SQLTypes.NCHAR:
                value = 'NCHAR';
                break;
            case SQLTypes.NVARCHAR:
                value = 'NVARCHAR';
                break;
            case SQLTypes.LONGNVARCHAR:
                value = 'LONGNVARCHAR';
                break;
            case SQLTypes.NCLOB:
                value = 'NCLOB';
                break;
            case SQLTypes.SQLXML:
                value = 'SQLXML';
                break;
            case SQLTypes.BASE64:
                value = 'BASE64';
                break;
            case SQLTypes.UUID:
                value = 'UUID';
                break;
            default:
                value = 'OTHER';
                break;
        }
        return value;
    };
    SQLTypes.parseUsingSQLType = function (arg, type) {
        var value = arg;
        type = type ? type.toUpperCase() : '';
        try {
            switch (type) {
                case 'TINYINT':
                case 'SMALLINT':
                case 'INTEGER':
                case 'BIGINT':
                    value = Number(arg);
                    break;
                case 'FLOAT':
                case 'REAL':
                case 'DOUBLE':
                case 'NUMERIC':
                case 'DECIMAL':
                    value = parseFloat(arg);
                    break;
                default:
                    break;
            }
        }
        catch (err) {
            console.error('SQLTypes.parseUsingSQLType error');
        }
        return value;
    };
    SQLTypes.isNumericSQLType = function (arg) {
        return [
            SQLTypes.TINYINT,
            SQLTypes.SMALLINT,
            SQLTypes.INTEGER,
            SQLTypes.BIGINT,
            SQLTypes.FLOAT,
            SQLTypes.REAL,
            SQLTypes.DOUBLE,
            SQLTypes.NUMERIC,
            SQLTypes.DECIMAL
        ].indexOf(arg) !== -1;
    };
    SQLTypes.BIT = -7;
    SQLTypes.TINYINT = -6;
    SQLTypes.SMALLINT = 5;
    SQLTypes.INTEGER = 4;
    SQLTypes.BIGINT = -5;
    SQLTypes.FLOAT = 6;
    SQLTypes.REAL = 7;
    SQLTypes.DOUBLE = 8;
    SQLTypes.NUMERIC = 2;
    SQLTypes.DECIMAL = 3;
    SQLTypes.CHAR = 1;
    SQLTypes.VARCHAR = 12;
    SQLTypes.LONGVARCHAR = -1;
    SQLTypes.DATE = 91;
    SQLTypes.TIME = 92;
    SQLTypes.TIMESTAMP = 93;
    SQLTypes.BINARY = -2;
    SQLTypes.VARBINARY = -3;
    SQLTypes.LONGVARBINARY = -4;
    SQLTypes.NULL = 0;
    SQLTypes.OTHER = 1111;
    SQLTypes.JAVA_OBJECT = 2000;
    SQLTypes.DISTINCT = 2001;
    SQLTypes.STRUCT = 2002;
    SQLTypes.ARRAY = 2003;
    SQLTypes.BLOB = 2004;
    SQLTypes.CLOB = 2005;
    SQLTypes.REF = 2006;
    SQLTypes.DATALINK = 70;
    SQLTypes.BOOLEAN = 16;
    SQLTypes.ROWID = -8;
    SQLTypes.NCHAR = -15;
    SQLTypes.NVARCHAR = -9;
    SQLTypes.LONGNVARCHAR = -16;
    SQLTypes.NCLOB = 2011;
    SQLTypes.BASE64 = 6464;
    SQLTypes.UUID = 6465;
    SQLTypes.SQLXML = 2009;
    return SQLTypes;
}());
export { SQLTypes };
//# sourceMappingURL=data:application/json;base64,