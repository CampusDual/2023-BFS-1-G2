import { Injectable, Injector } from '@angular/core';
import { Util } from '../util/util';
import { OTranslateService } from './translate/o-translate.service';
import * as i0 from "@angular/core";
export class NumberService {
    constructor(injector) {
        this.injector = injector;
        this.translateService = this.injector.get(OTranslateService);
        this.minDecimalDigits = NumberService.DEFAULT_DECIMAL_DIGITS;
        this.maxDecimalDigits = NumberService.DEFAULT_DECIMAL_DIGITS;
        this.locale = this.translateService.getCurrentLang();
        this.translateService.onLanguageChanged.subscribe(() => this.locale = this.translateService.getCurrentLang());
    }
    getIntegerValue(value, args) {
        const grouping = args ? args.grouping : undefined;
        if (!Util.isDefined(value)) {
            return value;
        }
        const thousandSeparator = args ? args.thousandSeparator : undefined;
        const locale = args ? args.locale : undefined;
        const intValue = parseInt(value, 10);
        if (isNaN(intValue)) {
            return void 0;
        }
        let formattedIntValue;
        if (Util.isDefined(locale) || !Util.isDefined(thousandSeparator)) {
            formattedIntValue = new Intl.NumberFormat(Util.isDefined(locale) ? locale : this.locale).format(intValue);
        }
        else {
            formattedIntValue = String(intValue).toString().replace(/\B(?=(\d{3})+(?!\d))/g, thousandSeparator);
        }
        return formattedIntValue;
    }
    getRealValue(value, args) {
        if (!Util.isDefined(value)) {
            return value;
        }
        const locale = args ? args.locale : undefined;
        const thousandSeparator = args ? args.thousandSeparator : undefined;
        const decimalSeparator = args ? args.decimalSeparator : undefined;
        const grouping = args ? args.grouping : false;
        const minDecimalDigits = args ? args.minDecimalDigits : this.minDecimalDigits;
        const maxDecimalDigits = args ? args.maxDecimalDigits : this.maxDecimalDigits;
        let formattedRealValue = value;
        const useIntlNumberFormat = Util.isDefined(locale) || (!Util.isDefined(thousandSeparator) || !Util.isDefined(decimalSeparator));
        if (useIntlNumberFormat) {
            formattedRealValue = args.truncate ? this.truncate(value, maxDecimalDigits) : null;
            if (!Util.isDefined(formattedRealValue)) {
                let formatterArgs = {
                    minimumFractionDigits: minDecimalDigits,
                    maximumFractionDigits: maxDecimalDigits,
                    useGrouping: grouping
                };
                formattedRealValue = new Intl.NumberFormat(Util.isDefined(locale) ? locale : this.locale, formatterArgs).format(value);
            }
        }
        else {
            formattedRealValue = this.parseRealValue(value, maxDecimalDigits, thousandSeparator, decimalSeparator, grouping);
        }
        return formattedRealValue;
    }
    getPercentValue(value, args) {
        const valueBase = args ? args.valueBase : undefined;
        let parsedValue = value;
        switch (valueBase) {
            case 100:
                break;
            case 1:
            default:
                parsedValue = parsedValue * 100;
                break;
        }
        const formattedPercentValue = this.getRealValue(parsedValue, args) + ' %';
        return formattedPercentValue;
    }
    truncate(value, maxDecimals) {
        const stringValue = String(value);
        const splittedValue = stringValue.split('.');
        const decimalsLength = Util.isDefined(splittedValue[1]) ? splittedValue[1].length : null;
        if (decimalsLength > maxDecimals) {
            return stringValue.slice(0, splittedValue[0].length + 1 + maxDecimals);
        }
        return null;
    }
    parseRealValue(value, maxDecimalDigits, thousandSeparator, decimalSeparator, grouping) {
        let result = value;
        const realValue = parseFloat(value);
        if (!isNaN(realValue)) {
            result = String(realValue);
            let tmpStr = realValue.toFixed(maxDecimalDigits);
            tmpStr = tmpStr.replace('.', decimalSeparator);
            if (grouping) {
                const parts = tmpStr.split(decimalSeparator);
                if (parts.length > 0) {
                    parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, thousandSeparator);
                    result = parts.join(decimalSeparator);
                }
            }
            else {
                result = tmpStr;
            }
        }
        return result;
    }
}
NumberService.DEFAULT_DECIMAL_DIGITS = 2;
NumberService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
NumberService.ctorParameters = () => [
    { type: Injector }
];
NumberService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NumberService_Factory() { return new NumberService(i0.ɵɵinject(i0.INJECTOR)); }, token: NumberService, providedIn: "root" });
//# sourceMappingURL=data:application/json;base64,