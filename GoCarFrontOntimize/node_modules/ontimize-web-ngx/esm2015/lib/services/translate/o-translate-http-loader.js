import { TranslateHttpLoader } from '@ngx-translate/http-loader';
import { combineLatest, Observable, of } from 'rxjs';
import { catchError, map, share } from 'rxjs/operators';
import { AppConfig } from '../../config/app-config';
import { Codes } from '../../util/codes';
import { OTranslateService } from './o-translate.service';
export class OTranslateHttpLoader extends TranslateHttpLoader {
    constructor(httpClient, prefix = OTranslateService.ASSETS_PATH, suffix = OTranslateService.ASSETS_EXTENSION, injector) {
        super(httpClient, prefix, suffix);
        this.injector = injector;
        this.appConfig = this.injector.get(AppConfig);
        this.httpClient = httpClient;
    }
    getAssetsPath() {
        return this.prefix;
    }
    getAssetsExtension() {
        return this.suffix;
    }
    getLocalTranslation(lang) {
        let innerObserver;
        const dataObservable = new Observable(observer => innerObserver = observer).pipe(share());
        super.getTranslation(lang)
            .subscribe((res) => {
            innerObserver.next(res);
            innerObserver.complete();
        }, error => {
            innerObserver.next(undefined);
        }, () => innerObserver.complete());
        return dataObservable;
    }
    getTranslation(lang) {
        const translationOrigins = [];
        translationOrigins.push(this.getLocalTranslation(lang));
        if (this.appConfig.useRemoteBundle()) {
            translationOrigins.push(this.getRemoteBundle(lang));
        }
        let innerObserver;
        const dataObservable = new Observable(observer => innerObserver = observer).pipe(share());
        combineLatest(translationOrigins).subscribe((res) => {
            const staticBundle = res[0] || {};
            const remoteBundle = res[1] || {};
            const allBundles = Object.assign(staticBundle, remoteBundle);
            innerObserver.next(allBundles);
        });
        return dataObservable;
    }
    getRemoteBundle(lang) {
        const bundleEndpoint = this.appConfig.getBundleEndpoint();
        if (!bundleEndpoint) {
            return of([]);
        }
        const url = bundleEndpoint + '?lang=' + lang;
        return this.httpClient.get(url).pipe(map((resp) => {
            if (resp.code === Codes.ONTIMIZE_SUCCESSFUL_CODE) {
                return this.parseBundleResponse(resp.data);
            }
            return resp;
        }), catchError(err => {
            console.log('Remote Bundle service is not available', err);
            return of([]);
        }));
    }
    parseBundleResponse(data) {
        const result = {};
        if (data) {
            data.forEach((item) => {
                result[item[OTranslateHttpLoader.BUNDLE_KEY]] = item[OTranslateHttpLoader.BUNDLE_VALUE];
            });
        }
        return result;
    }
}
OTranslateHttpLoader.BUNDLE_KEY = 'key';
OTranslateHttpLoader.BUNDLE_VALUE = 'value';
//# sourceMappingURL=data:application/json;base64,