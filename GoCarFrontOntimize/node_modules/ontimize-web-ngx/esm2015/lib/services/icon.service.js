import { Injectable, Injector } from '@angular/core';
import { OSafePipe } from '../pipes/o-safe.pipe';
import { Util } from '../util/util';
import * as i0 from "@angular/core";
export class IconService {
    constructor(injector) {
        this.injector = injector;
        this._iconPosition = IconService.DEFAULT_ICON_POSITION;
        this.oSafePipe = new OSafePipe(this.injector);
    }
    get iconPosition() {
        return this._iconPosition;
    }
    set iconPosition(value) {
        this._iconPosition = value;
    }
    getIconValue(value, args) {
        let iconPosition = args ? args.iconPosition : undefined;
        if (!Util.isDefined(iconPosition)) {
            iconPosition = this._iconPosition;
        }
        let iconValue = value;
        let icon = "<mat-icon class='mat-24 mat-icon notranslate material-icons mat-icon-no-color' role='img' aria-hidden='true'>" + args.icon + "</mat-icon>";
        switch (iconPosition) {
            case 'left':
                iconValue = icon + iconValue;
                break;
            case 'right':
                iconValue = iconValue + icon;
                break;
        }
        return this.oSafePipe.transform(iconValue, 'html');
    }
}
IconService.DEFAULT_ICON_POSITION = 'left';
IconService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
IconService.ctorParameters = () => [
    { type: Injector }
];
IconService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function IconService_Factory() { return new IconService(i0.ɵɵinject(i0.INJECTOR)); }, token: IconService, providedIn: "root" });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vb250aW1pemUtd2ViLW5neC8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9pY29uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFckQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7O0FBS3BDLE1BQU0sT0FBTyxXQUFXO0lBTXRCLFlBQXNCLFFBQWtCO1FBQWxCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDdEMsSUFBSSxDQUFDLGFBQWEsR0FBRyxXQUFXLENBQUMscUJBQXFCLENBQUM7UUFDdkQsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUE7SUFDL0MsQ0FBQztJQUVELElBQUksWUFBWTtRQUNkLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQztJQUM1QixDQUFDO0lBRUQsSUFBSSxZQUFZLENBQUMsS0FBYTtRQUM1QixJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztJQUM3QixDQUFDO0lBRUQsWUFBWSxDQUFDLEtBQVUsRUFBRSxJQUFTO1FBQ2hDLElBQUksWUFBWSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO1FBQ3hELElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxFQUFFO1lBQ2pDLFlBQVksR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDO1NBQ25DO1FBQ0QsSUFBSSxTQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ3RCLElBQUksSUFBSSxHQUFHLCtHQUErRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsYUFBYSxDQUFDO1FBQ3ZKLFFBQVEsWUFBWSxFQUFFO1lBQ3BCLEtBQUssTUFBTTtnQkFDVCxTQUFTLEdBQUcsSUFBSSxHQUFHLFNBQVMsQ0FBQztnQkFDN0IsTUFBTTtZQUNSLEtBQUssT0FBTztnQkFDVixTQUFTLEdBQUcsU0FBUyxHQUFHLElBQUksQ0FBQztnQkFDN0IsTUFBTTtTQUNUO1FBQ0QsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDckQsQ0FBQzs7QUFsQ2EsaUNBQXFCLEdBQUcsTUFBTSxDQUFDOztZQUo5QyxVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7OztZQVBvQixRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFNhZmVIdG1sIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5pbXBvcnQgeyBPU2FmZVBpcGUgfSBmcm9tICcuLi9waXBlcy9vLXNhZmUucGlwZSc7XG5pbXBvcnQgeyBVdGlsIH0gZnJvbSAnLi4vdXRpbC91dGlsJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgSWNvblNlcnZpY2Uge1xuICBwdWJsaWMgc3RhdGljIERFRkFVTFRfSUNPTl9QT1NJVElPTiA9ICdsZWZ0JztcblxuICBwcm90ZWN0ZWQgX2ljb25Qb3NpdGlvbjogc3RyaW5nO1xuICBwcm90ZWN0ZWQgb1NhZmVQaXBlOiBPU2FmZVBpcGU7XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGluamVjdG9yOiBJbmplY3Rvcikge1xuICAgIHRoaXMuX2ljb25Qb3NpdGlvbiA9IEljb25TZXJ2aWNlLkRFRkFVTFRfSUNPTl9QT1NJVElPTjtcbiAgICB0aGlzLm9TYWZlUGlwZSA9IG5ldyBPU2FmZVBpcGUodGhpcy5pbmplY3RvcilcbiAgfVxuXG4gIGdldCBpY29uUG9zaXRpb24oKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5faWNvblBvc2l0aW9uO1xuICB9XG5cbiAgc2V0IGljb25Qb3NpdGlvbih2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5faWNvblBvc2l0aW9uID0gdmFsdWU7XG4gIH1cblxuICBnZXRJY29uVmFsdWUodmFsdWU6IGFueSwgYXJnczogYW55KTogU2FmZUh0bWwge1xuICAgIGxldCBpY29uUG9zaXRpb24gPSBhcmdzID8gYXJncy5pY29uUG9zaXRpb24gOiB1bmRlZmluZWQ7XG4gICAgaWYgKCFVdGlsLmlzRGVmaW5lZChpY29uUG9zaXRpb24pKSB7XG4gICAgICBpY29uUG9zaXRpb24gPSB0aGlzLl9pY29uUG9zaXRpb247XG4gICAgfVxuICAgIGxldCBpY29uVmFsdWUgPSB2YWx1ZTtcbiAgICBsZXQgaWNvbiA9IFwiPG1hdC1pY29uIGNsYXNzPSdtYXQtMjQgbWF0LWljb24gbm90cmFuc2xhdGUgbWF0ZXJpYWwtaWNvbnMgbWF0LWljb24tbm8tY29sb3InIHJvbGU9J2ltZycgYXJpYS1oaWRkZW49J3RydWUnPlwiICsgYXJncy5pY29uICsgXCI8L21hdC1pY29uPlwiO1xuICAgIHN3aXRjaCAoaWNvblBvc2l0aW9uKSB7XG4gICAgICBjYXNlICdsZWZ0JzpcbiAgICAgICAgaWNvblZhbHVlID0gaWNvbiArIGljb25WYWx1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgIGljb25WYWx1ZSA9IGljb25WYWx1ZSArIGljb247XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5vU2FmZVBpcGUudHJhbnNmb3JtKGljb25WYWx1ZSwgJ2h0bWwnKTtcbiAgfVxuXG59XG4iXX0=