import { Injectable, Injector } from '@angular/core';
import { NavigationEnd, Router } from '@angular/router';
import { Subject } from 'rxjs';
import { AppConfig } from '../config/app-config';
import { Codes } from '../util/codes';
import { Util } from '../util/util';
import * as i0 from "@angular/core";
export class AppMenuService {
    constructor(injector) {
        this.injector = injector;
        this.onClick = new Subject();
        this._config = this.injector.get(AppConfig);
        this.MENU_ROOTS = this._config.getMenuConfiguration();
        this.router = this.injector.get(Router);
        this.router.events.subscribe((event) => {
            if (event instanceof NavigationEnd) {
                this.setActiveItem();
            }
        });
        this.ALL_MENU_ITEMS = [];
        for (let i = 0, len = this.MENU_ROOTS.length; i < len; i++) {
            const item = this.MENU_ROOTS[i];
            this.ALL_MENU_ITEMS = this.ALL_MENU_ITEMS.concat(this.getMenuItems(item));
        }
    }
    getMenuRoots() {
        return this.MENU_ROOTS;
    }
    getMenuRootById(id) {
        return this.MENU_ROOTS.find(c => c.id === id);
    }
    getAllMenuItems() {
        return this.ALL_MENU_ITEMS;
    }
    getMenuItemById(id) {
        return this.ALL_MENU_ITEMS.find(i => i.id === id);
    }
    getMenuItemType(item) {
        let type;
        switch (true) {
            case (item.route === Codes.LOGIN_ROUTE):
                type = 'logout';
                break;
            case (item.action !== undefined):
                type = 'action';
                break;
            case (item.locale !== undefined):
                type = 'locale';
                break;
            case (item.user !== undefined):
                type = 'user-info';
                break;
            case (item.items !== undefined):
                type = 'group';
                break;
            default:
                type = 'default';
                break;
        }
        return type;
    }
    isMenuGroup(item) {
        return this.getMenuItemType(item) === 'group';
    }
    isMenuGroupRoute(item) {
        return this.getMenuItemType(item) === 'group' && item.hasOwnProperty('route');
    }
    isItemActive(item) {
        return this.activeItem && this.activeItem.route === item.route;
    }
    isRouteItem(item) {
        return Util.isDefined(item.route);
    }
    getMenuItems(item) {
        const menuGroup = item;
        const items = menuGroup.items;
        if (items !== undefined) {
            if (this.isMenuGroupRoute(menuGroup)) {
                return [item].concat(items);
            }
            return items;
        }
        return [item];
    }
    setActiveItem() {
        let activeItem;
        const routeItems = this.ALL_MENU_ITEMS.filter(item => this.isRouteItem(item));
        const pathMatchFullItems = routeItems.filter(item => item.pathMatch === 'full');
        if (pathMatchFullItems.length > 0) {
            activeItem = pathMatchFullItems.find(item => item.route === this.router.url);
        }
        if (!activeItem) {
            activeItem = routeItems.find(item => this.router.url.startsWith(item.route));
        }
        this.activeItem = activeItem;
    }
}
AppMenuService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
AppMenuService.ctorParameters = () => [
    { type: Injector }
];
AppMenuService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function AppMenuService_Factory() { return new AppMenuService(i0.ɵɵinject(i0.INJECTOR)); }, token: AppMenuService, providedIn: "root" });
//# sourceMappingURL=data:application/json;base64,