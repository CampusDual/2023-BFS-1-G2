import { Injectable } from '@angular/core';
import { Codes } from '../../util/codes';
import { Util } from '../../util/util';
import { AbstractComponentStateService } from './o-component-state.service';
import { OGridComponentStateClass } from './o-grid-component-state.class';
export class OGridComponentStateService extends AbstractComponentStateService {
    initialize(component) {
        this.state = new OGridComponentStateClass();
        super.initialize(component);
    }
    initializeState(state) {
        super.initializeState(state);
    }
    getDataToStore() {
        const dataToStore = Object.assign({}, this.state);
        dataToStore['query-rows'] = this.component.queryRows;
        dataToStore['currentPage'] = this.component.currentPage;
        if (this.component.storePaginationState) {
            dataToStore['queryRecordOffset'] = Math.max((this.state.queryRecordOffset - this.component.dataArray.length), (this.state.queryRecordOffset - this.component.queryRows));
        }
        else {
            delete dataToStore['queryRecordOffset'];
        }
        if (Util.isDefined(this.component.sortColumnOrder)) {
            dataToStore['sort-column'] = this.component.sortColumnOrder.columnName + Codes.COLUMNS_ALIAS_SEPARATOR +
                (this.component.sortColumnOrder.ascendent ? Codes.ASC_SORT : Codes.DESC_SORT);
        }
        dataToStore['filter-case-sensitive'] = this.component.isFilterCaseSensitive();
        if (this.component.quickFilter && Util.isDefined(this.component.quickFilterComponent)) {
            dataToStore['quickFilterActiveColumns'] = this.component.quickFilterComponent.getActiveColumns().join(Codes.ARRAY_INPUT_SEPARATOR);
        }
        return dataToStore;
    }
}
OGridComponentStateService.decorators = [
    { type: Injectable }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1ncmlkLWNvbXBvbmVudC1zdGF0ZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vb250aW1pemUtd2ViLW5neC8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9zdGF0ZS9vLWdyaWQtY29tcG9uZW50LXN0YXRlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUczQyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDekMsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3ZDLE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQzVFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBRzFFLE1BQU0sT0FBTywwQkFBMkIsU0FBUSw2QkFBdUU7SUFFckgsVUFBVSxDQUFDLFNBQXlCO1FBQ2xDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSx3QkFBd0IsRUFBRSxDQUFDO1FBQzVDLEtBQUssQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVELGVBQWUsQ0FBQyxLQUErQjtRQUM3QyxLQUFLLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFRCxjQUFjO1FBQ1osTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2xELFdBQVcsQ0FBQyxZQUFZLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQztRQUNyRCxXQUFXLENBQUMsYUFBYSxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUM7UUFFeEQsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLG9CQUFvQixFQUFFO1lBQ3ZDLFdBQVcsQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQ3pDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFDaEUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQzFELENBQUM7U0FDSDthQUFNO1lBQ0wsT0FBTyxXQUFXLENBQUMsbUJBQW1CLENBQUMsQ0FBQztTQUN6QztRQUVELElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxFQUFFO1lBQ2xELFdBQVcsQ0FBQyxhQUFhLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDLHVCQUF1QjtnQkFDcEcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUNqRjtRQUNELFdBQVcsQ0FBQyx1QkFBdUIsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMscUJBQXFCLEVBQUUsQ0FBQztRQUU5RSxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFO1lBQ3JGLFdBQVcsQ0FBQywwQkFBMEIsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsb0JBQW9CLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLHFCQUFxQixDQUFDLENBQUM7U0FDcEk7UUFDRCxPQUFPLFdBQVcsQ0FBQztJQUNyQixDQUFDOzs7WUFwQ0YsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgT0dyaWRDb21wb25lbnQgfSBmcm9tICcuLi8uLi9jb21wb25lbnRzL2dyaWQvby1ncmlkLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBDb2RlcyB9IGZyb20gJy4uLy4uL3V0aWwvY29kZXMnO1xuaW1wb3J0IHsgVXRpbCB9IGZyb20gJy4uLy4uL3V0aWwvdXRpbCc7XG5pbXBvcnQgeyBBYnN0cmFjdENvbXBvbmVudFN0YXRlU2VydmljZSB9IGZyb20gJy4vby1jb21wb25lbnQtc3RhdGUuc2VydmljZSc7XG5pbXBvcnQgeyBPR3JpZENvbXBvbmVudFN0YXRlQ2xhc3MgfSBmcm9tICcuL28tZ3JpZC1jb21wb25lbnQtc3RhdGUuY2xhc3MnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgT0dyaWRDb21wb25lbnRTdGF0ZVNlcnZpY2UgZXh0ZW5kcyBBYnN0cmFjdENvbXBvbmVudFN0YXRlU2VydmljZTxPR3JpZENvbXBvbmVudFN0YXRlQ2xhc3MsIE9HcmlkQ29tcG9uZW50PiB7XG5cbiAgaW5pdGlhbGl6ZShjb21wb25lbnQ6IE9HcmlkQ29tcG9uZW50KSB7XG4gICAgdGhpcy5zdGF0ZSA9IG5ldyBPR3JpZENvbXBvbmVudFN0YXRlQ2xhc3MoKTtcbiAgICBzdXBlci5pbml0aWFsaXplKGNvbXBvbmVudCk7XG4gIH1cblxuICBpbml0aWFsaXplU3RhdGUoc3RhdGU6IE9HcmlkQ29tcG9uZW50U3RhdGVDbGFzcykge1xuICAgIHN1cGVyLmluaXRpYWxpemVTdGF0ZShzdGF0ZSk7XG4gIH1cblxuICBnZXREYXRhVG9TdG9yZSgpOiBhbnkge1xuICAgIGNvbnN0IGRhdGFUb1N0b3JlID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5zdGF0ZSk7XG4gICAgZGF0YVRvU3RvcmVbJ3F1ZXJ5LXJvd3MnXSA9IHRoaXMuY29tcG9uZW50LnF1ZXJ5Um93cztcbiAgICBkYXRhVG9TdG9yZVsnY3VycmVudFBhZ2UnXSA9IHRoaXMuY29tcG9uZW50LmN1cnJlbnRQYWdlO1xuXG4gICAgaWYgKHRoaXMuY29tcG9uZW50LnN0b3JlUGFnaW5hdGlvblN0YXRlKSB7XG4gICAgICBkYXRhVG9TdG9yZVsncXVlcnlSZWNvcmRPZmZzZXQnXSA9IE1hdGgubWF4KFxuICAgICAgICAodGhpcy5zdGF0ZS5xdWVyeVJlY29yZE9mZnNldCAtIHRoaXMuY29tcG9uZW50LmRhdGFBcnJheS5sZW5ndGgpLFxuICAgICAgICAodGhpcy5zdGF0ZS5xdWVyeVJlY29yZE9mZnNldCAtIHRoaXMuY29tcG9uZW50LnF1ZXJ5Um93cylcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSBkYXRhVG9TdG9yZVsncXVlcnlSZWNvcmRPZmZzZXQnXTtcbiAgICB9XG5cbiAgICBpZiAoVXRpbC5pc0RlZmluZWQodGhpcy5jb21wb25lbnQuc29ydENvbHVtbk9yZGVyKSkge1xuICAgICAgZGF0YVRvU3RvcmVbJ3NvcnQtY29sdW1uJ10gPSB0aGlzLmNvbXBvbmVudC5zb3J0Q29sdW1uT3JkZXIuY29sdW1uTmFtZSArIENvZGVzLkNPTFVNTlNfQUxJQVNfU0VQQVJBVE9SICtcbiAgICAgICAgKHRoaXMuY29tcG9uZW50LnNvcnRDb2x1bW5PcmRlci5hc2NlbmRlbnQgPyBDb2Rlcy5BU0NfU09SVCA6IENvZGVzLkRFU0NfU09SVCk7XG4gICAgfVxuICAgIGRhdGFUb1N0b3JlWydmaWx0ZXItY2FzZS1zZW5zaXRpdmUnXSA9IHRoaXMuY29tcG9uZW50LmlzRmlsdGVyQ2FzZVNlbnNpdGl2ZSgpO1xuXG4gICAgaWYgKHRoaXMuY29tcG9uZW50LnF1aWNrRmlsdGVyICYmIFV0aWwuaXNEZWZpbmVkKHRoaXMuY29tcG9uZW50LnF1aWNrRmlsdGVyQ29tcG9uZW50KSkge1xuICAgICAgZGF0YVRvU3RvcmVbJ3F1aWNrRmlsdGVyQWN0aXZlQ29sdW1ucyddID0gdGhpcy5jb21wb25lbnQucXVpY2tGaWx0ZXJDb21wb25lbnQuZ2V0QWN0aXZlQ29sdW1ucygpLmpvaW4oQ29kZXMuQVJSQVlfSU5QVVRfU0VQQVJBVE9SKTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGFUb1N0b3JlO1xuICB9XG5cbn1cblxuXG4iXX0=