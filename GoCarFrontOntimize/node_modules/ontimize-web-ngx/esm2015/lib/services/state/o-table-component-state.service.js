import { Injectable } from '@angular/core';
import { Codes } from '../../util/codes';
import { Util } from '../../util/util';
import { AbstractComponentStateService } from './o-component-state.service';
import { OTableComponentStateClass } from './o-table-component-state.class';
export class OTableComponentStateService extends AbstractComponentStateService {
    initialize(component) {
        this.state = new OTableComponentStateClass();
        super.initialize(component);
    }
    initializeState(state) {
        super.initializeState(state);
        const initialConfigurationRawObj = state.initialConfiguration || {};
        state.initialConfiguration = new OTableComponentStateClass();
        state.initialConfiguration.setData(initialConfigurationRawObj);
    }
    refreshSelection() {
        this.state.selection = this.getSelectionState();
    }
    getDataToStore() {
        const dataToStore = {};
        const propertiesKeys = [
            'sort-columns',
            'oColumns-display',
            'columns-filter',
            'quick-filter',
            'page',
            'selection',
            'initial-configuration',
            'filter-columns',
            'filter-column-active',
            'grouped-columns',
            'grouped-column-types',
            'user-stored-filters',
            'user-stored-configurations'
        ];
        Object.assign(dataToStore, this.getTablePropertiesToStore(propertiesKeys));
        return dataToStore;
    }
    storeFilter(filter) {
        let newFilter = { name: filter.name, description: filter.description };
        const storedFilter = {};
        Object.assign(storedFilter, this.getColumnFiltersState());
        Object.assign(storedFilter, this.getColumnsQuickFilterState());
        Object.assign(storedFilter, this.getFilterBuilderState());
        newFilter['stored-filter'] = storedFilter;
        this.state.addStoredFilter(newFilter);
    }
    storeConfiguration(configurationAgs, tableProperties) {
        const newConfiguration = {};
        this.component.storePaginationState = true;
        const storedConfiguration = this.getTablePropertiesToStore(tableProperties);
        this.component.storePaginationState = false;
        newConfiguration['stored-configuration'] = storedConfiguration;
        Object.assign(newConfiguration, configurationAgs);
        newConfiguration['stored-properties'] = tableProperties;
        this.state.addStoredConfiguration(newConfiguration);
    }
    getTablePropertiesToStore(properties) {
        const result = {};
        properties.forEach(prop => {
            Object.assign(result, this.getTablePropertyToStore(prop));
        });
        return result;
    }
    getTablePropertyToStore(property) {
        let result = {};
        switch (property) {
            case 'sort-columns':
                result = this.getSortState();
                break;
            case 'oColumns-display':
                result = this.getColumnsDisplayState();
                break;
            case 'quick-filter':
                result = this.getColumnsQuickFilterState();
                break;
            case 'columns-filter':
                result = this.getColumnFiltersState();
                break;
            case 'page':
                result = this.getPageState();
                break;
            case 'selection':
                result['selection'] = this.getSelectionState();
                break;
            case 'initial-configuration':
                result = this.getInitialConfigurationState();
                break;
            case 'filter-column-active':
                result['filter-column-active'] = this.component.isColumnFiltersActive;
                break;
            case 'filter-columns':
                result['filter-columns'] = this.component.filterColumns;
                break;
            case 'grouped-columns':
                result['grouped-columns'] = this.component.groupedColumnsArray;
                break;
            case 'grouped-column-types':
                result['grouped-column-types'] = this.component.groupedColumnTypes;
                break;
            case 'user-stored-filters':
                result['user-stored-filters'] = this.state.storedFilters;
                break;
            case 'user-stored-configurations':
                result['user-stored-configurations'] = this.state.storedConfigurations;
                break;
            case 'filter-builder':
                if (this.component.filterBuilder) {
                    result['filter-builder'] = this.component.filterBuilder.getFilterValues();
                }
                break;
        }
        return result;
    }
    getColumnsDisplayState() {
        const oColumnsData = [];
        this.component.oTableOptions.columns.forEach((oCol) => {
            oColumnsData.push({
                attr: oCol.attr,
                visible: oCol.visible,
                width: oCol.getWidthToStore()
            });
        });
        return {
            'oColumns-display': oColumnsData,
            'select-column-visible': this.component.oTableOptions.selectColumn.visible
        };
    }
    getColumnsQuickFilterState() {
        const tableOptions = this.component.oTableOptions;
        const oColumnsData = [];
        tableOptions.columns.forEach((oCol) => {
            oColumnsData.push({
                attr: oCol.attr,
                searchable: oCol.searchable,
                searching: oCol.searching
            });
        });
        return {
            'oColumns': oColumnsData,
            'filter-case-sensitive': tableOptions.filterCaseSensitive,
            'filter': this.component.oTableQuickFilterComponent ? this.component.oTableQuickFilterComponent.value : ''
        };
    }
    getFilterBuilderState() {
        const result = {};
        if (this.component.filterBuilder) {
            let filterBuilder = this.component.filterBuilder.getFilterValues();
            if (!Util.isObjectEmpty(filterBuilder)) {
                result['filter-builder-values'] = filterBuilder;
            }
        }
        return result;
    }
    getColumnFiltersState() {
        const result = {};
        if (this.component.dataSource) {
            const columnValueFilters = this.component.dataSource.getColumnValueFilters();
            if (columnValueFilters.length > 0) {
                result['column-value-filters'] = columnValueFilters;
            }
        }
        return result;
    }
    getPageState() {
        const result = {
            'query-rows': this.component.matpaginator ? this.component.matpaginator.pageSize : ''
        };
        if (this.component.currentPage > 0 && this.component.storePaginationState) {
            result.currentPage = this.component.currentPage;
        }
        if (this.component.pageable && this.component.storePaginationState) {
            result.totalQueryRecordsNumber = this.component.state.totalQueryRecordsNumber;
            result.queryRecordOffset = Math.max((this.component.state.queryRecordOffset - this.component.dataSource.renderedData.length), (this.component.state.queryRecordOffset - this.component.queryRows));
        }
        return result;
    }
    getSelectionState() {
        const selection = [];
        if (this.component && this.component.keepSelectedItems) {
            const tableKeys = this.component.getKeys();
            this.component.getSelectedItems().forEach(item => {
                const data = {};
                tableKeys.forEach(key => {
                    data[key] = item[key];
                });
                selection.push(data);
            });
        }
        return selection;
    }
    getInitialConfigurationState() {
        const oColumnsData = [];
        Util.parseArray(this.component.visibleColumns, true).forEach((columnAttr) => {
            let oCol = this.component.getOColumn(columnAttr);
            oColumnsData.push({
                attr: oCol.attr,
                visible: true,
                width: oCol.definition ? oCol.definition.originalWidth : undefined
            });
        });
        return {
            'initial-configuration': {
                'oColumns-display': oColumnsData,
                'sort-columns': this.component.sortColumns,
                'select-column-visible': this.component.oTableOptions.selectColumn.visible,
                'filter-case-sensitive': this.component.filterCaseSensitive,
                'query-rows': this.component.originalQueryRows,
                'filter-column-active-by-default': this.component.filterColumnActiveByDefault,
                'filter-columns': this.component.originalFilterColumns,
                'grouped-columns': this.component.originalGroupedColumnsArray
            }
        };
    }
    getSortState() {
        const sortColumns = [];
        this.component.sort.getSortColumns().forEach(sortData => {
            sortColumns.push(sortData.id + Codes.COLUMNS_ALIAS_SEPARATOR + sortData.direction);
        });
        return {
            'sort-columns': sortColumns.join(Codes.ARRAY_INPUT_SEPARATOR)
        };
    }
}
OTableComponentStateService.decorators = [
    { type: Injectable }
];
//# sourceMappingURL=data:application/json;base64,