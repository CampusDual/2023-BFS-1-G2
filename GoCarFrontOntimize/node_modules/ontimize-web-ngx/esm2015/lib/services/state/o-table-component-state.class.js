import { DefaultServiceComponentStateClass } from './o-component-state.class';
import { Util } from '../../util';
export class OTableComponentStateClass extends DefaultServiceComponentStateClass {
    constructor() {
        super(...arguments);
        this['grouped-column-types'] = [];
    }
    get filterBuilderValues() {
        return this['filter-builder-values'];
    }
    set filterBuilderValues(value) {
        this['filter-builder-values'] = value;
    }
    get selectColumnVisible() {
        return this['select-column-visible'];
    }
    set selectColumnVisible(value) {
        this['select-column-visible'] = value;
    }
    get quickFilterValue() {
        return this['filter'];
    }
    set quickFilterValue(value) {
        this['filter'] = value;
    }
    get columnsDisplay() {
        return this['oColumns-display'];
    }
    set columnsDisplay(value) {
        this['oColumns-display'] = value;
    }
    getColumnDisplay(oCol) {
        return (this.columnsDisplay || []).find(col => col.attr === oCol.attr);
    }
    get initialConfiguration() {
        return this['initial-configuration'];
    }
    set initialConfiguration(value) {
        this['initial-configuration'] = value;
    }
    get sortColumns() {
        return this['sort-columns'];
    }
    set sortColumns(value) {
        this['sort-columns'] = value;
    }
    get groupedColumnTypes() {
        return this['grouped-column-types'];
    }
    set groupedColumnTypes(value) {
        this['grouped-column-types'] = value;
    }
    get filterColumns() {
        return this['filter-columns'];
    }
    set filterColumns(value) {
        this['filter-columns'] = value;
    }
    get filterColumnActiveByDefault() {
        return this['filter-column-active-by-default'];
    }
    get groupedColumns() {
        return this['grouped-columns'];
    }
    set groupedColumns(value) {
        this['grouped-columns'] = value;
    }
    get columnValueFilters() {
        return this['column-value-filters'] || [];
    }
    set columnValueFilters(value) {
        this['column-value-filters'] = value;
    }
    get storedFilters() {
        return this['user-stored-filters'] || [];
    }
    addStoredFilter(filter) {
        if (!Util.isDefined(this['user-stored-filters'])) {
            this['user-stored-filters'] = [];
        }
        this.storedFilters.push(filter);
    }
    deleteStoredFilter(filterName) {
        const index = this.storedFilters.findIndex((item) => item.name === filterName);
        if (index >= 0) {
            this.storedFilters.splice(index, 1);
        }
    }
    getStoredFilter(filterName) {
        let result;
        const filter = this.storedFilters.find((item) => item.name === filterName);
        if (filter) {
            result = filter['stored-filter'];
        }
        return result;
    }
    applyFilter(filterName) {
        const filter = this.getStoredFilter(filterName);
        if (filter) {
            this.columnValueFilters = filter['column-value-filters'];
            this.quickFilterValue = filter['filter'];
            this.filterCaseSensitive = filter['filter-case-sensitive'];
            this.filterBuilderValues = filter['filter-builder-values'];
            this.oColumns = filter['oColumns'];
        }
    }
    get storedConfigurations() {
        return this['user-stored-configurations'] || [];
    }
    addStoredConfiguration(configuration) {
        if (!Util.isDefined(this['user-stored-configurations'])) {
            this['user-stored-configurations'] = [];
        }
        this.storedConfigurations.push(configuration);
    }
    deleteStoredConfiguration(configurationName) {
        const index = this.storedConfigurations.findIndex((item) => item.name === configurationName);
        if (index >= 0) {
            this.storedConfigurations.splice(index, 1);
        }
    }
    getStoredConfiguration(configurationName) {
        return this.storedConfigurations.find((item) => item.name === configurationName);
    }
    applyConfiguration(configurationName) {
        const configuration = this.getStoredConfiguration(configurationName);
        if (configuration) {
            const properties = configuration['stored-properties'] || [];
            const conf = configuration['stored-configuration'];
            this.copyPropertiesFromConfiguration(properties, conf);
        }
    }
    reset(pageable) {
        const result = {
            'user-stored-filters': this.storedFilters,
            'user-stored-configurations': this.storedConfigurations
        };
        if (pageable) {
            result['totalQueryRecordsNumber'] = this.totalQueryRecordsNumber;
        }
        result['currentPage'] = 0;
        Object.assign(this, {});
        Object.assign(this, result);
    }
    copyPropertiesFromConfiguration(properties, configuration) {
        properties.forEach(property => {
            switch (property) {
                case 'sort-columns':
                    this.sortColumns = configuration['sort-columns'];
                    break;
                case 'oColumns-display':
                    this.columnsDisplay = configuration['oColumns-display'];
                    this.selectColumnVisible = configuration['select-column-visible'];
                    break;
                case 'quick-filter':
                case 'columns-filter':
                    this.columnValueFilters = configuration['column-value-filters'];
                    break;
                case 'grouped-columns':
                    this.groupedColumns = configuration['grouped-columns'];
                    break;
                case 'page':
                    this.currentPage = configuration['currentPage'];
                    this.totalQueryRecordsNumber = configuration['totalQueryRecordsNumber'];
                    this.queryRecordOffset = configuration['queryRecordOffset'];
                    this.queryRows = configuration['query-rows'];
                    break;
                case 'filter-builder':
                    this.filterBuilderValues = configuration['filter-builder'];
                    break;
            }
        });
    }
}
//# sourceMappingURL=data:application/json;base64,