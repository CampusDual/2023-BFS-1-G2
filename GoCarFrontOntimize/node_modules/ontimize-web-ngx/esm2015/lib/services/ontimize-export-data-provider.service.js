import { Injectable, Injector } from "@angular/core";
import { OntimizeExportDataBaseProviderService } from "./ontimize-export-data-base-provider.service";
export class OntimizeExportDataProviderService extends OntimizeExportDataBaseProviderService {
    constructor(injector) {
        super(injector);
        this.injector = injector;
    }
    getExportConfiguration() {
        let data = [];
        const exportData = {
            data: data,
            columns: this.columns,
            columnNames: this.columnNames,
            sqlTypes: this.sqlTypes,
            filter: this.filter
        };
        return exportData;
    }
}
OntimizeExportDataProviderService.decorators = [
    { type: Injectable }
];
OntimizeExportDataProviderService.ctorParameters = () => [
    { type: Injector }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib250aW1pemUtZXhwb3J0LWRhdGEtcHJvdmlkZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL29udGltaXplLXdlYi1uZ3gvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvb250aW1pemUtZXhwb3J0LWRhdGEtcHJvdmlkZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUdyRCxPQUFPLEVBQUUscUNBQXFDLEVBQUUsTUFBTSw4Q0FBOEMsQ0FBQztBQUdyRyxNQUFNLE9BQU8saUNBQWtDLFNBQVEscUNBQXFDO0lBRTFGLFlBQXNCLFFBQWtCO1FBQ3RDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztRQURJLGFBQVEsR0FBUixRQUFRLENBQVU7SUFFeEMsQ0FBQztJQUVELHNCQUFzQjtRQUdwQixJQUFJLElBQUksR0FBRyxFQUFFLENBQUM7UUFvQmQsTUFBTSxVQUFVLEdBQXFCO1lBQ25DLElBQUksRUFBRSxJQUFJO1lBQ1YsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPO1lBQ3JCLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVztZQUM3QixRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7WUFDdkIsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNO1NBQ3BCLENBQUE7UUFDRCxPQUFPLFVBQVUsQ0FBQztJQUNwQixDQUFDOzs7WUF0Q0YsVUFBVTs7O1lBTFUsUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdG9yIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IElFeHBvcnREYXRhUHJvdmlkZXIgfSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9leHBvcnQtZGF0YS1wcm92aWRlci5pbnRlcmZhY2VcIjtcbmltcG9ydCB7IE9UYWJsZUV4cG9ydERhdGEgfSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9vLXRhYmxlLWV4cG9ydC1kYXRhLmludGVyZmFjZVwiO1xuaW1wb3J0IHsgT250aW1pemVFeHBvcnREYXRhQmFzZVByb3ZpZGVyU2VydmljZSB9IGZyb20gXCIuL29udGltaXplLWV4cG9ydC1kYXRhLWJhc2UtcHJvdmlkZXIuc2VydmljZVwiO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgT250aW1pemVFeHBvcnREYXRhUHJvdmlkZXJTZXJ2aWNlIGV4dGVuZHMgT250aW1pemVFeHBvcnREYXRhQmFzZVByb3ZpZGVyU2VydmljZSBpbXBsZW1lbnRzIElFeHBvcnREYXRhUHJvdmlkZXIge1xuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBpbmplY3RvcjogSW5qZWN0b3IpIHtcbiAgICBzdXBlcihpbmplY3Rvcik7XG4gIH1cblxuICBnZXRFeHBvcnRDb25maWd1cmF0aW9uKCk6IE9UYWJsZUV4cG9ydERhdGEge1xuXG4gICAgLy8gVGFibGUgZGF0YS9maWx0ZXJzXG4gICAgbGV0IGRhdGEgPSBbXTtcblxuICAgIC8qXG4gICAgIFBFTkRJTkcgVEhBVCBUSElTIEZVTkNUSU9OQUxJVFkgSVMgQ09NUEFUSUJMRSBXSVRIIE9OVElNSVpFIEJBQ0tcbiAgICAgc3dpdGNoICh0aGlzLnRhYmxlLmV4cG9ydE1vZGUpIHtcbiAgICAgICBjYXNlIENvZGVzLkVYUE9SVF9NT0RFX0FMTDpcbiAgICAgICAgIGZpbHRlciA9IHRoaXMudGFibGUuZ2V0Q29tcG9uZW50RmlsdGVyKCk7XG4gICAgICAgICBicmVhaztcbiAgICAgICBjYXNlIENvZGVzLkVYUE9SVF9NT0RFX0xPQ0FMOlxuICAgICAgICAgZGF0YSA9IHRoaXMudGFibGUuZ2V0QWxsUmVuZGVyZWRWYWx1ZXMoKTtcbiAgICAgICAgIHRoaXMuY29sc05vdEluY2x1ZGVkLmZvckVhY2goYXR0ciA9PiBkYXRhLmZvckVhY2gocm93ID0+IGRlbGV0ZSByb3dbYXR0cl0pKTtcbiAgICAgICAgIGJyZWFrO1xuICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICBkYXRhID0gdGhpcy50YWJsZS5nZXRSZW5kZXJlZFZhbHVlKCk7XG4gICAgICAgICB0aGlzLmNvbHNOb3RJbmNsdWRlZC5mb3JFYWNoKGF0dHIgPT4gZGF0YS5mb3JFYWNoKHJvdyA9PiBkZWxldGUgcm93W2F0dHJdKSk7XG4gICAgICAgICBicmVhaztcbiAgICAgfVxuICAgICAqL1xuXG5cbiAgICBjb25zdCBleHBvcnREYXRhOiBPVGFibGVFeHBvcnREYXRhID0ge1xuICAgICAgZGF0YTogZGF0YSxcbiAgICAgIGNvbHVtbnM6IHRoaXMuY29sdW1ucyxcbiAgICAgIGNvbHVtbk5hbWVzOiB0aGlzLmNvbHVtbk5hbWVzLFxuICAgICAgc3FsVHlwZXM6IHRoaXMuc3FsVHlwZXMsXG4gICAgICBmaWx0ZXI6IHRoaXMuZmlsdGVyXG4gICAgfVxuICAgIHJldHVybiBleHBvcnREYXRhO1xuICB9XG59Il19