import { Injectable, Injector } from '@angular/core';
import { AppConfig } from '../config/app-config';
import { Codes } from '../util/codes';
import * as i0 from "@angular/core";
export class LoginStorageService {
    constructor(injector) {
        this.injector = injector;
        this._config = this.injector.get(AppConfig).getConfiguration();
        this._localStorageKey = this._config.uuid;
    }
    getSessionInfo() {
        const info = localStorage.getItem(this._localStorageKey);
        if (!info) {
            return {};
        }
        const stored = JSON.parse(info);
        return stored[Codes.SESSION_KEY] || {};
    }
    storeSessionInfo(sessionInfo) {
        if (sessionInfo !== undefined) {
            const info = localStorage.getItem(this._localStorageKey);
            let stored = null;
            if (info && info.length > 0) {
                stored = JSON.parse(info);
            }
            else {
                stored = {};
            }
            stored[Codes.SESSION_KEY] = sessionInfo;
            try {
                localStorage.setItem(this._localStorageKey, JSON.stringify(stored));
            }
            catch (e) {
                console.error("Cannot set new item in localStorage. Error: " + e);
            }
        }
    }
    updateSessionId(id) {
        let session = this.getSessionInfo();
        if (session.id !== id) {
            session.id = id;
            this.storeSessionInfo(session);
        }
    }
    sessionExpired() {
        const sessionInfo = this.getSessionInfo();
        delete sessionInfo.id;
        delete sessionInfo.user;
        this.storeSessionInfo(sessionInfo);
    }
    isLoggedIn() {
        const sessionInfo = this.getSessionInfo();
        if (sessionInfo && sessionInfo.id && sessionInfo.user && sessionInfo.user.length > 0) {
            if (typeof sessionInfo.id === 'number' && (isNaN(sessionInfo.id) || sessionInfo.id < 0)) {
                return false;
            }
            return true;
        }
        return false;
    }
}
LoginStorageService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
LoginStorageService.ctorParameters = () => [
    { type: Injector }
];
LoginStorageService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function LoginStorageService_Factory() { return new LoginStorageService(i0.ɵɵinject(i0.INJECTOR)); }, token: LoginStorageService, providedIn: "root" });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9naW4tc3RvcmFnZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vb250aW1pemUtd2ViLW5neC8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9sb2dpbi1zdG9yYWdlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFckQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBR2pELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBR3RDLE1BQU0sT0FBTyxtQkFBbUI7SUFLOUIsWUFBc0IsUUFBa0I7UUFBbEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUN0QyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDL0QsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO0lBQzVDLENBQUM7SUFFTSxjQUFjO1FBQ25CLE1BQU0sSUFBSSxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDekQsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNULE9BQU8sRUFBRSxDQUFDO1NBQ1g7UUFDRCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2hDLE9BQU8sTUFBTSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDekMsQ0FBQztJQUVNLGdCQUFnQixDQUFDLFdBQXdCO1FBQzlDLElBQUksV0FBVyxLQUFLLFNBQVMsRUFBRTtZQUM3QixNQUFNLElBQUksR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBQ3pELElBQUksTUFBTSxHQUFHLElBQUksQ0FBQztZQUNsQixJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDM0IsTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDM0I7aUJBQU07Z0JBQ0wsTUFBTSxHQUFHLEVBQUUsQ0FBQzthQUNiO1lBQ0QsTUFBTSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsR0FBRyxXQUFXLENBQUM7WUFDeEMsSUFBSTtnQkFDRixZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7YUFDckU7WUFBQyxPQUFPLENBQUMsRUFBRTtnQkFDVixPQUFPLENBQUMsS0FBSyxDQUFDLDhDQUE4QyxHQUFHLENBQUMsQ0FBQyxDQUFDO2FBQ25FO1NBQ0Y7SUFDSCxDQUFDO0lBRU0sZUFBZSxDQUFDLEVBQW1CO1FBQ3hDLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUNwQyxJQUFJLE9BQU8sQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQ3JCLE9BQU8sQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1lBQ2hCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUNoQztJQUNILENBQUM7SUFFTSxjQUFjO1FBQ25CLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUMxQyxPQUFPLFdBQVcsQ0FBQyxFQUFFLENBQUM7UUFDdEIsT0FBTyxXQUFXLENBQUMsSUFBSSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRU0sVUFBVTtRQUNmLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUMxQyxJQUFJLFdBQVcsSUFBSSxXQUFXLENBQUMsRUFBRSxJQUFJLFdBQVcsQ0FBQyxJQUFJLElBQUksV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3BGLElBQUksT0FBTyxXQUFXLENBQUMsRUFBRSxLQUFLLFFBQVEsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLElBQUksV0FBVyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRTtnQkFDdkYsT0FBTyxLQUFLLENBQUM7YUFDZDtZQUNELE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7OztZQTlERixVQUFVLFNBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFOzs7WUFQYixRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQXBwQ29uZmlnIH0gZnJvbSAnLi4vY29uZmlnL2FwcC1jb25maWcnO1xuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSAnLi4vdHlwZXMvY29uZmlnLnR5cGUnO1xuaW1wb3J0IHsgU2Vzc2lvbkluZm8gfSBmcm9tICcuLi90eXBlcy9zZXNzaW9uLWluZm8udHlwZSc7XG5pbXBvcnQgeyBDb2RlcyB9IGZyb20gJy4uL3V0aWwvY29kZXMnO1xuXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIExvZ2luU3RvcmFnZVNlcnZpY2Uge1xuXG4gIHByaXZhdGUgX2NvbmZpZzogQ29uZmlnO1xuICBwdWJsaWMgX2xvY2FsU3RvcmFnZUtleTogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBpbmplY3RvcjogSW5qZWN0b3IpIHtcbiAgICB0aGlzLl9jb25maWcgPSB0aGlzLmluamVjdG9yLmdldChBcHBDb25maWcpLmdldENvbmZpZ3VyYXRpb24oKTtcbiAgICB0aGlzLl9sb2NhbFN0b3JhZ2VLZXkgPSB0aGlzLl9jb25maWcudXVpZDtcbiAgfVxuXG4gIHB1YmxpYyBnZXRTZXNzaW9uSW5mbygpOiBTZXNzaW9uSW5mbyB7XG4gICAgY29uc3QgaW5mbyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKHRoaXMuX2xvY2FsU3RvcmFnZUtleSk7XG4gICAgaWYgKCFpbmZvKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIGNvbnN0IHN0b3JlZCA9IEpTT04ucGFyc2UoaW5mbyk7XG4gICAgcmV0dXJuIHN0b3JlZFtDb2Rlcy5TRVNTSU9OX0tFWV0gfHwge307XG4gIH1cblxuICBwdWJsaWMgc3RvcmVTZXNzaW9uSW5mbyhzZXNzaW9uSW5mbzogU2Vzc2lvbkluZm8pOiB2b2lkIHtcbiAgICBpZiAoc2Vzc2lvbkluZm8gIT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc3QgaW5mbyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKHRoaXMuX2xvY2FsU3RvcmFnZUtleSk7XG4gICAgICBsZXQgc3RvcmVkID0gbnVsbDtcbiAgICAgIGlmIChpbmZvICYmIGluZm8ubGVuZ3RoID4gMCkge1xuICAgICAgICBzdG9yZWQgPSBKU09OLnBhcnNlKGluZm8pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RvcmVkID0ge307XG4gICAgICB9XG4gICAgICBzdG9yZWRbQ29kZXMuU0VTU0lPTl9LRVldID0gc2Vzc2lvbkluZm87XG4gICAgICB0cnkge1xuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSh0aGlzLl9sb2NhbFN0b3JhZ2VLZXksIEpTT04uc3RyaW5naWZ5KHN0b3JlZCkpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiQ2Fubm90IHNldCBuZXcgaXRlbSBpbiBsb2NhbFN0b3JhZ2UuIEVycm9yOiBcIiArIGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyB1cGRhdGVTZXNzaW9uSWQoaWQ6IHN0cmluZyB8IG51bWJlcikge1xuICAgIGxldCBzZXNzaW9uID0gdGhpcy5nZXRTZXNzaW9uSW5mbygpO1xuICAgIGlmIChzZXNzaW9uLmlkICE9PSBpZCkge1xuICAgICAgc2Vzc2lvbi5pZCA9IGlkO1xuICAgICAgdGhpcy5zdG9yZVNlc3Npb25JbmZvKHNlc3Npb24pO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzZXNzaW9uRXhwaXJlZCgpOiB2b2lkIHtcbiAgICBjb25zdCBzZXNzaW9uSW5mbyA9IHRoaXMuZ2V0U2Vzc2lvbkluZm8oKTtcbiAgICBkZWxldGUgc2Vzc2lvbkluZm8uaWQ7XG4gICAgZGVsZXRlIHNlc3Npb25JbmZvLnVzZXI7XG4gICAgdGhpcy5zdG9yZVNlc3Npb25JbmZvKHNlc3Npb25JbmZvKTtcbiAgfVxuXG4gIHB1YmxpYyBpc0xvZ2dlZEluKCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHNlc3Npb25JbmZvID0gdGhpcy5nZXRTZXNzaW9uSW5mbygpO1xuICAgIGlmIChzZXNzaW9uSW5mbyAmJiBzZXNzaW9uSW5mby5pZCAmJiBzZXNzaW9uSW5mby51c2VyICYmIHNlc3Npb25JbmZvLnVzZXIubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKHR5cGVvZiBzZXNzaW9uSW5mby5pZCA9PT0gJ251bWJlcicgJiYgKGlzTmFOKHNlc3Npb25JbmZvLmlkKSB8fCBzZXNzaW9uSW5mby5pZCA8IDApKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxufVxuIl19