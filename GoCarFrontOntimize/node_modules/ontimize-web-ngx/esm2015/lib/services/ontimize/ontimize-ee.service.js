import { HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { share } from 'rxjs/operators';
import { Util } from '../../util/util';
import { OntimizeBaseService } from './ontimize-base-service.class';
export class OntimizeEEService extends OntimizeBaseService {
    constructor() {
        super(...arguments);
        this.path = '';
    }
    configureService(config) {
        super.configureService(config);
        this._startSessionPath = this._appConfig.startSessionPath ? this._appConfig.startSessionPath : '/users/login';
        this.path = config.path;
    }
    startsession(user, password) {
        const url = this.urlBase + this._startSessionPath;
        const options = {
            headers: new HttpHeaders({
                Authorization: 'Basic ' + btoa(user + ':' + password)
            }),
            observe: 'response'
        };
        const dataObservable = new Observable(observer => {
            this.httpClient.post(url, null, options).subscribe((resp) => {
                if (Util.isDefined(resp) && Util.isDefined(resp.headers) && Util.isDefined(resp.headers.get('X-Auth-Token'))) {
                    observer.next(resp.headers.get('X-Auth-Token'));
                }
                else {
                    observer.error('Invalid user or password');
                }
            }, error => observer.error(error));
        });
        return dataObservable.pipe(share());
    }
    endsession(user, sessionId) {
        const dataObservable = new Observable(observer => {
            setTimeout(() => {
                observer.next(0);
            }, 0);
        });
        return dataObservable.pipe(share());
    }
    hassession(user, sessionId) {
        const dataObservable = new Observable(observer => {
            observer.next(true);
        });
        return dataObservable.pipe(share());
    }
    query(kv, av, entity, sqltypes) {
        kv = (Util.isDefined(kv)) ? kv : this.kv;
        av = (Util.isDefined(av)) ? av : this.av;
        sqltypes = (Util.isDefined(sqltypes)) ? sqltypes : this.sqltypes;
        const url = `${this.urlBase}${this.path}/${entity}/search`;
        const body = JSON.stringify({
            filter: kv,
            columns: av,
            sqltypes: sqltypes
        });
        return this.doRequest({
            method: 'POST',
            url: url,
            body: body,
            successCallback: this.parseSuccessfulQueryResponse,
            errorCallBack: this.parseUnsuccessfulQueryResponse
        });
    }
    advancedQuery(kv, av, entity, sqltypes, offset, pagesize, orderby) {
        kv = (Util.isDefined(kv)) ? kv : this.kv;
        av = (Util.isDefined(av)) ? av : this.av;
        sqltypes = (Util.isDefined(sqltypes)) ? sqltypes : this.sqltypes;
        orderby = (Util.isDefined(orderby)) ? orderby : this.orderby;
        offset = (Util.isDefined(offset)) ? offset : this.offset;
        pagesize = (Util.isDefined(pagesize)) ? pagesize : this.pagesize;
        const url = `${this.urlBase}${this.path}/${entity}/advancedsearch`;
        const body = JSON.stringify({
            filter: kv,
            columns: av,
            sqltypes: sqltypes,
            offset: offset,
            pageSize: pagesize,
            orderBy: orderby
        });
        return this.doRequest({
            method: 'POST',
            url: url,
            body: body,
            successCallback: this.parseSuccessfulAdvancedQueryResponse,
            errorCallBack: this.parseUnsuccessfulAdvancedQueryResponse
        });
    }
    insert(av = {}, entity, sqltypes) {
        const url = `${this.urlBase}${this.path}/${entity}`;
        const body = JSON.stringify({
            data: av,
            sqltypes: sqltypes
        });
        return this.doRequest({
            method: 'POST',
            url: url,
            body: body,
            successCallback: this.parseSuccessfulInsertResponse,
            errorCallBack: this.parseUnsuccessfulInsertResponse
        });
    }
    update(kv = {}, av = {}, entity, sqltypes) {
        const url = `${this.urlBase}${this.path}/${entity}`;
        const body = JSON.stringify({
            filter: kv,
            data: av,
            sqltypes: sqltypes
        });
        return this.doRequest({
            method: 'PUT',
            url: url,
            body: body,
            successCallback: this.parseSuccessfulUpdateResponse,
            errorCallBack: this.parseUnsuccessfulUpdateResponse
        });
    }
    delete(kv = {}, entity, sqltypes) {
        const url = `${this.urlBase}${this.path}/${entity}`;
        const body = JSON.stringify({
            filter: kv,
            sqltypes: sqltypes
        });
        return this.doRequest({
            method: 'DELETE',
            url: url,
            body: body,
            successCallback: this.parseSuccessfulDeleteResponse,
            errorCallBack: this.parseUnsuccessfulDeleteResponse
        });
    }
    buildHeaders() {
        let headers = super.buildHeaders();
        const sessionId = this.authService.getSessionInfo().id;
        if (Util.isDefined(sessionId)) {
            headers = headers.append('Authorization', 'Bearer ' + sessionId);
        }
        return headers;
    }
}
OntimizeEEService.decorators = [
    { type: Injectable }
];
//# sourceMappingURL=data:application/json;base64,