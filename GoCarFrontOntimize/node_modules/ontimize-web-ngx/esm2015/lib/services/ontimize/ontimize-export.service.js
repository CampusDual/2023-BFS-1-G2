import { HttpHeaders } from '@angular/common/http';
import { Injectable, Injector } from '@angular/core';
import { Observable } from 'rxjs';
import { map, share } from 'rxjs/operators';
import { Util } from '../../util';
import { OntimizeExportDataProviderService } from '../ontimize-export-data-provider.service';
import { OntimizeBaseService } from './ontimize-base-service.class';
export class OntimizeExportService extends OntimizeBaseService {
    constructor(injector) {
        super(injector);
        this.injector = injector;
        this.exportDataProvider = this.injector.get(OntimizeExportDataProviderService);
    }
    configureService(config) {
        super.configureService(config);
        if (config.exportPath) {
            this.exportPath = config.exportPath;
        }
        if (config.downloadPath) {
            this.downloadPath = config.downloadPath;
        }
        if (config.path) {
            this.servicePath = config.path;
        }
    }
    buildHeaders() {
        let headers = new HttpHeaders({ 'Access-Control-Allow-Origin': '*' });
        const sessionId = this.authService.getSessionInfo().id;
        if (Util.isDefined(sessionId)) {
            headers = headers.append('Authorization', 'Bearer ' + sessionId);
        }
        return headers;
    }
    exportData(format) {
        const entity = this.exportDataProvider.entity;
        const url = `${this.urlBase}${this.exportPath ? this.exportPath : ''}${this.servicePath}/${entity}/${format}`;
        const options = {
            headers: this.buildHeaders().append('Content-Type', 'application/json;charset=UTF-8'),
            observe: 'response'
        };
        const exportData = this.exportDataProvider.getExportConfiguration();
        const body = JSON.stringify(exportData);
        const dataObservable = new Observable((observer) => {
            this.httpClient.post(url, body, options).pipe(map((resData) => this.adapter.adapt(resData))).subscribe(resp => {
                this.parseSuccessfulExportDataResponse(format, resp, observer);
            }, error => {
                this.parseUnsuccessfulResponse(error, observer);
            });
        });
        return dataObservable.pipe(share());
    }
    parseSuccessfulExportDataResponse(format, resp, subscriber) {
        if (resp && resp.isUnauthorized()) {
            this.clientErrorFallback(401);
        }
        else if (resp && resp.isFailed()) {
            subscriber.error(resp.message);
        }
        else if (resp && resp.isSuccessful()) {
            this.downloadFile(resp.data[0][format + 'Id'], format)
                .subscribe(r => subscriber.next(r), e => subscriber.error(e), () => subscriber.complete());
        }
        else {
            subscriber.error('Service unavailable');
        }
    }
    downloadFile(fileId, fileExtension) {
        const url = `${this.urlBase}${this.downloadPath ? this.downloadPath : ''}${this.servicePath}/${fileExtension}/${fileId}`;
        const options = {
            headers: this.buildHeaders(),
            observe: 'response',
            responseType: 'blob'
        };
        const dataObservable = new Observable(observer => {
            this.httpClient.get(url, options).subscribe((resp) => {
                const fileData = resp.body;
                const fileURL = URL.createObjectURL(fileData);
                const a = document.createElement('a');
                document.body.appendChild(a);
                a.href = fileURL;
                a.download = fileId + '.' + fileExtension;
                a.click();
                document.body.removeChild(a);
                observer.next(fileData);
                URL.revokeObjectURL(fileURL);
            }, error => observer.error(error), () => observer.complete());
        });
        return dataObservable.pipe(share());
    }
}
OntimizeExportService.decorators = [
    { type: Injectable }
];
OntimizeExportService.ctorParameters = () => [
    { type: Injector }
];
//# sourceMappingURL=data:application/json;base64,