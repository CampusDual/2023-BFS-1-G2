import { ChangeDetectionStrategy, Component, Inject, Injector } from '@angular/core';
import { FormControl, FormGroup, Validators } from '@angular/forms';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';
import { OTableBaseDialogClass } from '../../../../components/table/extensions/dialog/o-table-base-dialog.class';
export class OStoreFilterDialogComponent extends OTableBaseDialogClass {
    constructor(dialogRef, injector, data) {
        super(injector);
        this.dialogRef = dialogRef;
        this.injector = injector;
        this.filterNames = [];
        this.formGroup = new FormGroup({
            name: new FormControl('', [
                Validators.required,
                this.filterNameValidator.bind(this)
            ]),
            description: new FormControl('')
        });
        this.setFormControl(this.formGroup.get('name'));
        this.loadFilterNames(data);
    }
    loadFilterNames(filterNames) {
        this.filterNames = filterNames;
    }
    getFilterAttributes() {
        return this.formGroup.value;
    }
    filterNameValidator(control) {
        const ctrlValue = control.value;
        if (this.filterNames.indexOf(ctrlValue) !== -1) {
            return { filterNameAlreadyExists: true };
        }
        return {};
    }
}
OStoreFilterDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-store-filter-dialog',
                template: "<span mat-dialog-title>{{ 'TABLE.BUTTONS.SAVE_FILTER' | oTranslate }}</span>\n\n<mat-dialog-content>\n  <div mat-subheader>{{ 'TABLE.DIALOG.SAVE_FILTER' | oTranslate }}</div>\n  <form #form [formGroup]=\"formGroup\" fxLayout=\"column\">\n    <mat-form-field>\n      <input matInput [matTooltip]=\"tooltipText\" [matTooltipClass]=\"tooltipClass\" placeholder=\"{{ 'TABLE.DIALOG.FILTER_NAME' | oTranslate }}\"\n        formControlName=\"name\" required>\n      <mat-error *oMatError=\"hasError(formGroup.controls['name'], 'filterNameAlreadyExists')\">\n        {{ 'TABLE.DIALOG.FILTER_NAME_ALREADY_EXISTS' | oTranslate }}\n      </mat-error>\n      <mat-error *oMatError=\"hasError(formGroup.controls['name'], 'required')\">\n        {{ 'FORM_VALIDATION.REQUIRED' | oTranslate }}\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field class=\"example-full-width\">\n      <textarea matInput placeholder=\"{{ 'TABLE.DIALOG.FILTER_DESCRIPTION' | oTranslate }}\" formControlName=\"description\" rows=\"4\"\n        cols=\"50\"></textarea>\n    </mat-form-field>\n  </form>\n</mat-dialog-content>\n\n<mat-dialog-actions align=\"end\">\n  <button type=\"button\" mat-stroked-button [mat-dialog-close]=\"false\" class=\"o-button-default cancel\">{{ 'CANCEL' | oTranslate }}</button>\n  <button type=\"button\" mat-stroked-button [mat-dialog-close]=\"true\" [disabled]=\"!formGroup.valid\" class=\"o-button-primary\">\n    {{'SAVE' | oTranslate }}\n  </button>\n</mat-dialog-actions>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
OStoreFilterDialogComponent.ctorParameters = () => [
    { type: MatDialogRef },
    { type: Injector },
    { type: Array, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1zdG9yZS1maWx0ZXItZGlhbG9nLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL29udGltaXplLXdlYi1uZ3gvIiwic291cmNlcyI6WyJsaWIvc2hhcmVkL2NvbXBvbmVudHMvZmlsdGVyL3N0b3JlLWZpbHRlci9vLXN0b3JlLWZpbHRlci1kaWFsb2cuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRixPQUFPLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNwRSxPQUFPLEVBQUUsZUFBZSxFQUFFLFlBQVksRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRWxFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDBFQUEwRSxDQUFDO0FBUWpILE1BQU0sT0FBTywyQkFBNEIsU0FBUSxxQkFBcUI7SUFXcEUsWUFDUyxTQUFvRCxFQUNqRCxRQUFrQixFQUNILElBQW1CO1FBRTVDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUpULGNBQVMsR0FBVCxTQUFTLENBQTJDO1FBQ2pELGFBQVEsR0FBUixRQUFRLENBQVU7UUFYOUIsZ0JBQVcsR0FBa0IsRUFBRSxDQUFDO1FBQ2hDLGNBQVMsR0FBYyxJQUFJLFNBQVMsQ0FBQztZQUNuQyxJQUFJLEVBQUUsSUFBSSxXQUFXLENBQUMsRUFBRSxFQUFFO2dCQUN4QixVQUFVLENBQUMsUUFBUTtnQkFDbkIsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7YUFDcEMsQ0FBQztZQUNGLFdBQVcsRUFBRSxJQUFJLFdBQVcsQ0FBQyxFQUFFLENBQUM7U0FDakMsQ0FBQyxDQUFDO1FBUUQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ2hELElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDN0IsQ0FBQztJQUVELGVBQWUsQ0FBQyxXQUFXO1FBQ3pCLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO0lBQ2pDLENBQUM7SUFFRCxtQkFBbUI7UUFDakIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQztJQUM5QixDQUFDO0lBRVMsbUJBQW1CLENBQUMsT0FBb0I7UUFDaEQsTUFBTSxTQUFTLEdBQVcsT0FBTyxDQUFDLEtBQUssQ0FBQztRQUN4QyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQzlDLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxJQUFJLEVBQUUsQ0FBQztTQUMxQztRQUNELE9BQU8sRUFBRSxDQUFDO0lBQ1osQ0FBQzs7O1lBeENGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsdUJBQXVCO2dCQUNqQyx5OUNBQXFEO2dCQUNyRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTthQUNoRDs7O1lBVHlCLFlBQVk7WUFGZSxRQUFRO1lBMEIxQixLQUFLLHVCQUFuQyxNQUFNLFNBQUMsZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIEluamVjdCwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1Db250cm9sLCBGb3JtR3JvdXAsIFZhbGlkYXRvcnMgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBNQVRfRElBTE9HX0RBVEEsIE1hdERpYWxvZ1JlZiB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsJztcblxuaW1wb3J0IHsgT1RhYmxlQmFzZURpYWxvZ0NsYXNzIH0gZnJvbSAnLi4vLi4vLi4vLi4vY29tcG9uZW50cy90YWJsZS9leHRlbnNpb25zL2RpYWxvZy9vLXRhYmxlLWJhc2UtZGlhbG9nLmNsYXNzJztcbmltcG9ydCB7IE9GaWx0ZXJEZWZpbml0aW9uIH0gZnJvbSAnLi4vLi4vLi4vLi4vdHlwZXMvby1maWx0ZXItZGVmaW5pdGlvbi50eXBlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnby1zdG9yZS1maWx0ZXItZGlhbG9nJyxcbiAgdGVtcGxhdGVVcmw6ICcuL28tc3RvcmUtZmlsdGVyLWRpYWxvZy5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIE9TdG9yZUZpbHRlckRpYWxvZ0NvbXBvbmVudCBleHRlbmRzIE9UYWJsZUJhc2VEaWFsb2dDbGFzcyB7XG5cbiAgZmlsdGVyTmFtZXM6IEFycmF5PHN0cmluZz4gPSBbXTtcbiAgZm9ybUdyb3VwOiBGb3JtR3JvdXAgPSBuZXcgRm9ybUdyb3VwKHtcbiAgICBuYW1lOiBuZXcgRm9ybUNvbnRyb2woJycsIFtcbiAgICAgIFZhbGlkYXRvcnMucmVxdWlyZWQsXG4gICAgICB0aGlzLmZpbHRlck5hbWVWYWxpZGF0b3IuYmluZCh0aGlzKVxuICAgIF0pLFxuICAgIGRlc2NyaXB0aW9uOiBuZXcgRm9ybUNvbnRyb2woJycpXG4gIH0pO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBkaWFsb2dSZWY6IE1hdERpYWxvZ1JlZjxPU3RvcmVGaWx0ZXJEaWFsb2dDb21wb25lbnQ+LFxuICAgIHByb3RlY3RlZCBpbmplY3RvcjogSW5qZWN0b3IsXG4gICAgQEluamVjdChNQVRfRElBTE9HX0RBVEEpIGRhdGE6IEFycmF5PHN0cmluZz5cbiAgKSB7XG4gICAgc3VwZXIoaW5qZWN0b3IpO1xuICAgIHRoaXMuc2V0Rm9ybUNvbnRyb2wodGhpcy5mb3JtR3JvdXAuZ2V0KCduYW1lJykpO1xuICAgIHRoaXMubG9hZEZpbHRlck5hbWVzKGRhdGEpO1xuICB9XG5cbiAgbG9hZEZpbHRlck5hbWVzKGZpbHRlck5hbWVzKTogdm9pZCB7XG4gICAgdGhpcy5maWx0ZXJOYW1lcyA9IGZpbHRlck5hbWVzO1xuICB9XG5cbiAgZ2V0RmlsdGVyQXR0cmlidXRlcygpOiBPRmlsdGVyRGVmaW5pdGlvbiB7XG4gICAgcmV0dXJuIHRoaXMuZm9ybUdyb3VwLnZhbHVlO1xuICB9XG5cbiAgcHJvdGVjdGVkIGZpbHRlck5hbWVWYWxpZGF0b3IoY29udHJvbDogRm9ybUNvbnRyb2wpIHtcbiAgICBjb25zdCBjdHJsVmFsdWU6IHN0cmluZyA9IGNvbnRyb2wudmFsdWU7XG4gICAgaWYgKHRoaXMuZmlsdGVyTmFtZXMuaW5kZXhPZihjdHJsVmFsdWUpICE9PSAtMSkge1xuICAgICAgcmV0dXJuIHsgZmlsdGVyTmFtZUFscmVhZHlFeGlzdHM6IHRydWUgfTtcbiAgICB9XG4gICAgcmV0dXJuIHt9O1xuICB9XG5cbn1cbiJdfQ==