import { Directive, Input } from '@angular/core';
import { OFormLayoutManagerComponent } from '../../o-form-layout-manager.component';
export class OFormLayoutSplitPaneOptionsDirective {
    constructor(formLayoutManager) {
        this.formLayoutManager = formLayoutManager;
    }
    ngOnChanges() {
        if (this.formLayoutManager) {
            this.formLayoutManager.addSplitPaneOptions(this.getOptions());
        }
    }
    getOptions() {
        const result = {
            mainWidth: this.mainWidth,
            mainMaxWidth: this.mainMaxWidth,
            mainMinWidth: this.mainMinWidth,
            detailWidth: this.detailWidth,
            detailMaxWidth: this.detailMaxWidth,
            detailMinWidth: this.detailMinWidth
        };
        Object.keys(result).forEach(key => result[key] == null ? delete result[key] : {});
        return result;
    }
}
OFormLayoutSplitPaneOptionsDirective.decorators = [
    { type: Directive, args: [{
                selector: 'o-form-layout-split-pane-options, o-form-layout-manager[mode="split-pane"]'
            },] }
];
OFormLayoutSplitPaneOptionsDirective.ctorParameters = () => [
    { type: OFormLayoutManagerComponent }
];
OFormLayoutSplitPaneOptionsDirective.propDecorators = {
    mainWidth: [{ type: Input, args: ['main-width',] }],
    mainMaxWidth: [{ type: Input, args: ['main-max-width',] }],
    mainMinWidth: [{ type: Input, args: ['main-min-width',] }],
    detailWidth: [{ type: Input, args: ['detail-width',] }],
    detailMaxWidth: [{ type: Input, args: ['detail-max-width',] }],
    detailMinWidth: [{ type: Input, args: ['detail-min-width',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1mb3JtLWxheW91dC1zcGxpdC1wYW5lLW9wdGlvbnMuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vb250aW1pemUtd2ViLW5neC8iLCJzb3VyY2VzIjpbImxpYi9sYXlvdXRzL2Zvcm0tbGF5b3V0L3NwbGl0LXBhbmUvb3B0aW9ucy9vLWZvcm0tbGF5b3V0LXNwbGl0LXBhbmUtb3B0aW9ucy5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFakQsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFLcEYsTUFBTSxPQUFPLG9DQUFvQztJQUUvQyxZQUFzQixpQkFBOEM7UUFBOUMsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUE2QjtJQUFJLENBQUM7SUFFekUsV0FBVztRQUNULElBQUksSUFBSSxDQUFDLGlCQUFpQixFQUFFO1lBQzFCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztTQUMvRDtJQUNILENBQUM7SUFTRCxVQUFVO1FBQ1IsTUFBTSxNQUFNLEdBQUc7WUFDYixTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVM7WUFDekIsWUFBWSxFQUFFLElBQUksQ0FBQyxZQUFZO1lBQy9CLFlBQVksRUFBRSxJQUFJLENBQUMsWUFBWTtZQUMvQixXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVc7WUFDN0IsY0FBYyxFQUFFLElBQUksQ0FBQyxjQUFjO1lBQ25DLGNBQWMsRUFBRSxJQUFJLENBQUMsY0FBYztTQUNwQyxDQUFBO1FBRUQsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbEYsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQzs7O1lBaENGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsNEVBQTRFO2FBQ3ZGOzs7WUFKUSwyQkFBMkI7Ozt3QkFlakMsS0FBSyxTQUFDLFlBQVk7MkJBQ2xCLEtBQUssU0FBQyxnQkFBZ0I7MkJBQ3RCLEtBQUssU0FBQyxnQkFBZ0I7MEJBQ3RCLEtBQUssU0FBQyxjQUFjOzZCQUNwQixLQUFLLFNBQUMsa0JBQWtCOzZCQUN4QixLQUFLLFNBQUMsa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBPRm9ybUxheW91dE1hbmFnZXJDb21wb25lbnQgfSBmcm9tICcuLi8uLi9vLWZvcm0tbGF5b3V0LW1hbmFnZXIuY29tcG9uZW50JztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnby1mb3JtLWxheW91dC1zcGxpdC1wYW5lLW9wdGlvbnMsIG8tZm9ybS1sYXlvdXQtbWFuYWdlclttb2RlPVwic3BsaXQtcGFuZVwiXSdcbn0pXG5leHBvcnQgY2xhc3MgT0Zvcm1MYXlvdXRTcGxpdFBhbmVPcHRpb25zRGlyZWN0aXZlIHtcblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgZm9ybUxheW91dE1hbmFnZXI6IE9Gb3JtTGF5b3V0TWFuYWdlckNvbXBvbmVudCkgeyB9XG5cbiAgbmdPbkNoYW5nZXMoKSB7XG4gICAgaWYgKHRoaXMuZm9ybUxheW91dE1hbmFnZXIpIHtcbiAgICAgIHRoaXMuZm9ybUxheW91dE1hbmFnZXIuYWRkU3BsaXRQYW5lT3B0aW9ucyh0aGlzLmdldE9wdGlvbnMoKSk7XG4gICAgfVxuICB9XG5cbiAgQElucHV0KCdtYWluLXdpZHRoJykgbWFpbldpZHRoOiBudW1iZXIgfCBzdHJpbmc7XG4gIEBJbnB1dCgnbWFpbi1tYXgtd2lkdGgnKSBtYWluTWF4V2lkdGg6IG51bWJlciB8IHN0cmluZztcbiAgQElucHV0KCdtYWluLW1pbi13aWR0aCcpIG1haW5NaW5XaWR0aDogbnVtYmVyIHwgc3RyaW5nO1xuICBASW5wdXQoJ2RldGFpbC13aWR0aCcpIGRldGFpbFdpZHRoOiBudW1iZXIgfCBzdHJpbmc7XG4gIEBJbnB1dCgnZGV0YWlsLW1heC13aWR0aCcpIGRldGFpbE1heFdpZHRoOiBudW1iZXIgfCBzdHJpbmc7XG4gIEBJbnB1dCgnZGV0YWlsLW1pbi13aWR0aCcpIGRldGFpbE1pbldpZHRoOiBudW1iZXIgfCBzdHJpbmc7XG5cbiAgZ2V0T3B0aW9ucygpIHtcbiAgICBjb25zdCByZXN1bHQgPSB7XG4gICAgICBtYWluV2lkdGg6IHRoaXMubWFpbldpZHRoLFxuICAgICAgbWFpbk1heFdpZHRoOiB0aGlzLm1haW5NYXhXaWR0aCxcbiAgICAgIG1haW5NaW5XaWR0aDogdGhpcy5tYWluTWluV2lkdGgsXG4gICAgICBkZXRhaWxXaWR0aDogdGhpcy5kZXRhaWxXaWR0aCxcbiAgICAgIGRldGFpbE1heFdpZHRoOiB0aGlzLmRldGFpbE1heFdpZHRoLFxuICAgICAgZGV0YWlsTWluV2lkdGg6IHRoaXMuZGV0YWlsTWluV2lkdGhcbiAgICB9XG4gICAgLy8gRGVsZXRpbmcgdW5kZWZpbmVkIHByb3BlcnRpZXNcbiAgICBPYmplY3Qua2V5cyhyZXN1bHQpLmZvckVhY2goa2V5ID0+IHJlc3VsdFtrZXldID09IG51bGwgPyBkZWxldGUgcmVzdWx0W2tleV0gOiB7fSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufVxuIl19