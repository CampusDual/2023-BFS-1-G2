import { Component, ComponentFactoryResolver, ElementRef, forwardRef, Inject, Injector, Renderer2, ViewChild, ViewEncapsulation } from '@angular/core';
import { Router } from '@angular/router';
import { BehaviorSubject, Observable } from 'rxjs';
import { OFormLayoutManagerComponent } from '../../../layouts/form-layout/o-form-layout-manager.component';
import { DialogService } from '../../../services/dialog.service';
import { Codes } from '../../../util/codes';
import { Util } from '../../../util/util';
import { OFormLayoutManagerContentDirective } from '../directives/o-form-layout-manager-content.directive';
export const DEFAULT_INPUTS_O_FORM_LAYOUT_SPLIT_PANE = [
    'options'
];
export const DEFAULT_OUTPUTS_O_FORM_LAYOUT_SPLIT_PANE = [];
export class OFormLayoutSplitPaneComponent {
    constructor(injector, elementRef, componentFactoryResolver, renderer, formLayoutManager) {
        this.injector = injector;
        this.elementRef = elementRef;
        this.componentFactoryResolver = componentFactoryResolver;
        this.renderer = renderer;
        this.formLayoutManager = formLayoutManager;
        this.showLoading = new BehaviorSubject(false);
        this.router = this.injector.get(Router);
        this.dialogService = injector.get(DialogService);
    }
    set options(value) {
        if (Util.isDefined(value) && Object.keys(value).length === 0) {
            this._options = value;
        }
    }
    get state() {
        return this.formLayoutManager.state;
    }
    ngOnInit() {
        if (this.mainWrapper && this.mainWrapper.nativeElement) {
            this.setOption(this.mainWrapper.nativeElement, 'mainWidth', 'width');
            this.setOption(this.mainWrapper.nativeElement, 'mainMaxWidth', 'max-width');
            this.setOption(this.mainWrapper.nativeElement, 'mainMinWidth', 'min-width');
        }
        if (this.detailWrapper && this.detailWrapper.nativeElement) {
            this.setOption(this.detailWrapper.nativeElement, 'detailWidth', 'width');
            this.setOption(this.detailWrapper.nativeElement, 'detailMaxWidth', 'max-width');
            this.setOption(this.detailWrapper.nativeElement, 'detailMinWidth', 'min-width');
        }
    }
    ngAfterViewInit() {
        this.initializeComponentState();
    }
    setOption(el, optionName, propertyName) {
        if (Util.isDefined(this._options[optionName])) {
            this.renderer.setStyle(el, propertyName, this._options[optionName]);
        }
    }
    getFormCacheData() {
        return this.data;
    }
    setModifiedState(formAttr, modified, confirmExit) {
        this.data.innerFormsInfo[formAttr] = {
            modified: modified,
            confirmOnExit: confirmExit
        };
    }
    setDetailComponent(compData) {
        this.data = compData;
        this.createComponent();
    }
    onResizeEnd(property, event, el) {
        this.renderer.addClass(el, 'resized');
        this.renderer.setStyle(el, property, `${event.rectangle[property]}px`);
    }
    createComponent() {
        if (!this.data) {
            this.contentDirective.viewContainerRef.clear();
            return;
        }
        const componentFactory = this.componentFactoryResolver.resolveComponentFactory(this.data.component);
        if (this.contentDirective && componentFactory) {
            const viewContainerRef = this.contentDirective.viewContainerRef;
            viewContainerRef.clear();
            viewContainerRef.createComponent(componentFactory);
        }
    }
    getDataToStore() {
        return this.data;
    }
    getParams() {
        return Util.isDefined(this.data) ? this.data.params : undefined;
    }
    initializeComponentState() {
        if (this.formLayoutManager) {
            this.formLayoutManager.setAsActiveFormLayoutManager();
        }
        if (Util.isDefined(this.state.url)) {
            this.showLoading.next(true);
            const extras = {};
            extras[Codes.QUERY_PARAMS] = this.state.queryParams;
            this.router.navigate([this.state.url], extras).then(() => {
                this.showLoading.next(false);
            });
        }
    }
    updateActiveData(data) {
        if (Util.isDefined(this.data)) {
            this.data = Object.assign(this.data, data);
        }
    }
    getRouteOfActiveItem() {
        const route = [];
        if (Util.isDefined(this.data)) {
            const urlSegments = this.data.urlSegments || [];
            urlSegments.forEach((segment) => {
                route.push(segment.path);
            });
            return route;
        }
        return route;
    }
    isMainComponent(comp) {
        return this.mainWrapper && this.mainWrapper.nativeElement
            && comp.elementRef && this.mainWrapper.nativeElement.contains(comp.elementRef.nativeElement);
    }
    openDetail(detail) {
        this.setDetailComponent(detail);
    }
    closeDetail() {
        this.setDetailComponent(null);
    }
    updateNavigation(data, keysValues, insertionMode) {
    }
    canAddDetailComponent() {
        if (!Util.isDefined(this.data) || !this.formLayoutManager.hasToConfirmExit(this.data)) {
            return true;
        }
        return new Observable(observer => {
            this.dialogService.confirm('CONFIRM', 'MESSAGES.FORM_CHANGES_WILL_BE_LOST').then(res => {
                observer.next(res);
                observer.complete();
            });
        });
    }
}
OFormLayoutSplitPaneComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-form-layout-split-pane',
                template: "\n  <div fxLayout=\"row\" class=\"o-split-pane-row-wrapper\">\n    <div #mainWrapper fxFlex fxLayout=\"row\" class=\"o-split-pane-main-content\">\n      <ng-content></ng-content>\n    </div>\n\n    <div #detailWrapper class=\"o-split-pane-content-wrapper mwlResizable\" mwlResizable [enableGhostResize]=\"true\"\n      (resizeEnd)=\"onResizeEnd('width', $event, detailWrapper)\">\n\n      <div class=\"o-split-pane-resize-handle\" mwlResizeHandle [resizeEdges]=\"{ left: true }\">\n        <div class=\"o-split-pane-resize-border\">\n          <div></div>\n        </div>\n      </div>\n\n      <div class=\"o-split-pane-secondary-content\" fxLayout=\"column\" fxLayoutAlign=\"center stretch\" fxFlex>\n        <ng-template o-form-layout-manager-content></ng-template>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"showLoading | async\" class=\"spinner-container\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n    <mat-progress-spinner mode=\"indeterminate\" strokeWidth=\"3\"></mat-progress-spinner>\n  </div>\n",
                inputs: DEFAULT_INPUTS_O_FORM_LAYOUT_SPLIT_PANE,
                outputs: DEFAULT_OUTPUTS_O_FORM_LAYOUT_SPLIT_PANE,
                encapsulation: ViewEncapsulation.None,
                host: {
                    '[class.o-form-layout-split-pane]': 'true'
                },
                styles: [".o-form-layout-split-pane .o-split-pane-row-wrapper{height:100%}.o-form-layout-split-pane .o-split-pane-content-wrapper{z-index:1000;min-width:15%}.o-form-layout-split-pane .o-split-pane-content-wrapper>.o-split-pane-resize-handle{width:8px;position:relative;cursor:col-resize}.o-form-layout-split-pane .o-split-pane-content-wrapper>.o-split-pane-resize-handle>.o-split-pane-resize-border{position:absolute;height:100%;width:2px;left:3px;background-color:#929292}.o-form-layout-split-pane .o-split-pane-content-wrapper>.o-split-pane-resize-handle>.o-split-pane-resize-border>div{width:4px;height:32px;position:absolute;top:calc(50% - 16px);left:-1px;background-color:#666}.o-form-layout-split-pane .o-split-pane-content-wrapper:not(.resized){width:50%}.o-form-layout-split-pane .mwlResizable{box-sizing:border-box}.o-form-layout-split-pane .o-split-pane-secondary-content{padding:0 8px;overflow:auto}.o-form-layout-split-pane .o-split-pane-secondary-content>*{height:100%}.o-form-layout-split-pane .spinner-container{position:absolute;top:0;left:0;right:0;bottom:0;z-index:500;visibility:visible;opacity:1;transition:opacity .25s linear}"]
            }] }
];
OFormLayoutSplitPaneComponent.ctorParameters = () => [
    { type: Injector },
    { type: ElementRef },
    { type: ComponentFactoryResolver },
    { type: Renderer2 },
    { type: OFormLayoutManagerComponent, decorators: [{ type: Inject, args: [forwardRef(() => OFormLayoutManagerComponent),] }] }
];
OFormLayoutSplitPaneComponent.propDecorators = {
    contentDirective: [{ type: ViewChild, args: [OFormLayoutManagerContentDirective, { static: false },] }],
    mainWrapper: [{ type: ViewChild, args: ['mainWrapper', { read: ElementRef, static: false },] }],
    detailWrapper: [{ type: ViewChild, args: ['detailWrapper', { read: ElementRef, static: false },] }]
};
//# sourceMappingURL=data:application/json;base64,