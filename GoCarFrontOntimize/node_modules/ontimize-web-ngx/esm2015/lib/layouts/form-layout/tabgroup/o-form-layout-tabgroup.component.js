import { Component, ComponentFactoryResolver, ElementRef, EventEmitter, forwardRef, Inject, Injector, QueryList, ViewChild, ViewChildren, ViewContainerRef, ViewEncapsulation } from '@angular/core';
import { MatTabGroup } from '@angular/material';
import { Router } from '@angular/router';
import { BehaviorSubject, Subject, Subscription } from 'rxjs';
import { DialogService } from '../../../services/dialog.service';
import { Codes } from '../../../util/codes';
import { Util } from '../../../util/util';
import { OFormLayoutManagerContentDirective } from '../directives/o-form-layout-manager-content.directive';
import { OFormLayoutManagerComponent } from '../o-form-layout-manager.component';
export const DEFAULT_INPUTS_O_FORM_LAYOUT_TABGROUP = [
    'title',
    'options'
];
export const DEFAULT_OUTPUTS_O_FORM_LAYOUT_TABGROUP = [
    'onMainTabSelected',
    'onSelectedTabChange',
    'onCloseTab'
];
export class OFormLayoutTabGroupComponent {
    constructor(injector, componentFactoryResolver, location, elementRef, formLayoutManager) {
        this.injector = injector;
        this.componentFactoryResolver = componentFactoryResolver;
        this.location = location;
        this.elementRef = elementRef;
        this.formLayoutManager = formLayoutManager;
        this.data = [];
        this.showLoading = new BehaviorSubject(false);
        this.subscriptions = new Subscription();
        this.onMainTabSelected = new EventEmitter();
        this.onSelectedTabChange = new EventEmitter();
        this.onCloseTab = new EventEmitter();
        this.updateTabComponentsState = new Subject();
        this.tabsModificationsCache = [];
        this.dialogService = injector.get(DialogService);
        this.router = this.injector.get(Router);
    }
    get state() {
        return this.formLayoutManager.state;
    }
    ngAfterViewInit() {
        this.initializeComponentState();
        this.subscriptions.add(this.tabsDirectives.changes.subscribe(changes => {
            if (this.tabsDirectives.length) {
                const tabItem = this.tabsDirectives.last;
                const tabData = this.data[tabItem.index];
                if (tabData && !tabData.rendered) {
                    this.createTabComponent(tabData, tabItem);
                }
            }
        }));
    }
    ngOnDestroy() {
        if (this.subscriptions) {
            this.subscriptions.unsubscribe();
        }
    }
    get mainTabTitle() {
        return (this.options.title || this.title || 'LAYOUT_MANANGER.MAIN_TAB_LABEL');
    }
    get disableAnimation() {
        return this.options && this.options.disableAnimation;
    }
    get headerPosition() {
        let headerPosition;
        if (this.options && this.options.headerPosition) {
            headerPosition = this.options.headerPosition;
        }
        return headerPosition;
    }
    get color() {
        let color;
        if (this.options && this.options.color) {
            color = this.options.color;
        }
        return color;
    }
    get backgroundColor() {
        let backgroundColor;
        if (this.options && this.options.backgroundColor) {
            backgroundColor = this.options.backgroundColor;
        }
        return backgroundColor;
    }
    get templateMatTabLabel() {
        let templateMatTabLabel;
        if (this.options && this.options.templateMatTabLabel) {
            templateMatTabLabel = this.options.templateMatTabLabel;
        }
        return templateMatTabLabel;
    }
    get icon() {
        let icon;
        if (this.options && this.options.icon) {
            icon = this.options.icon;
        }
        return icon;
    }
    get isIconPositionLeft() {
        return this.options && this.options.iconPosition === 'left';
    }
    get maxTabs() {
        let maxTabs;
        if (this.options && this.options.maxTabs) {
            maxTabs = this.options.maxTabs;
        }
        return maxTabs;
    }
    addTab(compData) {
        let addNewComp = true;
        if (compData.insertionMode) {
            const alreadyExistingInsertionTab = Util.isDefined(this.data.find(item => item.insertionMode));
            addNewComp = !alreadyExistingInsertionTab;
        }
        const newCompParams = compData.params;
        if (addNewComp) {
            this.data.forEach(comp => {
                const currParams = comp.params || {};
                let someDiffParams = true;
                if (Object.keys(currParams).length > 0) {
                    someDiffParams = Object.keys(currParams).some(key => currParams[key] != newCompParams[key]);
                }
                addNewComp = addNewComp && someDiffParams;
            });
        }
        if (addNewComp) {
            this.data.push(compData);
        }
        else {
            this.reloadTab(compData);
        }
    }
    reloadTab(compData) {
        let compIndex = -1;
        const compParams = compData.params;
        this.data.forEach((comp, i) => {
            const currParams = comp.params || {};
            const sameParams = Util.isEquivalent(currParams, compParams);
            if (sameParams) {
                compIndex = i;
            }
        });
        if (compIndex >= 0) {
            this.tabGroup.selectedIndex = (compIndex + 1);
        }
    }
    onTabSelectChange(arg) {
        if (this.formLayoutManager && this.tabGroup.selectedIndex === 0) {
            this.formLayoutManager.updateIfNeeded();
            this.onMainTabSelected.emit();
        }
        const isLoading = this.showLoading.getValue();
        if (isLoading && Util.isDefined(this.state) && Util.isDefined(this.state.tabsData) &&
            arg.index === this.state.tabsData.length - 1) {
            this.tabGroup.selectedIndex = this.state.selectedIndex;
            this.showLoading.next(false);
        }
        if (!isLoading) {
            this.onSelectedTabChange.emit({
                data: this.data[this.tabGroup.selectedIndex - 1],
                index: this.tabGroup.selectedIndex,
                previousIndex: this.previousSelectedIndex
            });
        }
        this.previousSelectedIndex = this.tabGroup.selectedIndex;
    }
    closeTab(index, options) {
        if (!this.formLayoutManager) {
            return;
        }
        const tabData = this.data[index];
        const onCloseTabAccepted = new EventEmitter();
        this.subscriptions.add(onCloseTabAccepted.asObservable().subscribe(res => {
            if (res) {
                this.data.splice(index, 1);
                this.onCloseTab.emit({
                    data: tabData,
                    index: index + 1
                });
            }
        }));
        if (Util.isDefined(tabData) && this.formLayoutManager.hasToConfirmExit(tabData, options)) {
            this.dialogService.confirm('CONFIRM', 'MESSAGES.FORM_CHANGES_WILL_BE_LOST').then(res => {
                onCloseTabAccepted.emit(res);
            });
        }
        else {
            onCloseTabAccepted.emit(true);
        }
    }
    createTabComponent(tabData, content) {
        const component = tabData.component;
        const componentFactory = this.componentFactoryResolver.resolveComponentFactory(component);
        const viewContainerRef = content.viewContainerRef;
        viewContainerRef.clear();
        viewContainerRef.createComponent(componentFactory);
        tabData.rendered = true;
    }
    getFormCacheData() {
        return this.data.length > 0 ? this.data[this.data.length - 1] : undefined;
    }
    getRouteOfActiveItem() {
        const route = [];
        if (this.data.length && this.tabGroup.selectedIndex > 0) {
            const urlSegments = this.data[this.tabGroup.selectedIndex - 1].urlSegments || [];
            urlSegments.forEach((segment) => {
                route.push(segment.path);
            });
            return route;
        }
        return route;
    }
    setModifiedState(formAttr, modified, confirmExit) {
        if (this.tabGroup.selectedIndex > 0) {
            const selectedData = this.data[this.tabGroup.selectedIndex - 1];
            if (Util.isDefined(selectedData)) {
                selectedData.innerFormsInfo[formAttr] = {
                    modified: modified,
                    confirmOnExit: confirmExit
                };
            }
        }
    }
    updateNavigation(data, keysValues, insertionMode) {
        let index;
        if (insertionMode) {
            index = this.data.findIndex((item) => item.insertionMode !== false);
        }
        else {
            index = this.data.findIndex((item) => Object.keys(keysValues).every(key => keysValues[key] == item.params[key]));
        }
        if (index >= 0) {
            let label = this.formLayoutManager.getLabelFromData(data);
            this.tabGroup.selectedIndex = (index + 1);
            label = label.length ? label : this.formLayoutManager.getLabelFromUrlParams(this.data[index].params);
            this.data[index].label = label;
            this.data[index].insertionMode = insertionMode;
            if (Object.keys(data).length > 0) {
                this.data[index].formDataByLabelColumns = this.formLayoutManager.getFormDataFromLabelColumns(data);
            }
        }
    }
    updateActiveData(data) {
        const index = this.tabGroup.selectedIndex - 1;
        if (Util.isDefined(this.data[index])) {
            this.data[index] = Object.assign(this.data[index], data);
        }
    }
    getDataToStore() {
        const tabsData = this.data
            .filter((data) => !data.insertionMode)
            .map((data) => ({
            params: data.params,
            queryParams: data.queryParams,
            urlSegments: data.urlSegments,
            url: data.url,
            label: data.label,
            insertionMode: data.insertionMode
        }));
        return {
            tabsData: tabsData,
            selectedIndex: this.tabGroup.selectedIndex
        };
    }
    initializeComponentState() {
        if (this.formLayoutManager) {
            this.formLayoutManager.setAsActiveFormLayoutManager();
        }
        if (!Util.isDefined(this.state) || !Util.isDefined(this.state.tabsData)) {
            return;
        }
        this.state.tabsData = this.state.tabsData.filter(tabData => !tabData.insertionMode);
        if (this.state.tabsData.length >= 1 && (this.state.tabsData[0].url || '').length > 0) {
            this.showLoading.next(true);
            const extras = {};
            extras[Codes.QUERY_PARAMS] = this.state.tabsData[0].queryParams;
            extras[Codes.QUERY_PARAMS][Codes.INSERTION_MODE] = `${this.state.tabsData[0].insertionMode}`;
            this.router.navigate([this.state.tabsData[0].url], extras).then(() => {
                if (this.data[0] && this.data[0].component && this.state.tabsData.length > 1) {
                    setTimeout(() => {
                        this.createTabsFromState();
                    }, 0);
                }
                else {
                    this.showLoading.next(false);
                }
            });
        }
    }
    createTabsFromState() {
        const tabComponent = this.data[0].component;
        const stateTabsData = this.state.tabsData.slice(1);
        if (stateTabsData.length > 0) {
            stateTabsData.forEach((tabData) => {
                setTimeout(() => {
                    const newDetailData = this.createDetailComponent(tabComponent, tabData);
                    this.data.push(newDetailData);
                }, 0);
            });
        }
        else {
            this.showLoading.next(false);
        }
    }
    createDetailComponent(component, paramsObj) {
        const newDetailComp = {
            params: paramsObj.params,
            queryParams: paramsObj.queryParams,
            urlSegments: paramsObj.urlSegments,
            component: component,
            url: paramsObj.url,
            id: Util.randomNumber().toString(),
            label: paramsObj.label,
            innerFormsInfo: {}
        };
        return newDetailComp;
    }
    getParams() {
        return Util.isDefined(this.data[0]) ? this.data[0].params : undefined;
    }
    isMainComponent(comp) {
        const firstTab = this.elementRef.nativeElement.getElementsByTagName('mat-tab-body')[0];
        return firstTab && comp.elementRef && firstTab.contains(comp.elementRef.nativeElement);
    }
    openDetail(detail) {
        this.addTab(detail);
    }
    closeDetail(options) {
        this.closeTab(this.tabGroup.selectedIndex - 1, options);
    }
    canAddDetailComponent() {
        const maxReached = (this.data.length + 1) >= this.maxTabs;
        if (maxReached) {
            this.dialogService.info('INFO', 'LAYOUT_MANANGER.MAX_TABS_NUMBER_REACHED');
        }
        return !maxReached;
    }
    isTabDataModified(tabData) {
        return Object.keys(tabData.innerFormsInfo).some(formAttr => tabData.innerFormsInfo[formAttr].modified);
    }
}
OFormLayoutTabGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-form-layout-tabgroup',
                inputs: DEFAULT_INPUTS_O_FORM_LAYOUT_TABGROUP,
                outputs: DEFAULT_OUTPUTS_O_FORM_LAYOUT_TABGROUP,
                template: "<mat-tab-group #tabGroup oTabGroup=\"ontimize\" fxFill (selectedTabChange)=\"onTabSelectChange($event)\" [color]=\"color\"\n  [backgroundColor]=\"backgroundColor\" [headerPosition]=\"headerPosition\" [@.disabled]=\"disableAnimation\">\n  <mat-tab label=\"{{ mainTabTitle | oTranslate }}\">\n    <ng-content></ng-content>\n  </mat-tab>\n  <mat-tab *ngFor=\"let tabData of data; let i = index\">\n    <ng-template mat-tab-label>\n      <span class=\"tab-label\" [class.modified]=\"isTabDataModified(tabData)\">\n        <ng-container *ngIf=\"icon && isIconPositionLeft\">\n          <mat-icon>{{ icon }}</mat-icon>\n        </ng-container>\n        <ng-container *ngIf=\"templateMatTabLabel && tabData.formDataByLabelColumns && !tabData.insertionMode \">\n          <ng-container *ngTemplateOutlet=\"templateMatTabLabel;context:{$implicit:tabData.formDataByLabelColumns}\">\n          </ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"!templateMatTabLabel || tabData.insertionMode\">\n          {{ tabData.label }}\n        </ng-container>\n        <ng-container *ngIf=\"icon && !isIconPositionLeft\">\n          <mat-icon>{{ icon }}</mat-icon>\n        </ng-container>\n        <span class=\"gradient-layer\"></span>\n      </span>\n      <mat-icon (click)=\"closeTab(i)\" svgIcon=\"ontimize:close\"></mat-icon>\n    </ng-template>\n    <ng-template o-form-layout-manager-content [index]=\"i\"></ng-template>\n  </mat-tab>\n</mat-tab-group>\n<div *ngIf=\"showLoading | async\" class=\"spinner-container\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n  <mat-progress-spinner mode=\"indeterminate\" strokeWidth=\"3\"></mat-progress-spinner>\n</div>",
                encapsulation: ViewEncapsulation.None,
                host: {
                    '[class.o-form-layout-tabgroup]': 'true'
                },
                styles: [".o-form-layout-tabgroup .mat-tab-group .mat-tab-label span.tab-label{width:100%;max-width:120px;text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.o-form-layout-tabgroup .mat-tab-group .mat-tab-label span.tab-label.modified{font-weight:700}.o-form-layout-tabgroup .mat-tab-group .mat-tab-label span.tab-label.modified:after{content:'*'}.o-form-layout-tabgroup .mat-tab-group .mat-tab-label .mat-icon{height:14px;width:14px;font-size:8px;margin-left:6px;vertical-align:middle}.o-form-layout-tabgroup .mat-tab-group .mat-tab-body-wrapper{flex:1 1 auto}.o-form-layout-tabgroup .mat-tab-group o-form-toolbar{padding:0;top:0!important}.o-form-layout-tabgroup .mat-tab-group o-form-toolbar .mat-toolbar{box-shadow:none;border-radius:0}.o-form-layout-tabgroup .spinner-container{position:absolute;top:0;left:0;right:0;bottom:0;z-index:500;visibility:visible;opacity:1;transition:opacity .25s linear}"]
            }] }
];
OFormLayoutTabGroupComponent.ctorParameters = () => [
    { type: Injector },
    { type: ComponentFactoryResolver },
    { type: ViewContainerRef },
    { type: ElementRef },
    { type: OFormLayoutManagerComponent, decorators: [{ type: Inject, args: [forwardRef(() => OFormLayoutManagerComponent),] }] }
];
OFormLayoutTabGroupComponent.propDecorators = {
    tabGroup: [{ type: ViewChild, args: ['tabGroup', { static: false },] }],
    tabsDirectives: [{ type: ViewChildren, args: [OFormLayoutManagerContentDirective,] }]
};
//# sourceMappingURL=data:application/json;base64,