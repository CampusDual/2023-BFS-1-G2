import * as tslib_1 from "tslib";
import { Component, ElementRef, EventEmitter, HostListener, Injector, Optional, SkipSelf, ViewChild } from '@angular/core';
import { MatDialog } from '@angular/material';
import { ActivatedRoute, Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { InputConverter } from '../../decorators/input-converter';
import { ComponentStateServiceProvider, O_COMPONENT_STATE_SERVICE } from '../../services/factories';
import { LocalStorageService } from '../../services/local-storage.service';
import { NavigationService } from '../../services/navigation.service';
import { OFormLayoutManagerService } from '../../services/o-form-layout-manager.service';
import { AbstractComponentStateService } from '../../services/state/o-component-state.service';
import { OFormLayoutManagerComponentStateService } from '../../services/state/o-form-layout-manager-component-state.service';
import { OTranslateService } from '../../services/translate/o-translate.service';
import { Codes } from '../../util/codes';
import { Util } from '../../util/util';
import { OFormLayoutDialogComponent } from './dialog/o-form-layout-dialog.component';
import { CanActivateFormLayoutChildGuard } from './guards/o-form-layout-can-activate-child.guard';
export const DEFAULT_INPUTS_O_FORM_LAYOUT_MANAGER = [
    'oattr: attr',
    'mode',
    'storeState: store-state',
    'title',
    'labelColumns: label-columns',
    'separator',
    'titleDataOrigin: title-data-origin',
    'dialogWidth: dialog-width',
    'dialogMinWidth: dialog-min-width',
    'dialogMaxWidth: dialog-max-width',
    'dialogHeight: dialog-height',
    'dialogMinHeight: dialog-min-height',
    'dialogMaxHeight dialog-max-height',
    'dialogClass: dialog-class'
];
export const DEFAULT_OUTPUTS_O_FORM_LAYOUT_MANAGER = [
    'onMainTabSelected',
    'onSelectedTabChange',
    'onCloseTab'
];
export class OFormLayoutManagerComponent {
    constructor(injector, router, actRoute, dialog, elRef, parentFormLayoutManager) {
        this.injector = injector;
        this.router = router;
        this.actRoute = actRoute;
        this.dialog = dialog;
        this.elRef = elRef;
        this.parentFormLayoutManager = parentFormLayoutManager;
        this.OFormLayoutManagerComponent = OFormLayoutManagerComponent;
        this._mode = OFormLayoutManagerComponent.DIALOG_MODE;
        this._separator = ' ';
        this.storeState = true;
        this.dialogClass = '';
        this.onMainTabSelected = new EventEmitter();
        this.onSelectedTabChange = new EventEmitter();
        this.onCloseTab = new EventEmitter();
        this._labelColsArray = [];
        this._tabGroupOptions = {};
        this._dialogOptions = {};
        this._splitPaneOptions = {};
        this.addingGuard = false;
        this._markForUpdate = false;
        this.onTriggerUpdate = new EventEmitter();
        this.subscription = new Subscription();
        this.oFormLayoutManagerService = this.injector.get(OFormLayoutManagerService);
        this.localStorageService = this.injector.get(LocalStorageService);
        this.translateService = this.injector.get(OTranslateService);
        this.navigationService = this.injector.get(NavigationService);
        this.componentStateService = this.injector.get(AbstractComponentStateService);
        if (this.storeState) {
            this.subscription.add(this.localStorageService.onRouteChange.subscribe(res => {
                this.updateStateStorage();
            }));
        }
    }
    get mode() {
        return this._mode;
    }
    set mode(value) {
        const availableModeValues = [OFormLayoutManagerComponent.DIALOG_MODE, OFormLayoutManagerComponent.TAB_MODE, OFormLayoutManagerComponent.SPLIT_PANE_MODE];
        this._mode = (value || '').toLowerCase();
        if (availableModeValues.indexOf(this._mode) === -1) {
            this._mode = OFormLayoutManagerComponent.DIALOG_MODE;
        }
    }
    set separator(value) {
        this._separator = value;
    }
    get separator() {
        return this._separator;
    }
    get labelColumns() {
        return this._labelColumns;
    }
    set labelColumns(value) {
        this._labelColumns = value;
        this._labelColsArray = Util.parseArray(value);
    }
    get labelColsArray() {
        return this._labelColsArray;
    }
    set labelColsArray(value) {
        this._labelColsArray = value;
    }
    get tabGroupOptions() {
        return this._tabGroupOptions;
    }
    addTabGroupOptions(value) {
        Object.assign(this._tabGroupOptions, value);
        if (value.hasOwnProperty('labelColumns')) {
            this.labelColsArray = Util.parseArray(value['labelColumns']);
        }
        if (value.hasOwnProperty('separator')) {
            this.separator = value['separator'];
        }
    }
    get dialogOptions() {
        return this._dialogOptions;
    }
    addDialogOptions(value) {
        Object.assign(this._dialogOptions, value);
        if (value.hasOwnProperty('labelColumns')) {
            this.labelColsArray = Util.parseArray(value['labelColumns']);
        }
        if (value.hasOwnProperty('separator')) {
            this.separator = value['separator'];
        }
    }
    get splitPaneOptions() {
        return this._splitPaneOptions;
    }
    addSplitPaneOptions(value) {
        Object.assign(this._splitPaneOptions, value);
    }
    get state() {
        return this.componentStateService.state;
    }
    ngOnInit() {
        this.addActivateChildGuard();
        if (!Util.isDefined(this.oattr)) {
            this.oattr = (this.title || '') + this.mode;
            console.warn('o-form-layout-manager must have an unique attr');
        }
        this.oFormLayoutManagerService.registerFormLayoutManager(this);
        if (this.storeState) {
            this.componentStateService.initialize(this);
        }
    }
    ngAfterViewInit() {
        setTimeout(() => {
            if (this.elRef) {
                this.elRef.nativeElement.removeAttribute('title');
            }
        });
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
        this.oFormLayoutManagerService.removeFormLayoutManager(this);
        this.destroyActivateChildGuard();
    }
    getAttribute() {
        return this.oattr;
    }
    getComponentKey() {
        return 'OFormLayoutManagerComponent_' + this.oattr;
    }
    getRouteKey() {
        let route = this.router.url;
        this.actRoute.params.subscribe(params => {
            Object.keys(params).forEach(key => {
                route = route.replace(params[key], key);
            });
        });
        return route;
    }
    getDataToStore() {
        const compRef = this.getLayoutModeComponent();
        return Util.isDefined(compRef) ? compRef.getDataToStore() : {};
    }
    beforeunloadHandler() {
        this.updateStateStorage();
    }
    getLabelFromUrlParams(urlParams) {
        let label = '';
        const keys = Object.keys(urlParams);
        keys.forEach((param, i) => {
            label += urlParams[param] + ((i < keys.length - 1) ? this.separator : '');
        });
        return label;
    }
    getFormDataFromLabelColumns(data) {
        const formData = {};
        Object.keys(data).forEach(x => {
            if (this.labelColsArray.indexOf(x) > -1) {
                formData[x] = data[x];
            }
        });
        return formData;
    }
    addActivateChildGuard() {
        const routeConfig = this.getParentActRouteRoute();
        if (Util.isDefined(routeConfig)) {
            const canActivateChildArray = (routeConfig.canActivateChild || []);
            let previouslyAdded = false;
            for (let i = 0, len = canActivateChildArray.length; i < len; i++) {
                const guardChild = this.injector.get(CanActivateFormLayoutChildGuard);
                previouslyAdded = (canActivateChildArray[i] === guardChild.constructor);
                if (previouslyAdded) {
                    break;
                }
            }
            if (!previouslyAdded) {
                this.addingGuard = true;
                canActivateChildArray.push(CanActivateFormLayoutChildGuard);
                routeConfig.canActivateChild = canActivateChildArray;
            }
        }
    }
    destroyActivateChildGuard() {
        if (!this.addingGuard) {
            return;
        }
        this.oFormLayoutManagerService.activeFormLayoutManager = undefined;
        const routeConfig = this.getParentActRouteRoute();
        if (Util.isDefined(routeConfig)) {
            for (let i = (routeConfig.canActivateChild || []).length - 1; i >= 0; i--) {
                const guardChild = this.injector.get(CanActivateFormLayoutChildGuard);
                if (routeConfig.canActivateChild[i] === guardChild.constructor) {
                    routeConfig.canActivateChild.splice(i, 1);
                    break;
                }
            }
        }
    }
    isDialogMode() {
        return this.mode === OFormLayoutManagerComponent.DIALOG_MODE;
    }
    isTabMode() {
        return this.mode === OFormLayoutManagerComponent.TAB_MODE;
    }
    isSplitPaneMode() {
        return this.mode === OFormLayoutManagerComponent.SPLIT_PANE_MODE;
    }
    addDetailComponent(childRoute, url) {
        const newDetailComp = {
            params: childRoute.params,
            queryParams: childRoute.queryParams,
            urlSegments: childRoute.url,
            component: childRoute.routeConfig.component,
            url: url,
            id: Util.randomNumber().toString(),
            label: '',
            innerFormsInfo: {},
            insertionMode: childRoute.queryParams[Codes.INSERTION_MODE] === 'true'
        };
        if (this.isDialogMode()) {
            this.openFormLayoutDialog(newDetailComp);
        }
        else {
            const compRef = this.getLayoutModeComponent();
            if (Util.isDefined(compRef)) {
                compRef.openDetail(newDetailComp);
            }
        }
    }
    closeDetail(options) {
        const compRef = this.getLayoutModeComponent();
        if (Util.isDefined(compRef)) {
            compRef.closeDetail(options);
        }
    }
    openFormLayoutDialog(detailComp) {
        const cssclass = ['o-form-layout-dialog-overlay'];
        if (this.dialogClass) {
            cssclass.push(this.dialogClass);
        }
        const dialogOptions = (this.dialogOptions || {});
        const dialogConfig = {
            data: {
                data: detailComp,
                layoutManagerComponent: this,
                title: dialogOptions.title || this.title,
            },
            width: dialogOptions.width || this.dialogWidth,
            minWidth: dialogOptions.minWidth || this.dialogMinWidth,
            maxWidth: dialogOptions.maxWidth || this.dialogMaxWidth,
            height: dialogOptions.height || this.dialogHeight,
            minHeight: dialogOptions.minHeight || this.dialogMinHeight,
            maxHeight: dialogOptions.maxHeight || this.dialogMaxHeight,
            disableClose: dialogOptions.disableClose || true,
            panelClass: dialogOptions.class || cssclass
        };
        if (this.dialogOptions) {
            dialogConfig.closeOnNavigation = this.dialogOptions.closeOnNavigation;
            dialogConfig.backdropClass = this.dialogOptions.backdropClass;
            dialogConfig.position = this.dialogOptions.position;
            dialogConfig.disableClose = this.dialogOptions.disableClose;
        }
        this.dialogRef = this.dialog.open(OFormLayoutDialogComponent, dialogConfig);
        this.dialogRef.afterClosed().subscribe(() => {
            if (this.markForUpdate) {
                this.updateIfNeeded();
            }
            else {
                this.reloadMainComponents();
            }
        });
    }
    getFormCacheData() {
        const compRef = this.getLayoutModeComponent();
        return Util.isDefined(compRef) ? compRef.getFormCacheData() : undefined;
    }
    setModifiedState(formAttr, modified, confirmExit) {
        const compRef = this.getLayoutModeComponent();
        if (Util.isDefined(compRef)) {
            compRef.setModifiedState(formAttr, modified, confirmExit);
        }
    }
    getLabelFromData(data) {
        let label = '';
        const isDataDefined = Util.isDefined(data);
        if (isDataDefined && data.hasOwnProperty('new_tab_title')) {
            label = this.translateService.get(data.new_tab_title);
        }
        else if (isDataDefined && this.labelColsArray.length !== 0) {
            this.labelColsArray.forEach((col, idx) => {
                if (data[col] !== undefined) {
                    label += data[col] + ((idx < this.labelColsArray.length - 1) ? this.separator : '');
                }
            });
        }
        return label;
    }
    updateNavigation(data, keysValues, insertionMode) {
        const compRef = this.getLayoutModeComponent();
        if (Util.isDefined(compRef)) {
            compRef.updateNavigation(data, keysValues, insertionMode);
        }
    }
    updateActiveData(data) {
        const compRef = this.getLayoutModeComponent();
        if (Util.isDefined(compRef)) {
            compRef.updateActiveData(data);
        }
    }
    getRouteOfActiveItem() {
        const compRef = this.getLayoutModeComponent();
        return Util.isDefined(compRef) ? compRef.getRouteOfActiveItem() : [];
    }
    isMainComponent(comp) {
        if (this.isDialogMode()) {
            return !comp.oFormLayoutDialog;
        }
        const compRef = this.getLayoutModeComponent();
        return Util.isDefined(compRef) && compRef.isMainComponent(comp);
    }
    getRouteForComponent(comp) {
        const result = [];
        if (this.parentFormLayoutManager) {
            const parentRoute = this.parentFormLayoutManager.getRouteForComponent(comp);
            if (parentRoute && parentRoute.length > 0) {
                result.push(...parentRoute);
            }
        }
        if (!this.isMainComponent(comp)) {
            const activeRoute = this.getRouteOfActiveItem();
            if (activeRoute && activeRoute.length > 0) {
                result.push(...activeRoute);
            }
        }
        return result;
    }
    setAsActiveFormLayoutManager() {
        this.oFormLayoutManagerService.activeFormLayoutManager = this;
    }
    reloadMainComponents() {
        this.onTriggerUpdate.emit();
    }
    allowToUpdateNavigation(formAttr) {
        return (this.isTabMode() && Util.isDefined(this.oTabGroup) && Util.isDefined(this.titleDataOrigin)) ?
            this.titleDataOrigin === formAttr :
            true;
    }
    updateStateStorage() {
        if (!this.localStorageService || !this.storeState) {
            return;
        }
        const isTabMode = this.isTabMode() && Util.isDefined(this.oTabGroup);
        const isSplitPaneMode = this.isSplitPaneMode() && Util.isDefined(this.oSplitPane);
        if (isTabMode || isSplitPaneMode) {
            this.localStorageService.updateComponentStorage(this, this.getRouteKey());
        }
    }
    getParentActRouteRoute() {
        let actRoute = this.actRoute;
        while (actRoute.parent !== undefined && actRoute.parent !== null) {
            if (actRoute.routeConfig.children || actRoute.routeConfig.loadChildren) {
                break;
            }
            actRoute = actRoute.parent;
        }
        return actRoute.routeConfig;
    }
    updateIfNeeded() {
        if (this.markForUpdate) {
            this.markForUpdate = false;
            this.onTriggerUpdate.emit();
        }
    }
    getParams() {
        const compRef = this.getLayoutModeComponent();
        return Util.isDefined(compRef) ? compRef.getParams() : undefined;
    }
    set markForUpdate(arg) {
        this._markForUpdate = arg;
        if (this.isSplitPaneMode()) {
            this.updateIfNeeded();
        }
    }
    get markForUpdate() {
        return this._markForUpdate;
    }
    get ignoreCanDeactivate() {
        return !this.isSplitPaneMode();
    }
    getLayoutModeComponent() {
        let compRef;
        if (this.isTabMode() && Util.isDefined(this.oTabGroup)) {
            compRef = this.oTabGroup;
        }
        else if (this.isDialogMode() && Util.isDefined(this.dialogRef)) {
            compRef = this.dialogRef.componentInstance;
        }
        else if (this.isSplitPaneMode() && Util.isDefined(this.oSplitPane)) {
            compRef = this.oSplitPane;
        }
        return compRef;
    }
    allowNavigation() {
        return !this.isTabMode();
    }
    canAddDetailComponent() {
        const compRef = this.getLayoutModeComponent();
        return Util.wrapIntoObservable(Util.isDefined(compRef) ? compRef.canAddDetailComponent() : true);
    }
    hasToConfirmExit(data, options) {
        if (Util.isDefined(options) && options.exitWithoutConfirmation) {
            return false;
        }
        const formsAttr = Object.keys(data.innerFormsInfo);
        let result = false;
        if (formsAttr.length > 0) {
            formsAttr.forEach(formAttr => {
                if (!result) {
                    const formData = data.innerFormsInfo[formAttr];
                    result = formData.confirmOnExit && formData.modified;
                }
            });
        }
        return result;
    }
}
OFormLayoutManagerComponent.DIALOG_MODE = 'dialog';
OFormLayoutManagerComponent.TAB_MODE = 'tab';
OFormLayoutManagerComponent.SPLIT_PANE_MODE = 'split-pane';
OFormLayoutManagerComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-form-layout-manager',
                inputs: DEFAULT_INPUTS_O_FORM_LAYOUT_MANAGER,
                outputs: DEFAULT_OUTPUTS_O_FORM_LAYOUT_MANAGER,
                template: "<ng-container [ngSwitch]=\"mode\">\n  <ng-container *ngSwitchCase=\"OFormLayoutManagerComponent.TAB_MODE\">\n    <o-form-layout-tabgroup #tabGroup [title]=\"title\" (onMainTabSelected)=\"onMainTabSelected.emit($event)\"\n      (onSelectedTabChange)=\"onSelectedTabChange.emit($event)\" (onCloseTab)=\"onCloseTab.emit($event)\"\n      [options]=\"tabGroupOptions\">\n      <ng-content *ngTemplateOutlet=\"contentBlock\"></ng-content>\n    </o-form-layout-tabgroup>\n  </ng-container>\n\n  <ng-container *ngSwitchCase=\"OFormLayoutManagerComponent.SPLIT_PANE_MODE\">\n    <o-form-layout-split-pane #splitPane [options]=\"splitPaneOptions\">\n      <ng-content *ngTemplateOutlet=\"contentBlock\"></ng-content>\n    </o-form-layout-split-pane>\n  </ng-container>\n\n  <ng-container *ngSwitchCase=\"OFormLayoutManagerComponent.DIALOG_MODE\">\n    <ng-content *ngTemplateOutlet=\"contentBlock\"></ng-content>\n  </ng-container>\n</ng-container>\n\n\n<ng-template #contentBlock>\n  <ng-content></ng-content>\n</ng-template>",
                providers: [
                    ComponentStateServiceProvider,
                    { provide: O_COMPONENT_STATE_SERVICE, useClass: OFormLayoutManagerComponentStateService },
                ],
                host: {
                    '[class.o-form-layout-manager]': 'true'
                },
                styles: [".o-form-layout-manager{height:100%}"]
            }] }
];
OFormLayoutManagerComponent.ctorParameters = () => [
    { type: Injector },
    { type: Router },
    { type: ActivatedRoute },
    { type: MatDialog },
    { type: ElementRef },
    { type: OFormLayoutManagerComponent, decorators: [{ type: SkipSelf }, { type: Optional }] }
];
OFormLayoutManagerComponent.propDecorators = {
    oTabGroup: [{ type: ViewChild, args: ['tabGroup', { static: false },] }],
    oSplitPane: [{ type: ViewChild, args: ['splitPane', { static: false },] }],
    beforeunloadHandler: [{ type: HostListener, args: ['window:beforeunload', [],] }]
};
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OFormLayoutManagerComponent.prototype, "storeState", void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1mb3JtLWxheW91dC1tYW5hZ2VyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL29udGltaXplLXdlYi1uZ3gvIiwic291cmNlcyI6WyJsaWIvbGF5b3V0cy9mb3JtLWxheW91dC9vLWZvcm0tbGF5b3V0LW1hbmFnZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBRUwsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBQ1osWUFBWSxFQUNaLFFBQVEsRUFHUixRQUFRLEVBQ1IsUUFBUSxFQUVSLFNBQVMsRUFDVixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsU0FBUyxFQUFpQyxNQUFNLG1CQUFtQixDQUFDO0FBQzdFLE9BQU8sRUFBRSxjQUFjLEVBQWlDLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3hGLE9BQU8sRUFBYyxZQUFZLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFaEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBSWxFLE9BQU8sRUFBRSw2QkFBNkIsRUFBRSx5QkFBeUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3BHLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQzNFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ3RFLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLDhDQUE4QyxDQUFDO0FBQ3pGLE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLGdEQUFnRCxDQUFDO0FBRS9GLE9BQU8sRUFBRSx1Q0FBdUMsRUFBRSxNQUFNLG9FQUFvRSxDQUFDO0FBQzdILE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDhDQUE4QyxDQUFDO0FBS2pGLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUN6QyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFD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QVEsQ0FBQztBQUN2QixvQ0FBUSxHQUFHLEtBQUssQ0FBQztBQUNqQiwyQ0FBZSxHQUFHLFlBQVksQ0FBQzs7WUFyQjlDLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsdUJBQXVCO2dCQUNqQyxNQUFNLEVBQUUsb0NBQW9DO2dCQUM1QyxPQUFPLEVBQUUscUNBQXFDO2dCQUM5QyxvZ0NBQXFEO2dCQUVyRCxTQUFTLEVBQUU7b0JBQ1QsNkJBQTZCO29CQUM3QixFQUFFLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxRQUFRLEVBQUUsdUNBQXVDLEVBQUU7aUJBQzFGO2dCQUNELElBQUksRUFBRTtvQkFDSiwrQkFBK0IsRUFBRSxNQUFNO2lCQUN4Qzs7YUFDRjs7O1lBOUVDLFFBQVE7WUFTOEMsTUFBTTtZQUFyRCxjQUFjO1lBRGQsU0FBUztZQVhoQixVQUFVO1lBaVB3QiwyQkFBMkIsdUJBRDFELFFBQVEsWUFBSSxRQUFROzs7d0JBakd0QixTQUFTLFNBQUMsVUFBVSxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRTt5QkFHdkMsU0FBUyxTQUFDLFdBQVcsRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUU7a0NBb0t4QyxZQUFZLFNBQUMscUJBQXFCLEVBQUUsRUFBRTs7QUF6THZDO0lBREMsY0FBYyxFQUFFOzsrREFDaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBZnRlclZpZXdJbml0LFxuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIEV2ZW50RW1pdHRlcixcbiAgSG9zdExpc3RlbmVyLFxuICBJbmplY3RvcixcbiAgT25EZXN0cm95LFxuICBPbkluaXQsXG4gIE9wdGlvbmFsLFxuICBTa2lwU2VsZixcbiAgVHlwZSxcbiAgVmlld0NoaWxkXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTWF0RGlhbG9nLCBNYXREaWFsb2dDb25maWcsIE1hdERpYWxvZ1JlZiB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsJztcbmltcG9ydCB7IEFjdGl2YXRlZFJvdXRlLCBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBSb3V0ZSwgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBJbnB1dENvbnZlcnRlciB9IGZyb20gJy4uLy4uL2RlY29yYXRvcnMvaW5wdXQtY29udmVydGVyJztcbmltcG9ydCB7IElMYXlvdXRNYW5hZ2VyQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9sYXlvdXQtbWFuYWdlci1jb21wb25lbnQuaW50ZXJmYWNlJztcbmltcG9ydCB7IElMb2NhbFN0b3JhZ2VDb21wb25lbnQgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL2xvY2FsLXN0b3JhZ2UtY29tcG9uZW50LmludGVyZmFjZSc7XG5pbXBvcnQgeyBPRm9ybUxheW91dE1hbmFnZXJNb2RlIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9vLWZvcm0tbGF5b3V0LW1hbmFnZXItbW9kZS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgQ29tcG9uZW50U3RhdGVTZXJ2aWNlUHJvdmlkZXIsIE9fQ09NUE9ORU5UX1NUQVRFX1NFUlZJQ0UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9mYWN0b3JpZXMnO1xuaW1wb3J0IHsgTG9jYWxTdG9yYWdlU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2xvY2FsLXN0b3JhZ2Uuc2VydmljZSc7XG5pbXBvcnQgeyBOYXZpZ2F0aW9uU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL25hdmlnYXRpb24uc2VydmljZSc7XG5pbXBvcnQgeyBPRm9ybUxheW91dE1hbmFnZXJTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvby1mb3JtLWxheW91dC1tYW5hZ2VyLnNlcnZpY2UnO1xuaW1wb3J0IHsgQWJzdHJhY3RDb21wb25lbnRTdGF0ZVNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9zdGF0ZS9vLWNvbXBvbmVudC1zdGF0ZS5zZXJ2aWNlJztcbmltcG9ydCB7IE9Gb3JtTGF5b3V0TWFuYWdlckNvbXBvbmVudFN0YXRlQ2xhc3MgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9zdGF0ZS9vLWZvcm0tbGF5b3V0LW1hbmFnZXItY29tcG9uZW50LXN0YXRlLmNsYXNzJztcbmltcG9ydCB7IE9Gb3JtTGF5b3V0TWFuYWdlckNvbXBvbmVudFN0YXRlU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3N0YXRlL28tZm9ybS1sYXlvdXQtbWFuYWdlci1jb21wb25lbnQtc3RhdGUuc2VydmljZSc7XG5pbXBvcnQgeyBPVHJhbnNsYXRlU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3RyYW5zbGF0ZS9vLXRyYW5zbGF0ZS5zZXJ2aWNlJztcbmltcG9ydCB7XG4gIEZvcm1MYXlvdXRDbG9zZURldGFpbE9wdGlvbnMsXG4gIEZvcm1MYXlvdXREZXRhaWxDb21wb25lbnREYXRhXG59IGZyb20gJy4uLy4uL3R5cGVzL2Zvcm0tbGF5b3V0LWRldGFpbC1jb21wb25lbnQtZGF0YS50eXBlJztcbmltcG9ydCB7IENvZGVzIH0gZnJvbSAnLi4vLi4vdXRpbC9jb2Rlcyc7XG5pbXBvcnQgeyBVdGlsIH0gZnJvbSAnLi4vLi4vdXRpbC91dGlsJztcbmltcG9ydCB7IE9Gb3JtTGF5b3V0RGlhbG9nQ29tcG9uZW50IH0gZnJvbSAnLi9kaWFsb2cvby1mb3JtLWxheW91dC1kaWFsb2cuY29tcG9uZW50JztcbmltcG9ydCB7IENhbkFjdGl2YXRlRm9ybUxheW91dENoaWxkR3VhcmQgfSBmcm9tICcuL2d1YXJkcy9vLWZvcm0tbGF5b3V0LWNhbi1hY3RpdmF0ZS1jaGlsZC5ndWFyZCc7XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX0lOUFVUU19PX0ZPUk1fTEFZT1VUX01BTkFHRVIgPSBbXG4gICdvYXR0cjogYXR0cicsXG4gICdtb2RlJyxcbiAgJ3N0b3JlU3RhdGU6IHN0b3JlLXN0YXRlJyxcblxuICAvLyBDb21tb24gZm9yIGRpYWxvZyBhbmQgdGFiIG1vZGVcbiAgLy8gZGVwcmVjYXRlZCwgb25seSBtYW50YWluZWQgZm9yIGxlZ2FjeSByZWFzb25zXG4gICd0aXRsZScsXG4gICdsYWJlbENvbHVtbnM6IGxhYmVsLWNvbHVtbnMnLFxuICAnc2VwYXJhdG9yJyxcblxuICAvLyBhdHRyIG9mIHRoZSBjaGlsZCBmb3JtIGZyb20gd2hpY2ggdGhlIGRhdGEgZm9yIGJ1aWxkaW5nIHRoZSB0YWIgdGl0bGUgd2lsbCBiZSBvYnRhaW5lZCAob25seSBpbiB0YWIgbW9kZSlcbiAgLy8gZGVwcmVjYXRlZCwgb25seSBtYW50YWluZWQgZm9yIGxlZ2FjeSByZWFzb25zXG4gICd0aXRsZURhdGFPcmlnaW46IHRpdGxlLWRhdGEtb3JpZ2luJyxcblxuICAvLyBPbmx5IGRpYWxvZyBvcHRpb25zIGNvbmZpZ3VyYWJsZSBhcyBhbiBpbnB1dCBvZiB0aGUgby1mb3JtLWxheW91dC1tYW5hZ2VyICh1c2UgdGhlIG8tZm9ybS1sYXlvdXQtZGlhbG9nLW9wdGlvbnMgZGlyZWN0aXZlKVxuICAvLyBkZXByZWNhdGVkLCBvbmx5IG1hbnRhaW5lZCBmb3IgbGVnYWN5IHJlYXNvbnNcbiAgJ2RpYWxvZ1dpZHRoOiBkaWFsb2ctd2lkdGgnLFxuICAnZGlhbG9nTWluV2lkdGg6IGRpYWxvZy1taW4td2lkdGgnLFxuICAnZGlhbG9nTWF4V2lkdGg6IGRpYWxvZy1tYXgtd2lkdGgnLFxuICAnZGlhbG9nSGVpZ2h0OiBkaWFsb2ctaGVpZ2h0JyxcbiAgJ2RpYWxvZ01pbkhlaWdodDogZGlhbG9nLW1pbi1oZWlnaHQnLFxuICAnZGlhbG9nTWF4SGVpZ2h0IGRpYWxvZy1tYXgtaGVpZ2h0JyxcbiAgJ2RpYWxvZ0NsYXNzOiBkaWFsb2ctY2xhc3MnXG5dO1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9PVVRQVVRTX09fRk9STV9MQVlPVVRfTUFOQUdFUiA9IFtcbiAgJ29uTWFpblRhYlNlbGVjdGVkJyxcbiAgJ29uU2VsZWN0ZWRUYWJDaGFuZ2UnLFxuICAnb25DbG9zZVRhYidcbl07XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ28tZm9ybS1sYXlvdXQtbWFuYWdlcicsXG4gIGlucHV0czogREVGQVVMVF9JTlBVVFNfT19GT1JNX0xBWU9VVF9NQU5BR0VSLFxuICBvdXRwdXRzOiBERUZBVUxUX09VVFBVVFNfT19GT1JNX0xBWU9VVF9NQU5BR0VSLFxuICB0ZW1wbGF0ZVVybDogJy4vby1mb3JtLWxheW91dC1tYW5hZ2VyLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vby1mb3JtLWxheW91dC1tYW5hZ2VyLmNvbXBvbmVudC5zY3NzJ10sXG4gIHByb3ZpZGVyczogW1xuICAgIENvbXBvbmVudFN0YXRlU2VydmljZVByb3ZpZGVyLFxuICAgIHsgcHJvdmlkZTogT19DT01QT05FTlRfU1RBVEVfU0VSVklDRSwgdXNlQ2xhc3M6IE9Gb3JtTGF5b3V0TWFuYWdlckNvbXBvbmVudFN0YXRlU2VydmljZSB9LFxuICBdLFxuICBob3N0OiB7XG4gICAgJ1tjbGFzcy5vLWZvcm0tbGF5b3V0LW1hbmFnZXJdJzogJ3RydWUnXG4gIH1cbn0pIGV4cG9ydCBjbGFzcyBPRm9ybUxheW91dE1hbmFnZXJDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkluaXQsIE9uRGVzdHJveSwgSUxvY2FsU3RvcmFnZUNvbXBvbmVudCB7XG5cbiAgLy8gZGVjbGFyaW5nIHRoaXMgcHJvcGVydHkgdG8gaGF2ZSBhY2NlcyB0byBzdGF0aWMgbWVtYmVycyBpbiB0aGUgdGVtcGxhdGVcbiAgT0Zvcm1MYXlvdXRNYW5hZ2VyQ29tcG9uZW50ID0gT0Zvcm1MYXlvdXRNYW5hZ2VyQ29tcG9uZW50O1xuXG5cbiAgcHVibGljIHN0YXRpYyBESUFMT0dfTU9ERSA9ICdkaWFsb2cnO1xuICBwdWJsaWMgc3RhdGljIFRBQl9NT0RFID0gJ3RhYic7XG4gIHB1YmxpYyBzdGF0aWMgU1BMSVRfUEFORV9NT0RFID0gJ3NwbGl0LXBhbmUnO1xuXG4gIHB1YmxpYyBvYXR0cjogc3RyaW5nO1xuICBwdWJsaWMgX21vZGU6IHN0cmluZyA9IE9Gb3JtTGF5b3V0TWFuYWdlckNvbXBvbmVudC5ESUFMT0dfTU9ERTtcblxuICBwdWJsaWMgZ2V0IG1vZGUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fbW9kZTtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgbW9kZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgY29uc3QgYXZhaWxhYmxlTW9kZVZhbHVlcyA9IFtPRm9ybUxheW91dE1hbmFnZXJDb21wb25lbnQuRElBTE9HX01PREUsIE9Gb3JtTGF5b3V0TWFuYWdlckNvbXBvbmVudC5UQUJfTU9ERSwgT0Zvcm1MYXlvdXRNYW5hZ2VyQ29tcG9uZW50LlNQTElUX1BBTkVfTU9ERV07XG4gICAgdGhpcy5fbW9kZSA9ICh2YWx1ZSB8fCAnJykudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAoYXZhaWxhYmxlTW9kZVZhbHVlcy5pbmRleE9mKHRoaXMuX21vZGUpID09PSAtMSkge1xuICAgICAgdGhpcy5fbW9kZSA9IE9Gb3JtTGF5b3V0TWFuYWdlckNvbXBvbmVudC5ESUFMT0dfTU9ERTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgX3NlcGFyYXRvcjogc3RyaW5nID0gJyAnO1xuXG4gIC8qKlxuICAqIEBkZXByZWNhdGVkIHVzZXIgc2hvdWxkIHVzZSB0aGUgb3B0aW9ucyBpbnB1dFxuICAqL1xuICBzZXQgc2VwYXJhdG9yKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9zZXBhcmF0b3IgPSB2YWx1ZTtcbiAgfVxuXG4gIGdldCBzZXBhcmF0b3IoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fc2VwYXJhdG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIHVzZXIgc2hvdWxkIHVzZSB0aGUgb3B0aW9ucyBpbnB1dFxuICAgKi9cbiAgcHVibGljIHRpdGxlOiBzdHJpbmc7XG5cbiAgQElucHV0Q29udmVydGVyKClcbiAgcHVibGljIHN0b3JlU3RhdGU6IGJvb2xlYW4gPSB0cnVlO1xuXG4gIC8qKlxuICAqIEBkZXByZWNhdGVkIHVzZXIgc2hvdWxkIHVzZSB0aGUgb3B0aW9ucyBpbnB1dFxuICAqL1xuICBwdWJsaWMgdGl0bGVEYXRhT3JpZ2luOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIFRoZSBuZXh0IGlucHV0cyBhcmUgZGVwcmVjYXRlZCBhbmQgdXNlciBzaG91bGQgdXNlIHRoZSBPRm9ybUxheW91dERpYWxvZ09wdGlvbnNEaXJlY3RpdmUgaW5wdXRzXG4gICAqL1xuICBwdWJsaWMgZGlhbG9nV2lkdGg6IHN0cmluZztcbiAgcHVibGljIGRpYWxvZ01pbldpZHRoOiBzdHJpbmc7XG4gIHB1YmxpYyBkaWFsb2dNYXhXaWR0aDogc3RyaW5nO1xuICBwdWJsaWMgZGlhbG9nSGVpZ2h0OiBzdHJpbmc7XG4gIHB1YmxpYyBkaWFsb2dNaW5IZWlnaHQ6IHN0cmluZztcbiAgcHVibGljIGRpYWxvZ01heEhlaWdodDogc3RyaW5nO1xuICBwdWJsaWMgZGlhbG9nQ2xhc3M6IHN0cmluZyA9ICcnO1xuXG4gIEBWaWV3Q2hpbGQoJ3RhYkdyb3VwJywgeyBzdGF0aWM6IGZhbHNlIH0pXG4gIHB1YmxpYyBvVGFiR3JvdXA6IE9Gb3JtTGF5b3V0TWFuYWdlck1vZGU7XG4gIHB1YmxpYyBkaWFsb2dSZWY6IE1hdERpYWxvZ1JlZjxPRm9ybUxheW91dERpYWxvZ0NvbXBvbmVudD47XG4gIEBWaWV3Q2hpbGQoJ3NwbGl0UGFuZScsIHsgc3RhdGljOiBmYWxzZSB9KVxuICBwdWJsaWMgb1NwbGl0UGFuZTogT0Zvcm1MYXlvdXRNYW5hZ2VyTW9kZTtcblxuICBwdWJsaWMgb25NYWluVGFiU2VsZWN0ZWQ6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG4gIHB1YmxpYyBvblNlbGVjdGVkVGFiQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICBwdWJsaWMgb25DbG9zZVRhYjogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICBwcm90ZWN0ZWQgX2xhYmVsQ29sdW1uczogc3RyaW5nO1xuXG4gIGdldCBsYWJlbENvbHVtbnMoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fbGFiZWxDb2x1bW5zO1xuICB9XG5cbiAgLyoqXG4gICogQGRlcHJlY2F0ZWQgdXNlciBzaG91bGQgdXNlIHRoZSBvcHRpb25zIGlucHV0XG4gICovXG4gIHNldCBsYWJlbENvbHVtbnModmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX2xhYmVsQ29sdW1ucyA9IHZhbHVlO1xuICAgIHRoaXMuX2xhYmVsQ29sc0FycmF5ID0gVXRpbC5wYXJzZUFycmF5KHZhbHVlKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBfbGFiZWxDb2xzQXJyYXk6IHN0cmluZ1tdID0gW107XG5cbiAgZ2V0IGxhYmVsQ29sc0FycmF5KCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gdGhpcy5fbGFiZWxDb2xzQXJyYXk7XG4gIH1cblxuICBzZXQgbGFiZWxDb2xzQXJyYXkodmFsdWU6IHN0cmluZ1tdKSB7XG4gICAgdGhpcy5fbGFiZWxDb2xzQXJyYXkgPSB2YWx1ZTtcbiAgfVxuXG4gIHByb3RlY3RlZCB0cmFuc2xhdGVTZXJ2aWNlOiBPVHJhbnNsYXRlU2VydmljZTtcbiAgcHJvdGVjdGVkIG9Gb3JtTGF5b3V0TWFuYWdlclNlcnZpY2U6IE9Gb3JtTGF5b3V0TWFuYWdlclNlcnZpY2U7XG4gIHByb3RlY3RlZCBsb2NhbFN0b3JhZ2VTZXJ2aWNlOiBMb2NhbFN0b3JhZ2VTZXJ2aWNlO1xuXG4gIHByb3RlY3RlZCBfdGFiR3JvdXBPcHRpb25zOiBhbnkgPSB7fTtcblxuICBnZXQgdGFiR3JvdXBPcHRpb25zKCk6IGFueSB7XG4gICAgcmV0dXJuIHRoaXMuX3RhYkdyb3VwT3B0aW9ucztcbiAgfVxuXG4gIGFkZFRhYkdyb3VwT3B0aW9ucyh2YWx1ZTogYW55KSB7XG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLl90YWJHcm91cE9wdGlvbnMsIHZhbHVlKTtcbiAgICBpZiAodmFsdWUuaGFzT3duUHJvcGVydHkoJ2xhYmVsQ29sdW1ucycpKSB7XG4gICAgICB0aGlzLmxhYmVsQ29sc0FycmF5ID0gVXRpbC5wYXJzZUFycmF5KHZhbHVlWydsYWJlbENvbHVtbnMnXSk7XG4gICAgfVxuICAgIGlmICh2YWx1ZS5oYXNPd25Qcm9wZXJ0eSgnc2VwYXJhdG9yJykpIHtcbiAgICAgIHRoaXMuc2VwYXJhdG9yID0gdmFsdWVbJ3NlcGFyYXRvciddO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBfZGlhbG9nT3B0aW9uczogYW55ID0ge307XG5cbiAgZ2V0IGRpYWxvZ09wdGlvbnMoKTogYW55IHtcbiAgICByZXR1cm4gdGhpcy5fZGlhbG9nT3B0aW9ucztcbiAgfVxuXG4gIGFkZERpYWxvZ09wdGlvbnModmFsdWU6IGFueSkge1xuICAgIE9iamVjdC5hc3NpZ24odGhpcy5fZGlhbG9nT3B0aW9ucywgdmFsdWUpO1xuICAgIGlmICh2YWx1ZS5oYXNPd25Qcm9wZXJ0eSgnbGFiZWxDb2x1bW5zJykpIHtcbiAgICAgIHRoaXMubGFiZWxDb2xzQXJyYXkgPSBVdGlsLnBhcnNlQXJyYXkodmFsdWVbJ2xhYmVsQ29sdW1ucyddKTtcbiAgICB9XG4gICAgaWYgKHZhbHVlLmhhc093blByb3BlcnR5KCdzZXBhcmF0b3InKSkge1xuICAgICAgdGhpcy5zZXBhcmF0b3IgPSB2YWx1ZVsnc2VwYXJhdG9yJ107XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIF9zcGxpdFBhbmVPcHRpb25zOiBhbnkgPSB7fTtcblxuICBnZXQgc3BsaXRQYW5lT3B0aW9ucygpOiBhbnkge1xuICAgIHJldHVybiB0aGlzLl9zcGxpdFBhbmVPcHRpb25zO1xuICB9XG5cbiAgYWRkU3BsaXRQYW5lT3B0aW9ucyh2YWx1ZTogYW55KSB7XG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLl9zcGxpdFBhbmVPcHRpb25zLCB2YWx1ZSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgYWRkaW5nR3VhcmQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBwdWJsaWMgbmF2aWdhdGlvblNlcnZpY2U6IE5hdmlnYXRpb25TZXJ2aWNlO1xuXG4gIHB1YmxpYyBfbWFya0ZvclVwZGF0ZTogYm9vbGVhbiA9IGZhbHNlO1xuICBwdWJsaWMgb25UcmlnZ2VyVXBkYXRlOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIHByb3RlY3RlZCBzdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24oKTtcblxuICBwcm90ZWN0ZWQgY29tcG9uZW50U3RhdGVTZXJ2aWNlOiBPRm9ybUxheW91dE1hbmFnZXJDb21wb25lbnRTdGF0ZVNlcnZpY2U7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIGluamVjdG9yOiBJbmplY3RvcixcbiAgICBwcm90ZWN0ZWQgcm91dGVyOiBSb3V0ZXIsXG4gICAgcHJvdGVjdGVkIGFjdFJvdXRlOiBBY3RpdmF0ZWRSb3V0ZSxcbiAgICBwcm90ZWN0ZWQgZGlhbG9nOiBNYXREaWFsb2csXG4gICAgcHJvdGVjdGVkIGVsUmVmOiBFbGVtZW50UmVmLFxuICAgIEBTa2lwU2VsZigpIEBPcHRpb25hbCgpXG4gICAgcHVibGljIHBhcmVudEZvcm1MYXlvdXRNYW5hZ2VyOiBPRm9ybUxheW91dE1hbmFnZXJDb21wb25lbnRcbiAgKSB7XG4gICAgdGhpcy5vRm9ybUxheW91dE1hbmFnZXJTZXJ2aWNlID0gdGhpcy5pbmplY3Rvci5nZXQoT0Zvcm1MYXlvdXRNYW5hZ2VyU2VydmljZSk7XG4gICAgdGhpcy5sb2NhbFN0b3JhZ2VTZXJ2aWNlID0gdGhpcy5pbmplY3Rvci5nZXQoTG9jYWxTdG9yYWdlU2VydmljZSk7XG4gICAgdGhpcy50cmFuc2xhdGVTZXJ2aWNlID0gdGhpcy5pbmplY3Rvci5nZXQoT1RyYW5zbGF0ZVNlcnZpY2UpO1xuICAgIHRoaXMubmF2aWdhdGlvblNlcnZpY2UgPSB0aGlzLmluamVjdG9yLmdldChOYXZpZ2F0aW9uU2VydmljZSk7XG4gICAgdGhpcy5jb21wb25lbnRTdGF0ZVNlcnZpY2UgPSB0aGlzLmluamVjdG9yLmdldDxPRm9ybUxheW91dE1hbmFnZXJDb21wb25lbnRTdGF0ZVNlcnZpY2U+KEFic3RyYWN0Q29tcG9uZW50U3RhdGVTZXJ2aWNlIGFzIFR5cGU8T0Zvcm1MYXlvdXRNYW5hZ2VyQ29tcG9uZW50U3RhdGVTZXJ2aWNlPik7XG4gICAgaWYgKHRoaXMuc3RvcmVTdGF0ZSkge1xuICAgICAgdGhpcy5zdWJzY3JpcHRpb24uYWRkKHRoaXMubG9jYWxTdG9yYWdlU2VydmljZS5vblJvdXRlQ2hhbmdlLnN1YnNjcmliZShyZXMgPT4ge1xuICAgICAgICB0aGlzLnVwZGF0ZVN0YXRlU3RvcmFnZSgpO1xuICAgICAgfSkpO1xuICAgIH1cbiAgfVxuXG4gIGdldCBzdGF0ZSgpOiBPRm9ybUxheW91dE1hbmFnZXJDb21wb25lbnRTdGF0ZUNsYXNzIHtcbiAgICByZXR1cm4gdGhpcy5jb21wb25lbnRTdGF0ZVNlcnZpY2Uuc3RhdGU7XG4gIH1cblxuICBwdWJsaWMgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5hZGRBY3RpdmF0ZUNoaWxkR3VhcmQoKTtcbiAgICBpZiAoIVV0aWwuaXNEZWZpbmVkKHRoaXMub2F0dHIpKSB7XG4gICAgICB0aGlzLm9hdHRyID0gKHRoaXMudGl0bGUgfHwgJycpICsgdGhpcy5tb2RlO1xuICAgICAgY29uc29sZS53YXJuKCdvLWZvcm0tbGF5b3V0LW1hbmFnZXIgbXVzdCBoYXZlIGFuIHVuaXF1ZSBhdHRyJyk7XG4gICAgfVxuICAgIHRoaXMub0Zvcm1MYXlvdXRNYW5hZ2VyU2VydmljZS5yZWdpc3RlckZvcm1MYXlvdXRNYW5hZ2VyKHRoaXMpO1xuICAgIGlmICh0aGlzLnN0b3JlU3RhdGUpIHtcbiAgICAgIHRoaXMuY29tcG9uZW50U3RhdGVTZXJ2aWNlLmluaXRpYWxpemUodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGlmICh0aGlzLmVsUmVmKSB7XG4gICAgICAgIHRoaXMuZWxSZWYubmF0aXZlRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ3RpdGxlJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuc3Vic2NyaXB0aW9uKSB7XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgICB0aGlzLm9Gb3JtTGF5b3V0TWFuYWdlclNlcnZpY2UucmVtb3ZlRm9ybUxheW91dE1hbmFnZXIodGhpcyk7XG4gICAgdGhpcy5kZXN0cm95QWN0aXZhdGVDaGlsZEd1YXJkKCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0QXR0cmlidXRlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMub2F0dHI7XG4gIH1cblxuICBwdWJsaWMgZ2V0Q29tcG9uZW50S2V5KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuICdPRm9ybUxheW91dE1hbmFnZXJDb21wb25lbnRfJyArIHRoaXMub2F0dHI7XG4gIH1cblxuICBwdWJsaWMgZ2V0Um91dGVLZXkoKTogc3RyaW5nIHtcbiAgICBsZXQgcm91dGUgPSB0aGlzLnJvdXRlci51cmw7XG4gICAgdGhpcy5hY3RSb3V0ZS5wYXJhbXMuc3Vic2NyaWJlKHBhcmFtcyA9PiB7XG4gICAgICBPYmplY3Qua2V5cyhwYXJhbXMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgcm91dGUgPSByb3V0ZS5yZXBsYWNlKHBhcmFtc1trZXldLCBrZXkpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJvdXRlO1xuICB9XG5cbiAgcHVibGljIGdldERhdGFUb1N0b3JlKCk6IGFueSB7XG4gICAgY29uc3QgY29tcFJlZiA9IHRoaXMuZ2V0TGF5b3V0TW9kZUNvbXBvbmVudCgpO1xuICAgIHJldHVybiBVdGlsLmlzRGVmaW5lZChjb21wUmVmKSA/IGNvbXBSZWYuZ2V0RGF0YVRvU3RvcmUoKSA6IHt9O1xuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignd2luZG93OmJlZm9yZXVubG9hZCcsIFtdKVxuICBwdWJsaWMgYmVmb3JldW5sb2FkSGFuZGxlcigpOiB2b2lkIHtcbiAgICB0aGlzLnVwZGF0ZVN0YXRlU3RvcmFnZSgpO1xuICB9XG5cbiAgcHVibGljIGdldExhYmVsRnJvbVVybFBhcmFtcyh1cmxQYXJhbXM6IG9iamVjdCk6IHN0cmluZyB7XG4gICAgbGV0IGxhYmVsID0gJyc7XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHVybFBhcmFtcyk7XG4gICAga2V5cy5mb3JFYWNoKChwYXJhbSwgaSkgPT4ge1xuICAgICAgbGFiZWwgKz0gdXJsUGFyYW1zW3BhcmFtXSArICgoaSA8IGtleXMubGVuZ3RoIC0gMSkgPyB0aGlzLnNlcGFyYXRvciA6ICcnKTtcbiAgICB9KTtcbiAgICByZXR1cm4gbGFiZWw7XG4gIH1cblxuICBwdWJsaWMgZ2V0Rm9ybURhdGFGcm9tTGFiZWxDb2x1bW5zKGRhdGE6IGFueSkge1xuICAgIGNvbnN0IGZvcm1EYXRhID0ge307XG4gICAgT2JqZWN0LmtleXMoZGF0YSkuZm9yRWFjaCh4ID0+IHtcbiAgICAgIGlmICh0aGlzLmxhYmVsQ29sc0FycmF5LmluZGV4T2YoeCkgPiAtMSkge1xuICAgICAgICBmb3JtRGF0YVt4XSA9IGRhdGFbeF07XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGZvcm1EYXRhO1xuICB9XG5cbiAgcHVibGljIGFkZEFjdGl2YXRlQ2hpbGRHdWFyZCgpOiB2b2lkIHtcbiAgICBjb25zdCByb3V0ZUNvbmZpZyA9IHRoaXMuZ2V0UGFyZW50QWN0Um91dGVSb3V0ZSgpO1xuICAgIGlmIChVdGlsLmlzRGVmaW5lZChyb3V0ZUNvbmZpZykpIHtcbiAgICAgIGNvbnN0IGNhbkFjdGl2YXRlQ2hpbGRBcnJheSA9IChyb3V0ZUNvbmZpZy5jYW5BY3RpdmF0ZUNoaWxkIHx8IFtdKTtcbiAgICAgIGxldCBwcmV2aW91c2x5QWRkZWQgPSBmYWxzZTtcbiAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBjYW5BY3RpdmF0ZUNoaWxkQXJyYXkubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgY29uc3QgZ3VhcmRDaGlsZCA9IHRoaXMuaW5qZWN0b3IuZ2V0KENhbkFjdGl2YXRlRm9ybUxheW91dENoaWxkR3VhcmQpO1xuICAgICAgICBwcmV2aW91c2x5QWRkZWQgPSAoY2FuQWN0aXZhdGVDaGlsZEFycmF5W2ldID09PSBndWFyZENoaWxkLmNvbnN0cnVjdG9yKTtcbiAgICAgICAgaWYgKHByZXZpb3VzbHlBZGRlZCkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIXByZXZpb3VzbHlBZGRlZCkge1xuICAgICAgICB0aGlzLmFkZGluZ0d1YXJkID0gdHJ1ZTtcbiAgICAgICAgY2FuQWN0aXZhdGVDaGlsZEFycmF5LnB1c2goQ2FuQWN0aXZhdGVGb3JtTGF5b3V0Q2hpbGRHdWFyZCk7XG4gICAgICAgIHJvdXRlQ29uZmlnLmNhbkFjdGl2YXRlQ2hpbGQgPSBjYW5BY3RpdmF0ZUNoaWxkQXJyYXk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGRlc3Ryb3lBY3RpdmF0ZUNoaWxkR3VhcmQoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmFkZGluZ0d1YXJkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMub0Zvcm1MYXlvdXRNYW5hZ2VyU2VydmljZS5hY3RpdmVGb3JtTGF5b3V0TWFuYWdlciA9IHVuZGVmaW5lZDtcbiAgICBjb25zdCByb3V0ZUNvbmZpZyA9IHRoaXMuZ2V0UGFyZW50QWN0Um91dGVSb3V0ZSgpO1xuICAgIGlmIChVdGlsLmlzRGVmaW5lZChyb3V0ZUNvbmZpZykpIHtcbiAgICAgIGZvciAobGV0IGkgPSAocm91dGVDb25maWcuY2FuQWN0aXZhdGVDaGlsZCB8fCBbXSkubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgY29uc3QgZ3VhcmRDaGlsZCA9IHRoaXMuaW5qZWN0b3IuZ2V0KENhbkFjdGl2YXRlRm9ybUxheW91dENoaWxkR3VhcmQpO1xuICAgICAgICBpZiAocm91dGVDb25maWcuY2FuQWN0aXZhdGVDaGlsZFtpXSA9PT0gZ3VhcmRDaGlsZC5jb25zdHJ1Y3Rvcikge1xuICAgICAgICAgIHJvdXRlQ29uZmlnLmNhbkFjdGl2YXRlQ2hpbGQuc3BsaWNlKGksIDEpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGlzRGlhbG9nTW9kZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5tb2RlID09PSBPRm9ybUxheW91dE1hbmFnZXJDb21wb25lbnQuRElBTE9HX01PREU7XG4gIH1cblxuICBwdWJsaWMgaXNUYWJNb2RlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLm1vZGUgPT09IE9Gb3JtTGF5b3V0TWFuYWdlckNvbXBvbmVudC5UQUJfTU9ERTtcbiAgfVxuXG4gIHB1YmxpYyBpc1NwbGl0UGFuZU1vZGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMubW9kZSA9PT0gT0Zvcm1MYXlvdXRNYW5hZ2VyQ29tcG9uZW50LlNQTElUX1BBTkVfTU9ERTtcbiAgfVxuXG4gIHB1YmxpYyBhZGREZXRhaWxDb21wb25lbnQoY2hpbGRSb3V0ZTogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgdXJsOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBjb25zdCBuZXdEZXRhaWxDb21wOiBGb3JtTGF5b3V0RGV0YWlsQ29tcG9uZW50RGF0YSA9IHtcbiAgICAgIHBhcmFtczogY2hpbGRSb3V0ZS5wYXJhbXMsXG4gICAgICBxdWVyeVBhcmFtczogY2hpbGRSb3V0ZS5xdWVyeVBhcmFtcyxcbiAgICAgIHVybFNlZ21lbnRzOiBjaGlsZFJvdXRlLnVybCxcbiAgICAgIGNvbXBvbmVudDogY2hpbGRSb3V0ZS5yb3V0ZUNvbmZpZy5jb21wb25lbnQsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIGlkOiBVdGlsLnJhbmRvbU51bWJlcigpLnRvU3RyaW5nKCksXG4gICAgICBsYWJlbDogJycsXG4gICAgICBpbm5lckZvcm1zSW5mbzoge30sXG4gICAgICBpbnNlcnRpb25Nb2RlOiBjaGlsZFJvdXRlLnF1ZXJ5UGFyYW1zW0NvZGVzLklOU0VSVElPTl9NT0RFXSA9PT0gJ3RydWUnXG4gICAgfTtcbiAgICBpZiAodGhpcy5pc0RpYWxvZ01vZGUoKSkge1xuICAgICAgdGhpcy5vcGVuRm9ybUxheW91dERpYWxvZyhuZXdEZXRhaWxDb21wKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgY29tcFJlZiA9IHRoaXMuZ2V0TGF5b3V0TW9kZUNvbXBvbmVudCgpO1xuICAgICAgaWYgKFV0aWwuaXNEZWZpbmVkKGNvbXBSZWYpKSB7XG4gICAgICAgIGNvbXBSZWYub3BlbkRldGFpbChuZXdEZXRhaWxDb21wKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwdWJsaWMgY2xvc2VEZXRhaWwob3B0aW9ucz86IEZvcm1MYXlvdXRDbG9zZURldGFpbE9wdGlvbnMpOiB2b2lkIHtcbiAgICBjb25zdCBjb21wUmVmID0gdGhpcy5nZXRMYXlvdXRNb2RlQ29tcG9uZW50KCk7XG4gICAgaWYgKFV0aWwuaXNEZWZpbmVkKGNvbXBSZWYpKSB7XG4gICAgICBjb21wUmVmLmNsb3NlRGV0YWlsKG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBvcGVuRm9ybUxheW91dERpYWxvZyhkZXRhaWxDb21wOiBGb3JtTGF5b3V0RGV0YWlsQ29tcG9uZW50RGF0YSk6IHZvaWQge1xuICAgIGNvbnN0IGNzc2NsYXNzID0gWydvLWZvcm0tbGF5b3V0LWRpYWxvZy1vdmVybGF5J107XG4gICAgaWYgKHRoaXMuZGlhbG9nQ2xhc3MpIHtcbiAgICAgIGNzc2NsYXNzLnB1c2godGhpcy5kaWFsb2dDbGFzcyk7XG4gICAgfVxuXG4gICAgY29uc3QgZGlhbG9nT3B0aW9ucyA9ICh0aGlzLmRpYWxvZ09wdGlvbnMgfHwge30pO1xuXG4gICAgY29uc3QgZGlhbG9nQ29uZmlnOiBNYXREaWFsb2dDb25maWcgPSB7XG4gICAgICBkYXRhOiB7XG4gICAgICAgIGRhdGE6IGRldGFpbENvbXAsXG4gICAgICAgIGxheW91dE1hbmFnZXJDb21wb25lbnQ6IHRoaXMsXG4gICAgICAgIHRpdGxlOiBkaWFsb2dPcHRpb25zLnRpdGxlIHx8IHRoaXMudGl0bGUsXG4gICAgICB9LFxuICAgICAgd2lkdGg6IGRpYWxvZ09wdGlvbnMud2lkdGggfHwgdGhpcy5kaWFsb2dXaWR0aCxcbiAgICAgIG1pbldpZHRoOiBkaWFsb2dPcHRpb25zLm1pbldpZHRoIHx8IHRoaXMuZGlhbG9nTWluV2lkdGgsXG4gICAgICBtYXhXaWR0aDogZGlhbG9nT3B0aW9ucy5tYXhXaWR0aCB8fCB0aGlzLmRpYWxvZ01heFdpZHRoLFxuICAgICAgaGVpZ2h0OiBkaWFsb2dPcHRpb25zLmhlaWdodCB8fCB0aGlzLmRpYWxvZ0hlaWdodCxcbiAgICAgIG1pbkhlaWdodDogZGlhbG9nT3B0aW9ucy5taW5IZWlnaHQgfHwgdGhpcy5kaWFsb2dNaW5IZWlnaHQsXG4gICAgICBtYXhIZWlnaHQ6IGRpYWxvZ09wdGlvbnMubWF4SGVpZ2h0IHx8IHRoaXMuZGlhbG9nTWF4SGVpZ2h0LFxuICAgICAgZGlzYWJsZUNsb3NlOiBkaWFsb2dPcHRpb25zLmRpc2FibGVDbG9zZSB8fCB0cnVlLFxuICAgICAgcGFuZWxDbGFzczogZGlhbG9nT3B0aW9ucy5jbGFzcyB8fCBjc3NjbGFzc1xuICAgIH07XG5cbiAgICBpZiAodGhpcy5kaWFsb2dPcHRpb25zKSB7XG4gICAgICBkaWFsb2dDb25maWcuY2xvc2VPbk5hdmlnYXRpb24gPSB0aGlzLmRpYWxvZ09wdGlvbnMuY2xvc2VPbk5hdmlnYXRpb247XG4gICAgICBkaWFsb2dDb25maWcuYmFja2Ryb3BDbGFzcyA9IHRoaXMuZGlhbG9nT3B0aW9ucy5iYWNrZHJvcENsYXNzO1xuICAgICAgZGlhbG9nQ29uZmlnLnBvc2l0aW9uID0gdGhpcy5kaWFsb2dPcHRpb25zLnBvc2l0aW9uO1xuICAgICAgZGlhbG9nQ29uZmlnLmRpc2FibGVDbG9zZSA9IHRoaXMuZGlhbG9nT3B0aW9ucy5kaXNhYmxlQ2xvc2U7XG4gICAgfVxuXG4gICAgdGhpcy5kaWFsb2dSZWYgPSB0aGlzLmRpYWxvZy5vcGVuKE9Gb3JtTGF5b3V0RGlhbG9nQ29tcG9uZW50LCBkaWFsb2dDb25maWcpO1xuICAgIHRoaXMuZGlhbG9nUmVmLmFmdGVyQ2xvc2VkKCkuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIGlmICh0aGlzLm1hcmtGb3JVcGRhdGUpIHtcbiAgICAgICAgdGhpcy51cGRhdGVJZk5lZWRlZCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5yZWxvYWRNYWluQ29tcG9uZW50cygpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGdldEZvcm1DYWNoZURhdGEoKTogRm9ybUxheW91dERldGFpbENvbXBvbmVudERhdGEge1xuICAgIGNvbnN0IGNvbXBSZWYgPSB0aGlzLmdldExheW91dE1vZGVDb21wb25lbnQoKTtcbiAgICByZXR1cm4gVXRpbC5pc0RlZmluZWQoY29tcFJlZikgPyBjb21wUmVmLmdldEZvcm1DYWNoZURhdGEoKSA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHB1YmxpYyBzZXRNb2RpZmllZFN0YXRlKGZvcm1BdHRyOiBzdHJpbmcsIG1vZGlmaWVkOiBib29sZWFuLCBjb25maXJtRXhpdDogYm9vbGVhbik6IHZvaWQge1xuICAgIGNvbnN0IGNvbXBSZWYgPSB0aGlzLmdldExheW91dE1vZGVDb21wb25lbnQoKTtcbiAgICBpZiAoVXRpbC5pc0RlZmluZWQoY29tcFJlZikpIHtcbiAgICAgIGNvbXBSZWYuc2V0TW9kaWZpZWRTdGF0ZShmb3JtQXR0ciwgbW9kaWZpZWQsIGNvbmZpcm1FeGl0KTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZ2V0TGFiZWxGcm9tRGF0YShkYXRhOiBhbnkpOiBzdHJpbmcge1xuICAgIGxldCBsYWJlbCA9ICcnO1xuICAgIGNvbnN0IGlzRGF0YURlZmluZWQgPSBVdGlsLmlzRGVmaW5lZChkYXRhKTtcbiAgICBpZiAoaXNEYXRhRGVmaW5lZCAmJiBkYXRhLmhhc093blByb3BlcnR5KCduZXdfdGFiX3RpdGxlJykpIHtcbiAgICAgIGxhYmVsID0gdGhpcy50cmFuc2xhdGVTZXJ2aWNlLmdldChkYXRhLm5ld190YWJfdGl0bGUpO1xuICAgIH0gZWxzZSBpZiAoaXNEYXRhRGVmaW5lZCAmJiB0aGlzLmxhYmVsQ29sc0FycmF5Lmxlbmd0aCAhPT0gMCkge1xuICAgICAgdGhpcy5sYWJlbENvbHNBcnJheS5mb3JFYWNoKChjb2wsIGlkeCkgPT4ge1xuICAgICAgICBpZiAoZGF0YVtjb2xdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBsYWJlbCArPSBkYXRhW2NvbF0gKyAoKGlkeCA8IHRoaXMubGFiZWxDb2xzQXJyYXkubGVuZ3RoIC0gMSkgPyB0aGlzLnNlcGFyYXRvciA6ICcnKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBsYWJlbDtcbiAgfVxuXG4gIHB1YmxpYyB1cGRhdGVOYXZpZ2F0aW9uKGRhdGE6IGFueSwga2V5c1ZhbHVlczogYW55LCBpbnNlcnRpb25Nb2RlOiBib29sZWFuKTogdm9pZCB7XG4gICAgY29uc3QgY29tcFJlZiA9IHRoaXMuZ2V0TGF5b3V0TW9kZUNvbXBvbmVudCgpO1xuICAgIGlmIChVdGlsLmlzRGVmaW5lZChjb21wUmVmKSkge1xuICAgICAgY29tcFJlZi51cGRhdGVOYXZpZ2F0aW9uKGRhdGEsIGtleXNWYWx1ZXMsIGluc2VydGlvbk1vZGUpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyB1cGRhdGVBY3RpdmVEYXRhKGRhdGE6IGFueSkge1xuICAgIGNvbnN0IGNvbXBSZWYgPSB0aGlzLmdldExheW91dE1vZGVDb21wb25lbnQoKTtcbiAgICBpZiAoVXRpbC5pc0RlZmluZWQoY29tcFJlZikpIHtcbiAgICAgIGNvbXBSZWYudXBkYXRlQWN0aXZlRGF0YShkYXRhKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZ2V0Um91dGVPZkFjdGl2ZUl0ZW0oKTogYW55W10ge1xuICAgIGNvbnN0IGNvbXBSZWYgPSB0aGlzLmdldExheW91dE1vZGVDb21wb25lbnQoKTtcbiAgICByZXR1cm4gVXRpbC5pc0RlZmluZWQoY29tcFJlZikgPyBjb21wUmVmLmdldFJvdXRlT2ZBY3RpdmVJdGVtKCkgOiBbXTtcbiAgfVxuXG4gIHB1YmxpYyBpc01haW5Db21wb25lbnQoY29tcDogSUxheW91dE1hbmFnZXJDb21wb25lbnQpOiBib29sZWFuIHtcbiAgICBpZiAodGhpcy5pc0RpYWxvZ01vZGUoKSkge1xuICAgICAgcmV0dXJuICFjb21wLm9Gb3JtTGF5b3V0RGlhbG9nO1xuICAgIH1cbiAgICBjb25zdCBjb21wUmVmID0gdGhpcy5nZXRMYXlvdXRNb2RlQ29tcG9uZW50KCk7XG4gICAgcmV0dXJuIFV0aWwuaXNEZWZpbmVkKGNvbXBSZWYpICYmIGNvbXBSZWYuaXNNYWluQ29tcG9uZW50KGNvbXApO1xuICB9XG5cbiAgcHVibGljIGdldFJvdXRlRm9yQ29tcG9uZW50KGNvbXA6IElMYXlvdXRNYW5hZ2VyQ29tcG9uZW50KTogYW55W10ge1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIGlmICh0aGlzLnBhcmVudEZvcm1MYXlvdXRNYW5hZ2VyKSB7XG4gICAgICBjb25zdCBwYXJlbnRSb3V0ZSA9IHRoaXMucGFyZW50Rm9ybUxheW91dE1hbmFnZXIuZ2V0Um91dGVGb3JDb21wb25lbnQoY29tcCk7XG4gICAgICBpZiAocGFyZW50Um91dGUgJiYgcGFyZW50Um91dGUubGVuZ3RoID4gMCkge1xuICAgICAgICByZXN1bHQucHVzaCguLi5wYXJlbnRSb3V0ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghdGhpcy5pc01haW5Db21wb25lbnQoY29tcCkpIHtcbiAgICAgIGNvbnN0IGFjdGl2ZVJvdXRlID0gdGhpcy5nZXRSb3V0ZU9mQWN0aXZlSXRlbSgpO1xuICAgICAgaWYgKGFjdGl2ZVJvdXRlICYmIGFjdGl2ZVJvdXRlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmVzdWx0LnB1c2goLi4uYWN0aXZlUm91dGUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcHVibGljIHNldEFzQWN0aXZlRm9ybUxheW91dE1hbmFnZXIoKTogdm9pZCB7XG4gICAgdGhpcy5vRm9ybUxheW91dE1hbmFnZXJTZXJ2aWNlLmFjdGl2ZUZvcm1MYXlvdXRNYW5hZ2VyID0gdGhpcztcbiAgfVxuXG4gIHB1YmxpYyByZWxvYWRNYWluQ29tcG9uZW50cygpOiB2b2lkIHtcbiAgICB0aGlzLm9uVHJpZ2dlclVwZGF0ZS5lbWl0KCk7XG4gIH1cblxuICBwdWJsaWMgYWxsb3dUb1VwZGF0ZU5hdmlnYXRpb24oZm9ybUF0dHI6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAodGhpcy5pc1RhYk1vZGUoKSAmJiBVdGlsLmlzRGVmaW5lZCh0aGlzLm9UYWJHcm91cCkgJiYgVXRpbC5pc0RlZmluZWQodGhpcy50aXRsZURhdGFPcmlnaW4pKSA/XG4gICAgICB0aGlzLnRpdGxlRGF0YU9yaWdpbiA9PT0gZm9ybUF0dHIgOlxuICAgICAgdHJ1ZTtcbiAgfVxuXG4gIHB1YmxpYyB1cGRhdGVTdGF0ZVN0b3JhZ2UoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmxvY2FsU3RvcmFnZVNlcnZpY2UgfHwgIXRoaXMuc3RvcmVTdGF0ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBpc1RhYk1vZGUgPSB0aGlzLmlzVGFiTW9kZSgpICYmIFV0aWwuaXNEZWZpbmVkKHRoaXMub1RhYkdyb3VwKTtcbiAgICBjb25zdCBpc1NwbGl0UGFuZU1vZGUgPSB0aGlzLmlzU3BsaXRQYW5lTW9kZSgpICYmIFV0aWwuaXNEZWZpbmVkKHRoaXMub1NwbGl0UGFuZSk7XG4gICAgaWYgKGlzVGFiTW9kZSB8fCBpc1NwbGl0UGFuZU1vZGUpIHtcbiAgICAgIHRoaXMubG9jYWxTdG9yYWdlU2VydmljZS51cGRhdGVDb21wb25lbnRTdG9yYWdlKHRoaXMsIHRoaXMuZ2V0Um91dGVLZXkoKSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRQYXJlbnRBY3RSb3V0ZVJvdXRlKCk6IFJvdXRlIHtcbiAgICBsZXQgYWN0Um91dGUgPSB0aGlzLmFjdFJvdXRlO1xuICAgIHdoaWxlIChhY3RSb3V0ZS5wYXJlbnQgIT09IHVuZGVmaW5lZCAmJiBhY3RSb3V0ZS5wYXJlbnQgIT09IG51bGwpIHtcbiAgICAgIGlmIChhY3RSb3V0ZS5yb3V0ZUNvbmZpZy5jaGlsZHJlbiB8fCBhY3RSb3V0ZS5yb3V0ZUNvbmZpZy5sb2FkQ2hpbGRyZW4pIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBhY3RSb3V0ZSA9IGFjdFJvdXRlLnBhcmVudDtcbiAgICB9XG4gICAgcmV0dXJuIGFjdFJvdXRlLnJvdXRlQ29uZmlnO1xuICB9XG5cbiAgcHVibGljIHVwZGF0ZUlmTmVlZGVkKCkge1xuICAgIGlmICh0aGlzLm1hcmtGb3JVcGRhdGUpIHtcbiAgICAgIHRoaXMubWFya0ZvclVwZGF0ZSA9IGZhbHNlO1xuICAgICAgdGhpcy5vblRyaWdnZXJVcGRhdGUuZW1pdCgpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBnZXRQYXJhbXMoKTogYW55IHtcbiAgICBjb25zdCBjb21wUmVmID0gdGhpcy5nZXRMYXlvdXRNb2RlQ29tcG9uZW50KCk7XG4gICAgcmV0dXJuIFV0aWwuaXNEZWZpbmVkKGNvbXBSZWYpID8gY29tcFJlZi5nZXRQYXJhbXMoKSA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHNldCBtYXJrRm9yVXBkYXRlKGFyZzogYm9vbGVhbikge1xuICAgIHRoaXMuX21hcmtGb3JVcGRhdGUgPSBhcmc7XG4gICAgaWYgKHRoaXMuaXNTcGxpdFBhbmVNb2RlKCkpIHtcbiAgICAgIHRoaXMudXBkYXRlSWZOZWVkZWQoKTtcbiAgICB9XG4gIH1cblxuICBnZXQgbWFya0ZvclVwZGF0ZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fbWFya0ZvclVwZGF0ZTtcbiAgfVxuXG4gIGdldCBpZ25vcmVDYW5EZWFjdGl2YXRlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhdGhpcy5pc1NwbGl0UGFuZU1vZGUoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBnZXRMYXlvdXRNb2RlQ29tcG9uZW50KCk6IE9Gb3JtTGF5b3V0TWFuYWdlck1vZGUge1xuICAgIGxldCBjb21wUmVmO1xuICAgIGlmICh0aGlzLmlzVGFiTW9kZSgpICYmIFV0aWwuaXNEZWZpbmVkKHRoaXMub1RhYkdyb3VwKSkge1xuICAgICAgY29tcFJlZiA9IHRoaXMub1RhYkdyb3VwO1xuICAgIH0gZWxzZSBpZiAodGhpcy5pc0RpYWxvZ01vZGUoKSAmJiBVdGlsLmlzRGVmaW5lZCh0aGlzLmRpYWxvZ1JlZikpIHtcbiAgICAgIGNvbXBSZWYgPSB0aGlzLmRpYWxvZ1JlZi5jb21wb25lbnRJbnN0YW5jZTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuaXNTcGxpdFBhbmVNb2RlKCkgJiYgVXRpbC5pc0RlZmluZWQodGhpcy5vU3BsaXRQYW5lKSkge1xuICAgICAgY29tcFJlZiA9IHRoaXMub1NwbGl0UGFuZTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbXBSZWY7XG4gIH1cblxuICBhbGxvd05hdmlnYXRpb24oKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICF0aGlzLmlzVGFiTW9kZSgpO1xuICB9XG5cbiAgcHVibGljIGNhbkFkZERldGFpbENvbXBvbmVudCgpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgICBjb25zdCBjb21wUmVmID0gdGhpcy5nZXRMYXlvdXRNb2RlQ29tcG9uZW50KCk7XG4gICAgcmV0dXJuIFV0aWwud3JhcEludG9PYnNlcnZhYmxlKFV0aWwuaXNEZWZpbmVkKGNvbXBSZWYpID8gY29tcFJlZi5jYW5BZGREZXRhaWxDb21wb25lbnQoKSA6IHRydWUpO1xuICB9XG5cbiAgcHVibGljIGhhc1RvQ29uZmlybUV4aXQoZGF0YTogRm9ybUxheW91dERldGFpbENvbXBvbmVudERhdGEsIG9wdGlvbnM/OiBGb3JtTGF5b3V0Q2xvc2VEZXRhaWxPcHRpb25zKTogYm9vbGVhbiB7XG4gICAgaWYgKFV0aWwuaXNEZWZpbmVkKG9wdGlvbnMpICYmIG9wdGlvbnMuZXhpdFdpdGhvdXRDb25maXJtYXRpb24pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgZm9ybXNBdHRyID0gT2JqZWN0LmtleXMoZGF0YS5pbm5lckZvcm1zSW5mbyk7XG4gICAgbGV0IHJlc3VsdDogYm9vbGVhbiA9IGZhbHNlO1xuICAgIGlmIChmb3Jtc0F0dHIubGVuZ3RoID4gMCkge1xuICAgICAgZm9ybXNBdHRyLmZvckVhY2goZm9ybUF0dHIgPT4ge1xuICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgIGNvbnN0IGZvcm1EYXRhID0gZGF0YS5pbm5lckZvcm1zSW5mb1tmb3JtQXR0cl07XG4gICAgICAgICAgcmVzdWx0ID0gZm9ybURhdGEuY29uZmlybU9uRXhpdCAmJiBmb3JtRGF0YS5tb2RpZmllZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn1cbiJdfQ==