import { Directive, Input } from '@angular/core';
import { BooleanConverter } from '../../../../decorators/input-converter';
import { OFormLayoutManagerComponent } from '../../o-form-layout-manager.component';
export class OFormLayoutDialogOptionsDirective {
    constructor(formLayoutManager) {
        this.formLayoutManager = formLayoutManager;
        this.width = '';
        this.height = '';
        this.class = '';
        this._closeOnNavigation = true;
        this._disableClose = true;
    }
    ngOnChanges() {
        if (this.formLayoutManager) {
            this.formLayoutManager.addDialogOptions(this.getOptions());
        }
    }
    set closeOnNavigation(value) {
        this._closeOnNavigation = BooleanConverter(value);
    }
    set disableClose(value) {
        this._disableClose = BooleanConverter(value);
    }
    getOptions() {
        const result = {
            width: this.width,
            minWidth: this.minWidth,
            maxWidth: this.maxWidth,
            height: this.height,
            minHeight: this.minHeight,
            maxHeight: this.maxHeight,
            class: this.class,
            position: this.position,
            backdropClass: this.backdropClass,
            disableClose: this._disableClose,
            closeOnNavigation: this._closeOnNavigation,
            title: this.title,
            labelColumns: this.labelColumns,
            separator: this.separator
        };
        Object.keys(result).forEach(key => result[key] == null ? delete result[key] : {});
        return result;
    }
}
OFormLayoutDialogOptionsDirective.decorators = [
    { type: Directive, args: [{
                selector: 'o-form-layout-dialog-options, o-form-layout-manager[mode="dialog"]'
            },] }
];
OFormLayoutDialogOptionsDirective.ctorParameters = () => [
    { type: OFormLayoutManagerComponent }
];
OFormLayoutDialogOptionsDirective.propDecorators = {
    width: [{ type: Input }],
    minWidth: [{ type: Input, args: ['min-width',] }],
    maxWidth: [{ type: Input, args: ['max-width',] }],
    height: [{ type: Input }],
    minHeight: [{ type: Input, args: ['min-height',] }],
    maxHeight: [{ type: Input, args: ['max-height',] }],
    class: [{ type: Input }],
    position: [{ type: Input }],
    backdropClass: [{ type: Input, args: ['backdrop-class',] }],
    closeOnNavigation: [{ type: Input, args: ['close-on-navigation',] }],
    disableClose: [{ type: Input, args: ['disable-close',] }],
    title: [{ type: Input }],
    labelColumns: [{ type: Input, args: ['label-columns',] }],
    separator: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1mb3JtLWxheW91dC1kaWFsb2ctb3B0aW9ucy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9vbnRpbWl6ZS13ZWItbmd4LyIsInNvdXJjZXMiOlsibGliL2xheW91dHMvZm9ybS1sYXlvdXQvZGlhbG9nL29wdGlvbnMvby1mb3JtLWxheW91dC1kaWFsb2ctb3B0aW9ucy5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHakQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDMUUsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFLcEYsTUFBTSxPQUFPLGlDQUFpQztJQUU1QyxZQUFzQixpQkFBOEM7UUFBOUMsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUE2QjtRQVM3RCxVQUFLLEdBQVcsRUFBRSxDQUFDO1FBU25CLFdBQU0sR0FBVyxFQUFFLENBQUM7UUFTcEIsVUFBSyxHQUFzQixFQUFFLENBQUM7UUFRM0IsdUJBQWtCLEdBQVksSUFBSSxDQUFDO1FBTW5DLGtCQUFhLEdBQVksSUFBSSxDQUFDO0lBekNnQyxDQUFDO0lBRXpFLFdBQVc7UUFDVCxJQUFJLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtZQUMxQixJQUFJLENBQUMsaUJBQWlCLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7U0FDNUQ7SUFDSCxDQUFDO0lBOEJELElBQ0ksaUJBQWlCLENBQUMsS0FBYztRQUNsQyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUdELElBQ0ksWUFBWSxDQUFDLEtBQWM7UUFDN0IsSUFBSSxDQUFDLGFBQWEsR0FBRyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBV0QsVUFBVTtRQUNSLE1BQU0sTUFBTSxHQUFHO1lBQ2IsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO1lBQ2pCLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtZQUN2QixRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7WUFDdkIsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNO1lBQ25CLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUztZQUN6QixTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVM7WUFDekIsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO1lBQ2pCLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtZQUN2QixhQUFhLEVBQUUsSUFBSSxDQUFDLGFBQWE7WUFDakMsWUFBWSxFQUFFLElBQUksQ0FBQyxhQUFhO1lBQ2hDLGlCQUFpQixFQUFFLElBQUksQ0FBQyxrQkFBa0I7WUFDMUMsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO1lBQ2pCLFlBQVksRUFBRSxJQUFJLENBQUMsWUFBWTtZQUMvQixTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVM7U0FDMUIsQ0FBQTtRQUVELE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2xGLE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7OztZQWpGRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLG9FQUFvRTthQUMvRTs7O1lBSlEsMkJBQTJCOzs7b0JBZWpDLEtBQUs7dUJBR0wsS0FBSyxTQUFDLFdBQVc7dUJBR2pCLEtBQUssU0FBQyxXQUFXO3FCQUdqQixLQUFLO3dCQUdMLEtBQUssU0FBQyxZQUFZO3dCQUdsQixLQUFLLFNBQUMsWUFBWTtvQkFHbEIsS0FBSzt1QkFHTCxLQUFLOzRCQUdMLEtBQUssU0FBQyxnQkFBZ0I7Z0NBSXRCLEtBQUssU0FBQyxxQkFBcUI7MkJBTTNCLEtBQUssU0FBQyxlQUFlO29CQUtyQixLQUFLOzJCQUdMLEtBQUssU0FBQyxlQUFlO3dCQUdyQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRGlhbG9nUG9zaXRpb24gfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbCc7XG5cbmltcG9ydCB7IEJvb2xlYW5Db252ZXJ0ZXIgfSBmcm9tICcuLi8uLi8uLi8uLi9kZWNvcmF0b3JzL2lucHV0LWNvbnZlcnRlcic7XG5pbXBvcnQgeyBPRm9ybUxheW91dE1hbmFnZXJDb21wb25lbnQgfSBmcm9tICcuLi8uLi9vLWZvcm0tbGF5b3V0LW1hbmFnZXIuY29tcG9uZW50JztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnby1mb3JtLWxheW91dC1kaWFsb2ctb3B0aW9ucywgby1mb3JtLWxheW91dC1tYW5hZ2VyW21vZGU9XCJkaWFsb2dcIl0nXG59KVxuZXhwb3J0IGNsYXNzIE9Gb3JtTGF5b3V0RGlhbG9nT3B0aW9uc0RpcmVjdGl2ZSB7XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGZvcm1MYXlvdXRNYW5hZ2VyOiBPRm9ybUxheW91dE1hbmFnZXJDb21wb25lbnQpIHsgfVxuXG4gIG5nT25DaGFuZ2VzKCkge1xuICAgIGlmICh0aGlzLmZvcm1MYXlvdXRNYW5hZ2VyKSB7XG4gICAgICB0aGlzLmZvcm1MYXlvdXRNYW5hZ2VyLmFkZERpYWxvZ09wdGlvbnModGhpcy5nZXRPcHRpb25zKCkpO1xuICAgIH1cbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHB1YmxpYyB3aWR0aDogc3RyaW5nID0gJyc7XG5cbiAgQElucHV0KCdtaW4td2lkdGgnKVxuICBwdWJsaWMgbWluV2lkdGg6IG51bWJlciB8IHN0cmluZztcblxuICBASW5wdXQoJ21heC13aWR0aCcpXG4gIHB1YmxpYyBtYXhXaWR0aDogbnVtYmVyIHwgc3RyaW5nO1xuXG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBoZWlnaHQ6IHN0cmluZyA9ICcnO1xuXG4gIEBJbnB1dCgnbWluLWhlaWdodCcpXG4gIHB1YmxpYyBtaW5IZWlnaHQ6IG51bWJlciB8IHN0cmluZztcblxuICBASW5wdXQoJ21heC1oZWlnaHQnKVxuICBwdWJsaWMgbWF4SGVpZ2h0OiBudW1iZXIgfCBzdHJpbmc7XG5cbiAgQElucHV0KClcbiAgcHVibGljIGNsYXNzOiBzdHJpbmcgfCBzdHJpbmdbXSA9ICcnO1xuXG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBwb3NpdGlvbjogRGlhbG9nUG9zaXRpb247XG5cbiAgQElucHV0KCdiYWNrZHJvcC1jbGFzcycpXG4gIHB1YmxpYyBiYWNrZHJvcENsYXNzOiBzdHJpbmc7XG5cbiAgcHJvdGVjdGVkIF9jbG9zZU9uTmF2aWdhdGlvbjogYm9vbGVhbiA9IHRydWU7XG4gIEBJbnB1dCgnY2xvc2Utb24tbmF2aWdhdGlvbicpXG4gIHNldCBjbG9zZU9uTmF2aWdhdGlvbih2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2Nsb3NlT25OYXZpZ2F0aW9uID0gQm9vbGVhbkNvbnZlcnRlcih2YWx1ZSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgX2Rpc2FibGVDbG9zZTogYm9vbGVhbiA9IHRydWU7XG4gIEBJbnB1dCgnZGlzYWJsZS1jbG9zZScpXG4gIHNldCBkaXNhYmxlQ2xvc2UodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9kaXNhYmxlQ2xvc2UgPSBCb29sZWFuQ29udmVydGVyKHZhbHVlKTtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHB1YmxpYyB0aXRsZTogc3RyaW5nO1xuXG4gIEBJbnB1dCgnbGFiZWwtY29sdW1ucycpXG4gIHB1YmxpYyBsYWJlbENvbHVtbnM6IHN0cmluZztcblxuICBASW5wdXQoKVxuICBwdWJsaWMgc2VwYXJhdG9yOiBzdHJpbmc7XG5cbiAgZ2V0T3B0aW9ucygpIHtcbiAgICBjb25zdCByZXN1bHQgPSB7XG4gICAgICB3aWR0aDogdGhpcy53aWR0aCxcbiAgICAgIG1pbldpZHRoOiB0aGlzLm1pbldpZHRoLFxuICAgICAgbWF4V2lkdGg6IHRoaXMubWF4V2lkdGgsXG4gICAgICBoZWlnaHQ6IHRoaXMuaGVpZ2h0LFxuICAgICAgbWluSGVpZ2h0OiB0aGlzLm1pbkhlaWdodCxcbiAgICAgIG1heEhlaWdodDogdGhpcy5tYXhIZWlnaHQsXG4gICAgICBjbGFzczogdGhpcy5jbGFzcyxcbiAgICAgIHBvc2l0aW9uOiB0aGlzLnBvc2l0aW9uLFxuICAgICAgYmFja2Ryb3BDbGFzczogdGhpcy5iYWNrZHJvcENsYXNzLFxuICAgICAgZGlzYWJsZUNsb3NlOiB0aGlzLl9kaXNhYmxlQ2xvc2UsXG4gICAgICBjbG9zZU9uTmF2aWdhdGlvbjogdGhpcy5fY2xvc2VPbk5hdmlnYXRpb24sXG4gICAgICB0aXRsZTogdGhpcy50aXRsZSxcbiAgICAgIGxhYmVsQ29sdW1uczogdGhpcy5sYWJlbENvbHVtbnMsXG4gICAgICBzZXBhcmF0b3I6IHRoaXMuc2VwYXJhdG9yXG4gICAgfVxuICAgIC8vIERlbGV0aW5nIHVuZGVmaW5lZCBwcm9wZXJ0aWVzXG4gICAgT2JqZWN0LmtleXMocmVzdWx0KS5mb3JFYWNoKGtleSA9PiByZXN1bHRba2V5XSA9PSBudWxsID8gZGVsZXRlIHJlc3VsdFtrZXldIDoge30pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxufVxuIl19