import { Component, ComponentFactoryResolver, Inject, Injector, ViewChild, ViewEncapsulation } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';
import { DialogService } from '../../../services/dialog.service';
import { Util } from '../../../util';
import { OFormLayoutManagerContentDirective } from '../directives/o-form-layout-manager-content.directive';
export class OFormLayoutDialogComponent {
    constructor(dialogRef, injector, componentFactoryResolver, data) {
        this.dialogRef = dialogRef;
        this.injector = injector;
        this.componentFactoryResolver = componentFactoryResolver;
        this.dialogService = injector.get(DialogService);
        if (data.title) {
            this.title = data.title;
        }
        if (data.data) {
            this.data = data.data;
            const component = data.data.component;
            this.componentFactory = this.componentFactoryResolver.resolveComponentFactory(component);
            this.params = data.data.params;
            this.queryParams = data.data.queryParams;
            this.urlSegments = data.data.urlSegments;
        }
        if (data.layoutManagerComponent) {
            this.formLayoutManager = data.layoutManagerComponent;
        }
    }
    ngAfterViewInit() {
        if (this.contentDirective && this.componentFactory) {
            const viewContainerRef = this.contentDirective.viewContainerRef;
            viewContainerRef.clear();
            viewContainerRef.createComponent(this.componentFactory);
        }
    }
    updateNavigation(data) {
        let label = this.formLayoutManager.getLabelFromData(data);
        if (label && label.length) {
            label = ': ' + label;
        }
        this.label = label;
    }
    updateActiveData(data) {
        this.data = Object.assign(this.data, data);
    }
    closeDialog(options) {
        if (Util.isDefined(options) && Util.isDefined(options.exitWithoutConfirmation) && options.exitWithoutConfirmation) {
            this.dialogRef.close();
        }
        else {
            if (this.formLayoutManager.hasToConfirmExit(this.data)) {
                this.dialogService.confirm('CONFIRM', 'MESSAGES.FORM_CHANGES_WILL_BE_LOST').then(res => {
                    if (res) {
                        this.dialogRef.close();
                    }
                });
            }
            else {
                this.dialogRef.close();
            }
        }
    }
    getRouteOfActiveItem() {
        const parentRoute = this.formLayoutManager.parentFormLayoutManager.getRouteOfActiveItem();
        const segments = (this.urlSegments || []);
        const route = [];
        segments.forEach((segment, index) => {
            if (parentRoute[index] !== segment.path) {
                route.push(segment.path);
            }
        });
        return route;
    }
    getParams() {
        return this.params;
    }
    getFormCacheData() {
        return this.data;
    }
    isMainComponent(comp) {
        return !comp.oFormLayoutDialog;
    }
    closeDetail(options) {
        this.closeDialog(options);
    }
    getDataToStore() {
        return null;
    }
    setModifiedState(formAttr, modified, confirmExit) {
        this.data.innerFormsInfo[formAttr] = {
            modified: modified,
            confirmOnExit: confirmExit
        };
    }
    canAddDetailComponent() {
        return true;
    }
}
OFormLayoutDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-form-layout-dialog',
                template: "<div fxLayout=\"row\" fxLayoutAlign=\"space-between center\" class=\"title-container\" mat-dialog-title>\n  <span fxFlex fxLayoutAlign=\"center center\" > {{ (title || 'LAYOUT_MANANGER.DIALOG_TITLE') | oTranslate }}{{ label }} </span>\n  <mat-icon (click)=\"closeDialog()\" svgIcon=\"ontimize:close\"></mat-icon>\n</div>\n\n<div mat-dialog-content class=\"form-layout-dialog-container\">\n  <ng-template o-form-layout-manager-content></ng-template>\n</div>",
                encapsulation: ViewEncapsulation.None,
                host: {
                    '[class.o-form-layout-dialog]': 'true'
                },
                styles: [".o-form-layout-dialog-overlay{width:65%;height:90%}.o-form-layout-dialog-overlay .title-container{cursor:default}.o-form-layout-dialog-overlay .title-container .mat-icon{cursor:pointer}.o-form-layout-dialog-overlay .mat-dialog-container{overflow:hidden}.o-form-layout-dialog-overlay .mat-dialog-container .mat-dialog-content.form-layout-dialog-container{display:block;padding-top:16px;margin:0;max-height:calc(100% - 78px);height:100%}.o-form-layout-dialog-overlay .mat-dialog-container .o-form-layout-dialog o-form-toolbar .mat-toolbar{padding:0}.o-form-layout-dialog-overlay .mat-dialog-container .o-form-layout-dialog .o-form form.inner-form{position:relative;margin-top:0}"]
            }] }
];
OFormLayoutDialogComponent.ctorParameters = () => [
    { type: MatDialogRef },
    { type: Injector },
    { type: ComponentFactoryResolver },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
];
OFormLayoutDialogComponent.propDecorators = {
    contentDirective: [{ type: ViewChild, args: [OFormLayoutManagerContentDirective, { static: false },] }]
};
//# sourceMappingURL=data:application/json;base64,