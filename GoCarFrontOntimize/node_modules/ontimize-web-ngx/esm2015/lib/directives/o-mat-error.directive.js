import { Directive, ElementRef, Injector, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import { O_MAT_ERROR_OPTIONS } from '../services/factories';
import { Codes } from '../util/codes';
import { Util } from '../util/util';
export class OMatErrorDirective {
    constructor(element, templateRef, viewContainer, injector) {
        this.element = element;
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.injector = injector;
        try {
            this.errorOptions = this.injector.get(O_MAT_ERROR_OPTIONS) || {};
        }
        catch (e) {
            this.errorOptions = {};
        }
        if (!Util.isDefined(this.errorOptions.type)) {
            this.errorOptions.type = Codes.O_MAT_ERROR_STANDARD;
        }
    }
    set oMatError(val) {
        if (val) {
            this.viewContainer.createEmbeddedView(this.templateRef);
            if (this.errorOptions.type === Codes.O_MAT_ERROR_LITE) {
                setTimeout(() => {
                    try {
                        this.text = this.element.nativeElement.parentElement.getElementsByTagName('mat-error')[0].textContent;
                    }
                    catch (e) {
                        this.text = undefined;
                    }
                    this.viewContainer.clear();
                }, 0);
            }
        }
        else {
            this.text = undefined;
            this.viewContainer.clear();
        }
    }
}
OMatErrorDirective.decorators = [
    { type: Directive, args: [{
                selector: '[oMatError]'
            },] }
];
OMatErrorDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: Injector }
];
OMatErrorDirective.propDecorators = {
    oMatError: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1tYXQtZXJyb3IuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vb250aW1pemUtd2ViLW5neC8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL28tbWF0LWVycm9yLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV0RyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUU1RCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFLcEMsTUFBTSxPQUFPLGtCQUFrQjtJQUk3QixZQUNVLE9BQW1CLEVBQ25CLFdBQTZCLEVBQzdCLGFBQStCLEVBQy9CLFFBQWtCO1FBSGxCLFlBQU8sR0FBUCxPQUFPLENBQVk7UUFDbkIsZ0JBQVcsR0FBWCxXQUFXLENBQWtCO1FBQzdCLGtCQUFhLEdBQWIsYUFBYSxDQUFrQjtRQUMvQixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBRTFCLElBQUk7WUFDRixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLElBQUksRUFBRSxDQUFDO1NBQ2xFO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDVixJQUFJLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQztTQUN4QjtRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDM0MsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLG9CQUFxQyxDQUFDO1NBQ3RFO0lBQ0gsQ0FBQztJQUVELElBQ0ksU0FBUyxDQUFDLEdBQUc7UUFDZixJQUFJLEdBQUcsRUFBRTtZQUNQLElBQUksQ0FBQyxhQUFhLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ3hELElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEtBQUssS0FBSyxDQUFDLGdCQUFnQixFQUFFO2dCQUNyRCxVQUFVLENBQUMsR0FBRyxFQUFFO29CQUNkLElBQUk7d0JBQ0YsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsb0JBQW9CLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDO3FCQUN2RztvQkFBQyxPQUFPLENBQUMsRUFBRTt3QkFDVixJQUFJLENBQUMsSUFBSSxHQUFHLFNBQVMsQ0FBQTtxQkFDdEI7b0JBQ0QsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDN0IsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO2FBQ047U0FDRjthQUFNO1lBQ0wsSUFBSSxDQUFDLElBQUksR0FBRyxTQUFTLENBQUM7WUFDdEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUM1QjtJQUNILENBQUM7OztZQXpDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGFBQWE7YUFDeEI7OztZQVRtQixVQUFVO1lBQW1CLFdBQVc7WUFBRSxnQkFBZ0I7WUFBOUMsUUFBUTs7O3dCQThCckMsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5qZWN0b3IsIElucHV0LCBUZW1wbGF0ZVJlZiwgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBPX01BVF9FUlJPUl9PUFRJT05TIH0gZnJvbSAnLi4vc2VydmljZXMvZmFjdG9yaWVzJztcbmltcG9ydCB7IE9NYXRFcnJvck9wdGlvbnMsIE9NYXRFcnJvclR5cGUgfSBmcm9tICcuLi90eXBlcy9vLW1hdC1lcnJvci50eXBlJztcbmltcG9ydCB7IENvZGVzIH0gZnJvbSAnLi4vdXRpbC9jb2Rlcyc7XG5pbXBvcnQgeyBVdGlsIH0gZnJvbSAnLi4vdXRpbC91dGlsJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW29NYXRFcnJvcl0nXG59KVxuZXhwb3J0IGNsYXNzIE9NYXRFcnJvckRpcmVjdGl2ZSB7XG4gIHB1YmxpYyB0ZXh0OiBzdHJpbmc7XG4gIHByaXZhdGUgZXJyb3JPcHRpb25zOiBPTWF0RXJyb3JPcHRpb25zO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgZWxlbWVudDogRWxlbWVudFJlZixcbiAgICBwcml2YXRlIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+LFxuICAgIHByaXZhdGUgdmlld0NvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZixcbiAgICBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvclxuICApIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy5lcnJvck9wdGlvbnMgPSB0aGlzLmluamVjdG9yLmdldChPX01BVF9FUlJPUl9PUFRJT05TKSB8fCB7fTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aGlzLmVycm9yT3B0aW9ucyA9IHt9O1xuICAgIH1cbiAgICBpZiAoIVV0aWwuaXNEZWZpbmVkKHRoaXMuZXJyb3JPcHRpb25zLnR5cGUpKSB7XG4gICAgICB0aGlzLmVycm9yT3B0aW9ucy50eXBlID0gQ29kZXMuT19NQVRfRVJST1JfU1RBTkRBUkQgYXMgT01hdEVycm9yVHlwZTtcbiAgICB9XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgb01hdEVycm9yKHZhbCkge1xuICAgIGlmICh2YWwpIHtcbiAgICAgIHRoaXMudmlld0NvbnRhaW5lci5jcmVhdGVFbWJlZGRlZFZpZXcodGhpcy50ZW1wbGF0ZVJlZik7XG4gICAgICBpZiAodGhpcy5lcnJvck9wdGlvbnMudHlwZSA9PT0gQ29kZXMuT19NQVRfRVJST1JfTElURSkge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy50ZXh0ID0gdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQucGFyZW50RWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnbWF0LWVycm9yJylbMF0udGV4dENvbnRlbnQ7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhpcy50ZXh0ID0gdW5kZWZpbmVkXG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMudmlld0NvbnRhaW5lci5jbGVhcigpO1xuICAgICAgICB9LCAwKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnRleHQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLnZpZXdDb250YWluZXIuY2xlYXIoKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==