import { OFormValue } from '../components/form/o-form-value';
import { Codes } from './codes';
import { SQLTypes } from './sqltypes';
import { Util } from './util';
export class ServiceUtils {
    static getParentKeysFromExpandableContainer(parentKeysObject, expandableContainer, route, checkRouteParamsRecursive = true) {
        const result = {};
        const ownKeys = Object.keys(parentKeysObject || {});
        const dataComponent = expandableContainer ? expandableContainer.data : {};
        const existsData = Object.keys(dataComponent).length > 0;
        const routeParams = route ? ServiceUtils.getRouteParams(route.snapshot, checkRouteParamsRecursive) : {};
        const existsRouteParams = Object.keys(routeParams).length > 0;
        if (existsData || existsRouteParams) {
            ownKeys.forEach(ownKey => {
                const keyValue = parentKeysObject[ownKey];
                let value;
                if (dataComponent.hasOwnProperty(keyValue)) {
                    value = dataComponent[keyValue];
                }
                else if (routeParams.hasOwnProperty(keyValue)) {
                    value = routeParams[keyValue];
                }
                if (Util.isDefined(value)) {
                    switch (typeof (value)) {
                        case 'string':
                            if (value.trim().length > 0) {
                                result[ownKey] = value.trim();
                            }
                            break;
                        case 'number':
                            if (!isNaN(value)) {
                                result[ownKey] = value;
                            }
                            break;
                    }
                }
            });
        }
        return result;
    }
    static getParentKeysFromForm(parentKeysObject, form, route, checkRouteParamsRecursive = true) {
        const result = {};
        const ownKeys = Object.keys(parentKeysObject || {});
        const formComponents = form ? form.getComponents() : {};
        const existsComponents = Object.keys(formComponents).length > 0;
        const formDataProperties = form ? form.getDataValues() : {};
        const existsProperties = Object.keys(formDataProperties).length > 0;
        const urlData = form ? form.getFormNavigation().getFilterFromUrlParams() : {};
        const existsUrlData = Object.keys(urlData).length > 0;
        if (existsUrlData) {
            form.keysArray.forEach((key, i) => {
                if (urlData.hasOwnProperty(key)) {
                    urlData[key] = SQLTypes.parseUsingSQLType(urlData[key], form.keysSqlTypesArray[i]);
                }
            });
        }
        const routeParams = route ? ServiceUtils.getRouteParams(route.snapshot, checkRouteParamsRecursive) : {};
        const existsRouteParams = Object.keys(routeParams).length > 0;
        if (existsComponents || existsProperties || existsUrlData || existsRouteParams) {
            ownKeys.forEach(ownKey => {
                const keyValue = parentKeysObject[ownKey];
                const isEquivObject = Util.isObject(keyValue);
                const formFieldAttr = isEquivObject ? Object.keys(keyValue)[0] : keyValue;
                let currentData;
                if (formComponents.hasOwnProperty(formFieldAttr)) {
                    const component = formComponents[formFieldAttr];
                    if ('getSelectedRecord' in component && isEquivObject) {
                        currentData = (component.getSelectedRecord() || {})[keyValue[formFieldAttr]];
                    }
                    else {
                        currentData = component.getValue();
                    }
                }
                else if (formDataProperties.hasOwnProperty(formFieldAttr)) {
                    const formPropValue = formDataProperties[formFieldAttr];
                    currentData = formPropValue instanceof OFormValue ? formPropValue.value : formPropValue;
                }
                else if (urlData.hasOwnProperty(formFieldAttr)) {
                    currentData = urlData[formFieldAttr];
                }
                else if (routeParams.hasOwnProperty(formFieldAttr)) {
                    currentData = routeParams[formFieldAttr];
                }
                if (Util.isDefined(currentData)) {
                    switch (typeof (currentData)) {
                        case 'string':
                            if (currentData.trim().length > 0) {
                                result[ownKey] = currentData.trim();
                            }
                            break;
                        case 'number':
                            if (!isNaN(currentData)) {
                                result[ownKey] = currentData;
                            }
                            break;
                    }
                }
            });
        }
        return result;
    }
    static filterContainsAllParentKeys(parentKeysFilter, parentKeys) {
        const pkKeys = Object.keys(parentKeys);
        if ((pkKeys.length > 0) && Util.isDefined(parentKeysFilter)) {
            const parentKeysFilterKeys = Object.keys(parentKeysFilter);
            return pkKeys.every(a => parentKeysFilterKeys.indexOf(a) !== -1);
        }
        return true;
    }
    static getFilterUsingParentKeys(parentItem, parentKeysObject) {
        const filter = {};
        const ownKeys = Object.keys(parentKeysObject);
        if (ownKeys.length > 0 && Util.isDefined(parentItem)) {
            ownKeys.forEach(ownKey => {
                const parentKey = parentKeysObject[ownKey];
                if (parentItem.hasOwnProperty(parentKey)) {
                    let currentData = parentItem[parentKey];
                    if (currentData instanceof OFormValue) {
                        currentData = currentData.value;
                    }
                    filter[ownKey] = currentData;
                }
            });
        }
        return filter;
    }
    static getArrayProperties(array, properties) {
        const result = array.map(item => {
            return ServiceUtils.getObjectProperties(item, properties);
        });
        return result;
    }
    static getObjectProperties(object, properties) {
        const objectProperties = {};
        properties.forEach(key => {
            objectProperties[key] = object[key];
        });
        return objectProperties;
    }
    static parseSortColumns(sortColumns) {
        const sortColArray = [];
        if (sortColumns) {
            const cols = Util.parseArray(sortColumns);
            cols.forEach(col => {
                const colDef = col.split(Codes.TYPE_SEPARATOR);
                if (colDef.length > 0) {
                    const colName = colDef[0];
                    const colSort = colDef[1] || Codes.ASC_SORT;
                    sortColArray.push({
                        columnName: colName,
                        ascendent: colSort === Codes.ASC_SORT
                    });
                }
            });
        }
        return sortColArray;
    }
    static getRouteParams(route, recursive) {
        let params = Object.assign({}, route.params);
        if (recursive && route.parent) {
            params = Object.assign({}, this.getRouteParams(route.parent, recursive), params);
        }
        return params;
    }
}
//# sourceMappingURL=data:application/json;base64,