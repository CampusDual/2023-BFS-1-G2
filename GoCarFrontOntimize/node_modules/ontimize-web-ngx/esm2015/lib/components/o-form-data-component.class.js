import * as tslib_1 from "tslib";
import { ContentChildren, EventEmitter, HostBinding, HostListener, QueryList, ViewChildren } from '@angular/core';
import { FormGroup, Validators } from '@angular/forms';
import { MatError, MatSuffix } from '@angular/material';
import { O_INPUTS_OPTIONS } from '../config/app-config';
import { BooleanConverter, InputConverter } from '../decorators/input-converter';
import { OMatErrorDirective } from '../directives/o-mat-error.directive';
import { O_MAT_ERROR_OPTIONS } from '../services/factories';
import { PermissionsService } from '../services/permissions/permissions.service';
import { OValidatorComponent } from '../shared/components/validation/o-validator.component';
import { Codes } from '../util/codes';
import { PermissionsUtils } from '../util/permissions';
import { SQLTypes } from '../util/sqltypes';
import { Util } from '../util/util';
import { OFormValue } from './form/o-form-value';
import { OFormControl } from './input/o-form-control.class';
import { OBaseComponent } from './o-component.class';
import { OValueChangeEvent } from './o-value-change-event.class';
export const DEFAULT_INPUTS_O_FORM_DATA_COMPONENT = [
    'oattr: attr',
    'olabel: label',
    'floatLabel: float-label',
    'oplaceholder: placeholder',
    'tooltip',
    'tooltipPosition: tooltip-position',
    'tooltipShowDelay: tooltip-show-delay',
    'tooltipHideDelay: tooltip-hide-delay',
    'data',
    'autoBinding: automatic-binding',
    'autoRegistering: automatic-registering',
    'enabled',
    'orequired: required',
    'sqlType: sql-type',
    'width',
    'readOnly: read-only',
    'clearButton: clear-button',
    'angularValidatorsFn: validators',
    'appearance',
    'hideRequiredMarker:hide-required-marker',
    'labelVisible:label-visible',
    'selectAllOnClick:select-all-on-click'
];
export const DEFAULT_OUTPUTS_O_FORM_DATA_COMPONENT = [
    'onChange',
    'onValueChange',
    'onFocus',
    'onBlur'
];
export class OFormDataComponent extends OBaseComponent {
    constructor(form, elRef, injector) {
        super(injector);
        this.autoBinding = true;
        this.autoRegistering = true;
        this.clearButton = false;
        this.angularValidatorsFn = [];
        this.hideRequiredMarker = false;
        this.labelVisible = true;
        this.selectAllOnClick = false;
        this.onChange = new EventEmitter();
        this.onValueChange = new EventEmitter();
        this.onFocus = new EventEmitter();
        this.onBlur = new EventEmitter();
        this.defaultValue = void 0;
        this._SQLType = SQLTypes.OTHER;
        this._defaultSQLTypeKey = 'OTHER';
        this.errorsData = [];
        this.form = form;
        this.elRef = elRef;
        this.permissionsService = this.injector.get(PermissionsService);
        try {
            this.errorOptions = this.injector.get(O_MAT_ERROR_OPTIONS) || {};
        }
        catch (e) {
            this.errorOptions = {};
        }
        if (!Util.isDefined(this.errorOptions.type)) {
            this.errorOptions.type = Codes.O_MAT_ERROR_STANDARD;
        }
        try {
            this.selectAllOnClick = this.injector.get(O_INPUTS_OPTIONS).selectAllOnClick;
        }
        catch (e) {
            this.selectAllOnClick = false;
        }
    }
    get hostWidth() {
        return this.width;
    }
    handleClick() {
        if (this.selectAllOnClick) {
            this.selectValue();
        }
    }
    ngOnInit() {
        this.initialize();
    }
    ngAfterViewInit() {
        if (this._matSuffixList) {
            this.setSuffixClass(this._matSuffixList.length);
            this.matSuffixSubscription = this._matSuffixList.changes.subscribe(() => {
                this.setSuffixClass(this._matSuffixList.length);
            });
        }
        if (this.validatorChildren) {
            this.validatorsSubscription = this.validatorChildren.changes.subscribe(() => {
                this.updateValidators();
            });
            if (this.validatorChildren.length > 0) {
                this.updateValidators();
            }
        }
        if (!this.enabled) {
            this.mutationObserver = PermissionsUtils.registerDisabledChangesInDom(this.getMutationObserverTarget(), {
                callback: this.disableFormControl.bind(this)
            });
        }
        this.addOntimizeCustomAppearanceClass();
        try {
            this.oInputsOptions = this.injector.get(O_INPUTS_OPTIONS);
        }
        catch (e) {
            this.oInputsOptions = {};
        }
        Util.parseOInputsOptions(this.elRef, this.oInputsOptions);
    }
    ngOnDestroy() {
        this.destroy();
    }
    ngOnChanges(changes) {
        if (Util.isDefined(changes.angularValidatorsFn)) {
            this.updateValidators();
        }
    }
    hasEnabledPermission() {
        return this.permissions ? this.permissions.enabled : true;
    }
    hasVisiblePermission() {
        return this.permissions ? this.permissions.visible : true;
    }
    getFormGroup() {
        if (this._fGroup) {
            return this._fGroup;
        }
        let formGroup = this.form ? this.form.formGroup : undefined;
        if ((!this.hasEnabledPermission() || !this.hasVisiblePermission()) && !this._fGroup) {
            const group = {};
            group[this.oattr] = this._fControl;
            this._fGroup = new FormGroup(group);
            formGroup = this._fGroup;
        }
        return formGroup;
    }
    getFormControl() {
        return this._fControl;
    }
    hasError(error) {
        return !this.isReadOnly && this._fControl && this._fControl.touched && this._fControl.hasError(error);
    }
    getErrorValue(error, prop) {
        return this._fControl && this._fControl.hasError(error) ? this._fControl.getError(error)[prop] || '' : '';
    }
    getActiveOErrors() {
        return this.errorOptions.type === Codes.O_MAT_ERROR_STANDARD
            ? this.errorsData.filter((item) => this.hasError(item.name))
            : [];
    }
    initialize() {
        super.initialize();
        this.getControl();
        this.parsePermissions();
        if (!Util.isDefined(this.permissions)) {
            if (this.form) {
                this.registerFormListeners();
                this.isReadOnly = !(this.form.isInUpdateMode() || this.form.isInInsertMode() || this.form.isEditableDetail());
            }
            else {
                this.isReadOnly = !this.enabled;
            }
        }
    }
    destroy() {
        this.unregisterFormListeners();
        if (this.matSuffixSubscription) {
            this.matSuffixSubscription.unsubscribe();
        }
        if (this.validatorsSubscription) {
            this.validatorsSubscription.unsubscribe();
        }
        if (this.mutationObserver) {
            this.mutationObserver.disconnect();
        }
        if (this._fControlSubscription) {
            this._fControlSubscription.unsubscribe();
        }
    }
    registerFormListeners() {
        if (this.form) {
            this.form.registerFormComponent(this);
            this.form.registerFormControlComponent(this);
            this.form.registerSQLTypeFormComponent(this);
        }
    }
    unregisterFormListeners() {
        if (this.form) {
            this.form.unregisterFormComponent(this);
            this.form.unregisterFormControlComponent(this);
            this.form.unregisterSQLTypeFormComponent(this);
        }
    }
    set data(value) {
        this.setData(value);
    }
    setData(newValue) {
        const previousValue = this.oldValue;
        this.setFormValue(newValue);
        this.emitOnValueChange(OValueChangeEvent.PROGRAMMATIC_CHANGE, newValue, previousValue);
    }
    isAutomaticBinding() {
        return this.autoBinding;
    }
    isAutomaticRegistering() {
        return this.autoRegistering;
    }
    getValue() {
        if (this.value instanceof OFormValue) {
            if (this.value.value !== undefined) {
                return this.value.value;
            }
        }
        return this.defaultValue;
    }
    setValue(val, options = {}, setDirty = false) {
        if (!PermissionsUtils.checkEnabledPermission(this.permissions)) {
            return;
        }
        if (this.oldValue !== val) {
            const previousValue = this.oldValue;
            this.setFormValue(val, options, setDirty);
            if (options && options.emitModelToViewValueChange !== false) {
                const changeType = (options.hasOwnProperty('changeType')) ? options.changeType : OValueChangeEvent.PROGRAMMATIC_CHANGE;
                this.emitOnValueChange(changeType, val, previousValue);
            }
        }
    }
    clearValue(options, setDirty = false) {
        if (!PermissionsUtils.checkEnabledPermission(this.permissions)) {
            return;
        }
        this.setValue(void 0, options, setDirty);
    }
    onClickClearValue(event) {
        event.stopPropagation();
        event.preventDefault();
        this.clearValue({ changeType: OValueChangeEvent.USER_CHANGE }, true);
    }
    onChangeEvent(arg) {
        const value = this.getValue();
        if (this.oldValue !== value) {
            const previousValue = this.oldValue;
            this.oldValue = value;
            this.emitOnValueChange(OValueChangeEvent.USER_CHANGE, value, previousValue);
        }
    }
    get showClearButton() {
        return this.clearButton && !this.isReadOnly && this.enabled && Util.isDefined(this.getValue());
    }
    onFormControlChange(value) {
        if (!this.value) {
            this.value = new OFormValue();
        }
        this.ensureOFormValue(value);
        this.onChange.emit(value);
    }
    ensureOFormValue(arg) {
        if (arg instanceof OFormValue) {
            this.value = arg;
        }
        else if (Util.isDefined(arg) && !(arg instanceof OFormValue)) {
            const val = this.value || new OFormValue();
            val.value = arg;
            this.value = val;
        }
        else {
            this.value = new OFormValue(this.defaultValue);
        }
    }
    createFormControl(cfg, validators) {
        return new OFormControl(cfg, {
            validators: validators
        }, null);
    }
    getControl() {
        if (!this._fControl) {
            const validators = this.resolveValidators();
            const cfg = {
                value: this.value ? this.value.value : undefined,
                disabled: !this.enabled
            };
            this._fControl = this.createFormControl(cfg, validators);
            this.registerOnFormControlChange();
        }
        return this._fControl;
    }
    resolveValidators() {
        const validators = [];
        this.angularValidatorsFn.forEach((fn) => {
            validators.push(fn);
        });
        if (this.orequired) {
            validators.push(Validators.required);
        }
        return validators;
    }
    getSQLType() {
        const sqlt = this.sqlType && this.sqlType.length > 0 ? this.sqlType : this._defaultSQLTypeKey;
        this._SQLType = SQLTypes.getSQLTypeValue(sqlt);
        return this._SQLType;
    }
    get isValid() {
        if (this._fControl) {
            return this._fControl.valid;
        }
        return false;
    }
    isEmpty() {
        if (this.value instanceof OFormValue) {
            if (this.value.value !== undefined) {
                return false;
            }
        }
        return true;
    }
    setEnabled(value) {
        super.setEnabled(value);
        if (this._fControl && this.hasEnabledPermission() && this.hasVisiblePermission()) {
            value ? this._fControl.enable() : this._fControl.disable();
        }
    }
    get elementRef() {
        return this.elRef;
    }
    get hasCustomWidth() {
        return this.width !== undefined;
    }
    get orequired() {
        return this._orequired;
    }
    set orequired(val) {
        const old = this._orequired;
        this._orequired = BooleanConverter(val);
        if (val !== old) {
            this.updateValidators();
        }
    }
    innerOnFocus(event) {
        if (!this.isReadOnly && this.enabled) {
            this.onFocus.emit(event);
        }
    }
    innerOnBlur(event) {
        if (!this.isReadOnly && this.enabled) {
            this.onBlur.emit(event);
        }
    }
    get appearance() {
        return this._appearance;
    }
    set appearance(value) {
        const values = ['legacy', 'standard', 'fill', 'outline'];
        if (values.indexOf(value) === -1) {
            value = undefined;
        }
        this._appearance = value;
    }
    get floatLabel() {
        if (!this.labelVisible) {
            this.floatLabel = 'never';
        }
        return this._floatLabel;
    }
    set floatLabel(value) {
        const values = ['always', 'never', 'auto'];
        if (values.indexOf(value) === -1) {
            value = 'auto';
        }
        this._floatLabel = value;
    }
    selectValue() {
        if (!this.enabled || this.isReadOnly) {
            return;
        }
        const inputEl = document.getElementById(this.oattr);
        if (inputEl) {
            inputEl.select();
        }
    }
    registerOnFormControlChange() {
        if (this._fControl) {
            this._fControlSubscription = this._fControl.valueChanges.subscribe(value => {
                this.onFormControlChange(value);
            });
        }
    }
    emitOnValueChange(type, newValue, oldValue) {
        const event = new OValueChangeEvent(type, newValue, oldValue, this);
        this.onValueChange.emit(event);
    }
    setFormValue(val, options, setDirty = false) {
        this.ensureOFormValue(val);
        if (this._fControl) {
            this.updateOFormControlValue(this.value.value, options, setDirty);
        }
        this.oldValue = this.value.value;
    }
    updateOFormControlValue(value, options, setDirty = false) {
        this._fControl.setValue(value, options);
        if (setDirty) {
            this._fControl.markAsDirty();
        }
        if (this._fControl.invalid && !this.form.isInInsertMode()) {
            this._fControl.markAsTouched();
        }
    }
    updateValidators() {
        if (!this._fControl) {
            return;
        }
        this._fControl.clearValidators();
        this.errorsData = [];
        const validators = this.resolveValidators();
        if (this.validatorChildren) {
            this.validatorChildren.forEach((oValidator) => {
                const validatorFunction = oValidator.getValidatorFn();
                if (validatorFunction) {
                    validators.push(validatorFunction);
                }
                const errorsData = oValidator.getErrorsData();
                this.errorsData.push(...errorsData);
            });
        }
        this._fControl.setValidators(validators);
    }
    addOntimizeCustomAppearanceClass() {
        try {
            if (this.elRef) {
                const matFormFieldEl = this.elRef.nativeElement.getElementsByTagName('mat-form-field');
                if (matFormFieldEl && matFormFieldEl.length === 1) {
                    matFormFieldEl.item(0).classList.add('mat-form-field-appearance-ontimize');
                }
            }
        }
        catch (e) {
        }
    }
    getTooltipClass() {
        const liteError = this.errorOptions.type === Codes.O_MAT_ERROR_LITE;
        if (!liteError) {
            return super.getTooltipClass();
        }
        const errorClass = Util.isDefined(this._fControl.errors) ? 'o-mat-error' : '';
        return `${super.getTooltipClass()} ${errorClass}`;
    }
    getTooltipText() {
        const liteError = this.errorOptions.type === Codes.O_MAT_ERROR_LITE;
        if (liteError && Util.isDefined(this._fControl.errors)) {
            let errorsText = [];
            if (this.oMatErrorChildren && this.oMatErrorChildren.length > 0) {
                errorsText.push(...this.oMatErrorChildren
                    .filter((oMatError) => Util.isDefined(oMatError.text))
                    .map((oMatError) => oMatError.text));
            }
            if (this.errorsData && this.errorsData.length > 0) {
                errorsText.push(...this.errorsData
                    .filter((item) => this.hasError(item.name))
                    .map((item) => item.text));
            }
            return errorsText.join('\n');
        }
        return super.getTooltipText();
    }
    parsePermissions() {
        if (!this.form || !Util.isDefined(this.form.oattr)) {
            return;
        }
        const permissions = this.form.getFormComponentPermissions(this.oattr);
        if (!Util.isDefined(permissions)) {
            return;
        }
        if (permissions.visible === false) {
            this.elRef.nativeElement.remove();
            this.destroy();
        }
        else if (permissions.enabled === false) {
            this.enabled = false;
            if (this.form) {
                this.form.registerFormComponent(this);
            }
        }
        this.permissions = permissions;
    }
    getMutationObserverTarget() {
        let result;
        try {
            result = this.elementRef.nativeElement.getElementsByTagName('input').item(0);
        }
        catch (error) {
        }
        return result;
    }
    setSuffixClass(count) {
        const iconFieldEl = this.elRef.nativeElement.getElementsByClassName('icon-field');
        if (iconFieldEl.length === 1) {
            const classList = [].slice.call(iconFieldEl[0].classList);
            classList.forEach(className => {
                if (className.startsWith('icon-field-')) {
                    iconFieldEl[0].classList.remove(className);
                }
            });
            if (count > 0) {
                const matSuffixClass = `icon-field-${count}-suffix`;
                iconFieldEl[0].classList.add(matSuffixClass);
            }
        }
    }
    disableFormControl() {
        const control = this.getFormControl();
        control.disable({
            onlySelf: true,
            emitEvent: false
        });
    }
}
OFormDataComponent.propDecorators = {
    hostWidth: [{ type: HostBinding, args: ['style.width',] }],
    handleClick: [{ type: HostListener, args: ['click', [],] }],
    _matSuffixList: [{ type: ViewChildren, args: [MatSuffix,] }],
    validatorChildren: [{ type: ContentChildren, args: [OValidatorComponent,] }],
    oMatErrorChildren: [{ type: ViewChildren, args: [OMatErrorDirective,] }],
    _errorChildren: [{ type: ContentChildren, args: [MatError,] }]
};
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OFormDataComponent.prototype, "autoBinding", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OFormDataComponent.prototype, "autoRegistering", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OFormDataComponent.prototype, "clearButton", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OFormDataComponent.prototype, "hideRequiredMarker", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OFormDataComponent.prototype, "labelVisible", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OFormDataComponent.prototype, "selectAllOnClick", void 0);
//# sourceMappingURL=data:application/json;base64,