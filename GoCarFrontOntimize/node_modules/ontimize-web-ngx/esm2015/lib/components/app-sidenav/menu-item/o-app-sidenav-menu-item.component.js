import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, Injector, ViewEncapsulation } from '@angular/core';
import { NavigationEnd, Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { InputConverter } from '../../../decorators/input-converter';
import { OAppLayoutComponent } from '../../../layouts/app-layout/o-app-layout.component';
import { AppMenuService } from '../../../services/app-menu.service';
import { AuthService } from '../../../services/auth.service';
import { DialogService } from '../../../services/dialog.service';
import { OUserInfoService } from '../../../services/o-user-info.service';
import { PermissionsService } from '../../../services/permissions/permissions.service';
import { OTranslateService } from '../../../services/translate/o-translate.service';
import { PermissionsUtils } from '../../../util/permissions';
import { Util } from '../../../util/util';
import { OAppSidenavComponent } from '../o-app-sidenav.component';
export const DEFAULT_INPUTS_O_APP_SIDENAV_MENU_ITEM = [
    'menuItem : menu-item',
    'menuItemType : menu-item-type',
    'sidenavOpened : sidenav-opened',
    'disabled'
];
export const DEFAULT_OUTPUTS_O_APP_SIDENAV_MENU_ITEM = [
    'onClick'
];
export class OAppSidenavMenuItemComponent {
    constructor(injector, elRef, cd) {
        this.injector = injector;
        this.elRef = elRef;
        this.cd = cd;
        this.onClick = new EventEmitter();
        this.sidenavOpened = true;
        this.disabled = false;
        this.appSidenavToggleSubscription = new Subscription();
        this.translateService = this.injector.get(OTranslateService);
        this.authService = this.injector.get(AuthService);
        this.dialogService = this.injector.get(DialogService);
        this.permissionsService = this.injector.get(PermissionsService);
        this.oUserInfoService = this.injector.get(OUserInfoService);
        this.sidenav = this.injector.get(OAppSidenavComponent);
        this.oAppLayoutComponent = this.injector.get(OAppLayoutComponent);
        this.router = this.injector.get(Router);
        this.appMenuService = this.injector.get(AppMenuService);
        this.routerSubscription = this.router.events.subscribe((event) => {
            if (event instanceof NavigationEnd && this.appMenuService.isRouteItem(this.menuItem)) {
                this.active = this.appMenuService.isItemActive(this.menuItem);
                this.cd.detectChanges();
            }
        });
    }
    ngOnInit() {
        this.parsePermissions();
        this.active = this.appMenuService.isItemActive(this.menuItem);
    }
    ngAfterViewInit() {
        if (this.isUserInfoItem() && this.sidenav) {
            this.setUserInfoImage();
            this.appSidenavToggleSubscription.add(this.sidenav.onSidenavOpenedChange.subscribe(() => {
                if (this.sidenav.sidenav.opened) {
                    this.setUserInfoImage();
                    this.setUserInfoImage();
                }
            }));
            this.userInfoSubscription = this.oUserInfoService.getUserInfoObservable().subscribe(res => {
                if (Util.isDefined(res.avatar) && this.sidenav.sidenav.opened) {
                    this.menuItem.avatar = res.avatar;
                    this.setUserInfoImage();
                }
            });
        }
    }
    ngOnDestroy() {
        if (this.appSidenavToggleSubscription) {
            this.appSidenavToggleSubscription.unsubscribe();
        }
        if (this.routerSubscription) {
            this.routerSubscription.unsubscribe();
        }
        if (this.mutationObserver) {
            this.mutationObserver.disconnect();
        }
        if (this.userInfoSubscription) {
            this.userInfoSubscription.unsubscribe();
        }
    }
    parsePermissions() {
        this.permissions = this.permissionsService.getMenuPermissions(this.menuItem.id);
        if (!Util.isDefined(this.permissions)) {
            return;
        }
        this.hidden = this.permissions.visible === false;
        if (!this.disabled) {
            this.disabled = this.permissions.enabled === false;
        }
        if (this.disabled) {
            this.mutationObserver = PermissionsUtils.registerDisabledChangesInDom(this.elRef.nativeElement, {
                checkStringValue: true
            });
        }
    }
    setUserInfoImage() {
        const imgEl = this.elRef.nativeElement.getElementsByClassName('o-user-info-image')[0];
        if (imgEl !== undefined) {
            const item = this.menuItem;
            imgEl.setAttribute('style', 'background-image: url(\'' + item.avatar + '\')');
        }
        this.cd.detectChanges();
    }
    executeItemAction() {
        const actionItem = this.menuItem;
        if (Util.parseBoolean(actionItem.confirm, false)) {
            this.dialogService.confirm('CONFIRM', actionItem.confirmText || 'MESSAGES.CONFIRM_ACTION').then(result => result ? actionItem.action() : null);
        }
        else {
            actionItem.action();
        }
    }
    configureI18n() {
        const localeItem = this.menuItem;
        if (this.isConfiguredLang()) {
            return;
        }
        if (this.translateService) {
            this.translateService.use(localeItem.locale);
        }
    }
    isConfiguredLang() {
        const localeItem = this.menuItem;
        if (this.translateService) {
            return (this.translateService.getCurrentLang() === localeItem.locale);
        }
        return false;
    }
    logout() {
        const menuItem = this.menuItem;
        if (Util.parseBoolean(menuItem.confirm, true)) {
            this.authService.logoutWithConfirmation();
        }
        else {
            this.authService.logout();
        }
    }
    navigate() {
        const route = this.menuItem.route;
        if (this.router.url !== route) {
            this.router.navigate([route]);
        }
    }
    triggerClick(e) {
        if (this.disabled) {
            return;
        }
        this.appMenuService.onClick.next();
        switch (this.menuItemType) {
            case 'action':
                this.executeItemAction();
                break;
            case 'locale':
                this.configureI18n();
                break;
            case 'logout':
                this.logout();
                break;
            default:
                if (this.appMenuService.isRouteItem(this.menuItem)) {
                    this.navigate();
                }
                break;
        }
        this.onClick.emit(e);
    }
    isActionItem() {
        return this.menuItemType === 'action';
    }
    isLocaleItem() {
        return this.menuItemType === 'locale';
    }
    isLogoutItem() {
        return this.menuItemType === 'logout';
    }
    isUserInfoItem() {
        return this.menuItemType === 'user-info';
    }
    isDefaultItem() {
        return this.menuItemType === 'default';
    }
    get useFlagIcons() {
        return this.oAppLayoutComponent && this.oAppLayoutComponent.useFlagIcons;
    }
    get tooltip() {
        let result = this.translateService.get(this.menuItem.name);
        if (Util.isDefined(this.menuItem.tooltip)) {
            result += ': ' + this.translateService.get(this.menuItem.tooltip);
        }
        return result;
    }
    getClass() {
        let className = 'o-app-sidenav-menu-item';
        if (this.menuItem.class) {
            className += ' ' + this.menuItem.class;
        }
        return className;
    }
}
OAppSidenavMenuItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-app-sidenav-menu-item',
                inputs: DEFAULT_INPUTS_O_APP_SIDENAV_MENU_ITEM,
                outputs: DEFAULT_OUTPUTS_O_APP_SIDENAV_MENU_ITEM,
                template: "<ng-container *ngIf=\"sidenavOpened\">\n  <li *ngIf=\"!hidden\" class=\"o-app-sidenav-menuitem o-app-sidenav-item\" [class.o-user-info]=\"isUserInfoItem()\">\n\n    <a mat-button *ngIf=\"!isUserInfoItem() && !isLocaleItem()\" (click)=\"triggerClick($event)\"\n      [class.o-app-sidenav-viewer-sidenav-item-selected]=\"active\">\n      <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n        <mat-icon *ngIf=\"menuItem.icon\">{{ menuItem.icon }}</mat-icon>\n        <span class=\"o-app-sidenav-menuitem-title\">{{ menuItem.name | oTranslate }}</span>\n      </div>\n    </a>\n\n    <a mat-button *ngIf=\"isLocaleItem()\" (click)=\"triggerClick($event)\">\n      <div fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n        <mat-icon *ngIf=\"menuItem.icon\">{{ menuItem.icon }}</mat-icon>\n        {{ menuItem.name | oTranslate }}\n        <mat-icon *ngIf=\"isConfiguredLang()\" class=\"configured-lang\">check_circle</mat-icon>\n      </div>\n    </a>\n\n    <div *ngIf=\"isUserInfoItem()\" fxLayout=\"column\" fxLayoutAlign=\"center center\" class=\"o-user-info-menu-item\">\n      <div class=\"o-user-info-image\" fxFlexFill></div>\n      <div class=\"o-user-info-item\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\" fxFlexFill>\n        <div class=\"o-user-info-name\">{{ menuItem.user }} </div>\n        <o-language-selector [use-flag-icons]=\"useFlagIcons\"></o-language-selector>\n      </div>\n    </div>\n  </li>\n</ng-container>\n\n<ng-container *ngIf=\"!sidenavOpened\">\n  <li *ngIf=\"!hidden\" class=\"o-app-sidenav-menuitem o-app-sidenav-item\">\n    <a [matTooltip]=\"tooltip\" matTooltipClass=\"menuitem-tooltip\" matTooltipPosition=\"right\" mat-button (click)=\"triggerClick($event)\"\n      [class.o-app-sidenav-viewer-sidenav-item-selected]=\"active\">\n      <mat-icon *ngIf=\"menuItem.icon\">{{ menuItem.icon }}</mat-icon>\n    </a>\n  </li>\n</ng-container>",
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                host: {
                    '[class]': 'getClass()',
                    '[attr.disabled]': 'disabled'
                },
                styles: [".o-app-sidenav-menu-item .o-user-info-menu-item{cursor:default}.o-app-sidenav-menu-item .o-user-info-menu-item .o-user-info-image{background-repeat:no-repeat;background-position:center;background-size:cover;width:100%;height:200px!important}.o-app-sidenav-menu-item .o-user-info-menu-item .o-user-info-item{padding:0 8px 0 16px}.o-app-sidenav-menu-item .o-user-info-menu-item .o-user-info-name{text-transform:uppercase;font-weight:600}"]
            }] }
];
OAppSidenavMenuItemComponent.ctorParameters = () => [
    { type: Injector },
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OAppSidenavMenuItemComponent.prototype, "sidenavOpened", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OAppSidenavMenuItemComponent.prototype, "disabled", void 0);
//# sourceMappingURL=data:application/json;base64,