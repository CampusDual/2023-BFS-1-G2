import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Injector, ViewEncapsulation } from '@angular/core';
import { merge, Subscription } from 'rxjs';
import { OAppSidenavComponent } from '../o-app-sidenav.component';
export const DEFAULT_INPUTS_O_APP_SIDENAV_IMAGE = [
    'openedSrc: opened-src',
    'closedSrc: closed-src'
];
export const DEFAULT_OUTPUTS_O_APP_SIDENAV_IMAGE = [];
export class OAppSidenavImageComponent {
    constructor(injector, cd) {
        this.injector = injector;
        this.cd = cd;
        this.subscription = new Subscription();
        this.sidenav = this.injector.get(OAppSidenavComponent);
    }
    ngOnInit() {
        if (this.sidenav) {
            this.subscription.add(merge(this.sidenav.onSidenavClosedStart, this.sidenav.onSidenavOpenedStart).subscribe(() => this.updateImage()));
        }
        this.updateImage();
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
    ngOnChanges(changes) {
        if (changes.openedSrc || changes.closedSrc) {
            this.updateImage();
        }
    }
    updateImage() {
        if (this.sidenav && this.sidenav.sidenav && this.sidenav.sidenav.opened) {
            this.setOpenedImg();
        }
        else {
            this.setClosedImg();
        }
        this.cd.detectChanges();
    }
    set src(val) {
        this._src = val;
    }
    get src() {
        return this._src;
    }
    setOpenedImg() {
        this.src = this.openedSrc;
    }
    setClosedImg() {
        this.src = this.closedSrc;
    }
    get showImage() {
        return (this._src !== undefined && this._src.length > 0);
    }
}
OAppSidenavImageComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-app-sidenav-image',
                inputs: DEFAULT_INPUTS_O_APP_SIDENAV_IMAGE,
                outputs: DEFAULT_OUTPUTS_O_APP_SIDENAV_IMAGE,
                template: "<div class=\"o-app-sidenav-image-container\" *ngIf=\"showImage\">\n  <img class=\"o-app-sidenav-image\" [src]=\"src\" alt=\"application sidenav image\" />\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                host: {
                    '[class.o-app-sidenav-image]': 'true'
                },
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".sidenav-toggle-container+.o-app-sidenav-image .o-app-sidenav-image-container{padding-top:0;text-align:center}.mat-drawer-opened .o-app-sidenav-image .o-app-sidenav-image-container{text-align:center}.o-app-sidenav-image .o-app-sidenav-image-container{max-height:75px;margin:24px 0}.o-app-sidenav-image .o-app-sidenav-image-container .o-app-sidenav-image{max-width:100%;max-height:100%}"]
            }] }
];
OAppSidenavImageComponent.ctorParameters = () => [
    { type: Injector },
    { type: ChangeDetectorRef }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1hcHAtc2lkZW5hdi1pbWFnZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9vbnRpbWl6ZS13ZWItbmd4LyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvYXBwLXNpZGVuYXYvaW1hZ2Uvby1hcHAtc2lkZW5hdi1pbWFnZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQStDLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2hLLE9BQU8sRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRWxFLE1BQU0sQ0FBQyxNQUFNLGtDQUFrQyxHQUFHO0lBQ2hELHVCQUF1QjtJQUN2Qix1QkFBdUI7Q0FDeEIsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLG1DQUFtQyxHQUFHLEVBQUUsQ0FBQztBQWN0RCxNQUFNLE9BQU8seUJBQXlCO0lBU3BDLFlBQ1ksUUFBa0IsRUFDbEIsRUFBcUI7UUFEckIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUNsQixPQUFFLEdBQUYsRUFBRSxDQUFtQjtRQUp2QixpQkFBWSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFNMUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFFRCxRQUFRO1FBQ04sSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLG9CQUFvQixFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUN4STtRQUNELElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDbEMsQ0FBQztJQUVELFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxJQUFJLE9BQU8sQ0FBQyxTQUFTLElBQUksT0FBTyxDQUFDLFNBQVMsRUFBRTtZQUMxQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDcEI7SUFDSCxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUU7WUFDdkUsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1NBQ3JCO2FBQU07WUFDTCxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7U0FDckI7UUFDRCxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFFRCxJQUFJLEdBQUcsQ0FBQyxHQUFXO1FBQ2pCLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO0lBQ2xCLENBQUM7SUFFRCxJQUFJLEdBQUc7UUFDTCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDbkIsQ0FBQztJQUVELFlBQVk7UUFDVixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDNUIsQ0FBQztJQUVELFlBQVk7UUFDVixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDNUIsQ0FBQztJQUVELElBQUksU0FBUztRQUNYLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLFNBQVMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztJQUMzRCxDQUFDOzs7WUF4RUYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxxQkFBcUI7Z0JBQy9CLE1BQU0sRUFBRSxrQ0FBa0M7Z0JBQzFDLE9BQU8sRUFBRSxtQ0FBbUM7Z0JBQzVDLGdMQUFtRDtnQkFFbkQsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7Z0JBQ3JDLElBQUksRUFBRTtvQkFDSiw2QkFBNkIsRUFBRSxNQUFNO2lCQUN0QztnQkFDRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTs7YUFDaEQ7OztZQXZCK0QsUUFBUTtZQUF0QyxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgSW5qZWN0b3IsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBPbkluaXQsIFNpbXBsZUNoYW5nZXMsIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBtZXJnZSwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IE9BcHBTaWRlbmF2Q29tcG9uZW50IH0gZnJvbSAnLi4vby1hcHAtc2lkZW5hdi5jb21wb25lbnQnO1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9JTlBVVFNfT19BUFBfU0lERU5BVl9JTUFHRSA9IFtcbiAgJ29wZW5lZFNyYzogb3BlbmVkLXNyYycsXG4gICdjbG9zZWRTcmM6IGNsb3NlZC1zcmMnXG5dO1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9PVVRQVVRTX09fQVBQX1NJREVOQVZfSU1BR0UgPSBbXTtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnby1hcHAtc2lkZW5hdi1pbWFnZScsXG4gIGlucHV0czogREVGQVVMVF9JTlBVVFNfT19BUFBfU0lERU5BVl9JTUFHRSxcbiAgb3V0cHV0czogREVGQVVMVF9PVVRQVVRTX09fQVBQX1NJREVOQVZfSU1BR0UsXG4gIHRlbXBsYXRlVXJsOiAnLi9vLWFwcC1zaWRlbmF2LWltYWdlLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vby1hcHAtc2lkZW5hdi1pbWFnZS5jb21wb25lbnQuc2NzcyddLFxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICBob3N0OiB7XG4gICAgJ1tjbGFzcy5vLWFwcC1zaWRlbmF2LWltYWdlXSc6ICd0cnVlJ1xuICB9LFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBPQXBwU2lkZW5hdkltYWdlQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3ksIE9uQ2hhbmdlcyB7XG5cbiAgcHJvdGVjdGVkIHNpZGVuYXY6IE9BcHBTaWRlbmF2Q29tcG9uZW50O1xuICBwcm90ZWN0ZWQgb3BlbmVkU3JjOiBzdHJpbmc7XG4gIHByb3RlY3RlZCBjbG9zZWRTcmM6IHN0cmluZztcbiAgcHJpdmF0ZSBfc3JjOiBzdHJpbmc7XG5cbiAgcHJvdGVjdGVkIHN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24oKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgaW5qZWN0b3I6IEluamVjdG9yLFxuICAgIHByb3RlY3RlZCBjZDogQ2hhbmdlRGV0ZWN0b3JSZWZcbiAgKSB7XG4gICAgdGhpcy5zaWRlbmF2ID0gdGhpcy5pbmplY3Rvci5nZXQoT0FwcFNpZGVuYXZDb21wb25lbnQpO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgaWYgKHRoaXMuc2lkZW5hdikge1xuICAgICAgdGhpcy5zdWJzY3JpcHRpb24uYWRkKG1lcmdlKHRoaXMuc2lkZW5hdi5vblNpZGVuYXZDbG9zZWRTdGFydCwgdGhpcy5zaWRlbmF2Lm9uU2lkZW5hdk9wZW5lZFN0YXJ0KS5zdWJzY3JpYmUoKCkgPT4gdGhpcy51cGRhdGVJbWFnZSgpKSk7XG4gICAgfVxuICAgIHRoaXMudXBkYXRlSW1hZ2UoKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgaWYgKGNoYW5nZXMub3BlbmVkU3JjIHx8IGNoYW5nZXMuY2xvc2VkU3JjKSB7XG4gICAgICB0aGlzLnVwZGF0ZUltYWdlKCk7XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlSW1hZ2UoKSB7XG4gICAgaWYgKHRoaXMuc2lkZW5hdiAmJiB0aGlzLnNpZGVuYXYuc2lkZW5hdiAmJiB0aGlzLnNpZGVuYXYuc2lkZW5hdi5vcGVuZWQpIHtcbiAgICAgIHRoaXMuc2V0T3BlbmVkSW1nKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0Q2xvc2VkSW1nKCk7XG4gICAgfVxuICAgIHRoaXMuY2QuZGV0ZWN0Q2hhbmdlcygpO1xuICB9XG5cbiAgc2V0IHNyYyh2YWw6IHN0cmluZykge1xuICAgIHRoaXMuX3NyYyA9IHZhbDtcbiAgfVxuXG4gIGdldCBzcmMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NyYztcbiAgfVxuXG4gIHNldE9wZW5lZEltZygpIHtcbiAgICB0aGlzLnNyYyA9IHRoaXMub3BlbmVkU3JjO1xuICB9XG5cbiAgc2V0Q2xvc2VkSW1nKCkge1xuICAgIHRoaXMuc3JjID0gdGhpcy5jbG9zZWRTcmM7XG4gIH1cblxuICBnZXQgc2hvd0ltYWdlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAodGhpcy5fc3JjICE9PSB1bmRlZmluZWQgJiYgdGhpcy5fc3JjLmxlbmd0aCA+IDApO1xuICB9XG5cbn1cbiJdfQ==