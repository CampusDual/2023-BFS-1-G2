import { Component, EventEmitter, HostListener, Injector, ViewChild } from '@angular/core';
import { MatMenuTrigger } from '@angular/material';
import { OContextMenuGroupComponent } from '../context-menu-group/o-context-menu-group.component';
export const DEFAULT_CONTEXT_MENU_CONTENT_INPUTS = [
    'menuItems',
    'externalMenuItems',
    'overlay',
    'data',
    'menuClass'
];
export const DEFAULT_CONTEXT_MENU_CONTENT_OUTPUTS = [
    'execute',
    'close'
];
export class OContextMenuContentComponent {
    constructor(injector) {
        this.injector = injector;
        this.execute = new EventEmitter();
        this.close = new EventEmitter();
    }
    click() {
        this.closeContent();
    }
    ngOnInit() {
        this.initialize();
    }
    ngAfterViewInit() {
        this.trigger.openMenu();
    }
    initialize() {
        const menuItemsArray = this.menuItems ? this.menuItems.toArray() : [];
        const externalItemsArray = this.externalMenuItems ? this.externalMenuItems.toArray() : [];
        this.allMenuItems = menuItemsArray.concat(externalItemsArray);
        this.setData(this.allMenuItems);
    }
    setData(items) {
        if (this.data) {
            (items || []).forEach((menuItem) => {
                menuItem.data = this.data;
                if (menuItem instanceof OContextMenuGroupComponent) {
                    this.setData(menuItem.children);
                }
            });
        }
    }
    onMenuClosed(e) {
        this.closeContent();
    }
    closeContent() {
        this.trigger.closeMenu();
        this.close.emit();
    }
}
OContextMenuContentComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-context-menu-content',
                template: "<button mat-button [matMenuTriggerFor]=\"menu.childMenu\" (menuClosed)=\"onMenuClosed($event)\"></button>\n<o-wrapper-content-menu #menu [items]=\"allMenuItems\" [class]=\"menuClass\"> </o-wrapper-content-menu>",
                inputs: DEFAULT_CONTEXT_MENU_CONTENT_INPUTS,
                outputs: DEFAULT_CONTEXT_MENU_CONTENT_OUTPUTS,
                host: {
                    '[class.o-context-menu-content]': 'true'
                }
            }] }
];
OContextMenuContentComponent.ctorParameters = () => [
    { type: Injector }
];
OContextMenuContentComponent.propDecorators = {
    trigger: [{ type: ViewChild, args: [MatMenuTrigger, { static: false },] }],
    click: [{ type: HostListener, args: ['document:click',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1jb250ZXh0LW1lbnUtY29udGVudC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9vbnRpbWl6ZS13ZWItbmd4LyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvY29udGV4dG1lbnUvY29udGV4dC1tZW51L28tY29udGV4dC1tZW51LWNvbnRlbnQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBaUIsU0FBUyxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsUUFBUSxFQUFxQixTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0gsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRW5ELE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLHNEQUFzRCxDQUFDO0FBSWxHLE1BQU0sQ0FBQyxNQUFNLG1DQUFtQyxHQUFHO0lBQ2pELFdBQVc7SUFDWCxtQkFBbUI7SUFDbkIsU0FBUztJQUNULE1BQU07SUFDTixXQUFXO0NBQ1osQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLG9DQUFvQyxHQUFHO0lBQ2xELFNBQVM7SUFDVCxPQUFPO0NBQ1IsQ0FBQztBQVdGLE1BQU0sT0FBTyw0QkFBNEI7SUFhdkMsWUFDWSxRQUFrQjtRQUFsQixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBUHZCLFlBQU8sR0FBbUYsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUM3RyxVQUFLLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7SUFPakQsQ0FBQztJQUdFLEtBQUs7UUFDVixJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUVNLFFBQVE7UUFDYixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDcEIsQ0FBQztJQUVNLGVBQWU7UUFDcEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBR00sVUFBVTtRQUNmLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUN0RSxNQUFNLGtCQUFrQixHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDMUYsSUFBSSxDQUFDLFlBQVksR0FBRyxjQUFjLENBQUMsTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFDOUQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVNLE9BQU8sQ0FBQyxLQUErQjtRQUM1QyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDYixDQUFDLEtBQUssSUFBSSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFnQyxFQUFFLEVBQUU7Z0JBQ3pELFFBQVEsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztnQkFDMUIsSUFBSSxRQUFRLFlBQVksMEJBQTBCLEVBQUU7b0JBQ2xELElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2lCQUNqQztZQUNILENBQUMsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDO0lBRU0sWUFBWSxDQUFDLENBQVE7UUFDMUIsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFFTSxZQUFZO1FBQ2pCLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDekIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNwQixDQUFDOzs7WUFqRUYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSx3QkFBd0I7Z0JBQ2xDLDhOQUFvRDtnQkFDcEQsTUFBTSxFQUFFLG1DQUFtQztnQkFDM0MsT0FBTyxFQUFFLG9DQUFvQztnQkFDN0MsSUFBSSxFQUFFO29CQUNKLGdDQUFnQyxFQUFFLE1BQU07aUJBQ3pDO2FBQ0Y7OztZQTVCOEQsUUFBUTs7O3NCQXNDcEUsU0FBUyxTQUFDLGNBQWMsRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUU7b0JBUTNDLFlBQVksU0FBQyxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPdmVybGF5UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xuaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIEhvc3RMaXN0ZW5lciwgSW5qZWN0b3IsIE9uSW5pdCwgUXVlcnlMaXN0LCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1hdE1lbnVUcmlnZ2VyIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwnO1xuXG5pbXBvcnQgeyBPQ29udGV4dE1lbnVHcm91cENvbXBvbmVudCB9IGZyb20gJy4uL2NvbnRleHQtbWVudS1ncm91cC9vLWNvbnRleHQtbWVudS1ncm91cC5jb21wb25lbnQnO1xuaW1wb3J0IHsgT0NvbnRleHRNZW51SXRlbUNvbXBvbmVudCB9IGZyb20gJy4uL2NvbnRleHQtbWVudS1pdGVtL28tY29udGV4dC1tZW51LWl0ZW0uY29tcG9uZW50JztcbmltcG9ydCB7IE9Db21wb25lbnRNZW51QmFzZUl0ZW0gfSBmcm9tICcuLi9vLWNvbnRlbnQtbWVudS1iYXNlLWl0ZW0uY2xhc3MnO1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9DT05URVhUX01FTlVfQ09OVEVOVF9JTlBVVFMgPSBbXG4gICdtZW51SXRlbXMnLFxuICAnZXh0ZXJuYWxNZW51SXRlbXMnLFxuICAnb3ZlcmxheScsXG4gICdkYXRhJyxcbiAgJ21lbnVDbGFzcydcbl07XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX0NPTlRFWFRfTUVOVV9DT05URU5UX09VVFBVVFMgPSBbXG4gICdleGVjdXRlJyxcbiAgJ2Nsb3NlJ1xuXTtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnby1jb250ZXh0LW1lbnUtY29udGVudCcsXG4gIHRlbXBsYXRlVXJsOiAnby1jb250ZXh0LW1lbnUtY29udGVudC5jb21wb25lbnQuaHRtbCcsXG4gIGlucHV0czogREVGQVVMVF9DT05URVhUX01FTlVfQ09OVEVOVF9JTlBVVFMsXG4gIG91dHB1dHM6IERFRkFVTFRfQ09OVEVYVF9NRU5VX0NPTlRFTlRfT1VUUFVUUyxcbiAgaG9zdDoge1xuICAgICdbY2xhc3Muby1jb250ZXh0LW1lbnUtY29udGVudF0nOiAndHJ1ZSdcbiAgfVxufSlcbmV4cG9ydCBjbGFzcyBPQ29udGV4dE1lbnVDb250ZW50Q29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25Jbml0IHtcblxuICBwdWJsaWMgbWVudUl0ZW1zOiBRdWVyeUxpc3Q8T0NvbXBvbmVudE1lbnVCYXNlSXRlbT47XG4gIHB1YmxpYyBleHRlcm5hbE1lbnVJdGVtczogUXVlcnlMaXN0PE9Db21wb25lbnRNZW51QmFzZUl0ZW0+O1xuICBwdWJsaWMgb3ZlcmxheTogT3ZlcmxheVJlZjtcbiAgcHVibGljIGRhdGE6IGFueTtcbiAgcHVibGljIG1lbnVDbGFzczogc3RyaW5nO1xuICBwdWJsaWMgZXhlY3V0ZTogRXZlbnRFbWl0dGVyPHsgZXZlbnQ6IEV2ZW50LCBkYXRhOiBhbnksIG1lbnVJdGVtOiBPQ29udGV4dE1lbnVJdGVtQ29tcG9uZW50IH0+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBwdWJsaWMgY2xvc2U6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBAVmlld0NoaWxkKE1hdE1lbnVUcmlnZ2VyLCB7IHN0YXRpYzogZmFsc2UgfSlcbiAgcHVibGljIHRyaWdnZXI6IE1hdE1lbnVUcmlnZ2VyO1xuICBwdWJsaWMgYWxsTWVudUl0ZW1zOiBPQ29tcG9uZW50TWVudUJhc2VJdGVtW107XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIGluamVjdG9yOiBJbmplY3RvclxuICApIHsgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2RvY3VtZW50OmNsaWNrJylcbiAgcHVibGljIGNsaWNrKCk6IHZvaWQge1xuICAgIHRoaXMuY2xvc2VDb250ZW50KCk7XG4gIH1cblxuICBwdWJsaWMgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5pbml0aWFsaXplKCk7XG4gIH1cblxuICBwdWJsaWMgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgIHRoaXMudHJpZ2dlci5vcGVuTWVudSgpO1xuICB9XG5cblxuICBwdWJsaWMgaW5pdGlhbGl6ZSgpOiB2b2lkIHtcbiAgICBjb25zdCBtZW51SXRlbXNBcnJheSA9IHRoaXMubWVudUl0ZW1zID8gdGhpcy5tZW51SXRlbXMudG9BcnJheSgpIDogW107XG4gICAgY29uc3QgZXh0ZXJuYWxJdGVtc0FycmF5ID0gdGhpcy5leHRlcm5hbE1lbnVJdGVtcyA/IHRoaXMuZXh0ZXJuYWxNZW51SXRlbXMudG9BcnJheSgpIDogW107XG4gICAgdGhpcy5hbGxNZW51SXRlbXMgPSBtZW51SXRlbXNBcnJheS5jb25jYXQoZXh0ZXJuYWxJdGVtc0FycmF5KTtcbiAgICB0aGlzLnNldERhdGEodGhpcy5hbGxNZW51SXRlbXMpO1xuICB9XG5cbiAgcHVibGljIHNldERhdGEoaXRlbXM6IE9Db21wb25lbnRNZW51QmFzZUl0ZW1bXSk6IHZvaWQge1xuICAgIGlmICh0aGlzLmRhdGEpIHtcbiAgICAgIChpdGVtcyB8fCBbXSkuZm9yRWFjaCgobWVudUl0ZW06IE9Db21wb25lbnRNZW51QmFzZUl0ZW0pID0+IHtcbiAgICAgICAgbWVudUl0ZW0uZGF0YSA9IHRoaXMuZGF0YTtcbiAgICAgICAgaWYgKG1lbnVJdGVtIGluc3RhbmNlb2YgT0NvbnRleHRNZW51R3JvdXBDb21wb25lbnQpIHtcbiAgICAgICAgICB0aGlzLnNldERhdGEobWVudUl0ZW0uY2hpbGRyZW4pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgb25NZW51Q2xvc2VkKGU6IEV2ZW50KTogdm9pZCB7XG4gICAgdGhpcy5jbG9zZUNvbnRlbnQoKTtcbiAgfVxuXG4gIHB1YmxpYyBjbG9zZUNvbnRlbnQoKTogdm9pZCB7XG4gICAgdGhpcy50cmlnZ2VyLmNsb3NlTWVudSgpO1xuICAgIHRoaXMuY2xvc2UuZW1pdCgpO1xuICB9XG5cbn1cbiJdfQ==