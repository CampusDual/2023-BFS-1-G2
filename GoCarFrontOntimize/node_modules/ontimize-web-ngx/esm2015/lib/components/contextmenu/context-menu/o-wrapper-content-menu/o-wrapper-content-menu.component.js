import { Component, Injector, Input, ViewChild } from '@angular/core';
import { MatMenu } from '@angular/material/menu';
import { OContextMenuGroupComponent } from '../../context-menu-group/o-context-menu-group.component';
import { OContextMenuItemComponent } from '../../context-menu-item/o-context-menu-item.component';
import { OContextMenuSeparatorComponent } from '../../context-menu-separator/o-context-menu-separator.component';
export const DEFAULT_CONTEXT_MENU_CONTENT_ITEM_INPUTS = [
    'items',
    'class'
];
export class OWrapperContentMenuComponent {
    constructor(injector) {
        this.injector = injector;
    }
    onClick(item, event) {
        if (item instanceof OContextMenuItemComponent) {
            item.triggerExecute(item.data, event);
        }
    }
    isGroup(item) {
        return item instanceof OContextMenuGroupComponent;
    }
    isSeparator(item) {
        return item instanceof OContextMenuSeparatorComponent;
    }
    isItem(item) {
        return item instanceof OContextMenuItemComponent;
    }
    getChildren(item) {
        return item instanceof OContextMenuGroupComponent ? item.children : [];
    }
}
OWrapperContentMenuComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-wrapper-content-menu',
                template: "<mat-menu #childMenu=\"matMenu\" [class]=\"class\" [overlapTrigger]=\"false\" [hasBackdrop]=\"false\">\n  <ng-container *ngFor=\"let child of items\">\n    <!-- Handle branch node menu items -->\n    <span *ngIf=\"isGroup(child) && child.isVisible\">\n      <button mat-menu-item color=\"primary\" [matMenuTriggerFor]=\"menu.childMenu\" [disabled]=\"child.disabled\">\n        <mat-icon *ngIf=\"child.svgIcon != null\" [svgIcon]=\"child.svgIcon\"></mat-icon>\n        <mat-icon *ngIf=\"child.svgIcon == null && child.icon != null\">{{ child.icon }}</mat-icon>\n        <span>{{ child.label | oTranslate}}</span>\n      </button>\n      <o-wrapper-content-menu #menu [items]=\"getChildren(child)\" [class]=\"class\"></o-wrapper-content-menu>\n    </span>\n    <!-- Handle leaf node menu items -->\n    <button mat-menu-item (click)=\"onClick(child, $event)\" [disabled]=\"child.disabled\" *ngIf=\"isItem(child) && child.isVisible\">\n      <mat-icon *ngIf=\"child.svgIcon != null\" [svgIcon]=\"child.svgIcon\"></mat-icon>\n      <mat-icon *ngIf=\"child.svgIcon == null && child.icon != null\">{{ child.icon }}</mat-icon>\n      <span>{{ child.label | oTranslate}} </span>\n    </button>\n    <!-- separator leaf node menu items -->\n    <mat-divider *ngIf=\"isSeparator(child) && child.isVisible\"></mat-divider>\n  </ng-container>\n</mat-menu>\n",
                inputs: DEFAULT_CONTEXT_MENU_CONTENT_ITEM_INPUTS,
                styles: ["mat-divider.mat-divider:first-child,mat-divider.mat-divider:last-child{display:none}.mat-icon{display:inline-flex}"]
            }] }
];
OWrapperContentMenuComponent.ctorParameters = () => [
    { type: Injector }
];
OWrapperContentMenuComponent.propDecorators = {
    items: [{ type: Input }],
    childMenu: [{ type: ViewChild, args: ['childMenu', { static: true },] }],
    menu: [{ type: ViewChild, args: [OWrapperContentMenuComponent, { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby13cmFwcGVyLWNvbnRlbnQtbWVudS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9vbnRpbWl6ZS13ZWItbmd4LyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvY29udGV4dG1lbnUvY29udGV4dC1tZW51L28td3JhcHBlci1jb250ZW50LW1lbnUvby13cmFwcGVyLWNvbnRlbnQtbWVudS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN0RSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFakQsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0seURBQXlELENBQUM7QUFDckcsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sdURBQXVELENBQUM7QUFDbEcsT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0saUVBQWlFLENBQUM7QUFHakgsTUFBTSxDQUFDLE1BQU0sd0NBQXdDLEdBQUc7SUFDdEQsT0FBTztJQUNQLE9BQU87Q0FDUixDQUFDO0FBUUYsTUFBTSxPQUFPLDRCQUE0QjtJQWF2QyxZQUNZLFFBQWtCO1FBQWxCLGFBQVEsR0FBUixRQUFRLENBQVU7SUFDMUIsQ0FBQztJQUVFLE9BQU8sQ0FBQyxJQUE0QixFQUFFLEtBQU07UUFDakQsSUFBSSxJQUFJLFlBQVkseUJBQXlCLEVBQUU7WUFDN0MsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQ3ZDO0lBQ0gsQ0FBQztJQUVNLE9BQU8sQ0FBQyxJQUE0QjtRQUN6QyxPQUFPLElBQUksWUFBWSwwQkFBMEIsQ0FBQztJQUNwRCxDQUFDO0lBRU0sV0FBVyxDQUFDLElBQTRCO1FBQzdDLE9BQU8sSUFBSSxZQUFZLDhCQUE4QixDQUFDO0lBQ3hELENBQUM7SUFFTSxNQUFNLENBQUMsSUFBNEI7UUFDeEMsT0FBTyxJQUFJLFlBQVkseUJBQXlCLENBQUM7SUFDbkQsQ0FBQztJQUVNLFdBQVcsQ0FBQyxJQUE0QjtRQUM3QyxPQUFPLElBQUksWUFBWSwwQkFBMEIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQ3pFLENBQUM7OztZQTNDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHdCQUF3QjtnQkFDbEMsNjBDQUFvRDtnQkFFcEQsTUFBTSxFQUFFLHdDQUF3Qzs7YUFDakQ7OztZQWxCbUIsUUFBUTs7O29CQXVCekIsS0FBSzt3QkFHTCxTQUFTLFNBQUMsV0FBVyxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTttQkFHdkMsU0FBUyxTQUFDLDRCQUE0QixFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5qZWN0b3IsIElucHV0LCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1hdE1lbnUgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9tZW51JztcblxuaW1wb3J0IHsgT0NvbnRleHRNZW51R3JvdXBDb21wb25lbnQgfSBmcm9tICcuLi8uLi9jb250ZXh0LW1lbnUtZ3JvdXAvby1jb250ZXh0LW1lbnUtZ3JvdXAuY29tcG9uZW50JztcbmltcG9ydCB7IE9Db250ZXh0TWVudUl0ZW1Db21wb25lbnQgfSBmcm9tICcuLi8uLi9jb250ZXh0LW1lbnUtaXRlbS9vLWNvbnRleHQtbWVudS1pdGVtLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBPQ29udGV4dE1lbnVTZXBhcmF0b3JDb21wb25lbnQgfSBmcm9tICcuLi8uLi9jb250ZXh0LW1lbnUtc2VwYXJhdG9yL28tY29udGV4dC1tZW51LXNlcGFyYXRvci5jb21wb25lbnQnO1xuaW1wb3J0IHsgT0NvbXBvbmVudE1lbnVCYXNlSXRlbSB9IGZyb20gJy4uLy4uL28tY29udGVudC1tZW51LWJhc2UtaXRlbS5jbGFzcyc7XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX0NPTlRFWFRfTUVOVV9DT05URU5UX0lURU1fSU5QVVRTID0gW1xuICAnaXRlbXMnLFxuICAnY2xhc3MnXG5dO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdvLXdyYXBwZXItY29udGVudC1tZW51JyxcbiAgdGVtcGxhdGVVcmw6ICdvLXdyYXBwZXItY29udGVudC1tZW51LmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vby13cmFwcGVyLWNvbnRlbnQtbWVudS5jb21wb25lbnQuc2NzcyddLFxuICBpbnB1dHM6IERFRkFVTFRfQ09OVEVYVF9NRU5VX0NPTlRFTlRfSVRFTV9JTlBVVFNcbn0pXG5leHBvcnQgY2xhc3MgT1dyYXBwZXJDb250ZW50TWVudUNvbXBvbmVudCB7XG5cbiAgcHVibGljIGNsYXNzOiBzdHJpbmc7XG5cbiAgQElucHV0KClcbiAgcHVibGljIGl0ZW1zOiBPQ29tcG9uZW50TWVudUJhc2VJdGVtW107XG5cbiAgQFZpZXdDaGlsZCgnY2hpbGRNZW51JywgeyBzdGF0aWM6IHRydWUgfSlcbiAgcHVibGljIGNoaWxkTWVudTogTWF0TWVudTtcblxuICBAVmlld0NoaWxkKE9XcmFwcGVyQ29udGVudE1lbnVDb21wb25lbnQsIHsgc3RhdGljOiB0cnVlIH0pXG4gIHB1YmxpYyBtZW51OiBPV3JhcHBlckNvbnRlbnRNZW51Q29tcG9uZW50O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCBpbmplY3RvcjogSW5qZWN0b3JcbiAgKSB7IH1cblxuICBwdWJsaWMgb25DbGljayhpdGVtOiBPQ29tcG9uZW50TWVudUJhc2VJdGVtLCBldmVudD8pOiB2b2lkIHtcbiAgICBpZiAoaXRlbSBpbnN0YW5jZW9mIE9Db250ZXh0TWVudUl0ZW1Db21wb25lbnQpIHtcbiAgICAgIGl0ZW0udHJpZ2dlckV4ZWN1dGUoaXRlbS5kYXRhLCBldmVudCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGlzR3JvdXAoaXRlbTogT0NvbXBvbmVudE1lbnVCYXNlSXRlbSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBpdGVtIGluc3RhbmNlb2YgT0NvbnRleHRNZW51R3JvdXBDb21wb25lbnQ7XG4gIH1cblxuICBwdWJsaWMgaXNTZXBhcmF0b3IoaXRlbTogT0NvbXBvbmVudE1lbnVCYXNlSXRlbSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBpdGVtIGluc3RhbmNlb2YgT0NvbnRleHRNZW51U2VwYXJhdG9yQ29tcG9uZW50O1xuICB9XG5cbiAgcHVibGljIGlzSXRlbShpdGVtOiBPQ29tcG9uZW50TWVudUJhc2VJdGVtKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGl0ZW0gaW5zdGFuY2VvZiBPQ29udGV4dE1lbnVJdGVtQ29tcG9uZW50O1xuICB9XG5cbiAgcHVibGljIGdldENoaWxkcmVuKGl0ZW06IE9Db21wb25lbnRNZW51QmFzZUl0ZW0pIHtcbiAgICByZXR1cm4gaXRlbSBpbnN0YW5jZW9mIE9Db250ZXh0TWVudUdyb3VwQ29tcG9uZW50ID8gaXRlbS5jaGlsZHJlbiA6IFtdO1xuICB9XG5cbn1cbiJdfQ==