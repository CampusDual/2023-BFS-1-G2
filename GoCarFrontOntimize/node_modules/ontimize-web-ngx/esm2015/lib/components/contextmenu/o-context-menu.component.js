import { Component, ContentChildren, EventEmitter, Injector, QueryList } from '@angular/core';
import { Subscription } from 'rxjs';
import { OComponentMenuBaseItem } from './o-content-menu-base-item.class';
import { OContextMenuService } from './o-context-menu.service';
export const DEFAULT_OUTPUTS_O_CONTEXT_MENU = [
    'onShow',
    'onClose'
];
export class OContextMenuComponent {
    constructor(injector) {
        this.injector = injector;
        this.onShow = new EventEmitter();
        this.onClose = new EventEmitter();
        this.subscription = new Subscription();
        this.oContextMenuService = this.injector.get(OContextMenuService);
    }
    ngOnInit() {
        this.subscription.add(this.oContextMenuService.showContextMenu.subscribe(param => this.showContextMenu(param)));
        this.subscription.add(this.oContextMenuService.closeContextMenu.subscribe(param => this.onClose.emit()));
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
    showContextMenu(params) {
        this.origin = params.event.target;
        this.onShow.emit(params);
        if (params.contextMenu !== this) {
            return;
        }
        params.menuItems = this.oContextMenuItems;
        params.externalMenuItems = this.externalContextMenuItems;
        if (params.menuItems.length > 0) {
            this.oContextMenuService.openContextMenu(params);
        }
    }
}
OContextMenuComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-context-menu',
                template: ' ',
                outputs: DEFAULT_OUTPUTS_O_CONTEXT_MENU,
                providers: [OContextMenuService]
            }] }
];
OContextMenuComponent.ctorParameters = () => [
    { type: Injector }
];
OContextMenuComponent.propDecorators = {
    oContextMenuItems: [{ type: ContentChildren, args: [OComponentMenuBaseItem,] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1jb250ZXh0LW1lbnUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vb250aW1pemUtd2ViLW5neC8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2NvbnRleHRtZW51L28tY29udGV4dC1tZW51LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRSxZQUFZLEVBQUUsUUFBUSxFQUFxQixTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakgsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUdwQyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUMxRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUUvRCxNQUFNLENBQUMsTUFBTSw4QkFBOEIsR0FBRztJQUM1QyxRQUFRO0lBQ1IsU0FBUztDQUNWLENBQUM7QUFRRixNQUFNLE9BQU8scUJBQXFCO0lBWWhDLFlBQ1ksUUFBa0I7UUFBbEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQVB2QixXQUFNLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7UUFDL0MsWUFBTyxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBRzdDLGlCQUFZLEdBQWlCLElBQUksWUFBWSxFQUFFLENBQUM7UUFLeEQsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFDcEUsQ0FBQztJQUVNLFFBQVE7UUFDYixJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hILElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztJQUMzRyxDQUFDO0lBRU0sV0FBVztRQUNoQixJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ2xDLENBQUM7SUFFTSxlQUFlLENBQUMsTUFBNEI7UUFDakQsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQXFCLENBQUM7UUFDakQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDekIsSUFBSSxNQUFNLENBQUMsV0FBVyxLQUFLLElBQUksRUFBRTtZQUMvQixPQUFPO1NBQ1I7UUFDRCxNQUFNLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztRQUMxQyxNQUFNLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLHdCQUF3QixDQUFDO1FBQ3pELElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQy9CLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDbEQ7SUFDSCxDQUFDOzs7WUE1Q0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxnQkFBZ0I7Z0JBQzFCLFFBQVEsRUFBRSxHQUFHO2dCQUNiLE9BQU8sRUFBRSw4QkFBOEI7Z0JBQ3ZDLFNBQVMsRUFBRSxDQUFDLG1CQUFtQixDQUFDO2FBQ2pDOzs7WUFqQmtELFFBQVE7OztnQ0FvQnhELGVBQWUsU0FBQyxzQkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIENvbnRlbnRDaGlsZHJlbiwgRXZlbnRFbWl0dGVyLCBJbmplY3RvciwgT25EZXN0cm95LCBPbkluaXQsIFF1ZXJ5TGlzdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IElPQ29udGV4dE1lbnVDb250ZXh0IH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9vLWNvbnRleHQtbWVudS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgT0NvbXBvbmVudE1lbnVCYXNlSXRlbSB9IGZyb20gJy4vby1jb250ZW50LW1lbnUtYmFzZS1pdGVtLmNsYXNzJztcbmltcG9ydCB7IE9Db250ZXh0TWVudVNlcnZpY2UgfSBmcm9tICcuL28tY29udGV4dC1tZW51LnNlcnZpY2UnO1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9PVVRQVVRTX09fQ09OVEVYVF9NRU5VID0gW1xuICAnb25TaG93JyxcbiAgJ29uQ2xvc2UnXG5dO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdvLWNvbnRleHQtbWVudScsXG4gIHRlbXBsYXRlOiAnICcsXG4gIG91dHB1dHM6IERFRkFVTFRfT1VUUFVUU19PX0NPTlRFWFRfTUVOVSxcbiAgcHJvdmlkZXJzOiBbT0NvbnRleHRNZW51U2VydmljZV1cbn0pXG5leHBvcnQgY2xhc3MgT0NvbnRleHRNZW51Q29tcG9uZW50IGltcGxlbWVudHMgT25EZXN0cm95LCBPbkluaXQge1xuICBwdWJsaWMgZXh0ZXJuYWxDb250ZXh0TWVudUl0ZW1zOiBRdWVyeUxpc3Q8T0NvbXBvbmVudE1lbnVCYXNlSXRlbT47XG4gIEBDb250ZW50Q2hpbGRyZW4oT0NvbXBvbmVudE1lbnVCYXNlSXRlbSlcbiAgcHVibGljIG9Db250ZXh0TWVudUl0ZW1zOiBRdWVyeUxpc3Q8T0NvbXBvbmVudE1lbnVCYXNlSXRlbT47XG5cbiAgcHVibGljIG9yaWdpbjogSFRNTEVsZW1lbnQ7XG4gIHB1YmxpYyBvblNob3c6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBwdWJsaWMgb25DbG9zZTogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgcHVibGljIG9Db250ZXh0TWVudVNlcnZpY2U6IE9Db250ZXh0TWVudVNlcnZpY2U7XG4gIHByb3RlY3RlZCBzdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24oKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgaW5qZWN0b3I6IEluamVjdG9yXG4gICkge1xuICAgIHRoaXMub0NvbnRleHRNZW51U2VydmljZSA9IHRoaXMuaW5qZWN0b3IuZ2V0KE9Db250ZXh0TWVudVNlcnZpY2UpO1xuICB9XG5cbiAgcHVibGljIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9uLmFkZCh0aGlzLm9Db250ZXh0TWVudVNlcnZpY2Uuc2hvd0NvbnRleHRNZW51LnN1YnNjcmliZShwYXJhbSA9PiB0aGlzLnNob3dDb250ZXh0TWVudShwYXJhbSkpKTtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbi5hZGQodGhpcy5vQ29udGV4dE1lbnVTZXJ2aWNlLmNsb3NlQ29udGV4dE1lbnUuc3Vic2NyaWJlKHBhcmFtID0+IHRoaXMub25DbG9zZS5lbWl0KCkpKTtcbiAgfVxuXG4gIHB1YmxpYyBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICB9XG5cbiAgcHVibGljIHNob3dDb250ZXh0TWVudShwYXJhbXM6IElPQ29udGV4dE1lbnVDb250ZXh0KTogdm9pZCB7XG4gICAgdGhpcy5vcmlnaW4gPSBwYXJhbXMuZXZlbnQudGFyZ2V0IGFzIEhUTUxFbGVtZW50O1xuICAgIHRoaXMub25TaG93LmVtaXQocGFyYW1zKTtcbiAgICBpZiAocGFyYW1zLmNvbnRleHRNZW51ICE9PSB0aGlzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHBhcmFtcy5tZW51SXRlbXMgPSB0aGlzLm9Db250ZXh0TWVudUl0ZW1zO1xuICAgIHBhcmFtcy5leHRlcm5hbE1lbnVJdGVtcyA9IHRoaXMuZXh0ZXJuYWxDb250ZXh0TWVudUl0ZW1zO1xuICAgIGlmIChwYXJhbXMubWVudUl0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMub0NvbnRleHRNZW51U2VydmljZS5vcGVuQ29udGV4dE1lbnUocGFyYW1zKTtcbiAgICB9XG4gIH1cblxufVxuIl19