import { Directive, ElementRef, EventEmitter, HostListener, Input, Renderer2, ViewContainerRef } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { Subscription } from 'rxjs';
import { instanceOfIListItem } from '../../../interfaces/o-list-item.interface';
import { Codes } from '../../../util/codes';
import { Util } from '../../../util/util';
export class OListItemDirective {
    constructor(_viewContainerRef, _el, renderer, actRoute) {
        this._viewContainerRef = _viewContainerRef;
        this._el = _el;
        this.renderer = renderer;
        this.actRoute = actRoute;
        this.onClick = new EventEmitter();
        this.onDoubleClick = new EventEmitter();
        this.selectable = false;
        this.subscription = new Subscription();
    }
    ngOnInit() {
        const hostComponent = this._viewContainerRef["_data"].componentView.component;
        if (instanceOfIListItem(hostComponent)) {
            this.listItem = hostComponent;
        }
        this.subscription.add(this.actRoute.params.subscribe(params => this.updateActiveState(params)));
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
    onMouseEnter() {
        if (!this.selectable && this._list && this._list.detailMode !== Codes.DETAIL_MODE_NONE) {
            this.renderer.setStyle(this._el.nativeElement, 'cursor', 'pointer');
        }
    }
    updateActiveState(params) {
        if (this._list) {
            const aKeys = this._list.getKeys();
            if (this.modelData) {
                let _act = false;
                if (aKeys.length > 0) {
                    for (let k = 0; k < aKeys.length; ++k) {
                        const key = aKeys[k];
                        const id = params[key];
                        _act = (this.modelData[key] === id);
                        if (_act === false) {
                            break;
                        }
                    }
                }
                if (_act) {
                    this._el.nativeElement.classList.add('mat-active');
                }
                else {
                    this._el.nativeElement.classList.remove('mat-active');
                }
            }
            else {
                this._el.nativeElement.classList.remove('mat-active');
            }
        }
    }
    onItemClicked(e) {
        if (!this.selectable && this._list) {
            this._list.onItemDetailClick(this);
            this.onClick.emit(this.getItemData());
        }
    }
    onItemDoubleClicked(e) {
        if (!this.selectable && this._list) {
            this._list.onItemDetailDoubleClick(this);
            this.onDoubleClick.emit(this.getItemData());
        }
    }
    isSelected() {
        return this._list && this._list.isItemSelected(this.modelData);
    }
    setListComponent(list) {
        this._list = list;
    }
    setItemData(data) {
        if (!Util.isDefined(this.modelData) || this.modelData !== 'object') {
            this.modelData = data;
        }
        if (Util.isDefined(this.listItem)) {
            this.listItem.setItemData(this.modelData);
        }
    }
    getItemData() {
        return this.modelData;
    }
}
OListItemDirective.decorators = [
    { type: Directive, args: [{
                selector: 'o-list-item, mat-list-item[o-list-item], mat-card[o-list-item]',
                exportAs: 'olistitem',
                host: {
                    '[class.o-list-item]': 'true',
                    '(click)': 'onItemClicked($event)',
                    '(dblclick)': 'onItemDoubleClicked($event)'
                }
            },] }
];
OListItemDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: ElementRef },
    { type: Renderer2 },
    { type: ActivatedRoute }
];
OListItemDirective.propDecorators = {
    modelData: [{ type: Input, args: ['o-list-item',] }],
    selectable: [{ type: Input }],
    onMouseEnter: [{ type: HostListener, args: ['mouseenter',] }]
};
//# sourceMappingURL=data:application/json;base64,