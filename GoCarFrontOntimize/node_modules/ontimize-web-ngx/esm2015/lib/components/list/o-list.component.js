import * as tslib_1 from "tslib";
import { SelectionModel } from '@angular/cdk/collections';
import { Component, ContentChildren, ElementRef, EventEmitter, forwardRef, Inject, Injector, Optional, QueryList, ViewEncapsulation } from '@angular/core';
import { merge, Subscription } from 'rxjs';
import { InputConverter } from '../../decorators/input-converter';
import { ComponentStateServiceProvider, O_COMPONENT_STATE_SERVICE, OntimizeServiceProvider } from '../../services/factories';
import { OListComponentStateService } from '../../services/state/o-list-component-state.service';
import { ObservableWrapper } from '../../util/async';
import { ServiceUtils } from '../../util/service.utils';
import { Util } from '../../util/util';
import { OFormComponent } from '../form/o-form.component';
import { AbstractOServiceComponent, DEFAULT_INPUTS_O_SERVICE_COMPONENT, DEFAULT_OUTPUTS_O_SERVICE_COMPONENT } from '../o-service-component.class';
import { OMatSort } from '../table/extensions/sort/o-mat-sort';
import { OListItemDirective } from './list-item/o-list-item.directive';
export const DEFAULT_INPUTS_O_LIST = [
    ...DEFAULT_INPUTS_O_SERVICE_COMPONENT,
    'quickFilterColumns: quick-filter-columns',
    'refreshButton: refresh-button',
    'route',
    'selectable',
    'odense : dense',
    'deleteButton: delete-button',
    'sortColumns: sort-columns',
    'insertButtonPosition:insert-button-position',
    'insertButtonFloatable:insert-button-floatable',
    'showButtonsText: show-buttons-text'
];
export const DEFAULT_OUTPUTS_O_LIST = [
    ...DEFAULT_OUTPUTS_O_SERVICE_COMPONENT,
    'onInsertButtonClick',
    'onItemDeleted'
];
export class OListComponent extends AbstractOServiceComponent {
    constructor(injector, elRef, form) {
        super(injector, elRef, form);
        this.refreshButton = true;
        this.selectable = false;
        this.odense = false;
        this.deleteButton = true;
        this.insertButtonFloatable = true;
        this.showButtonsText = false;
        this.paginationControls = false;
        this.sortColArray = [];
        this.onInsertButtonClick = new EventEmitter();
        this.onItemDeleted = new EventEmitter();
        this.selection = new SelectionModel(true, []);
        this.enabledDeleteButton = false;
        this.insertButtonPosition = 'bottom';
        this.storePaginationState = false;
        this.subscription = new Subscription();
        this._quickFilterAppearance = 'outline';
        this.oMatSort = new OMatSort();
    }
    get state() {
        return this.componentStateService.state;
    }
    ngOnInit() {
        this.initialize();
        this.subscription.add(this.selection.changed.subscribe(() => this.enabledDeleteButton = !this.selection.isEmpty()));
    }
    ngAfterViewInit() {
        super.afterViewInit();
        this.filterCaseSensitive = Util.isDefined(this.state.filterCaseSensitive) ?
            this.state.filterCaseSensitive :
            this.filterCaseSensitive;
        this.parseSortColumns();
        this.registerQuickFilter(this.searchInputComponent);
        if (this.queryOnInit) {
            this.queryData();
        }
    }
    ngAfterContentInit() {
        this.setListItemDirectivesData();
        this.subscription.add(this.listItemDirectives.changes.subscribe(() => this.setListItemDirectivesData()));
    }
    ngOnDestroy() {
        this.destroy();
        this.subscription.unsubscribe();
    }
    ngOnChanges(changes) {
        if (changes.staticData !== undefined) {
            this.dataResponseArray = changes.staticData.currentValue;
            this.onDataLoaded.emit(this.dataResponseArray);
            if (this.quickFilterComponent) {
                this.filterData();
            }
        }
    }
    getComponentKey() {
        return 'OListComponent_' + this.oattr;
    }
    initialize() {
        super.initialize();
        if (!Util.isDefined(this.quickFilterColumns)) {
            this.quickFilterColumns = this.columns;
        }
        this.quickFilterColArray = Util.parseArray(this.quickFilterColumns, true);
        this.state.queryRecordOffset = 0;
        if (!Util.isDefined(this.state.totalQueryRecordsNumber)) {
            this.state.totalQueryRecordsNumber = 0;
        }
    }
    reinitialize(options) {
        super.reinitialize(options);
    }
    getDense() {
        return this.odense;
    }
    onListItemClicked(onNext) {
        return ObservableWrapper.subscribe(this.onClick, onNext);
    }
    onItemDetailClick(item) {
        this.handleItemClick(item);
    }
    onItemDetailDoubleClick(item) {
        this.handleItemDblClick(item);
    }
    getDataToStore() {
        return this.componentStateService.getDataToStore();
    }
    reloadData(clearSelectedItems = true) {
        this.componentStateService.refreshSelection();
        if (clearSelectedItems && this.selectable) {
            this.clearSelection();
        }
        let queryArgs = {};
        if (this.pageable) {
            this.state.queryRecordOffset = 0;
            queryArgs = {
                length: Math.max(this.queryRows, this.dataResponseArray.length),
                replace: true
            };
        }
        this.queryData(void 0, queryArgs);
    }
    reloadPaginatedDataFromStart(clearSelectedItems = true) {
        if (this.pageable) {
            this.dataResponseArray = [];
            this.reloadData(clearSelectedItems);
        }
    }
    getSortedDataFromArray(dataArray) {
        return this.oMatSort.getSortedDataBySQLOrder(dataArray, this.sortColArray);
    }
    isItemSelected(item) {
        return this.selectable && this.selection.isSelected(item);
    }
    onScroll(e) {
        if (this.matpaginator)
            return;
        if (this.pageable) {
            const pendingRegistries = this.dataResponseArray.length < this.state.totalQueryRecordsNumber;
            if (!this.loadingSubject.value && pendingRegistries) {
                const element = e.target;
                if (element.offsetHeight + element.scrollTop + 5 >= element.scrollHeight) {
                    const queryArgs = {
                        offset: this.state.queryRecordOffset,
                        length: this.queryRows
                    };
                    this.queryData(void 0, queryArgs);
                }
            }
        }
    }
    remove(clearSelectedItems = false) {
        const selectedItems = this.getSelectedItems();
        if (selectedItems.length > 0) {
            this.dialogService.confirm('CONFIRM', 'MESSAGES.CONFIRM_DELETE').then(res => {
                if (res === true) {
                    if (this.dataService && (this.deleteMethod in this.dataService) && this.entity && (this.keysArray.length > 0)) {
                        const filters = ServiceUtils.getArrayProperties(selectedItems, this.keysArray);
                        merge(filters.map((kv => this.dataService[this.deleteMethod](kv, this.entity)))).subscribe(obs => obs.subscribe(() => {
                            ObservableWrapper.callEmit(this.onItemDeleted, selectedItems);
                        }, error => {
                            this.dialogService.alert('ERROR', 'MESSAGES.ERROR_DELETE');
                        }, () => {
                            this.clearSelection();
                            this.reloadData();
                        }));
                    }
                    else {
                        this.deleteLocalItems();
                    }
                }
                else if (clearSelectedItems) {
                    this.clearSelection();
                }
            });
        }
    }
    add(e) {
        this.onInsertButtonClick.emit(e);
        super.insertDetail();
    }
    parseSortColumns() {
        const sortColumnsParam = this.state.sortColumns || this.sortColumns;
        this.sortColArray = ServiceUtils.parseSortColumns(sortColumnsParam);
    }
    getQueryArguments(filter, ovrrArgs) {
        const queryArguments = super.getQueryArguments(filter, ovrrArgs);
        if (this.pageable) {
            queryArguments[6] = this.sortColArray;
        }
        return queryArguments;
    }
    setListItemDirectivesData() {
        this.listItemDirectives.forEach((element, index) => {
            element.setItemData(this.dataArray[index]);
            element.setListComponent(this);
        });
    }
    saveDataNavigationInLocalStorage() {
        super.saveDataNavigationInLocalStorage();
        this.storePaginationState = true;
    }
    parseResponseArray(data, replace) {
        let result = data;
        if (this.pageable && !replace) {
            result = (this.dataResponseArray || []).concat(data);
        }
        return result;
    }
    registerQuickFilter(arg) {
        super.registerQuickFilter(arg);
        if (Util.isDefined(this.quickFilterComponent) && Util.isDefined(this.state.quickFilterActiveColumns)) {
            const parsedArr = Util.parseArray(this.state.quickFilterActiveColumns, true);
            this.quickFilterComponent.setActiveColumns(parsedArr);
        }
    }
    setDataArray(data) {
        super.setDataArray(data);
        this.updateSelectedItems();
        this.cd.detectChanges();
    }
    setSelected(item) {
        super.setSelected(item);
        this.componentStateService.refreshSelection();
    }
    updateSelectedItems() {
        if (!this.selectable || !Util.isDefined(this.state.selection) || this.getSelectedItems().length > 0) {
            return;
        }
        this.state.selection.forEach(selectedItem => {
            const itemKeys = Object.keys(selectedItem);
            const foundItem = this.dataArray.find(data => itemKeys.every(key => data[key] === selectedItem[key]));
            if (Util.isDefined(foundItem)) {
                this.selection.select(foundItem);
            }
        });
    }
}
OListComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-list',
                providers: [
                    OntimizeServiceProvider,
                    ComponentStateServiceProvider,
                    { provide: O_COMPONENT_STATE_SERVICE, useClass: OListComponentStateService },
                ],
                inputs: DEFAULT_INPUTS_O_LIST,
                outputs: DEFAULT_OUTPUTS_O_LIST,
                template: "<div class=\"o-list-container\" [style.display]=\"isVisible()? '' : 'none'\" fxFill>\n  <div *ngIf=\"loading | async\" fxLayoutAlign=\"center center\" [class.pageable-loading]=\"pageable && state.queryRecordOffset > 0\"\n    class=\"spinner-container\">\n    <mat-progress-spinner strokeWidth=\"3\" mode=\"indeterminate\"></mat-progress-spinner>\n  </div>\n  <o-data-toolbar *ngIf=\"hasControls()\" [class.dense]=\"odense\" [title]=\"title\" [show-title]=\"hasTitle()\" class=\"o-list-toolbar\">\n    <ng-container o-data-toolbar-projection-start>\n      <ng-container *ngIf=\"showButtonsText;else showButtonsWithoutText\">\n        <button *ngIf=\"insertButton && !insertButtonFloatable\" class=\"o-list-button text\" type=\"button\" mat-stroked-button aria-label=\"Insert\" (click)=\"add($event)\">\n          <mat-icon svgIcon=\"ontimize:add\"></mat-icon>\n          <span>{{ 'ADD' | oTranslate }}</span>\n        </button>\n\n        <button type=\"button\" mat-stroked-button class=\"o-list-button text\" aria-label=\"Refresh\" (click)=\"reloadData()\" *ngIf=\"refreshButton\">\n          <mat-icon svgIcon=\"ontimize:autorenew\"></mat-icon>\n          <span>{{ 'REFRESH' | oTranslate }}</span>\n        </button>\n\n        <button *ngIf=\"deleteButton\" type=\"button\" class=\"o-list-button text\" mat-stroked-button aria-label=\"Delete\" [disabled]=\"!enabledDeleteButton\"\n          [class.disabled]=\"!enabledDeleteButton\" (click)=\"remove()\">\n          <mat-icon svgIcon=\"ontimize:delete\"></mat-icon>\n          <span>{{ 'DELETE' | oTranslate }}</span>\n        </button>\n      </ng-container>\n      <ng-template #showButtonsWithoutText>\n        <button *ngIf=\"insertButton && !insertButtonFloatable\" type=\"button\" class=\"o-list-button no-text\" mat-icon-button aria-label=\"Insert\" (click)=\"add($event)\">\n          <mat-icon svgIcon=\"ontimize:add\"></mat-icon>\n        </button>\n\n        <button type=\"button\" mat-icon-button aria-label=\"Refresh\" class=\"o-list-button no-text\" (click)=\"reloadData()\" *ngIf=\"refreshButton\">\n          <mat-icon svgIcon=\"ontimize:autorenew\"></mat-icon>\n        </button>\n\n        <button *ngIf=\"deleteButton\" type=\"button\" class=\"o-list-button no-text\" mat-icon-button aria-label=\"Delete\" [disabled]=\"!enabledDeleteButton\"\n          [class.disabled]=\"!enabledDeleteButton\" (click)=\"remove()\">\n          <mat-icon svgIcon=\"ontimize:delete\"></mat-icon>\n        </button>\n      </ng-template>\n    </ng-container>\n    <ng-content select=\"[o-list-toolbar][position=start]\" ngProjectAs=\"[o-data-toolbar-custom-projection-start]\">\n    </ng-content>\n    <ng-content select=\"[o-list-toolbar][position=end]\" ngProjectAs=\"[o-data-toolbar-custom-projection-end]\">\n    </ng-content>\n    <ng-content select=\"[o-list-toolbar]\" ngProjectAs=\"[o-data-toolbar-custom-projection-start]\">\n    </ng-content>\n    <ng-container o-data-toolbar-projection-end>\n      <o-search-input *ngIf=\"quickFilter\" [filter-case-sensitive]=\"filterCaseSensitive\" [show-case-sensitive-checkbox]=\"showCaseSensitiveCheckbox()\"\n        [columns]=\"quickFilterColumns\" [placeholder]=\"quickFilterPlaceholder\" [appearance]=\"quickFilterAppearance\" float-label=\"never\">\n      </o-search-input>\n    </ng-container>\n  </o-data-toolbar>\n  <div fxLayout=\"column\" class=\"o-list-content\" fxFlex=\"1 1 100%\" [class.o-list-content-toolbar-dense]=\"hasControls() && odense\">\n\n    <!--MAT-LIST-->\n    <mat-list [attr.dense]=\"odense || undefined\" (scroll)=\"onScroll($event)\" [class.selectable]=\"selectable\"\n      [class.o-list-item-has-buttons]=\"insertButton && (editButtonInRow || detailButtonInRow)\">\n\n      <mat-list-item *ngIf=\"!getDataArray().length\" fxLayout=\"row\" fxLayoutAlign=\"center center\" style=\"cursor: default;\">\n        <h3 matLine>\n          {{ 'TABLE.EMPTY' | oTranslate }}\n          <ng-container *ngIf=\"getQuickFilterValue().length > 0\">\n            {{ 'TABLE.EMPTY_USING_FILTER' | oTranslate : {values: [getQuickFilterValue()]} }}\n          </ng-container>\n        </h3>\n      </mat-list-item>\n      <ng-content></ng-content>\n    </mat-list>\n  </div>\n  <mat-paginator fxFlex=\"0 1 auto\" class=\"o-mat-paginator\" #paginator *ngIf=\"paginationControls\" [length]=\"totalRecords\" [pageSize]=\"queryRows\"\n    [pageSizeOptions]=\"pageSizeOptions\" [pageIndex]=\"currentPage\" [showFirstLastButtons]=\"true\" (page)=\"onChangePage($event)\"></mat-paginator>\n\n  <!--INSERT BUTTON -->\n  <button type=\"button\" *ngIf=\"insertButton && insertButtonFloatable && odense\" mat-mini-fab (click)=\"add($event)\" class=\"add-button\"\n    [class.add-button-bottom]=\"insertButtonPosition ==='bottom'\" [class.add-button-top]=\"insertButtonPosition ==='top'\">\n    <mat-icon svgIcon=\"ontimize:add\"></mat-icon>\n  </button>\n  <button type=\"button\" *ngIf=\"insertButton && insertButtonFloatable && !odense\" mat-fab (click)=\"add($event)\" class=\"add-button add-button-bottom\"\n    [class.add-button-bottom]=\"insertButtonPosition ==='bottom'\" [class.add-button-top]=\"insertButtonPosition ==='top'\">\n    <mat-icon svgIcon=\"ontimize:add\"></mat-icon>\n  </button>\n\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                host: {
                    '[class.o-list]': 'true'
                },
                styles: ["::-webkit-input-placeholder{color:#8e0c39}:-moz-placeholder{color:#8e0c39;opacity:1}::-moz-placeholder{color:#8e0c39;opacity:1}:-ms-input-placeholder{color:#8e0c39}:placeholder-shown{color:#8e0c39}.o-list-container{position:relative;flex-direction:column}.o-list-container .o-list-content.o-list-content-toolbar-dense .add-button.add-button-top{top:60px}.o-list-container .spinner-container{position:absolute;top:0;bottom:0;left:0;right:0;z-index:500}.o-list-container .spinner-container:not(.pageable-loading){top:0;background:#fff}.o-list-container .spinner-container.pageable-loading{background:rgba(255,255,255,.5)}.o-list-container .spinner-container path{stroke-width:5px!important}.o-list-container .mat-list{overflow:auto}.o-list-container .mat-list .mat-3-line .o-custom-list-item{position:relative}.o-list-container .mat-list .o-custom-list-item{max-width:100%;width:100%}.o-list-container .mat-list .o-custom-list-item .o-list-item-icon{cursor:pointer;padding-right:6px}.o-list-container .mat-list.o-list-item-has-buttons .o-list-item .mat-list-item-content{padding-right:72px}.o-list-container .mat-list.o-list-item-has-buttons[dense] .o-list-item .mat-list-item-content{padding-right:56px}.o-list-container .mat-list .o-list-item.mat-card,.o-list-container .mat-list .o-list-item.mat-list-item{margin:6px 0}.o-list-container .add-button{right:12px;position:absolute}.o-list-container .add-button.add-button-bottom{bottom:12px}.o-list-container .add-button.add-button-top{top:88px}.o-list-container .o-mat-paginator~.add-button.add-button-bottom{bottom:68px}"]
            }] }
];
OListComponent.ctorParameters = () => [
    { type: Injector },
    { type: ElementRef },
    { type: OFormComponent, decorators: [{ type: Optional }, { type: Inject, args: [forwardRef(() => OFormComponent),] }] }
];
OListComponent.propDecorators = {
    listItemDirectives: [{ type: ContentChildren, args: [OListItemDirective,] }]
};
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OListComponent.prototype, "refreshButton", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OListComponent.prototype, "selectable", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OListComponent.prototype, "odense", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OListComponent.prototype, "deleteButton", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OListComponent.prototype, "insertButtonFloatable", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OListComponent.prototype, "showButtonsText", void 0);
//# sourceMappingURL=data:application/json;base64,