import * as tslib_1 from "tslib";
import { Directive, Injector } from "@angular/core";
import { Router } from "@angular/router";
import { InputConverter } from "../../../decorators";
import { DialogService } from "../../../services";
export const DEFAULT_INPUTS_O_USER_INFO_MENU_ITEM = [
    'name',
    'route',
    'icon',
    'action',
    'confirm',
    'confirmText: confirm-text',
    'tooltip',
    'class'
];
export class OUserInfoConfigurationItemDirective {
    constructor(injector) {
        this.injector = injector;
        this.toolTip = false;
        this.confirm = false;
        this.router = this.injector.get(Router);
        this.dialogService = this.injector.get(DialogService);
    }
    triggerOnClick(e) {
        if (this.route) {
            this.navigate();
        }
        else {
            this.executeItemAction();
        }
    }
    navigate() {
        if (this.router.url !== this.route) {
            this.router.navigate([this.route]);
        }
    }
    executeItemAction() {
        if (this.confirm) {
            this.dialogService.confirm('CONFIRM', this.confirmText || 'MESSAGES.CONFIRM_ACTION').then(result => result ? this.action() : null);
        }
        else {
            this.action();
        }
    }
}
OUserInfoConfigurationItemDirective.decorators = [
    { type: Directive, args: [{
                selector: 'o-user-info-configuration-item',
                inputs: DEFAULT_INPUTS_O_USER_INFO_MENU_ITEM
            },] }
];
OUserInfoConfigurationItemDirective.ctorParameters = () => [
    { type: Injector }
];
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OUserInfoConfigurationItemDirective.prototype, "toolTip", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OUserInfoConfigurationItemDirective.prototype, "confirm", void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby11c2VyLWluZm8tY29uZmlndXJhdGlvbi1pdGVtLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL29udGltaXplLXdlYi1uZ3gvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy91c2VyLWluZm8vdXNlci1pbmZvLWNvbmZpZ3VyYXRpb24taXRlbS9vLXVzZXItaW5mby1jb25maWd1cmF0aW9uLWl0ZW0uZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNwRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDekMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUVsRCxNQUFNLENBQUMsTUFBTSxvQ0FBb0MsR0FBRztJQUNsRCxNQUFNO0lBQ04sT0FBTztJQUNQLE1BQU07SUFDTixRQUFRO0lBQ1IsU0FBUztJQUNULDJCQUEyQjtJQUMzQixTQUFTO0lBQ1QsT0FBTztDQUNSLENBQUM7QUFRRixNQUFNLE9BQU8sbUNBQW1DO0lBYzlDLFlBQW1CLFFBQWtCO1FBQWxCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFYckMsWUFBTyxHQUFZLEtBQUssQ0FBQztRQUd6QixZQUFPLEdBQVksS0FBSyxDQUFDO1FBU3ZCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDeEMsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBRUQsY0FBYyxDQUFDLENBQVE7UUFDckIsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ2QsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1NBQ2pCO2FBQU07WUFDTCxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztTQUMxQjtJQUNILENBQUM7SUFFRCxRQUFRO1FBQ04sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsS0FBSyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ2xDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7U0FDcEM7SUFDSCxDQUFDO0lBRUQsaUJBQWlCO1FBQ2YsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsV0FBVyxJQUFJLHlCQUF5QixDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3BJO2FBQU07WUFDTCxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7U0FDZjtJQUNILENBQUM7OztZQTVDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGdDQUFnQztnQkFDMUMsTUFBTSxFQUFFLG9DQUFvQzthQUM3Qzs7O1lBcEJtQixRQUFROztBQXlCMUI7SUFEQyxjQUFjLEVBQUU7O29FQUNRO0FBR3pCO0lBREMsY0FBYyxFQUFFOztvRUFDUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5qZWN0b3IgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSBcIkBhbmd1bGFyL3JvdXRlclwiO1xuaW1wb3J0IHsgSW5wdXRDb252ZXJ0ZXIgfSBmcm9tIFwiLi4vLi4vLi4vZGVjb3JhdG9yc1wiO1xuaW1wb3J0IHsgRGlhbG9nU2VydmljZSB9IGZyb20gXCIuLi8uLi8uLi9zZXJ2aWNlc1wiO1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9JTlBVVFNfT19VU0VSX0lORk9fTUVOVV9JVEVNID0gW1xuICAnbmFtZScsXG4gICdyb3V0ZScsXG4gICdpY29uJyxcbiAgJ2FjdGlvbicsXG4gICdjb25maXJtJyxcbiAgJ2NvbmZpcm1UZXh0OiBjb25maXJtLXRleHQnLFxuICAndG9vbHRpcCcsXG4gICdjbGFzcydcbl07XG5cblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnby11c2VyLWluZm8tY29uZmlndXJhdGlvbi1pdGVtJyxcbiAgaW5wdXRzOiBERUZBVUxUX0lOUFVUU19PX1VTRVJfSU5GT19NRU5VX0lURU1cbn0pXG5cbmV4cG9ydCBjbGFzcyBPVXNlckluZm9Db25maWd1cmF0aW9uSXRlbURpcmVjdGl2ZSB7XG5cbiAgQElucHV0Q29udmVydGVyKClcbiAgdG9vbFRpcDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIEBJbnB1dENvbnZlcnRlcigpXG4gIGNvbmZpcm06IGJvb2xlYW4gPSBmYWxzZTtcblxuICBwdWJsaWMgYWN0aW9uOiAoKSA9PiB2b2lkO1xuICBwdWJsaWMgcm91dGU6IHN0cmluZztcbiAgcHVibGljIGNvbmZpcm1UZXh0O1xuICBwcm90ZWN0ZWQgcm91dGVyOiBSb3V0ZXI7XG4gIHByb3RlY3RlZCBkaWFsb2dTZXJ2aWNlOiBEaWFsb2dTZXJ2aWNlO1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBpbmplY3RvcjogSW5qZWN0b3IpIHtcbiAgICB0aGlzLnJvdXRlciA9IHRoaXMuaW5qZWN0b3IuZ2V0KFJvdXRlcik7XG4gICAgdGhpcy5kaWFsb2dTZXJ2aWNlID0gdGhpcy5pbmplY3Rvci5nZXQoRGlhbG9nU2VydmljZSk7XG4gIH1cblxuICB0cmlnZ2VyT25DbGljayhlOiBFdmVudCkge1xuICAgIGlmICh0aGlzLnJvdXRlKSB7XG4gICAgICB0aGlzLm5hdmlnYXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZXhlY3V0ZUl0ZW1BY3Rpb24oKTtcbiAgICB9XG4gIH1cblxuICBuYXZpZ2F0ZSgpIHtcbiAgICBpZiAodGhpcy5yb3V0ZXIudXJsICE9PSB0aGlzLnJvdXRlKSB7XG4gICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbdGhpcy5yb3V0ZV0pO1xuICAgIH1cbiAgfVxuXG4gIGV4ZWN1dGVJdGVtQWN0aW9uKCkge1xuICAgIGlmICh0aGlzLmNvbmZpcm0pIHtcbiAgICAgIHRoaXMuZGlhbG9nU2VydmljZS5jb25maXJtKCdDT05GSVJNJywgdGhpcy5jb25maXJtVGV4dCB8fCAnTUVTU0FHRVMuQ09ORklSTV9BQ1RJT04nKS50aGVuKHJlc3VsdCA9PiByZXN1bHQgPyB0aGlzLmFjdGlvbigpIDogbnVsbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYWN0aW9uKCk7XG4gICAgfVxuICB9XG5cblxufSJdfQ==