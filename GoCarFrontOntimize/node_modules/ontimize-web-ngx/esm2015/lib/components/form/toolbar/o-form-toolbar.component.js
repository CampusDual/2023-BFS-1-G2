import * as tslib_1 from "tslib";
import { Component, ElementRef, EventEmitter, Injector, ViewChild, ViewContainerRef, ViewEncapsulation } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { InputConverter } from '../../../decorators/input-converter';
import { DialogService } from '../../../services/dialog.service';
import { NavigationService } from '../../../services/navigation.service';
import { SnackBarService } from '../../../services/snackbar.service';
import { Codes } from '../../../util/codes';
import { PermissionsUtils } from '../../../util/permissions';
import { Util } from '../../../util/util';
import { OFormComponent } from '../o-form.component';
export const DEFAULT_INPUTS_O_FORM_TOOLBAR = [
    'labelHeader: label-header',
    'labelHeaderAlign: label-header-align',
    'headeractions: header-actions',
    'showHeaderActionsText: show-header-actions-text',
    'showHeaderNavigation:show-header-navigation'
];
export const DEFAULT_OUTPUTS_O_FORM_TOOLBAR = [
    'onCancel'
];
export class OFormToolbarComponent {
    constructor(_form, element, injector) {
        this._form = _form;
        this.element = element;
        this.injector = injector;
        this.labelHeader = '';
        this.headeractions = '';
        this.labelHeaderAlign = 'center';
        this.showHeaderActionsText = true;
        this.showHeaderNavigation = true;
        this.isDetail = true;
        this.editMode = false;
        this.insertMode = false;
        this.initialMode = true;
        this.refreshBtnEnabled = false;
        this.insertBtnEnabled = false;
        this.deleteBtnEnabled = false;
        this.onCancel = new EventEmitter();
        this._changesToSave = false;
        this._editBtnEnabled = false;
        this._saveBtnEnabled = false;
        this.mutationObservers = [];
        this._isSaveBtnEnabledSubject = new BehaviorSubject(false);
        this._isEditBtnEnabledSubject = new BehaviorSubject(false);
        this._existsChangesToSaveSubject = new BehaviorSubject(false);
        this.isSaveBtnEnabled = this._isSaveBtnEnabledSubject.asObservable();
        this.isEditBtnEnabled = this._isEditBtnEnabledSubject.asObservable();
        this.existsChangesToSave = this._existsChangesToSaveSubject.asObservable();
        this._form.registerToolbar(this);
        this._dialogService = this.injector.get(DialogService);
        this._navigationService = this.injector.get(NavigationService);
        this.snackBarService = this.injector.get(SnackBarService);
    }
    get changesToSave() {
        return this._changesToSave;
    }
    set changesToSave(val) {
        this._changesToSave = val;
        const attr = this._form.isEditableDetail() ? PermissionsUtils.ACTION_UPDATE : PermissionsUtils.ACTION_INSERT;
        const permissions = (this.actionsPermissions || []).find(p => p.attr === attr);
        if (Util.isDefined(permissions) && permissions.enabled === false) {
            return;
        }
        this._existsChangesToSaveSubject.next(val);
    }
    get editBtnEnabled() {
        return this._editBtnEnabled;
    }
    set editBtnEnabled(value) {
        this._editBtnEnabled = value;
        this._isEditBtnEnabledSubject.next(this._editBtnEnabled);
    }
    get saveBtnEnabled() {
        return this._saveBtnEnabled;
    }
    set saveBtnEnabled(value) {
        this._saveBtnEnabled = value;
        this._isSaveBtnEnabledSubject.next(this._saveBtnEnabled);
    }
    ngOnInit() {
        this.formActions = Util.parseArray(this.headeractions);
        if (this.formActions && this.formActions.length > 0) {
            this.refreshBtnEnabled = this.formActions.indexOf('R') !== -1;
            this.insertBtnEnabled = this.formActions.indexOf('I') !== -1;
            this.editBtnEnabled = this.formActions.indexOf('U') !== -1;
            this.deleteBtnEnabled = !this.insertMode && this.formActions.indexOf('D') !== -1;
        }
        if (this._navigationService) {
            const self = this;
            this._navigationService.onTitleChange(title => {
                self.labelHeader = title;
            });
        }
        this.includeBreadcrumb = this._form.includeBreadcrumb && this._form.formContainer.breadcrumb;
        if (this.includeBreadcrumb) {
            this._form.formContainer.breadcrumb = false;
        }
    }
    ngOnDestroy() {
        if (this.formCacheSubscription) {
            this.formCacheSubscription.unsubscribe();
        }
        if (this.mutationObservers) {
            this.mutationObservers.forEach((m) => {
                m.disconnect();
            });
        }
    }
    ngAfterViewInit() {
        this.parsePermissions();
        if (this.includeBreadcrumb) {
            this._form.formContainer.createBreadcrumb(this.breadContainer);
        }
    }
    setInitialMode() {
        this.manageEditableDetail();
        this.initialMode = true;
        this.insertMode = false;
        this.editMode = false;
    }
    setInsertMode() {
        this.initialMode = false;
        this.insertMode = true;
        this.editMode = false;
    }
    setEditMode() {
        this.initialMode = false;
        this.insertMode = false;
        this.editMode = true;
    }
    onCloseDetail(options) {
        this._form.executeToolbarAction(Codes.CLOSE_DETAIL_ACTION, Object.assign(options || {}, {
            changeToolbarMode: true
        }));
    }
    onBack(options) {
        this._form.executeToolbarAction(Codes.BACK_ACTION, options);
    }
    onReload() {
        if (!this.checkEnabledPermission(PermissionsUtils.ACTION_REFRESH)) {
            return;
        }
        this._form.showConfirmDiscardChanges().then(val => {
            if (val) {
                this._form.executeToolbarAction(Codes.RELOAD_ACTION, { exitWithoutConfirmation: true });
            }
        });
    }
    onInsert() {
        if (!this.checkEnabledPermission(PermissionsUtils.ACTION_INSERT)) {
            return;
        }
        this._form.executeToolbarAction(Codes.GO_INSERT_ACTION, {
            changeToolbarMode: true
        });
    }
    onEdit() {
        if (!this.checkEnabledPermission(PermissionsUtils.ACTION_UPDATE)) {
            return;
        }
        this._form.executeToolbarAction(Codes.GO_EDIT_ACTION, {
            changeToolbarMode: true
        });
    }
    onDelete() {
        if (!this.checkEnabledPermission(PermissionsUtils.ACTION_DELETE)) {
            return;
        }
        this.showConfirmDelete();
    }
    onSave() {
        if (!this.checkEnabledPermission(PermissionsUtils.ACTION_UPDATE)) {
            return;
        }
        this.handleAcceptEditOperation();
    }
    cancelOperation() {
        this._form.showConfirmDiscardChanges().then(val => {
            if (val) {
                this.editMode = false;
                this.onCancel.emit();
                const closeOptions = { exitWithoutConfirmation: true };
                if (this.isDetail) {
                    this.onCloseDetail(closeOptions);
                }
                else if (this.insertMode) {
                    this.onBack(closeOptions);
                }
                else {
                    this.onReload();
                    this._form.setInitialMode();
                }
            }
        });
    }
    acceptOperation() {
        if (this.editMode) {
            if (!this.checkEnabledPermission(PermissionsUtils.ACTION_UPDATE)) {
                return;
            }
            this.handleAcceptEditOperation();
        }
        else if (this.insertMode) {
            if (!this.checkEnabledPermission(PermissionsUtils.ACTION_INSERT)) {
                return;
            }
            this.handleAcceptInsertOperation();
        }
    }
    handleAcceptInsertOperation() {
        this._form.executeToolbarAction(Codes.INSERT_ACTION);
    }
    handleAcceptEditOperation() {
        this._form.executeToolbarAction(Codes.EDIT_ACTION);
    }
    showConfirmDelete() {
        this._dialogService.confirm(this._form.messageService.getDeleteConfirmationDialogTitle(), this._form.messageService.getDeleteConfirmationMessage()).then(res => {
            if (res) {
                this._form.executeToolbarAction(Codes.DELETE_ACTION).subscribe(resp => {
                    this._form.onDelete.emit(resp);
                    this.onCloseDetail({ exitWithoutConfirmation: true });
                }, err => {
                    console.error('OFormToolbar.delete error', err);
                });
            }
        });
    }
    get showNavigation() {
        return this.showHeaderNavigation && !(this._form.getFormManager() && this._form.getFormManager().isTabMode());
    }
    getLabelHeaderAlign() {
        return this.labelHeaderAlign;
    }
    get showUndoButton() {
        return this._form.undoButton && (!this.initialMode || this._form.isEditableDetail());
    }
    get isChangesStackEmpty() {
        return this._form.isCacheStackEmpty;
    }
    onUndoLastChange() {
        this._form.executeToolbarAction(Codes.UNDO_LAST_CHANGE_ACTION);
    }
    get isRefreshBtnEnabled() {
        return this.refreshBtnEnabled;
    }
    get isInsertBtnEnabled() {
        return this.insertBtnEnabled;
    }
    get isDeleteBtnEnabled() {
        return this.deleteBtnEnabled;
    }
    hasEnabledPermission(permission) {
        return permission ? permission.enabled : true;
    }
    get includeBreadcrumb() {
        return this._includeBreadcrumb;
    }
    set includeBreadcrumb(arg) {
        this._includeBreadcrumb = arg;
    }
    manageEditableDetail() {
        const isEditableDetail = this._form.isEditableDetail();
        const updatePermissions = (this.actionsPermissions || []).find(p => p.attr === PermissionsUtils.ACTION_UPDATE);
        if (this.hasEnabledPermission(updatePermissions)) {
            this.saveBtnEnabled = isEditableDetail;
        }
        this.refreshBtnEnabled = this.refreshBtnEnabled && isEditableDetail;
        this.insertBtnEnabled = this.insertBtnEnabled && isEditableDetail;
        this.editBtnEnabled = this.editBtnEnabled && !isEditableDetail;
        this.formCacheSubscription = this._form.getFormCache().onCacheStateChanges.subscribe((value) => {
            if (this._form.isEditableDetail()) {
                this.changesToSave = this._form.isInitialStateChanged();
            }
        });
    }
    parsePermissions() {
        if (this._form.oattr) {
            this.actionsPermissions = this._form.getActionsPermissions();
            if (!Util.isDefined(this.actionsPermissions)) {
                return;
            }
            const self = this;
            this.actionsPermissions.forEach((permission) => {
                self.permissionManagement(permission);
                if (PermissionsUtils.STANDARD_ACTIONS.indexOf(permission.attr) > -1) {
                    if (permission.attr === PermissionsUtils.ACTION_UPDATE) {
                        self.permissionManagement(permission, 'edit');
                    }
                }
            });
        }
    }
    permissionManagement(permission, attr) {
        const attrAction = Util.isDefined(attr) ? attr : permission.attr;
        const elementByAction = this.element.nativeElement.querySelector('[attr="' + attrAction + '"]');
        if (Util.isDefined(elementByAction)) {
            if (!permission.visible) {
                elementByAction.remove();
            }
            else {
                if (!permission.enabled) {
                    elementByAction.disabled = true;
                    const mutationObserver = PermissionsUtils.registerDisabledChangesInDom(elementByAction);
                    this.mutationObservers.push(mutationObserver);
                }
            }
        }
    }
    checkEnabledPermission(attr) {
        const permissions = (this.actionsPermissions || []).find(p => p.attr === attr);
        const enabledPermision = PermissionsUtils.checkEnabledPermission(permissions);
        if (!enabledPermision) {
            this.snackBarService.open(this._form.messageService.getActionPermissionNotEnabledMessage());
        }
        return enabledPermision;
    }
}
OFormToolbarComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-form-toolbar',
                template: "<mat-toolbar class=\"o-form-toolbar-header\" [class.breadcrumb]=\"includeBreadcrumb\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n\n  <ng-template *ngIf=\"includeBreadcrumb\" #breadcrumb></ng-template>\n\n  <div class=\"mat-toolbar-tools\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n    <button type=\"button\" mat-icon-button (click)=\"onBack()\" *ngIf=\"isDetail\" class=\"o-form-toolbar-button o-form-toolbar-back\">\n      <mat-icon svgIcon=\"ontimize:arrow_back\"></mat-icon>\n    </button>\n\n    <o-form-navigation #formNavigation *ngIf=\"showNavigation\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n    </o-form-navigation>\n\n    <span *ngIf=\"getLabelHeaderAlign() === 'center' || getLabelHeaderAlign() === 'end'\" class=\"fill-remaining\"></span>\n    <div *ngIf=\"labelHeader!=''\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\n      <span>{{ labelHeader | oTranslate }}</span>\n    </div>\n    <span *ngIf=\"getLabelHeaderAlign() === 'start' || getLabelHeaderAlign() === 'center'\" class=\"fill-remaining\"></span>\n\n    <ng-content select=\"[o-custom-form-toolbar-buttons-wrapper]\"></ng-content>\n\n    <ng-template [ngIf]=\"showHeaderActionsText\" [ngIfElse]=\"undoBtnWithoutText\">\n      <button type=\"button\" class=\"o-form-toolbar-button o-form-toolbar-button-undo\" mat-stroked-button (click)=\"onUndoLastChange()\"\n        [disabled]=\"isChangesStackEmpty\" *ngIf=\"showUndoButton\">\n        <mat-icon svgIcon=\"ontimize:undo\"></mat-icon>\n        <span>{{ 'UNDO' | oTranslate }}</span>\n      </button>\n    </ng-template>\n    <ng-template #undoBtnWithoutText>\n      <button type=\"button\" class=\"o-form-toolbar-button o-form-toolbar-button-undo\" mat-icon-button (click)=\"onUndoLastChange()\"\n        [disabled]=\"isChangesStackEmpty\" *ngIf=\"showUndoButton\">\n        <mat-icon svgIcon=\"ontimize:undo\"></mat-icon>\n      </button>\n    </ng-template>\n\n    <ng-container *ngIf=\"initialMode\">\n      <ng-template [ngIf]=\"showHeaderActionsText\" [ngIfElse]=\"buttonsWithouText\">\n        <button type=\"button\" class=\"o-form-toolbar-button o-form-toolbar-button-refresh\" mat-stroked-button (click)=\"onReload()\"\n          *ngIf=\"isRefreshBtnEnabled\" attr=\"refresh\">\n          <mat-icon svgIcon=\"ontimize:autorenew\"></mat-icon>\n          <span>{{ 'REFRESH' | oTranslate }}</span>\n        </button>\n        <button type=\"button\" class=\"o-form-toolbar-button o-form-toolbar-button-insert\" mat-stroked-button (click)=\"onInsert()\"\n          *ngIf=\"isInsertBtnEnabled\" attr=\"insert\">\n          <mat-icon svgIcon=\"ontimize:add\"></mat-icon>\n          <span>{{ 'ADD' | oTranslate }}</span>\n        </button>\n        <button type=\"button\" class=\"o-form-toolbar-button o-form-toolbar-button-edit\" mat-stroked-button (click)=\"onEdit()\"\n          *ngIf=\"isEditBtnEnabled | async\" attr=\"edit\">\n          <mat-icon svgIcon=\"ontimize:edit\"></mat-icon>\n          <span>{{ 'EDIT' | oTranslate }}</span>\n        </button>\n        <button type=\"button\" class=\"o-form-toolbar-button o-form-toolbar-button-delete\" mat-stroked-button (click)=\"onDelete()\"\n          *ngIf=\"isDeleteBtnEnabled\" attr=\"delete\">\n          <mat-icon svgIcon=\"ontimize:delete\"></mat-icon>\n          <span>{{ 'DELETE' | oTranslate }}</span>\n        </button>\n        <button type=\"button\" class=\"o-form-toolbar-button o-form-toolbar-button-save\" mat-stroked-button (click)=\"onSave()\"\n          [disabled]=\"!(existsChangesToSave | async)\" *ngIf=\"isSaveBtnEnabled | async\" attr=\"update\">\n          <mat-icon svgIcon=\"ontimize:save\"></mat-icon>\n          <span>{{ 'SAVE' | oTranslate }}</span>\n        </button>\n      </ng-template>\n      <ng-template #buttonsWithouText>\n        <button type=\"button\" class=\"o-form-toolbar-button o-form-toolbar-button-refresh\" mat-icon-button (click)=\"onReload()\"\n          *ngIf=\"isRefreshBtnEnabled\" attr=\"refresh\">\n          <mat-icon svgIcon=\"ontimize:autorenew\"></mat-icon>\n        </button>\n        <button type=\"button\" class=\"o-form-toolbar-button o-form-toolbar-button-insert\" mat-icon-button (click)=\"onInsert()\"\n          *ngIf=\"isInsertBtnEnabled\" attr=\"insert\">\n          <mat-icon svgIcon=\"ontimize:add\"></mat-icon>\n        </button>\n        <button type=\"button\" class=\"o-form-toolbar-button-o-form-toolbar-button-edit\" mat-icon-button (click)=\"onEdit()\"\n          *ngIf=\"isEditBtnEnabled | async\" attr=\"edit\">\n          <mat-icon svgIcon=\"ontimize:edit\"></mat-icon>\n        </button>\n        <button type=\"button\" class=\"o-form-toolbar-button o-form-toolbar-button-delete\" mat-icon-button (click)=\"onDelete()\"\n          *ngIf=\"isDeleteBtnEnabled\" attr=\"delete\">\n          <mat-icon svgIcon=\"ontimize:delete\"></mat-icon>\n        </button>\n        <button type=\"button\" class=\"o-form-toolbar-button o-form-toolbar-button-save\" mat-icon-button (click)=\"onSave()\"\n          [disabled]=\"!existsChangesToSave\" *ngIf=\"isSaveBtnEnabled | async\" attr=\"update\">\n          <mat-icon svgIcon=\"ontimize:save\"></mat-icon>\n        </button>\n      </ng-template>\n    </ng-container>\n\n    <ng-container *ngIf=\"editMode || insertMode\">\n      <button type=\"button\" class=\"o-form-toolbar-button o-form-toolbar-button-cancel\" mat-stroked-button (click)=\"cancelOperation()\">\n        <mat-icon svgIcon=\"ontimize:clear\"></mat-icon>\n        <span *ngIf=\"showHeaderActionsText\">{{ 'CANCEL' | oTranslate }}</span>\n      </button>\n      <button type=\"button\" class=\"o-form-toolbar-button o-form-toolbar-button-insert\" mat-stroked-button color=\"primary\" (click)=\"acceptOperation()\">\n        <mat-icon svgIcon=\"ontimize:done\"></mat-icon>\n        <span *ngIf=\"showHeaderActionsText\">{{ 'INSERT' | oTranslate }}</span>\n      </button>\n    </ng-container>\n  </div>\n\n</mat-toolbar>\n",
                inputs: DEFAULT_INPUTS_O_FORM_TOOLBAR,
                outputs: DEFAULT_OUTPUTS_O_FORM_TOOLBAR,
                encapsulation: ViewEncapsulation.None,
                host: {
                    '[class.o-form-toolbar]': 'true'
                },
                styles: [".o-form-toolbar{flex:none;display:block}.o-form-toolbar .o-form-toolbar-header{min-height:50px;max-height:50px;padding:0 16px 0 4px}.o-form-toolbar .o-form-toolbar-header.breadcrumb{padding:16px;min-height:84px;max-height:84px}.o-form-toolbar .o-form-toolbar-header .mat-toolbar-tools{width:100%}.o-form-toolbar .o-form-toolbar-header .mat-toolbar-tools button.o-form-toolbar-button.mat-icon-button.mat-button-base{padding:0;margin:0;background:0 0}.o-form-toolbar .o-form-toolbar-header .o-breadcrumb{width:100%;height:32px;min-height:initial}.o-form-toolbar .o-form-toolbar-header .o-breadcrumb .mat-toolbar{padding:0;min-height:initial;max-height:initial;height:100%}"]
            }] }
];
OFormToolbarComponent.ctorParameters = () => [
    { type: OFormComponent },
    { type: ElementRef },
    { type: Injector }
];
OFormToolbarComponent.propDecorators = {
    breadContainer: [{ type: ViewChild, args: ['breadcrumb', { read: ViewContainerRef, static: false },] }]
};
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OFormToolbarComponent.prototype, "showHeaderActionsText", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OFormToolbarComponent.prototype, "showHeaderNavigation", void 0);
//# sourceMappingURL=data:application/json;base64,