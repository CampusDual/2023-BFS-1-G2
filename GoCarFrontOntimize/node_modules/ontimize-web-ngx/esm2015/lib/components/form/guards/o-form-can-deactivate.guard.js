import { Injectable } from '@angular/core';
import { combineLatest } from 'rxjs';
import { BooleanConverter } from '../../../decorators/input-converter';
import { Codes } from '../../../util/codes';
import { Util } from '../../../util/util';
import { OFormConfirmExitService } from '../navigation/o-form-confirm-exit.service';
export class CanDeactivateFormGuard {
    constructor(oFormConfirmExitService) {
        this.oFormConfirmExitService = oFormConfirmExitService;
        this.oForms = {};
    }
    canDeactivate(component, curr, state, future) {
        if (BooleanConverter(future.root.queryParams[Codes.IGNORE_CAN_DEACTIVATE])) {
            return true;
        }
        if (Object.keys(this.oForms).length) {
            return new Promise((resolve) => {
                const arr = Object.keys(this.oForms).map((key) => Util.wrapIntoObservable(this.oForms[key].canDeactivate()));
                combineLatest(arr).subscribe(res => {
                    resolve(res.every(value => value));
                });
            });
        }
        return true;
    }
    addForm(form) {
        this.oForms[form.oattr] = form;
    }
    removeForm(form) {
        delete this.oForms[form.oattr];
    }
}
CanDeactivateFormGuard.CLASSNAME = 'CanDeactivateFormGuard';
CanDeactivateFormGuard.decorators = [
    { type: Injectable }
];
CanDeactivateFormGuard.ctorParameters = () => [
    { type: OFormConfirmExitService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1mb3JtLWNhbi1kZWFjdGl2YXRlLmd1YXJkLmpzIiwic291cmNlUm9vdCI6Im5nOi8vb250aW1pemUtd2ViLW5neC8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2Zvcm0vZ3VhcmRzL28tZm9ybS1jYW4tZGVhY3RpdmF0ZS5ndWFyZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxhQUFhLEVBQXNDLE1BQU0sTUFBTSxDQUFDO0FBRXpFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUM1QyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDMUMsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFRcEYsTUFBTSxPQUFPLHNCQUFzQjtJQUtqQyxZQUFzQix1QkFBZ0Q7UUFBaEQsNEJBQXVCLEdBQXZCLHVCQUF1QixDQUF5QjtRQUY1RCxXQUFNLEdBQXNDLEVBQUUsQ0FBQztJQUVpQixDQUFDO0lBRTNFLGFBQWEsQ0FBQyxTQUFpQyxFQUFFLElBQTRCLEVBQUUsS0FBMEIsRUFBRSxNQUEyQjtRQUVwSSxJQUFJLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLEVBQUU7WUFDMUUsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUNELElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxFQUFFO1lBQ25DLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtnQkFDN0IsTUFBTSxHQUFHLEdBQTBCLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUNwSSxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFO29CQUNqQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQ3JDLENBQUMsQ0FBQyxDQUFDO1lBQ0wsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELE9BQU8sQ0FBQyxJQUFvQjtRQUMxQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDakMsQ0FBQztJQUVELFVBQVUsQ0FBQyxJQUFvQjtRQUM3QixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2pDLENBQUM7O0FBNUJhLGdDQUFTLEdBQUcsd0JBQXdCLENBQUM7O1lBRnBELFVBQVU7OztZQVBGLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzUHJvbWlzZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbXBpbGVyL3NyYy91dGlsJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFjdGl2YXRlZFJvdXRlU25hcHNob3QsIENhbkRlYWN0aXZhdGUsIFJvdXRlclN0YXRlU25hcHNob3QgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgY29tYmluZUxhdGVzdCwgZnJvbSwgaXNPYnNlcnZhYmxlLCBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBCb29sZWFuQ29udmVydGVyIH0gZnJvbSAnLi4vLi4vLi4vZGVjb3JhdG9ycy9pbnB1dC1jb252ZXJ0ZXInO1xuaW1wb3J0IHsgQ29kZXMgfSBmcm9tICcuLi8uLi8uLi91dGlsL2NvZGVzJztcbmltcG9ydCB7IFV0aWwgfSBmcm9tICcuLi8uLi8uLi91dGlsL3V0aWwnO1xuaW1wb3J0IHsgT0Zvcm1Db25maXJtRXhpdFNlcnZpY2UgfSBmcm9tICcuLi9uYXZpZ2F0aW9uL28tZm9ybS1jb25maXJtLWV4aXQuc2VydmljZSc7XG5pbXBvcnQgeyBPRm9ybUNvbXBvbmVudCB9IGZyb20gJy4uL28tZm9ybS5jb21wb25lbnQnO1xuXG5leHBvcnQgaW50ZXJmYWNlIENhbkNvbXBvbmVudERlYWN0aXZhdGUge1xuICBjYW5EZWFjdGl2YXRlOiAoKSA9PiBPYnNlcnZhYmxlPGJvb2xlYW4+IHwgUHJvbWlzZTxib29sZWFuPiB8IGJvb2xlYW47XG59XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDYW5EZWFjdGl2YXRlRm9ybUd1YXJkIGltcGxlbWVudHMgQ2FuRGVhY3RpdmF0ZTxDYW5Db21wb25lbnREZWFjdGl2YXRlPiB7XG4gIHB1YmxpYyBzdGF0aWMgQ0xBU1NOQU1FID0gJ0NhbkRlYWN0aXZhdGVGb3JtR3VhcmQnO1xuXG4gIHByb3RlY3RlZCBvRm9ybXM6IHsgW2tleTogc3RyaW5nXTogT0Zvcm1Db21wb25lbnQgfSA9IHt9O1xuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBvRm9ybUNvbmZpcm1FeGl0U2VydmljZTogT0Zvcm1Db25maXJtRXhpdFNlcnZpY2UpIHsgfVxuXG4gIGNhbkRlYWN0aXZhdGUoY29tcG9uZW50OiBDYW5Db21wb25lbnREZWFjdGl2YXRlLCBjdXJyOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBzdGF0ZTogUm91dGVyU3RhdGVTbmFwc2hvdCwgZnV0dXJlOiBSb3V0ZXJTdGF0ZVNuYXBzaG90KVxuICAgIDogT2JzZXJ2YWJsZTxib29sZWFuPiB8IFByb21pc2U8Ym9vbGVhbj4gfCBib29sZWFuIHtcbiAgICBpZiAoQm9vbGVhbkNvbnZlcnRlcihmdXR1cmUucm9vdC5xdWVyeVBhcmFtc1tDb2Rlcy5JR05PUkVfQ0FOX0RFQUNUSVZBVEVdKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChPYmplY3Qua2V5cyh0aGlzLm9Gb3JtcykubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgY29uc3QgYXJyOiBPYnNlcnZhYmxlPGJvb2xlYW4+W10gPSBPYmplY3Qua2V5cyh0aGlzLm9Gb3JtcykubWFwKChrZXkpID0+IFV0aWwud3JhcEludG9PYnNlcnZhYmxlKHRoaXMub0Zvcm1zW2tleV0uY2FuRGVhY3RpdmF0ZSgpKSk7XG4gICAgICAgIGNvbWJpbmVMYXRlc3QoYXJyKS5zdWJzY3JpYmUocmVzID0+IHtcbiAgICAgICAgICByZXNvbHZlKHJlcy5ldmVyeSh2YWx1ZSA9PiB2YWx1ZSkpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGFkZEZvcm0oZm9ybTogT0Zvcm1Db21wb25lbnQpIHtcbiAgICB0aGlzLm9Gb3Jtc1tmb3JtLm9hdHRyXSA9IGZvcm07XG4gIH1cblxuICByZW1vdmVGb3JtKGZvcm06IE9Gb3JtQ29tcG9uZW50KSB7XG4gICAgZGVsZXRlIHRoaXMub0Zvcm1zW2Zvcm0ub2F0dHJdO1xuICB9XG59XG5cbiJdfQ==