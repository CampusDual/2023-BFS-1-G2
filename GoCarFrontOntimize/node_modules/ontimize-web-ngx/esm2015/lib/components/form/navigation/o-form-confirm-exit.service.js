import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { DialogService } from '../../../services/dialog.service';
import { Util } from '../../../util/util';
import * as i0 from "@angular/core";
import * as i1 from "../../../services/dialog.service";
export class OFormConfirmExitService {
    constructor(dialogService) {
        this.dialogService = dialogService;
    }
    subscribeToDiscardChanges(form, ignoreAttrs = []) {
        let subscription;
        if (form.isInitialStateChanged(ignoreAttrs) && this.mustShowConfirmationInForm(form)) {
            subscription = this.getConfirmDialogSubscription(form);
        }
        else {
            const observable = new Observable(observer => {
                observer.next(true);
                observer.complete();
            });
            subscription = observable.toPromise();
        }
        return subscription;
    }
    mustShowConfirmationInForm(form) {
        return form.isInInsertMode() || form.isInUpdateMode();
    }
    restart() {
        this.confirmDialogSubscription = null;
    }
    getConfirmDialogSubscription(form) {
        if (!Util.isDefined(this.confirmDialogSubscription)) {
            this.confirmDialogSubscription = new Promise((resolve) => {
                this.dialogService.confirm(form.messageService.getDiscardChangesConfirmationDialogTitle(), form.messageService.getDiscardChangesConfirmationMessage()).then((res) => {
                    this.restart();
                    resolve(res);
                });
            });
        }
        return this.confirmDialogSubscription;
    }
}
OFormConfirmExitService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
OFormConfirmExitService.ctorParameters = () => [
    { type: DialogService }
];
OFormConfirmExitService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function OFormConfirmExitService_Factory() { return new OFormConfirmExitService(i0.ɵɵinject(i1.DialogService)); }, token: OFormConfirmExitService, providedIn: "root" });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1mb3JtLWNvbmZpcm0tZXhpdC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vb250aW1pemUtd2ViLW5neC8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2Zvcm0vbmF2aWdhdGlvbi9vLWZvcm0tY29uZmlybS1leGl0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUNqRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7OztBQU0xQyxNQUFNLE9BQU8sdUJBQXVCO0lBSWxDLFlBQXNCLGFBQTRCO1FBQTVCLGtCQUFhLEdBQWIsYUFBYSxDQUFlO0lBQUksQ0FBQztJQUV2RCx5QkFBeUIsQ0FBQyxJQUFvQixFQUFFLGNBQXdCLEVBQUU7UUFDeEUsSUFBSSxZQUE4QixDQUFDO1FBQ25DLElBQUksSUFBSSxDQUFDLHFCQUFxQixDQUFDLFdBQVcsQ0FBQyxJQUFJLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNwRixZQUFZLEdBQUcsSUFBSSxDQUFDLDRCQUE0QixDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3hEO2FBQU07WUFDTCxNQUFNLFVBQVUsR0FBRyxJQUFJLFVBQVUsQ0FBVSxRQUFRLENBQUMsRUFBRTtnQkFDcEQsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDcEIsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ3RCLENBQUMsQ0FBQyxDQUFDO1lBQ0gsWUFBWSxHQUFHLFVBQVUsQ0FBQyxTQUFTLEVBQUUsQ0FBQztTQUN2QztRQUNELE9BQU8sWUFBWSxDQUFDO0lBQ3RCLENBQUM7SUFFUywwQkFBMEIsQ0FBQyxJQUFvQjtRQUN2RCxPQUFPLElBQUksQ0FBQyxjQUFjLEVBQUUsSUFBSSxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDeEQsQ0FBQztJQUVTLE9BQU87UUFDZixJQUFJLENBQUMseUJBQXlCLEdBQUcsSUFBSSxDQUFDO0lBQ3hDLENBQUM7SUFFUyw0QkFBNEIsQ0FBQyxJQUFvQjtRQUN6RCxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMseUJBQXlCLENBQUMsRUFBRTtZQUNuRCxJQUFJLENBQUMseUJBQXlCLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtnQkFDdkQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQ3hCLElBQUksQ0FBQyxjQUFjLENBQUMsd0NBQXdDLEVBQUUsRUFDOUQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxvQ0FBb0MsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7b0JBQ3ZFLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztvQkFDZixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ2YsQ0FBQyxDQUFDLENBQUE7WUFDTixDQUFDLENBQUMsQ0FBQztTQUNKO1FBQ0QsT0FBTyxJQUFJLENBQUMseUJBQXlCLENBQUM7SUFDeEMsQ0FBQzs7O1lBM0NGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7O1lBTlEsYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IERpYWxvZ1NlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9zZXJ2aWNlcy9kaWFsb2cuc2VydmljZSc7XG5pbXBvcnQgeyBVdGlsIH0gZnJvbSAnLi4vLi4vLi4vdXRpbC91dGlsJztcbmltcG9ydCB7IE9Gb3JtQ29tcG9uZW50IH0gZnJvbSAnLi4vby1mb3JtLmNvbXBvbmVudCc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIE9Gb3JtQ29uZmlybUV4aXRTZXJ2aWNlIHtcblxuICBwcm90ZWN0ZWQgY29uZmlybURpYWxvZ1N1YnNjcmlwdGlvbjogUHJvbWlzZTxib29sZWFuPjtcblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgZGlhbG9nU2VydmljZTogRGlhbG9nU2VydmljZSkgeyB9XG5cbiAgc3Vic2NyaWJlVG9EaXNjYXJkQ2hhbmdlcyhmb3JtOiBPRm9ybUNvbXBvbmVudCwgaWdub3JlQXR0cnM6IHN0cmluZ1tdID0gW10pOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICBsZXQgc3Vic2NyaXB0aW9uOiBQcm9taXNlPGJvb2xlYW4+O1xuICAgIGlmIChmb3JtLmlzSW5pdGlhbFN0YXRlQ2hhbmdlZChpZ25vcmVBdHRycykgJiYgdGhpcy5tdXN0U2hvd0NvbmZpcm1hdGlvbkluRm9ybShmb3JtKSkge1xuICAgICAgc3Vic2NyaXB0aW9uID0gdGhpcy5nZXRDb25maXJtRGlhbG9nU3Vic2NyaXB0aW9uKGZvcm0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBvYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGU8Ym9vbGVhbj4ob2JzZXJ2ZXIgPT4ge1xuICAgICAgICBvYnNlcnZlci5uZXh0KHRydWUpO1xuICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgfSk7XG4gICAgICBzdWJzY3JpcHRpb24gPSBvYnNlcnZhYmxlLnRvUHJvbWlzZSgpO1xuICAgIH1cbiAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICB9XG5cbiAgcHJvdGVjdGVkIG11c3RTaG93Q29uZmlybWF0aW9uSW5Gb3JtKGZvcm06IE9Gb3JtQ29tcG9uZW50KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGZvcm0uaXNJbkluc2VydE1vZGUoKSB8fCBmb3JtLmlzSW5VcGRhdGVNb2RlKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgcmVzdGFydCgpIHtcbiAgICB0aGlzLmNvbmZpcm1EaWFsb2dTdWJzY3JpcHRpb24gPSBudWxsO1xuICB9XG5cbiAgcHJvdGVjdGVkIGdldENvbmZpcm1EaWFsb2dTdWJzY3JpcHRpb24oZm9ybTogT0Zvcm1Db21wb25lbnQpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICBpZiAoIVV0aWwuaXNEZWZpbmVkKHRoaXMuY29uZmlybURpYWxvZ1N1YnNjcmlwdGlvbikpIHtcbiAgICAgIHRoaXMuY29uZmlybURpYWxvZ1N1YnNjcmlwdGlvbiA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgIHRoaXMuZGlhbG9nU2VydmljZS5jb25maXJtKFxuICAgICAgICAgIGZvcm0ubWVzc2FnZVNlcnZpY2UuZ2V0RGlzY2FyZENoYW5nZXNDb25maXJtYXRpb25EaWFsb2dUaXRsZSgpLFxuICAgICAgICAgIGZvcm0ubWVzc2FnZVNlcnZpY2UuZ2V0RGlzY2FyZENoYW5nZXNDb25maXJtYXRpb25NZXNzYWdlKCkpLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgICAgdGhpcy5yZXN0YXJ0KCk7XG4gICAgICAgICAgICByZXNvbHZlKHJlcyk7XG4gICAgICAgICAgfSlcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jb25maXJtRGlhbG9nU3Vic2NyaXB0aW9uO1xuICB9XG59XG5cbiJdfQ==