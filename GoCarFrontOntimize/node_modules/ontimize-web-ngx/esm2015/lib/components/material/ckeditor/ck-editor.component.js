import { Component, ElementRef, EventEmitter, forwardRef, Input, NgZone, Output, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { Util } from '../../../util/util';
const defaults = {
    contentsCss: [''],
    customConfig: ''
};
export class CKEditorComponent {
    constructor(ngZone) {
        this.ngZone = ngZone;
        this.innerValue = '';
        this._readonly = false;
        this.config = {};
        this.skin = 'moono-lisa';
        this.language = 'en';
        this.fullPage = false;
        this.inline = false;
        this.change = new EventEmitter();
        this.ready = new EventEmitter();
        this.blur = new EventEmitter();
        this.focus = new EventEmitter();
    }
    get instance() {
        return this.ckIns;
    }
    set readonly(value) {
        this._readonly = value;
        setTimeout(() => {
            if (Util.isDefined(this.ckIns) && Util.isDefined(this.ckIns.editable())) {
                this.ckIns.setReadOnly(this.readonly);
            }
        });
    }
    get readonly() {
        return this._readonly;
    }
    static getRandomIdentifier(id = '') {
        return 'editor-' + (id !== '' ? id : Math.round(Util.randomNumber() * 100000000));
    }
    ngOnDestroy() {
        this.destroyCKEditor();
    }
    ngAfterViewInit() {
        this.destroyCKEditor();
        this.initCKEditor(CKEditorComponent.getRandomIdentifier(this.id));
    }
    initCKEditor(identifier) {
        if (typeof CKEDITOR === 'undefined') {
            return console.warn('CKEditor 4.x is missing (http://ckeditor.com/)');
        }
        this.identifier = identifier;
        this.ck.nativeElement.setAttribute('name', this.identifier);
        const opt = Object.assign({}, defaults, this.config, {
            readOnly: this.readonly,
            skin: this.skin,
            language: this.language,
            fullPage: this.fullPage,
            inline: this.inline,
            width: '100%'
        });
        this.ckIns = this.inline
            ? CKEDITOR.inline(this.ck.nativeElement, opt)
            : CKEDITOR.replace(this.ck.nativeElement, opt);
        this.ckIns.setData(this.innerValue);
        this.ckIns.on('change', () => {
            const val = this.ckIns.getData();
            this.updateValue(val);
        });
        this.ckIns.on('instanceReady', (evt) => {
            this.ngZone.run(() => {
                this.ready.emit(evt);
            });
        });
        this.ckIns.on('blur', (evt) => {
            this.ngZone.run(() => {
                this.blur.emit(evt);
                this.propagateTouch();
            });
        });
        this.ckIns.on('focus', (evt) => {
            this.ngZone.run(() => {
                this.focus.emit(evt);
            });
        });
    }
    destroyCKEditor() {
        if (this.ckIns) {
            this.ckIns.removeAllListeners();
            if (CKEDITOR.instances.hasOwnProperty(this.ckIns.name)) {
                CKEDITOR.remove(CKEDITOR.instances[this.ckIns.name]);
            }
            this.ckIns.destroy();
            this.ckIns = null;
            const editorEl = document.querySelector('#cke_' + this.identifier);
            if (Util.isDefined(editorEl) && Util.isDefined(editorEl.parentElement)) {
                editorEl.parentElement.removeChild(editorEl);
            }
        }
    }
    updateValue(value) {
        this.ngZone.run(() => {
            this.innerValue = value;
            this.propagateChange(value);
            this.propagateTouch();
            this.change.emit(value);
        });
    }
    writeValue(value) {
        this.innerValue = value || '';
        if (this.ckIns) {
            this.ckIns.setData(this.innerValue);
            const val = this.ckIns.getData();
            this.ckIns.setData(val);
        }
    }
    propagateChange(_) {
    }
    propagateTouch() {
    }
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    registerOnTouched(fn) {
        this.propagateTouch = fn;
    }
}
CKEditorComponent.decorators = [
    { type: Component, args: [{
                selector: 'ck-editor',
                template: `<textarea #ck></textarea>`,
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => CKEditorComponent),
                        multi: true
                    }],
                exportAs: 'ckEditor'
            }] }
];
CKEditorComponent.ctorParameters = () => [
    { type: NgZone }
];
CKEditorComponent.propDecorators = {
    readonly: [{ type: Input }],
    config: [{ type: Input }],
    skin: [{ type: Input }],
    language: [{ type: Input }],
    fullPage: [{ type: Input }],
    inline: [{ type: Input }],
    id: [{ type: Input }],
    change: [{ type: Output }],
    ready: [{ type: Output }],
    blur: [{ type: Output }],
    focus: [{ type: Output }],
    ck: [{ type: ViewChild, args: ['ck', { static: false },] }]
};
//# sourceMappingURL=data:application/json;base64,