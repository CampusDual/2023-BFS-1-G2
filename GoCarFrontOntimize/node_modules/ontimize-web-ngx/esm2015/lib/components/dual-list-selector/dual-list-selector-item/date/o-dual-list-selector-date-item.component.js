import { Component, ChangeDetectionStrategy } from "@angular/core";
export const DEFAULT_DUAL_LIST_SELECTOR_DATE_ITEM = [
    'item',
    'groupedDateColumns: grouped-date-columns',
];
export class ODualListSelectorDateItemComponent {
    constructor() {
        this.dateTypes = [
            { value: 'MONTH', viewValue: 'DUAL_LIST_SELECTOR.GROUP_BY_MONTH' },
            { value: 'YEAR_MONTH', viewValue: 'DUAL_LIST_SELECTOR.GROUP_BY_YEAR_MONTH' },
            { value: 'YEAR', viewValue: 'DUAL_LIST_SELECTOR.GROUP_BY_YEAR' },
            { value: 'YEAR_MONTH_DAY', viewValue: 'DUAL_LIST_SELECTOR.GROUP_BY_YEAR_MONTH_DAY' }
        ];
        this.item = "";
    }
    onSelectionChange(event, itemSelected) {
        let value = event.value;
        let attr = itemSelected;
        let index = this.groupedDateColumns.findIndex(column => column.attr == attr);
        if (index != -1) {
            this.groupedDateColumns.splice(index, 1);
        }
        this.groupedDateColumns.push({ "attr": attr, "type": value });
    }
    getSelectValue() {
        let index = this.groupedDateColumns.findIndex(column => column.attr == this.item);
        return index != -1 ? this.groupedDateColumns[index].type : 'YEAR_MONTH_DAY';
    }
    getViewValue() {
        let value = this.getSelectValue();
        const indexFindValue = this.dateTypes.findIndex(type => type.value == value);
        return indexFindValue > -1 ? this.dateTypes[indexFindValue].viewValue : 'DUAL_LIST_SELECTOR.GROUP_BY_YEAR_MONTH_DAY';
    }
}
ODualListSelectorDateItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-dual-list-selector-date-item',
                template: "<mat-select [value]=\"getSelectValue()\" (selectionChange)=\"onSelectionChange($event,item)\" required>\n  <mat-select-trigger>\n    {{item | oTranslate}} ({{getViewValue() | oTranslate}})\n  </mat-select-trigger>\n  <mat-option *ngFor=\"let type of dateTypes\" [value]=\"type.value\">\n    {{type.viewValue | oTranslate}}\n  </mat-option>\n</mat-select>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                inputs: DEFAULT_DUAL_LIST_SELECTOR_DATE_ITEM
            }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1kdWFsLWxpc3Qtc2VsZWN0b3ItZGF0ZS1pdGVtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL29udGltaXplLXdlYi1uZ3gvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9kdWFsLWxpc3Qtc2VsZWN0b3IvZHVhbC1saXN0LXNlbGVjdG9yLWl0ZW0vZGF0ZS9vLWR1YWwtbGlzdC1zZWxlY3Rvci1kYXRlLWl0ZW0uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHbkUsTUFBTSxDQUFDLE1BQU0sb0NBQW9DLEdBQUc7SUFDbEQsTUFBTTtJQUNOLDBDQUEwQztDQUMzQyxDQUFDO0FBT0YsTUFBTSxPQUFPLGtDQUFrQztJQU4vQztRQU9TLGNBQVMsR0FBRztZQUNqQixFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLG1DQUFtQyxFQUFFO1lBQ2xFLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsd0NBQXdDLEVBQUU7WUFDNUUsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxrQ0FBa0MsRUFBRTtZQUNoRSxFQUFFLEtBQUssRUFBRSxnQkFBZ0IsRUFBRSxTQUFTLEVBQUUsNENBQTRDLEVBQUU7U0FDckYsQ0FBQztRQUNLLFNBQUksR0FBVyxFQUFFLENBQUM7SUF5QjNCLENBQUM7SUFyQkMsaUJBQWlCLENBQUMsS0FBc0IsRUFBRSxZQUFpQjtRQUN6RCxJQUFJLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDO1FBQ3hCLElBQUksSUFBSSxHQUFHLFlBQVksQ0FBQztRQUN4QixJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsQ0FBQztRQUM3RSxJQUFJLEtBQUssSUFBSSxDQUFDLENBQUMsRUFBRTtZQUNmLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQzFDO1FBQ0QsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUE7SUFDL0QsQ0FBQztJQUVELGNBQWM7UUFDWixJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEYsT0FBTyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFBO0lBQzdFLENBQUM7SUFFRCxZQUFZO1FBQ1YsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ2xDLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxLQUFLLENBQUMsQ0FBQztRQUM3RSxPQUFPLGNBQWMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLDRDQUE0QyxDQUFDO0lBQ3ZILENBQUM7OztZQXBDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGdDQUFnQztnQkFDMUMsZ1hBQThEO2dCQUM5RCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFDL0MsTUFBTSxFQUFFLG9DQUFvQzthQUM3QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgTWF0U2VsZWN0Q2hhbmdlIH0gZnJvbSBcIkBhbmd1bGFyL21hdGVyaWFsXCI7XG5pbXBvcnQgeyBPR3JvdXBlZENvbHVtblR5cGVzIH0gZnJvbSBcIi4uLy4uLy4uLy4uL3R5cGVzL28tZ3JvdXBlZC1jb2x1bW4tdHlwZXMudHlwZVwiO1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfRFVBTF9MSVNUX1NFTEVDVE9SX0RBVEVfSVRFTSA9IFtcbiAgJ2l0ZW0nLFxuICAnZ3JvdXBlZERhdGVDb2x1bW5zOiBncm91cGVkLWRhdGUtY29sdW1ucycsXG5dO1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnby1kdWFsLWxpc3Qtc2VsZWN0b3ItZGF0ZS1pdGVtJyxcbiAgdGVtcGxhdGVVcmw6ICcuL28tZHVhbC1saXN0LXNlbGVjdG9yLWRhdGUtaXRlbS5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBpbnB1dHM6IERFRkFVTFRfRFVBTF9MSVNUX1NFTEVDVE9SX0RBVEVfSVRFTVxufSlcbmV4cG9ydCBjbGFzcyBPRHVhbExpc3RTZWxlY3RvckRhdGVJdGVtQ29tcG9uZW50IHtcbiAgcHVibGljIGRhdGVUeXBlcyA9IFtcbiAgICB7IHZhbHVlOiAnTU9OVEgnLCB2aWV3VmFsdWU6ICdEVUFMX0xJU1RfU0VMRUNUT1IuR1JPVVBfQllfTU9OVEgnIH0sXG4gICAgeyB2YWx1ZTogJ1lFQVJfTU9OVEgnLCB2aWV3VmFsdWU6ICdEVUFMX0xJU1RfU0VMRUNUT1IuR1JPVVBfQllfWUVBUl9NT05USCcgfSxcbiAgICB7IHZhbHVlOiAnWUVBUicsIHZpZXdWYWx1ZTogJ0RVQUxfTElTVF9TRUxFQ1RPUi5HUk9VUF9CWV9ZRUFSJyB9LFxuICAgIHsgdmFsdWU6ICdZRUFSX01PTlRIX0RBWScsIHZpZXdWYWx1ZTogJ0RVQUxfTElTVF9TRUxFQ1RPUi5HUk9VUF9CWV9ZRUFSX01PTlRIX0RBWScgfVxuICBdO1xuICBwdWJsaWMgaXRlbTogc3RyaW5nID0gXCJcIjtcbiAgcHVibGljIGdyb3VwZWREYXRlQ29sdW1uczogT0dyb3VwZWRDb2x1bW5UeXBlc1tdO1xuXG5cbiAgb25TZWxlY3Rpb25DaGFuZ2UoZXZlbnQ6IE1hdFNlbGVjdENoYW5nZSwgaXRlbVNlbGVjdGVkOiBhbnkpIHtcbiAgICBsZXQgdmFsdWUgPSBldmVudC52YWx1ZTtcbiAgICBsZXQgYXR0ciA9IGl0ZW1TZWxlY3RlZDtcbiAgICBsZXQgaW5kZXggPSB0aGlzLmdyb3VwZWREYXRlQ29sdW1ucy5maW5kSW5kZXgoY29sdW1uID0+IGNvbHVtbi5hdHRyID09IGF0dHIpO1xuICAgIGlmIChpbmRleCAhPSAtMSkge1xuICAgICAgdGhpcy5ncm91cGVkRGF0ZUNvbHVtbnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gICAgdGhpcy5ncm91cGVkRGF0ZUNvbHVtbnMucHVzaCh7IFwiYXR0clwiOiBhdHRyLCBcInR5cGVcIjogdmFsdWUgfSlcbiAgfVxuXG4gIGdldFNlbGVjdFZhbHVlKCk6IHN0cmluZyB7XG4gICAgbGV0IGluZGV4ID0gdGhpcy5ncm91cGVkRGF0ZUNvbHVtbnMuZmluZEluZGV4KGNvbHVtbiA9PiBjb2x1bW4uYXR0ciA9PSB0aGlzLml0ZW0pO1xuICAgIHJldHVybiBpbmRleCAhPSAtMSA/IHRoaXMuZ3JvdXBlZERhdGVDb2x1bW5zW2luZGV4XS50eXBlIDogJ1lFQVJfTU9OVEhfREFZJ1xuICB9XG5cbiAgZ2V0Vmlld1ZhbHVlKCk6IHN0cmluZyB7XG4gICAgbGV0IHZhbHVlID0gdGhpcy5nZXRTZWxlY3RWYWx1ZSgpO1xuICAgIGNvbnN0IGluZGV4RmluZFZhbHVlID0gdGhpcy5kYXRlVHlwZXMuZmluZEluZGV4KHR5cGUgPT4gdHlwZS52YWx1ZSA9PSB2YWx1ZSk7XG4gICAgcmV0dXJuIGluZGV4RmluZFZhbHVlID4gLTEgPyB0aGlzLmRhdGVUeXBlc1tpbmRleEZpbmRWYWx1ZV0udmlld1ZhbHVlIDogJ0RVQUxfTElTVF9TRUxFQ1RPUi5HUk9VUF9CWV9ZRUFSX01PTlRIX0RBWSc7XG4gIH1cblxufSJdfQ==