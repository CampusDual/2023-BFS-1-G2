import { moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';
import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';
import { Codes } from '../../util';
export const DEFAULT_DUAL_LIST_SELECTOR = [
    'key',
    'display',
    'dataSource:data-source',
    'dataDestination: data-destination',
    'titleListDataSource: title-list-data-source',
    'titleListDataDestination: title-list-data-destination',
    'groupedColumnTypes:grouped-column-types',
    'description'
];
export class ODualListSelectorComponent {
    constructor() {
        this.dataSource = [];
        this.dataDestination = [];
        this.titleListDataSource = '';
        this.titleListDataDestination = '';
        this.description = '';
        this.key = '';
        this.display = '';
        this.groupedColumnTypes = [];
    }
    drop(event) {
        if (event.previousContainer === event.container) {
            moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);
        }
        else {
            transferArrayItem(event.previousContainer.data, event.container.data, event.previousIndex, event.currentIndex);
        }
    }
    addToGroupedColumns(columnsToGrouped) {
        const self = this;
        columnsToGrouped.selectedOptions.selected.forEach(x => {
            self.dataDestination.push(x.value);
            self.dataSource = this.dataSource.filter(groupedColumn => groupedColumn[this.key] != x.value[this.key]);
        });
    }
    removeGroupedColumns(groupedColumns) {
        const self = this;
        groupedColumns.selectedOptions.selected.forEach(x => {
            self.dataSource.push(x.value);
            self.dataDestination = this.dataDestination.filter(groupedColumn => groupedColumn[this.key] != x.value[this.key]);
        });
    }
    onRemoveGroupColumn(column) {
        this.dataDestination = this.dataDestination.filter((oCol) => oCol[this.key] !== column[this.key]);
        this.dataSource.push(column);
    }
    isAllSelected(list) {
        const numSelected = list.selectedOptions.selected.length;
        const numRows = list.options ? list.options.length : 0;
        return numRows !== 0 && numSelected === numRows;
    }
    masterToggle(list) {
        list.selectedOptions.selected.length === list.options.length ?
            list.selectedOptions.clear() :
            list.selectAll();
    }
    hasValue(list) {
        return list.selectedOptions.selected.length > 0;
    }
    isDisabledSortAsc(list) {
        let sortAsc = true;
        if (list.selectedOptions.selected.length !== 0) {
            const index = list.options.toArray().findIndex(x => x.value[this.key] === list.selectedOptions.selected[0].value[this.key]);
            if (index > 0) {
                sortAsc = false;
            }
        }
        return sortAsc;
    }
    isDisabledSortDesc(list) {
        let sortDesc = true;
        if (list.selectedOptions.selected.length !== 0) {
            const index = list.options.toArray().findIndex(x => x.value[this.key] === list.selectedOptions.selected[0].value[this.key]);
            if (index >= 0 && (index + 1) !== list.options.toArray().length) {
                sortDesc = false;
            }
        }
        return sortDesc;
    }
    sortAscSelectedItems(list) {
        const self = this;
        const itemsSelected = list.selectedOptions.selected;
        itemsSelected.forEach(item => {
            const index = list.options.toArray().findIndex(x => x.value[this.key] === item.value[this.key]);
            moveItemInArray(this.dataDestination, index, index - 1);
        });
    }
    sortDescSelectedItems(list) {
        const self = this;
        const itemsSelected = list.selectedOptions.selected;
        itemsSelected.forEach(item => {
            const index = list.options.toArray().findIndex(x => x.value[this.key] === item.value[this.key]);
            moveItemInArray(self.dataDestination, index, index + 1);
        });
    }
    getCheckboxLabel(list) {
        return '(' + list.selectedOptions.selected.length + '/' + list.options.length + ')';
    }
    getSelectedItems() {
        return this.dataDestination;
    }
    setSelectedItems(items) {
        this.dataDestination = items;
    }
    getGroupedColumnTypes() {
        return this.groupedColumnTypes;
    }
    get groupedDateColumns() {
        return this.groupedColumnTypes.filter(groupedColumn => Codes.TYPES_DATE_GROUPS.findIndex(type => type === groupedColumn.type) > -1);
    }
}
ODualListSelectorComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-dual-list-selector',
                template: "<div class=\"mat-subheader\">{{description | oTranslate }} </div>\n\n<div class=\"o-dual-list-selector-wrapper-selector-list\">\n\n  <div class=\"o-dual-list-selector-list\" fxLayout=\"column\" fxLayoutAlign=\"start stretch\" fxFlex=\"50%\">\n    <div fxLayout=\"row\" fxFlex class=\"o-dual-list-selector-source-wrapper\">\n      <mat-selection-list fxFlex dense cdkDropList id=\"item-source-list\" #itemsList [cdkDropListData]=\"dataSource\"\n        [cdkDropListConnectedTo]=\"['item-destination-list']\" (cdkDropListDropped)=\"drop($event)\" cdkDropListSortingDisabled>\n\n        <mat-list-item>\n          <mat-checkbox (change)=\"$event ? masterToggle(itemsList) : null\" [checked]=\"isAllSelected(itemsList)\"\n            [indeterminate]=\"hasValue(itemsList)  && !isAllSelected(itemsList)\" fxFlex>\n            <span fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n              <span>{{ titleListDataSource | oTranslate }}</span>\n              <span>{{ getCheckboxLabel(itemsList) }} </span>\n            </span>\n          </mat-checkbox>\n        </mat-list-item>\n\n        <mat-list-option checkboxPosition=\"before\" *ngFor=\"let item of dataSource\" [value]=\"item\" cdkDrag class=\"o-drag-list-item-box\">\n          <span matLine>{{ (item[display]) | oTranslate }} </span>\n        </mat-list-option>\n      </mat-selection-list>\n\n      <div fxLayout=\"column\" fxLayoutAlign=\"center center\" fxFlex=\"50px\" fxLayoutGap=\"24px\">\n        <button mat-mini-fab (click)=\"addToGroupedColumns(itemsList)\" [disabled]=\"itemsList.selectedOptions.selected.length===0\">\n          <mat-icon>chevron_right</mat-icon>\n        </button>\n        <button mat-mini-fab (click)=\"removeGroupedColumns(selectedItemsList)\" [disabled]=\"selectedItemsList.selectedOptions.selected.length===0\">\n          <mat-icon>chevron_left</mat-icon>\n        </button>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"o-dual-list-selector-list\" fxLayout=\"column\" \u00BAfxLayoutAlign=\"start stretch\" fxFlex=\"50%\">\n    <div fxLayout=\"row\" fxFlex class=\"o-dual-list-selector-destination-wrapper\">\n      <mat-selection-list fxFlex dense cdkDropList id=\"item-destination-list\" #selectedItemsList [cdkDropListData]=\"dataDestination\"\n        [cdkDropListConnectedTo]=\"['item-source-list']\" (cdkDropListDropped)=\"drop($event)\">\n        <mat-list-item>\n          <mat-checkbox (change)=\"$event ? masterToggle(selectedItemsList) : null\" [checked]=\"isAllSelected(selectedItemsList)\"\n            [indeterminate]=\"hasValue(selectedItemsList) && !isAllSelected(selectedItemsList)\" fxFlex>\n            <span fxLayoutAlign=\"space-between center\">\n              <span>{{ titleListDataDestination | oTranslate}}</span>\n              <span>{{ getCheckboxLabel(selectedItemsList) }}</span>\n            </span>\n          </mat-checkbox>\n        </mat-list-item>\n\n        <mat-list-option checkboxPosition=\"before\" *ngFor=\"let itemSelected of dataDestination\" [value]=\"itemSelected\" cdkDrag\n          class=\"o-drag-list-item-box\">\n\n          <ng-container *ngIf=\"itemSelected.type === 'date'; else defaultRenderer\">\n            <o-dual-list-selector-date-item [item]=itemSelected.attr [grouped-date-columns]=\"groupedColumnTypes\"></o-dual-list-selector-date-item>\n          </ng-container>\n\n          <ng-template #defaultRenderer>\n            <span matLine>{{ itemSelected[display] | oTranslate }} </span>\n          </ng-template>\n\n        </mat-list-option>\n\n        <div class=\"mat-caption drop-empty-message\" *ngIf=\"dataDestination.length===0\">\n          {{ 'DUAL_LIST_SELECTOR.DROP_EMPTY_MESSAGE' | oTranslate }}\n        </div>\n      </mat-selection-list>\n\n\n      <div fxLayout=\"column\" fxLayoutAlign=\"center center\" fxFlex=\"50px\" fxLayoutGap=\"24px\">\n        <button mat-mini-fab [disabled]=\"isDisabledSortAsc(selectedItemsList)\" (click)=\"sortAscSelectedItems(selectedItemsList)\">\n          <mat-icon>expand_less</mat-icon>\n        </button>\n        <button mat-mini-fab [disabled]=\"isDisabledSortDesc(selectedItemsList)\" (click)=\"sortDescSelectedItems(selectedItemsList)\">\n          <mat-icon>expand_more</mat-icon>\n        </button>\n      </div>\n    </div>\n\n  </div>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                inputs: DEFAULT_DUAL_LIST_SELECTOR,
                host: {
                    '[class.o-dual-list-selector]': 'true'
                },
                styles: [".o-dual-list-selector{width:100%;height:100%;display:flex;flex-direction:column;flex-wrap:nowrap}.o-dual-list-selector .o-dual-list-selector-wrapper-selector-list{flex:1}.o-dual-list-selector .o-dual-list-selector-wrapper-selector-list .o-dual-list-selector-destination-wrapper,.o-dual-list-selector .o-dual-list-selector-wrapper-selector-list .o-dual-list-selector-source-wrapper{overflow:auto}.o-dual-list-selector .o-dual-list-selector-list .mat-mini-fab{line-height:14px;height:18px;width:18px}.o-dual-list-selector .o-dual-list-selector-list .mat-mini-fab .mat-button-wrapper{padding:0;line-height:14px}.o-dual-list-selector .o-dual-list-selector-list .mat-mini-fab .mat-button-wrapper .mat-icon{font-size:18px;height:18px;width:18px}.o-dual-list-selector .o-dual-list-selector-list .mat-selection-list.mat-list-base{overflow-y:scroll;width:100%;position:relative;border-radius:4px;padding:16px}.o-dual-list-selector .o-dual-list-selector-list .mat-selection-list.mat-list-base .mat-list-item.mat-list-item:not(.mat-list-option){margin:0}.o-dual-list-selector .o-dual-list-selector-list .mat-selection-list.mat-list-base .mat-list-item.mat-list-item:not(.mat-list-option) .mat-checkbox-label{font-weight:500}.o-dual-list-selector .o-dual-list-selector-list .mat-selection-list.mat-list-base .mat-list-item.mat-list-item:not(.mat-list-option) .mat-checkbox-label,.o-dual-list-selector .o-dual-list-selector-list .mat-selection-list.mat-list-base .mat-list-item.mat-list-item:not(.mat-list-option) .mat-checkbox-layout{width:100%}.o-dual-list-selector .o-dual-list-selector-list .mat-list-option.cdk-drag.o-drag-list-item-box .mat-list-item-content{cursor:move}.o-dual-list-selector .o-dual-list-selector-list .drop-empty-message{position:absolute;width:calc(100% - 16px);text-align:center;opacity:.5;top:50%}"]
            }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1kdWFsLWxpc3Qtc2VsZWN0b3IuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vb250aW1pemUtd2ViLW5neC8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2R1YWwtbGlzdC1zZWxlY3Rvci9vLWR1YWwtbGlzdC1zZWxlY3Rvci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFlLGVBQWUsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3pGLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHdEYsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFlBQVksQ0FBQztBQUVuQyxNQUFNLENBQUMsTUFBTSwwQkFBMEIsR0FBRztJQUV4QyxLQUFLO0lBRUwsU0FBUztJQUVULHdCQUF3QjtJQUV4QixtQ0FBbUM7SUFDbkMsNkNBQTZDO0lBQzdDLHVEQUF1RDtJQUN2RCx5Q0FBeUM7SUFDekMsYUFBYTtDQUNkLENBQUM7QUFhRixNQUFNLE9BQU8sMEJBQTBCO0lBWHZDO1FBYVMsZUFBVSxHQUFlLEVBQUUsQ0FBQztRQUM1QixvQkFBZSxHQUFlLEVBQUUsQ0FBQztRQUNqQyx3QkFBbUIsR0FBVyxFQUFFLENBQUM7UUFDakMsNkJBQXdCLEdBQVcsRUFBRSxDQUFDO1FBQ3RDLGdCQUFXLEdBQUcsRUFBRSxDQUFDO1FBQ2pCLFFBQUcsR0FBRyxFQUFFLENBQUM7UUFDVCxZQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2IsdUJBQWtCLEdBQTBCLEVBQUUsQ0FBQztJQWtJeEQsQ0FBQztJQWhJQyxJQUFJLENBQUMsS0FBNEI7UUFFL0IsSUFBSSxLQUFLLENBQUMsaUJBQWlCLEtBQUssS0FBSyxDQUFDLFNBQVMsRUFBRTtZQUMvQyxlQUFlLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLGFBQWEsRUFBRSxLQUFLLENB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RyxDQUFDO0lBQ3RGLENBQUM7SUFNRCxnQkFBZ0I7UUFDZCxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUM7SUFDOUIsQ0FBQztJQU1ELGdCQUFnQixDQUFDLEtBQWlCO1FBQ2hDLElBQUksQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDO0lBQy9CLENBQUM7SUFFRCxxQkFBcUI7UUFDbkIsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUM7SUFDakMsQ0FBQztJQUNELElBQUksa0JBQWtCO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEtBQUssYUFBYSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDckksQ0FBQzs7O1lBckpGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsc0JBQXNCO2dCQUNoQyxrc0lBQW9EO2dCQUVwRCxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtnQkFDckMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07Z0JBQy9DLE1BQU0sRUFBRSwwQkFBMEI7Z0JBQ2xDLElBQUksRUFBRTtvQkFDSiw4QkFBOEIsRUFBRSxNQUFNO2lCQUN2Qzs7YUFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENka0RyYWdEcm9wLCBtb3ZlSXRlbUluQXJyYXksIHRyYW5zZmVyQXJyYXlJdGVtIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2RyYWctZHJvcCc7XG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTWF0U2VsZWN0aW9uTGlzdCB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsJztcbmltcG9ydCB7IE9Hcm91cGVkQ29sdW1uVHlwZXMgfSBmcm9tICcuLi8uLi90eXBlcyc7XG5pbXBvcnQgeyBDb2RlcyB9IGZyb20gJy4uLy4uL3V0aWwnO1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9EVUFMX0xJU1RfU0VMRUNUT1IgPSBbXG4gIC8va2V5OiBUaGUgdW5pcXVlIGlkZW50aWZpZXIgZmllbGQgb2YgZWFjaCBvYmplY3QgaW4gdGhlIGRhdGEgc291cmNlIGFuZCBkYXRhIGRlc3RpbmF0aW9uIGFycmF5c1xuICAna2V5JyxcbiAgLy9kaXNwbGF5IC0gVGhlIGZpZWxkIG9mIGVhY2ggb2JqZWN0IGZvciBkaXNwbGF5aW5nIHRoZSBvYmplY3QgZWFjaCB0aGUgbGlzdHMsXG4gICdkaXNwbGF5JyxcbiAgLy9kYXRhLXNvdXJjZTogVGhlIHNvdXJjZSBhcnJheSBvZiBvYmplY3RzIG9yIHN0cmluZ3MgZm9yIHRoZSBsaXN0LlxuICAnZGF0YVNvdXJjZTpkYXRhLXNvdXJjZScsXG4gIC8vZGF0YS1kZXN0aW5hdGlvbiA6IFRoZSBkZXN0aW5hdGlvbiBhcnJheSBvZiBvYmplY3RzIG9yIHN0cmluZ3Mgc2VsZWN0ZWQgZnJvbSB0aGUgc291cmNlXG4gICdkYXRhRGVzdGluYXRpb246IGRhdGEtZGVzdGluYXRpb24nLFxuICAndGl0bGVMaXN0RGF0YVNvdXJjZTogdGl0bGUtbGlzdC1kYXRhLXNvdXJjZScsXG4gICd0aXRsZUxpc3REYXRhRGVzdGluYXRpb246IHRpdGxlLWxpc3QtZGF0YS1kZXN0aW5hdGlvbicsXG4gICdncm91cGVkQ29sdW1uVHlwZXM6Z3JvdXBlZC1jb2x1bW4tdHlwZXMnLFxuICAnZGVzY3JpcHRpb24nXG5dO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdvLWR1YWwtbGlzdC1zZWxlY3RvcicsXG4gIHRlbXBsYXRlVXJsOiAnLi9vLWR1YWwtbGlzdC1zZWxlY3Rvci5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL28tZHVhbC1saXN0LXNlbGVjdG9yLmNvbXBvbmVudC5zY3NzJ10sXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBpbnB1dHM6IERFRkFVTFRfRFVBTF9MSVNUX1NFTEVDVE9SLFxuICBob3N0OiB7XG4gICAgJ1tjbGFzcy5vLWR1YWwtbGlzdC1zZWxlY3Rvcl0nOiAndHJ1ZSdcbiAgfVxufSlcbmV4cG9ydCBjbGFzcyBPRHVhbExpc3RTZWxlY3RvckNvbXBvbmVudCB7XG5cbiAgcHVibGljIGRhdGFTb3VyY2U6IEFycmF5PGFueT4gPSBbXTtcbiAgcHVibGljIGRhdGFEZXN0aW5hdGlvbjogQXJyYXk8YW55PiA9IFtdO1xuICBwdWJsaWMgdGl0bGVMaXN0RGF0YVNvdXJjZTogc3RyaW5nID0gJyc7XG4gIHB1YmxpYyB0aXRsZUxpc3REYXRhRGVzdGluYXRpb246IHN0cmluZyA9ICcnO1xuICBwdWJsaWMgZGVzY3JpcHRpb24gPSAnJztcbiAgcHVibGljIGtleSA9ICcnO1xuICBwdWJsaWMgZGlzcGxheSA9ICcnO1xuICBwdWJsaWMgZ3JvdXBlZENvbHVtblR5cGVzOiBPR3JvdXBlZENvbHVtblR5cGVzW10gPSBbXTtcblxuICBkcm9wKGV2ZW50OiBDZGtEcmFnRHJvcDxzdHJpbmdbXT4pIHtcblxuICAgIGlmIChldmVudC5wcmV2aW91c0NvbnRhaW5lciA9PT0gZXZlbnQuY29udGFpbmVyKSB7XG4gICAgICBtb3ZlSXRlbUluQXJyYXkoZXZlbnQuY29udGFpbmVyLmRhdGEsIGV2ZW50LnByZXZpb3VzSW5kZXgsIGV2ZW50LmN1cnJlbnRJbmRleCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyYW5zZmVyQXJyYXlJdGVtKGV2ZW50LnByZXZpb3VzQ29udGFpbmVyLmRhdGEsXG4gICAgICAgIGV2ZW50LmNvbnRhaW5lci5kYXRhLFxuICAgICAgICBldmVudC5wcmV2aW91c0luZGV4LFxuICAgICAgICBldmVudC5jdXJyZW50SW5kZXgpO1xuICAgIH1cbiAgfVxuXG4gIGFkZFRvR3JvdXBlZENvbHVtbnMoY29sdW1uc1RvR3JvdXBlZDogTWF0U2VsZWN0aW9uTGlzdCkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGNvbHVtbnNUb0dyb3VwZWQuc2VsZWN0ZWRPcHRpb25zLnNlbGVjdGVkLmZvckVhY2goeCA9PiB7XG4gICAgICAvL2FkZGVkIGluIGRhdGFEZXN0aW5hdGlvblxuICAgICAgc2VsZi5kYXRhRGVzdGluYXRpb24ucHVzaCh4LnZhbHVlKTtcbiAgICAgIC8vcmVtb3ZlIGl0ZW0gaW4gZGF0YVNvdXJjZVxuICAgICAgc2VsZi5kYXRhU291cmNlID0gdGhpcy5kYXRhU291cmNlLmZpbHRlcihncm91cGVkQ29sdW1uID0+IGdyb3VwZWRDb2x1bW5bdGhpcy5rZXldICE9IHgudmFsdWVbdGhpcy5rZXldKTtcbiAgICB9KTtcblxuICB9XG5cbiAgcmVtb3ZlR3JvdXBlZENvbHVtbnMoZ3JvdXBlZENvbHVtbnM6IE1hdFNlbGVjdGlvbkxpc3QpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBncm91cGVkQ29sdW1ucy5zZWxlY3RlZE9wdGlvbnMuc2VsZWN0ZWQuZm9yRWFjaCh4ID0+IHtcblxuICAgICAgc2VsZi5kYXRhU291cmNlLnB1c2goeC52YWx1ZSk7XG4gICAgICBzZWxmLmRhdGFEZXN0aW5hdGlvbiA9IHRoaXMuZGF0YURlc3RpbmF0aW9uLmZpbHRlcihncm91cGVkQ29sdW1uID0+IGdyb3VwZWRDb2x1bW5bdGhpcy5rZXldICE9IHgudmFsdWVbdGhpcy5rZXldKTtcbiAgICB9KTtcbiAgfVxuXG4gIG9uUmVtb3ZlR3JvdXBDb2x1bW4oY29sdW1uOiBhbnkpIHtcbiAgICB0aGlzLmRhdGFEZXN0aW5hdGlvbiA9IHRoaXMuZGF0YURlc3RpbmF0aW9uLmZpbHRlcigob0NvbDogYW55KSA9PiBvQ29sW3RoaXMua2V5XSAhPT0gY29sdW1uW3RoaXMua2V5XSk7XG4gICAgdGhpcy5kYXRhU291cmNlLnB1c2goY29sdW1uKTtcbiAgfVxuXG4gIGlzQWxsU2VsZWN0ZWQobGlzdDogTWF0U2VsZWN0aW9uTGlzdCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IG51bVNlbGVjdGVkID0gbGlzdC5zZWxlY3RlZE9wdGlvbnMuc2VsZWN0ZWQubGVuZ3RoO1xuICAgIGNvbnN0IG51bVJvd3MgPSBsaXN0Lm9wdGlvbnMgPyBsaXN0Lm9wdGlvbnMubGVuZ3RoIDogMDtcbiAgICByZXR1cm4gbnVtUm93cyAhPT0gMCAmJiBudW1TZWxlY3RlZCA9PT0gbnVtUm93cztcblxuICB9XG5cbiAgbWFzdGVyVG9nZ2xlKGxpc3Q6IE1hdFNlbGVjdGlvbkxpc3QpIHtcbiAgICBsaXN0LnNlbGVjdGVkT3B0aW9ucy5zZWxlY3RlZC5sZW5ndGggPT09IGxpc3Qub3B0aW9ucy5sZW5ndGggP1xuICAgICAgbGlzdC5zZWxlY3RlZE9wdGlvbnMuY2xlYXIoKSA6XG4gICAgICBsaXN0LnNlbGVjdEFsbCgpO1xuXG4gIH1cblxuICBoYXNWYWx1ZShsaXN0OiBNYXRTZWxlY3Rpb25MaXN0KSB7XG4gICAgcmV0dXJuIGxpc3Quc2VsZWN0ZWRPcHRpb25zLnNlbGVjdGVkLmxlbmd0aCA+IDBcbiAgfVxuICBpc0Rpc2FibGVkU29ydEFzYyhsaXN0OiBNYXRTZWxlY3Rpb25MaXN0KSB7XG4gICAgbGV0IHNvcnRBc2MgPSB0cnVlO1xuICAgIGlmIChsaXN0LnNlbGVjdGVkT3B0aW9ucy5zZWxlY3RlZC5sZW5ndGggIT09IDApIHtcbiAgICAgIGNvbnN0IGluZGV4ID0gbGlzdC5vcHRpb25zLnRvQXJyYXkoKS5maW5kSW5kZXgoeCA9PiB4LnZhbHVlW3RoaXMua2V5XSA9PT0gbGlzdC5zZWxlY3RlZE9wdGlvbnMuc2VsZWN0ZWRbMF0udmFsdWVbdGhpcy5rZXldKTtcblxuICAgICAgaWYgKGluZGV4ID4gMCkge1xuICAgICAgICBzb3J0QXNjID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICB9XG4gICAgcmV0dXJuIHNvcnRBc2M7XG4gIH1cblxuICBpc0Rpc2FibGVkU29ydERlc2MobGlzdDogTWF0U2VsZWN0aW9uTGlzdCkge1xuICAgIGxldCBzb3J0RGVzYyA9IHRydWU7XG4gICAgaWYgKGxpc3Quc2VsZWN0ZWRPcHRpb25zLnNlbGVjdGVkLmxlbmd0aCAhPT0gMCkge1xuICAgICAgY29uc3QgaW5kZXggPSBsaXN0Lm9wdGlvbnMudG9BcnJheSgpLmZpbmRJbmRleCh4ID0+IHgudmFsdWVbdGhpcy5rZXldID09PSBsaXN0LnNlbGVjdGVkT3B0aW9ucy5zZWxlY3RlZFswXS52YWx1ZVt0aGlzLmtleV0pO1xuXG4gICAgICBpZiAoaW5kZXggPj0gMCAmJiAoaW5kZXggKyAxKSAhPT0gbGlzdC5vcHRpb25zLnRvQXJyYXkoKS5sZW5ndGgpIHtcbiAgICAgICAgc29ydERlc2MgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgIH1cbiAgICByZXR1cm4gc29ydERlc2M7XG4gIH1cblxuICBzb3J0QXNjU2VsZWN0ZWRJdGVtcyhsaXN0OiBNYXRTZWxlY3Rpb25MaXN0KSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgY29uc3QgaXRlbXNTZWxlY3RlZCA9IGxpc3Quc2VsZWN0ZWRPcHRpb25zLnNlbGVjdGVkO1xuICAgIGl0ZW1zU2VsZWN0ZWQuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIGNvbnN0IGluZGV4ID0gbGlzdC5vcHRpb25zLnRvQXJyYXkoKS5maW5kSW5kZXgoeCA9PiB4LnZhbHVlW3RoaXMua2V5XSA9PT0gaXRlbS52YWx1ZVt0aGlzLmtleV0pO1xuICAgICAgbW92ZUl0ZW1JbkFycmF5KHRoaXMuZGF0YURlc3RpbmF0aW9uLCBpbmRleCwgaW5kZXggLSAxKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTb3J0cyBkZXNjIHNlbGVjdGVkIGl0ZW1zXG4gICAqIEBwYXJhbSBsaXN0XG4gICAqL1xuICBzb3J0RGVzY1NlbGVjdGVkSXRlbXMobGlzdDogTWF0U2VsZWN0aW9uTGlzdCkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGNvbnN0IGl0ZW1zU2VsZWN0ZWQgPSBsaXN0LnNlbGVjdGVkT3B0aW9ucy5zZWxlY3RlZDtcbiAgICBpdGVtc1NlbGVjdGVkLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICBjb25zdCBpbmRleCA9IGxpc3Qub3B0aW9ucy50b0FycmF5KCkuZmluZEluZGV4KHggPT4geC52YWx1ZVt0aGlzLmtleV0gPT09IGl0ZW0udmFsdWVbdGhpcy5rZXldKTtcbiAgICAgIG1vdmVJdGVtSW5BcnJheShzZWxmLmRhdGFEZXN0aW5hdGlvbiwgaW5kZXgsIGluZGV4ICsgMSk7XG4gICAgfSk7XG4gIH1cblxuICBnZXRDaGVja2JveExhYmVsKGxpc3Q6IE1hdFNlbGVjdGlvbkxpc3QpIHtcbiAgICByZXR1cm4gJygnICsgbGlzdC5zZWxlY3RlZE9wdGlvbnMuc2VsZWN0ZWQubGVuZ3RoICsgJy8nICsgbGlzdC5vcHRpb25zLmxlbmd0aCArICcpJztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHNlbGVjdGVkIGl0ZW1zXG4gICAqIEByZXR1cm5zIHNlbGVjdGVkIGl0ZW1zXG4gICAqL1xuICBnZXRTZWxlY3RlZEl0ZW1zKCk6IEFycmF5PGFueT4ge1xuICAgIHJldHVybiB0aGlzLmRhdGFEZXN0aW5hdGlvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHNlbGVjdGVkIGl0ZW1zXG4gICAqIEBwYXJhbSBpdGVtc1xuICAgKi9cbiAgc2V0U2VsZWN0ZWRJdGVtcyhpdGVtczogQXJyYXk8YW55Pikge1xuICAgIHRoaXMuZGF0YURlc3RpbmF0aW9uID0gaXRlbXM7XG4gIH1cblxuICBnZXRHcm91cGVkQ29sdW1uVHlwZXMoKTogT0dyb3VwZWRDb2x1bW5UeXBlc1tdIHtcbiAgICByZXR1cm4gdGhpcy5ncm91cGVkQ29sdW1uVHlwZXM7XG4gIH1cbiAgZ2V0IGdyb3VwZWREYXRlQ29sdW1ucygpOiBPR3JvdXBlZENvbHVtblR5cGVzW10ge1xuICAgIHJldHVybiB0aGlzLmdyb3VwZWRDb2x1bW5UeXBlcy5maWx0ZXIoZ3JvdXBlZENvbHVtbiA9PiBDb2Rlcy5UWVBFU19EQVRFX0dST1VQUy5maW5kSW5kZXgodHlwZSA9PiB0eXBlID09PSBncm91cGVkQ29sdW1uLnR5cGUpID4gLTEpXG4gIH1cbn1cbiJdfQ==