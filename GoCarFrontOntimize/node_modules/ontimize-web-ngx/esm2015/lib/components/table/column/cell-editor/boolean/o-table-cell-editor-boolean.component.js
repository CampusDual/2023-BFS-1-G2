import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, Injector, TemplateRef, ViewChild, ViewEncapsulation, } from '@angular/core';
import { InputConverter } from '../../../../../decorators/input-converter';
import { Util } from '../../../../../util/util';
import { DEFAULT_INPUTS_O_TABLE_CELL_EDITOR, DEFAULT_OUTPUTS_O_TABLE_CELL_EDITOR, OBaseTableCellEditor, } from '../o-base-table-cell-editor.class';
export const DEFAULT_INPUTS_O_TABLE_CELL_EDITOR_BOOLEAN = [
    ...DEFAULT_INPUTS_O_TABLE_CELL_EDITOR,
    'indeterminateOnNull: indeterminate-on-null',
    'trueValue: true-value',
    'falseValue: false-value',
    'booleanType: boolean-type',
    'autoCommit: auto-commit'
];
export const DEFAULT_OUTPUTS_O_TABLE_CELL_EDITOR_BOOLEAN = [
    ...DEFAULT_OUTPUTS_O_TABLE_CELL_EDITOR
];
export class OTableCellEditorBooleanComponent extends OBaseTableCellEditor {
    constructor(injector) {
        super(injector);
        this.injector = injector;
        this.indeterminate = false;
        this.indeterminateOnNull = false;
        this._booleanType = 'boolean';
        this.autoCommit = true;
    }
    initialize() {
        super.initialize();
        this.parseInputs();
    }
    get booleanType() {
        return this._booleanType;
    }
    set booleanType(arg) {
        arg = (arg || '').toLowerCase();
        if (['number', 'boolean', 'string'].indexOf(arg) === -1) {
            arg = 'boolean';
        }
        this._booleanType = arg;
    }
    parseInputs() {
        switch (this.booleanType) {
            case 'string':
                this.parseStringInputs();
                break;
            case 'number':
                this.parseNumberInputs();
                break;
            default:
                this.trueValue = true;
                this.falseValue = false;
                break;
        }
    }
    parseStringInputs() {
        if ((this.trueValue || '').length === 0) {
            this.trueValue = undefined;
        }
        if ((this.falseValue || '').length === 0) {
            this.falseValue = undefined;
        }
    }
    parseNumberInputs() {
        this.trueValue = parseInt(this.trueValue, 10);
        if (isNaN(this.trueValue)) {
            this.trueValue = 1;
        }
        this.falseValue = parseInt(this.falseValue, 10);
        if (isNaN(this.falseValue)) {
            this.falseValue = 0;
        }
    }
    startEdition(data) {
        super.startEdition(data);
        setTimeout(() => {
            const isCurrentValueTrue = (this.formControl.value === this.trueValue);
            if (this.autoCommit) {
                this.formControl.setValue(isCurrentValueTrue ? this.falseValue : this.trueValue, { emitEvent: false });
                this.commitEdition();
            }
            else {
                this.formControl.setValue(isCurrentValueTrue ? this.trueValue : this.falseValue, { emitEvent: false });
            }
        }, 0);
    }
    getCellData() {
        let cellData = super.getCellData();
        this.indeterminate = this.indeterminateOnNull && !Util.isDefined(cellData);
        if (!this.indeterminate) {
            cellData = this.parseValueByType(cellData);
        }
        return cellData;
    }
    hasCellDataTrueValue(cellData) {
        let result;
        if (Util.isDefined(cellData)) {
            result = (cellData === this.trueValue);
            if (this.booleanType === 'string' && !Util.isDefined(this.trueValue)) {
                result = Util.parseBoolean(cellData, false);
            }
        }
        return result;
    }
    parseValueByType(val) {
        let result = val;
        const cellIsTrue = this.hasCellDataTrueValue(val);
        const value = cellIsTrue ? this.trueValue : this.falseValue;
        switch (this.booleanType) {
            case 'string':
                result = this.translateService.get(value);
                break;
            case 'number':
                result = parseInt(value, 10);
                break;
            default:
                break;
        }
        return result;
    }
    onChange(arg) {
        this.formControl.setValue(arg.checked ? this.trueValue : this.falseValue, { emitEvent: false });
        this.commitEdition();
    }
}
OTableCellEditorBooleanComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-table-cell-editor-boolean',
                template: "<ng-template #templateref let-cellvalue=\"cellvalue\" let-rowvalue=\"rowvalue\">\n  <div class=\"o-table-cell-editor-boolean o-table-cell-editor\" [formGroup]=\"formGroup\">\n    <mat-checkbox #checkbox (click)=\"$event.stopPropagation()\" (change)=\"onChange($event)\" [indeterminate]=\"indeterminate\"\n      [formControl]=\"formControl\" [class.hidden-checkbox]=\"autoCommit\">\n    </mat-checkbox>\n  </div>\n</ng-template>",
                inputs: DEFAULT_INPUTS_O_TABLE_CELL_EDITOR_BOOLEAN,
                outputs: DEFAULT_OUTPUTS_O_TABLE_CELL_EDITOR_BOOLEAN,
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                styles: [".o-table-cell-editor-boolean{height:100%;display:flex;align-items:center;justify-content:center}.o-table-cell-editor-boolean .mat-checkbox-ripple,.o-table-cell-editor-boolean .mat-checkbox.hidden-checkbox{display:none}"]
            }] }
];
OTableCellEditorBooleanComponent.ctorParameters = () => [
    { type: Injector }
];
OTableCellEditorBooleanComponent.propDecorators = {
    templateref: [{ type: ViewChild, args: ['templateref', { read: TemplateRef, static: true },] }]
};
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OTableCellEditorBooleanComponent.prototype, "indeterminateOnNull", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OTableCellEditorBooleanComponent.prototype, "autoCommit", void 0);
//# sourceMappingURL=data:application/json;base64,