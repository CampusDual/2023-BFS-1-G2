import { FilterExpressionUtils } from '../../../../util/filter-expression.utils';
import { Util } from '../../../../util/util';
import { OTableColumnComponent } from '../o-table-column.component';
export const DEFAULT_INPUTS_O_BASE_TABLE_CELL_RENDERER = [
    'filterSource: filter-source',
    'filterFunction: filter-function'
];
export class OBaseTableCellRenderer {
    constructor(injector) {
        this.injector = injector;
        this._filterSource = 'render';
        this.tableColumn = this.injector.get(OTableColumnComponent);
    }
    ngOnInit() {
        this.initialize();
    }
    initialize() {
    }
    ngAfterContentInit() {
        if (typeof this.filterFunction !== 'function') {
            this.filterFunction = undefined;
        }
        this.registerRenderer();
    }
    get table() {
        return this.tableColumn.table;
    }
    get column() {
        return this.tableColumn.attr;
    }
    registerRenderer() {
        this.tableColumn.registerRenderer(this);
        if (!Util.isDefined(this.type) && Util.isDefined(this.tableColumn.type)) {
            this.type = this.tableColumn.type;
        }
    }
    getCellData(cellvalue, rowvalue) {
        let parsedValue;
        if (this.componentPipe && this.pipeArguments !== undefined && cellvalue !== undefined) {
            parsedValue = this.componentPipe.transform(cellvalue, this.pipeArguments);
        }
        else {
            parsedValue = cellvalue;
        }
        return parsedValue;
    }
    getTooltip(cellValue, rowValue) {
        return this.getCellData(cellValue, rowValue);
    }
    set filterSource(val) {
        const lowerVal = (val || '').toLowerCase();
        this._filterSource = (lowerVal === 'render' || lowerVal === 'data' || lowerVal === 'both') ? lowerVal : 'render';
    }
    get filterSource() {
        return this._filterSource;
    }
    getFilter(cellValue, rowValue) {
        let result;
        switch (this.filterSource) {
            case 'render':
                result = [this.getCellData(cellValue, rowValue)];
                break;
            case 'data':
                result = [cellValue];
                break;
            case 'both':
                result = [cellValue, this.getCellData(cellValue, rowValue)];
                break;
        }
        return result;
    }
    getFilterExpression(quickFilter) {
        return FilterExpressionUtils.buildExpressionLike(this.tableColumn.attr, quickFilter);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1iYXNlLXRhYmxlLWNlbGwtcmVuZGVyZXIuY2xhc3MuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9vbnRpbWl6ZS13ZWItbmd4LyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvdGFibGUvY29sdW1uL2NlbGwtcmVuZGVyZXIvby1iYXNlLXRhYmxlLWNlbGwtcmVuZGVyZXIuY2xhc3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFDakYsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRTdDLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRXBFLE1BQU0sQ0FBQyxNQUFNLHlDQUF5QyxHQUFHO0lBQ3ZELDZCQUE2QjtJQUM3QixpQ0FBaUM7Q0FDbEMsQ0FBQztBQUVGLE1BQU0sT0FBTyxzQkFBc0I7SUFXakMsWUFBc0IsUUFBa0I7UUFBbEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQVBqQyxrQkFBYSxHQUErQixRQUFRLENBQUM7UUFRMUQsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0lBQzlELENBQUM7SUFFTSxRQUFRO1FBQ2IsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ3BCLENBQUM7SUFFTSxVQUFVO0lBRWpCLENBQUM7SUFFTSxrQkFBa0I7UUFDdkIsSUFBSSxPQUFPLElBQUksQ0FBQyxjQUFjLEtBQUssVUFBVSxFQUFFO1lBQzdDLElBQUksQ0FBQyxjQUFjLEdBQUcsU0FBUyxDQUFDO1NBQ2pDO1FBQ0QsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUVELElBQUksS0FBSztRQUNQLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUM7SUFDaEMsQ0FBQztJQUVELElBQUksTUFBTTtRQUNSLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUM7SUFDL0IsQ0FBQztJQUtNLGdCQUFnQjtRQUNyQixJQUFJLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDdkUsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQztTQUNuQztJQUNILENBQUM7SUFPTSxXQUFXLENBQUMsU0FBYyxFQUFFLFFBQWM7UUFDL0MsSUFBSSxXQUFtQixDQUFDO1FBQ3hCLElBQUksSUFBSSxDQUFDLGFBQWEsSUFBSSxJQUFJLENBQUMsYUFBYSxLQUFLLFNBQVMsSUFBSSxTQUFTLEtBQUssU0FBUyxFQUFFO1lBQ3JGLFdBQVcsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQzNFO2FBQU07WUFDTCxXQUFXLEdBQUcsU0FBUyxDQUFDO1NBQ3pCO1FBQ0QsT0FBTyxXQUFXLENBQUM7SUFDckIsQ0FBQztJQUVNLFVBQVUsQ0FBQyxTQUFjLEVBQUUsUUFBYTtRQUM3QyxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFFRCxJQUFJLFlBQVksQ0FBQyxHQUFXO1FBQzFCLE1BQU0sUUFBUSxHQUFHLENBQUMsR0FBRyxJQUFJLEVBQUUsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzNDLElBQUksQ0FBQyxhQUFhLEdBQUcsQ0FBQyxRQUFRLEtBQUssUUFBUSxJQUFJLFFBQVEsS0FBSyxNQUFNLElBQUksUUFBUSxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztJQUNuSCxDQUFDO0lBRUQsSUFBSSxZQUFZO1FBQ2QsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDO0lBQzVCLENBQUM7SUFRRCxTQUFTLENBQUMsU0FBYyxFQUFFLFFBQWM7UUFDdEMsSUFBSSxNQUFNLENBQUM7UUFDWCxRQUFRLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDekIsS0FBSyxRQUFRO2dCQUNYLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7Z0JBQ2pELE1BQU07WUFDUixLQUFLLE1BQU07Z0JBQ1QsTUFBTSxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQ3JCLE1BQU07WUFDUixLQUFLLE1BQU07Z0JBQ1QsTUFBTSxHQUFHLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7Z0JBQzVELE1BQU07U0FDVDtRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFTSxtQkFBbUIsQ0FBQyxXQUFtQjtRQUM1QyxPQUFPLHFCQUFxQixDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQ3ZGLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyQ29udGVudEluaXQsIEluamVjdG9yLCBPbkluaXQsIFBpcGVUcmFuc2Zvcm0sIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IE9UYWJsZUNvbHVtbiB9IGZyb20gJy4uLy4uLy4uLy4uL2ludGVyZmFjZXMvby10YWJsZS1jb2x1bW4uaW50ZXJmYWNlJztcbmltcG9ydCB7IEV4cHJlc3Npb24gfSBmcm9tICcuLi8uLi8uLi8uLi90eXBlcy9leHByZXNzaW9uLnR5cGUnO1xuaW1wb3J0IHsgRmlsdGVyRXhwcmVzc2lvblV0aWxzIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbC9maWx0ZXItZXhwcmVzc2lvbi51dGlscyc7XG5pbXBvcnQgeyBVdGlsIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbC91dGlsJztcbmltcG9ydCB7IE9UYWJsZUNvbXBvbmVudCB9IGZyb20gJy4uLy4uL28tdGFibGUuY29tcG9uZW50JztcbmltcG9ydCB7IE9UYWJsZUNvbHVtbkNvbXBvbmVudCB9IGZyb20gJy4uL28tdGFibGUtY29sdW1uLmNvbXBvbmVudCc7XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX0lOUFVUU19PX0JBU0VfVEFCTEVfQ0VMTF9SRU5ERVJFUiA9IFtcbiAgJ2ZpbHRlclNvdXJjZTogZmlsdGVyLXNvdXJjZScsXG4gICdmaWx0ZXJGdW5jdGlvbjogZmlsdGVyLWZ1bmN0aW9uJ1xuXTtcblxuZXhwb3J0IGNsYXNzIE9CYXNlVGFibGVDZWxsUmVuZGVyZXIgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyQ29udGVudEluaXQge1xuXG4gIHB1YmxpYyB0ZW1wbGF0ZXJlZjogVGVtcGxhdGVSZWY8YW55PjtcbiAgcHVibGljIHRhYmxlQ29sdW1uOiBPVGFibGVDb2x1bW47XG4gIHB1YmxpYyBfZmlsdGVyU291cmNlOiAncmVuZGVyJyB8ICdkYXRhJyB8ICdib3RoJyA9ICdyZW5kZXInO1xuICBwdWJsaWMgZmlsdGVyRnVuY3Rpb246IChjZWxsVmFsdWU6IGFueSwgcm93VmFsdWU6IGFueSwgcXVpY2tGaWx0ZXI/OiBzdHJpbmcpID0+IGJvb2xlYW47XG5cbiAgcHJvdGVjdGVkIHR5cGU6IHN0cmluZztcbiAgcHJvdGVjdGVkIHBpcGVBcmd1bWVudHM6IGFueTtcbiAgcHJvdGVjdGVkIGNvbXBvbmVudFBpcGU6IFBpcGVUcmFuc2Zvcm07XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGluamVjdG9yOiBJbmplY3Rvcikge1xuICAgIHRoaXMudGFibGVDb2x1bW4gPSB0aGlzLmluamVjdG9yLmdldChPVGFibGVDb2x1bW5Db21wb25lbnQpO1xuICB9XG5cbiAgcHVibGljIG5nT25Jbml0KCkge1xuICAgIHRoaXMuaW5pdGlhbGl6ZSgpO1xuICB9XG5cbiAgcHVibGljIGluaXRpYWxpemUoKTogdm9pZCB7XG5cbiAgfVxuXG4gIHB1YmxpYyBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZCB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLmZpbHRlckZ1bmN0aW9uICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzLmZpbHRlckZ1bmN0aW9uID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICB0aGlzLnJlZ2lzdGVyUmVuZGVyZXIoKTtcbiAgfVxuXG4gIGdldCB0YWJsZSgpOiBPVGFibGVDb21wb25lbnQge1xuICAgIHJldHVybiB0aGlzLnRhYmxlQ29sdW1uLnRhYmxlO1xuICB9XG5cbiAgZ2V0IGNvbHVtbigpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnRhYmxlQ29sdW1uLmF0dHI7XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXJzIHJlbmRlcmVyXG4gICAqL1xuICBwdWJsaWMgcmVnaXN0ZXJSZW5kZXJlcigpOiB2b2lkIHtcbiAgICB0aGlzLnRhYmxlQ29sdW1uLnJlZ2lzdGVyUmVuZGVyZXIodGhpcyk7XG4gICAgaWYgKCFVdGlsLmlzRGVmaW5lZCh0aGlzLnR5cGUpICYmIFV0aWwuaXNEZWZpbmVkKHRoaXMudGFibGVDb2x1bW4udHlwZSkpIHtcbiAgICAgIHRoaXMudHlwZSA9IHRoaXMudGFibGVDb2x1bW4udHlwZTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZGlzcGxheWVkIHRhYmxlIGNlbGwgdmFsdWVcbiAgICogQHBhcmFtIGNlbGx2YWx1ZSB0aGUgaW50ZXJuYWwgdGFibGUgY2VsbCB2YWx1ZVxuICAgKiBAcGFyYW0gcm93dmFsdWUgdGhlIHRhYmxlIHJvdyB2YWx1ZVxuICAgKi9cbiAgcHVibGljIGdldENlbGxEYXRhKGNlbGx2YWx1ZTogYW55LCByb3d2YWx1ZT86IGFueSk6IHN0cmluZyB7XG4gICAgbGV0IHBhcnNlZFZhbHVlOiBzdHJpbmc7XG4gICAgaWYgKHRoaXMuY29tcG9uZW50UGlwZSAmJiB0aGlzLnBpcGVBcmd1bWVudHMgIT09IHVuZGVmaW5lZCAmJiBjZWxsdmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcGFyc2VkVmFsdWUgPSB0aGlzLmNvbXBvbmVudFBpcGUudHJhbnNmb3JtKGNlbGx2YWx1ZSwgdGhpcy5waXBlQXJndW1lbnRzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFyc2VkVmFsdWUgPSBjZWxsdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBwYXJzZWRWYWx1ZTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRUb29sdGlwKGNlbGxWYWx1ZTogYW55LCByb3dWYWx1ZTogYW55KTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5nZXRDZWxsRGF0YShjZWxsVmFsdWUsIHJvd1ZhbHVlKTtcbiAgfVxuXG4gIHNldCBmaWx0ZXJTb3VyY2UodmFsOiBzdHJpbmcpIHtcbiAgICBjb25zdCBsb3dlclZhbCA9ICh2YWwgfHwgJycpLnRvTG93ZXJDYXNlKCk7XG4gICAgdGhpcy5fZmlsdGVyU291cmNlID0gKGxvd2VyVmFsID09PSAncmVuZGVyJyB8fCBsb3dlclZhbCA9PT0gJ2RhdGEnIHx8IGxvd2VyVmFsID09PSAnYm90aCcpID8gbG93ZXJWYWwgOiAncmVuZGVyJztcbiAgfVxuXG4gIGdldCBmaWx0ZXJTb3VyY2UoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fZmlsdGVyU291cmNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgdmFsdWVzIHRvIGZpbHRlclxuICAgKiBAcGFyYW0gY2VsbFZhbHVlXG4gICAqIEBwYXJhbSBbcm93VmFsdWVdXG4gICAqIEByZXR1cm5zIGZpbHRlclxuICAgKi9cbiAgZ2V0RmlsdGVyKGNlbGxWYWx1ZTogYW55LCByb3dWYWx1ZT86IGFueSk6IGFueVtdIHtcbiAgICBsZXQgcmVzdWx0O1xuICAgIHN3aXRjaCAodGhpcy5maWx0ZXJTb3VyY2UpIHtcbiAgICAgIGNhc2UgJ3JlbmRlcic6XG4gICAgICAgIHJlc3VsdCA9IFt0aGlzLmdldENlbGxEYXRhKGNlbGxWYWx1ZSwgcm93VmFsdWUpXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdkYXRhJzpcbiAgICAgICAgcmVzdWx0ID0gW2NlbGxWYWx1ZV07XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnYm90aCc6XG4gICAgICAgIHJlc3VsdCA9IFtjZWxsVmFsdWUsIHRoaXMuZ2V0Q2VsbERhdGEoY2VsbFZhbHVlLCByb3dWYWx1ZSldO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHB1YmxpYyBnZXRGaWx0ZXJFeHByZXNzaW9uKHF1aWNrRmlsdGVyOiBzdHJpbmcpOiBFeHByZXNzaW9uIHtcbiAgICByZXR1cm4gRmlsdGVyRXhwcmVzc2lvblV0aWxzLmJ1aWxkRXhwcmVzc2lvbkxpa2UodGhpcy50YWJsZUNvbHVtbi5hdHRyLCBxdWlja0ZpbHRlcik7XG4gIH1cbn1cbiJdfQ==