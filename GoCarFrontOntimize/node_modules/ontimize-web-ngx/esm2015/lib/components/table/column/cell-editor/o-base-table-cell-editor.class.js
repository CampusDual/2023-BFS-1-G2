import * as tslib_1 from "tslib";
import { ContentChildren, EventEmitter, HostListener, QueryList, Renderer2, ViewChild } from '@angular/core';
import { FormControl, FormGroup, Validators } from '@angular/forms';
import { InputConverter } from '../../../../decorators/input-converter';
import { SnackBarService } from '../../../../services/snackbar.service';
import { OTranslateService } from '../../../../services/translate/o-translate.service';
import { OValidatorComponent } from '../../../../shared/components/validation/o-validator.component';
import { ObservableWrapper } from '../../../../util/async';
import { Util } from '../../../../util/util';
import { OTableColumnComponent } from '../o-table-column.component';
export const DEFAULT_INPUTS_O_TABLE_CELL_EDITOR = [
    'orequired: required',
    'showPlaceHolder: show-placeholder',
    'olabel: label',
    'updateRecordOnEdit: update-record-on-edit',
    'showNotificationOnEdit: show-notification-on-edit',
    'enabled'
];
export const DEFAULT_OUTPUTS_O_TABLE_CELL_EDITOR = [
    'editionStarted',
    'editionCancelled',
    'editionCommitted',
    'onPostUpdateRecord'
];
export class OBaseTableCellEditor {
    constructor(injector) {
        this.injector = injector;
        this.orequired = false;
        this.showPlaceHolder = false;
        this.updateRecordOnEdit = true;
        this.showNotificationOnEdit = true;
        this._enabled = true;
        this.formGroup = new FormGroup({});
        this.editionStarted = new EventEmitter();
        this.editionCancelled = new EventEmitter();
        this.editionCommitted = new EventEmitter();
        this.onPostUpdateRecord = new EventEmitter();
        this.editorCreated = new EventEmitter();
        this.registerInColumn = true;
        this.errorsData = [];
        this.snackBarService = this.injector.get(SnackBarService);
        this.tableColumn = this.injector.get(OTableColumnComponent);
        this.translateService = this.injector.get(OTranslateService);
        this.cellEditorId = Util.randomNumber().toString(36);
        this.renderer = this.injector.get(Renderer2);
    }
    onDocumentKeyup(event) {
        this.handleKeyup(event);
    }
    ngOnInit() {
        this.initialize();
    }
    ngOnChanges() {
        this.updateValidators();
    }
    ngAfterViewInit() {
        if (this.validatorChildren) {
            this.validatorsSubscription = this.validatorChildren.changes.subscribe(() => {
                this.updateValidators();
            });
            if (this.validatorChildren.length > 0) {
                this.updateValidators();
            }
        }
    }
    initialize() {
        this.createFormControl();
        this.registerEditor();
        this.editorCreated.emit(this);
    }
    handleKeyup(event) {
        const oColumn = this.table.getOColumn(this.tableColumnAttr);
        if (!oColumn || !oColumn.editing) {
            return;
        }
        const escClicked = this.checkKey(event, 'Escape', 27);
        const enterClicked = this.checkKey(event, 'Enter', 13);
        const tabClicked = this.checkKey(event, 'Tab', 9);
        if (!escClicked && !enterClicked && !tabClicked) {
            return;
        }
        if (escClicked) {
            this.onEscClicked();
            return;
        }
        if (this.table.editingCell && !this.table.editingCell.contains(event.target)) {
            return;
        }
        if (enterClicked || tabClicked) {
            this.commitEdition();
        }
    }
    checkKey(event, key, keyCode) {
        return (event.key && event.key === key) || (event.keyCode && event.keyCode === keyCode);
    }
    createFormControl() {
        if (!this.formControl) {
            const validators = this.resolveValidators();
            const cfg = {
                value: undefined,
                disabled: !this.enabled
            };
            this.formControl = new FormControl(cfg, validators);
        }
        if (!Util.isDefined(this.formGroup.get(this.cellEditorId))) {
            this.formGroup.addControl(this.cellEditorId, this.formControl);
        }
    }
    registerEditor() {
        if (this.registerInColumn && !Util.isDefined(this.tableColumn.editor)) {
            this.tableColumn.registerEditor(this);
            if (!Util.isDefined(this.type) && Util.isDefined(this.tableColumn.type)) {
                this.type = this.tableColumn.type;
            }
        }
    }
    getCellData() {
        return this._rowData[this.tableColumnAttr];
    }
    startEdition(data) {
        this.formGroup.reset();
        this.rowData = data;
        if (!this.isSilentControl()) {
            this.editionStarted.emit(this._rowData);
        }
        this.table.cd.detectChanges();
        const inputEl = document.getElementById(this.cellEditorId);
        if (inputEl) {
            inputEl.select();
        }
        this.setEditingRowClass(true);
    }
    endEdition(saveChanges) {
        const oColumn = this.table.getOColumn(this.tableColumnAttr);
        if (oColumn) {
            const updateObserver = this.table.updateCellData(oColumn, this._rowData, saveChanges);
            if (updateObserver) {
                updateObserver.subscribe(res => {
                    this.onUpdateSuccess(res);
                    this.table.daoTable.setDataArray(this.table.daoTable.data);
                }, error => {
                    this._rowData[this.tableColumnAttr] = this.oldValue;
                    this.table.dataSource.updateRenderedRowData(this._rowData);
                    this.table.showDialogError(error, 'MESSAGES.ERROR_UPDATE');
                    this.table.cd.detectChanges();
                });
            }
            else {
                this.table.cd.detectChanges();
            }
        }
    }
    commitEdition() {
        if (!this.formControl.invalid) {
            this.oldValue = this._rowData[this.tableColumnAttr];
            this._rowData[this.tableColumnAttr] = this.formControl.value;
            if (!this.isSilentControl()) {
                this.endEdition(true);
                this.editionCommitted.emit(this._rowData);
            }
        }
    }
    get tableColumn() {
        return this._tableColumn;
    }
    set tableColumn(arg) {
        this._tableColumn = arg;
        if (arg) {
            this._table = arg.table;
        }
    }
    get tableColumnAttr() {
        if (this._tableColumn) {
            return this._tableColumn.attr;
        }
        return undefined;
    }
    set table(arg) {
        this._table = arg;
    }
    get table() {
        return this._table;
    }
    get rowData() {
        return this._rowData;
    }
    set rowData(arg) {
        this._rowData = arg;
        const cellData = this.getCellData();
        this.formControl.setValue(cellData);
        this.formControl.markAsTouched();
    }
    resolveValidators() {
        const validators = [];
        if (this.tableColumn.angularValidatorsFn) {
            this.tableColumn.angularValidatorsFn.forEach((fn) => {
                validators.push(fn);
            });
        }
        if (this.orequired) {
            validators.push(Validators.required);
        }
        return validators;
    }
    getActiveOErrors() {
        return this.formControl.errors ? Object.keys(this.formControl.errors) : [];
    }
    getErrorText(oError) {
        if (this.tableColumn && this.tableColumn.editor && this.tableColumn.editor.errorsData) {
            const error = this.tableColumn.editor.errorsData.find((item) => item.name === oError);
            return error ? error.text : '';
        }
        else {
            return '';
        }
    }
    updateValidators() {
        if (!this.formControl) {
            return;
        }
        this.formControl.clearValidators();
        const validators = this.resolveValidators();
        if (this.validatorChildren) {
            this.validatorChildren.forEach((oValidator) => {
                const validatorFunction = oValidator.getValidatorFn();
                if (validatorFunction) {
                    validators.push(validatorFunction);
                }
                const errorsData = oValidator.getErrorsData();
                this.errorsData.push(...errorsData);
            });
        }
        this.formControl.setValidators(validators);
    }
    hasError(error) {
        return this.formControl && this.formControl.touched && (this.hasErrorExclusive(error) || this.formControl.hasError(error));
    }
    hasErrorExclusive(error) {
        let hasError = false;
        const errorsOrder = ['matDatepickerMax', 'matDatepickerMin', 'matDatepickerFilter', 'matDatepickerParse', 'required'];
        const errors = this.formControl.errors;
        if (Util.isDefined(errors)) {
            if (Object.keys(errors).length === 1) {
                return errors.hasOwnProperty(error);
            }
            else {
                for (let i = 0, len = errorsOrder.length; i < len; i++) {
                    hasError = errors.hasOwnProperty(errorsOrder[i]);
                    if (hasError) {
                        hasError = (errorsOrder[i] === error);
                        break;
                    }
                }
            }
        }
        return hasError;
    }
    getErrorValue(error, prop) {
        return this.formControl.hasError(error) ? this.formControl.getError(error)[prop] || '' : '';
    }
    onEscClicked() {
        if (!this.isSilentControl()) {
            this.endEdition(false);
            this.editionCancelled.emit(this._rowData);
        }
    }
    isSilentControl() {
        return this.controlArgs !== undefined && this.controlArgs.silent;
    }
    getPlaceholder() {
        return this.showPlaceHolder ?
            this.translateService.get(this.olabel || this.tableColumn ? (this.tableColumn.title || this.tableColumnAttr) : this.tableColumnAttr) :
            undefined;
    }
    onUpdateSuccess(res) {
        ObservableWrapper.callEmit(this.onPostUpdateRecord, this._rowData);
        if (this.showNotificationOnEdit) {
            this.snackBarService.open('MESSAGES.UPDATED', { icon: 'check_circle' });
        }
    }
    set enabled(arg) {
        this._enabled = arg;
        if (this.formControl) {
            this._enabled ? this.formControl.enable() : this.formControl.disable();
        }
    }
    get enabled() {
        return this._enabled;
    }
    getFormControl() {
        return this.formControl;
    }
    setEditingRowClass(addClass) {
        const inputEl = document.getElementById(this.cellEditorId);
        if (inputEl) {
            const tableRowEl = inputEl.closest('tr');
            if (tableRowEl) {
                addClass ? this.renderer.addClass(tableRowEl, 'o-table-editing-row') :
                    this.renderer.removeClass(tableRowEl, 'o-table-editing-row');
                this.table.cd.detectChanges();
            }
        }
    }
}
OBaseTableCellEditor.propDecorators = {
    inputRef: [{ type: ViewChild, args: ['input', { static: false },] }],
    validatorChildren: [{ type: ContentChildren, args: [OValidatorComponent,] }],
    onDocumentKeyup: [{ type: HostListener, args: ['document:keyup', ['$event'],] }]
};
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OBaseTableCellEditor.prototype, "orequired", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OBaseTableCellEditor.prototype, "showPlaceHolder", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OBaseTableCellEditor.prototype, "updateRecordOnEdit", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OBaseTableCellEditor.prototype, "showNotificationOnEdit", void 0);
//# sourceMappingURL=data:application/json;base64,