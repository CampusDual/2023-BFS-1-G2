import { BehaviorSubject } from 'rxjs';
import { Codes, Util } from '../../../util';
export class OColumn {
    constructor() {
        this._editing = false;
        this.multilineSubject = new BehaviorSubject(this.multiline);
        this.isMultiline = this.multilineSubject.asObservable();
    }
    get editing() {
        return this._editing;
    }
    set editing(val) {
        if (this.type === 'boolean' && this.editor && this.editor.autoCommit) {
            this._editing = false;
        }
        this._editing = this.editor != null && val;
        this.editor.setEditingRowClass(this._editing);
    }
    setDefaultProperties(args) {
        this.type = 'string';
        this.className = 'o-column-' + (this.type) + ' ';
        this.orderable = args.orderable;
        this.resizable = args.resizable;
        this.groupable = args.groupable;
        this.searchable = true;
        this.searching = true;
        this.name = this.attr;
        this.title = this.attr;
        this.multiline = false;
    }
    setColumnProperties(column) {
        this.title = Util.isDefined(column.title) ? column.title : column.attr;
        this.definition = column;
        this.multiline = column.multiline;
        if (Util.isDefined(column.minWidth)) {
            this.minWidth = column.minWidth;
        }
        if (Util.isDefined(column.maxWidth)) {
            this.maxWidth = column.maxWidth;
        }
        if (Util.isDefined(column.orderable)) {
            this.orderable = column.orderable;
        }
        if (Util.isDefined(column.resizable)) {
            this.resizable = column.resizable;
        }
        if (Util.isDefined(column.searchable)) {
            this.searchable = column.searchable;
        }
        if (Util.isDefined(column.groupable)) {
            this.groupable = column.groupable;
        }
        if (Util.isDefined(column.renderer)) {
            this.renderer = column.renderer;
        }
        if (Util.isDefined(column.editor)) {
            this.editor = column.editor;
        }
        if (Util.isDefined(column.type)) {
            this.type = column.type;
            this.className = 'o-column-' + (this.type) + ' ';
        }
        if (Util.isDefined(column.getSQLType)) {
            this.sqlType = column.getSQLType();
        }
        if (Util.isDefined(column.class)) {
            this.className = Util.isDefined(this.className) ? (this.className + ' ' + column.class) : column.class;
        }
        if (Util.isDefined(column.operation) || Util.isDefined(column.functionOperation)) {
            this.calculate = column.operation ? column.operation : column.functionOperation;
        }
        if (Util.isDefined(column.tooltip) && column.tooltip) {
            this.tooltip = {
                value: column.tooltipValue,
                function: column.tooltipFunction
            };
        }
        if (Util.isDefined(column.filterExpressionFunction)) {
            this.filterExpressionFunction = column.filterExpressionFunction;
        }
    }
    set searchable(val) {
        this._searchable = val;
        this.searching = val;
    }
    get searchable() {
        return this._searchable;
    }
    set multiline(val) {
        val = Util.parseBoolean(String(val));
        this._multiline = val;
        this.multilineSubject.next(this._multiline);
    }
    get multiline() {
        return this._multiline;
    }
    hasTooltip() {
        return Util.isDefined(this.tooltip);
    }
    getTooltip(rowData) {
        if (!this.hasTooltip()) {
            return undefined;
        }
        let tooltip;
        if (Util.isDefined(this.tooltip.value)) {
            tooltip = this.tooltip.value;
        }
        else if (Util.isDefined(this.tooltip.function)) {
            try {
                tooltip = this.tooltip.function(rowData);
            }
            catch (e) {
                console.warn('o-table-column tooltip-function didnt worked');
            }
        }
        else {
            tooltip = Util.isDefined(this.renderer) ? this.renderer.getTooltip(rowData[this.name], rowData) : rowData[this.name];
        }
        return tooltip;
    }
    getMinWidth() {
        if (Util.isDefined(this.width)) {
            return this.width;
        }
        return this.minWidth;
    }
    getMinWidthValue() {
        return Util.extractPixelsValue(this.minWidth, Codes.DEFAULT_COLUMN_MIN_WIDTH);
    }
    getMaxWidthValue() {
        const value = Util.extractPixelsValue(this.maxWidth);
        return value ? value : undefined;
    }
    setRenderWidth(horizontalScrolled, clientWidth) {
        if (Util.isDefined(this.width)) {
            return;
        }
        const defaultWidth = (horizontalScrolled) ? undefined : 'auto';
        this.width = Util.isDefined(this.DOMWidth) ? (this.getDOMWidth(clientWidth) + 'px') : defaultWidth;
    }
    getDOMWidth(val) {
        let DOMWidth;
        const pxVal = Util.extractPixelsValue(val);
        if (Util.isDefined(pxVal)) {
            DOMWidth = pxVal;
            const minValue = this.getMinWidthValue();
            if (Util.isDefined(minValue) && pxVal > 0 && pxVal < minValue) {
                DOMWidth = minValue;
            }
            if (Util.isDefined(this.maxWidth)) {
                const maxValue = Util.extractPixelsValue(this.maxWidth);
                if (Util.isDefined(maxValue) && pxVal > maxValue) {
                    DOMWidth = maxValue;
                }
            }
        }
        return DOMWidth;
    }
    set width(val) {
        let widthVal = val;
        let DOMWidth = this.getDOMWidth(val);
        const pxVal = Util.extractPixelsValue(DOMWidth);
        if (Util.isDefined(pxVal)) {
            this.DOMWidth = pxVal;
            widthVal = pxVal + 'px';
        }
        this._width = widthVal;
    }
    get width() {
        return this._width;
    }
    getWidthToStore() {
        return this._width;
    }
    setWidth(val) {
        this.width = val + 'px';
        this.DOMWidth = val;
    }
    getTitleAlignClass() {
        if (Util.isDefined(this.definition)) {
            return this.definition.titleAlign || Codes.COLUMN_TITLE_ALIGN_CENTER;
        }
        return Codes.COLUMN_TITLE_ALIGN_CENTER;
    }
    getFilterValue(cellValue, rowValue) {
        if (this.renderer) {
            return this.renderer.getFilter(cellValue, rowValue);
        }
        else {
            return [cellValue];
        }
    }
    useCustomFilterFunction() {
        return this.searching && this.visible && this.renderer != null && this.renderer.filterFunction != null;
    }
    useQuickfilterFunction() {
        return this.searching && this.visible && !(this.renderer != null && this.renderer.filterFunction != null);
    }
}
//# sourceMappingURL=data:application/json;base64,