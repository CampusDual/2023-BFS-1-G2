import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, EventEmitter, Injector, TemplateRef, ViewChild } from '@angular/core';
import { Observable, Subscription } from 'rxjs';
import { InputConverter } from '../../../../../decorators/input-converter';
import { OTranslatePipe } from '../../../../../pipes/o-translate.pipe';
import { DialogService } from '../../../../../services/dialog.service';
import { OntimizeServiceProvider } from '../../../../../services/factories';
import { OntimizeService } from '../../../../../services/ontimize/ontimize.service';
import { Codes } from '../../../../../util/codes';
import { FilterExpressionUtils } from '../../../../../util/filter-expression.utils';
import { ServiceUtils } from '../../../../../util/service.utils';
import { SQLTypes } from '../../../../../util/sqltypes';
import { Util } from '../../../../../util/util';
import { DEFAULT_INPUTS_O_BASE_TABLE_CELL_RENDERER, OBaseTableCellRenderer } from '../o-base-table-cell-renderer.class';
export const DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_SERVICE = [
    ...DEFAULT_INPUTS_O_BASE_TABLE_CELL_RENDERER,
    'entity',
    'service',
    'columns',
    'translate',
    'valueColumn: value-column',
    'valueColumnType: value-column-type',
    'parentKeys: parent-keys',
    'queryMethod: query-method',
    'serviceType : service-type',
    'translateArgsFn: translate-params'
];
export const DEFAULT_OUTPUTS_O_TABLE_CELL_RENDERER_SERVICE = [
    'onDataLoaded'
];
export class OTableCellRendererServiceComponent extends OBaseTableCellRenderer {
    constructor(injector) {
        super(injector);
        this.injector = injector;
        this.cellValues = [];
        this.responseMap = {};
        this.translate = false;
        this.valueColumnType = Codes.TYPE_INT;
        this.queryMethod = Codes.QUERY_METHOD;
        this.onDataLoaded = new EventEmitter();
        this.colArray = [];
        this._pKeysEquiv = {};
        this.pipeArguments = {};
        this.subscritpions = new Subscription();
        this.tableColumn.type = 'service';
        this.dialogService = injector.get(DialogService);
        this.setComponentPipe();
    }
    initialize() {
        super.initialize();
        if (this.table) {
            const oCol = this.table.getOColumn(this.column);
            oCol.definition.contentAlign = oCol.definition.contentAlign ? oCol.definition.contentAlign : 'center';
        }
        this.colArray = Util.parseArray(this.columns, true);
        const pkArray = Util.parseArray(this.parentKeys);
        this._pKeysEquiv = Util.parseParentKeysEquivalences(pkArray);
        this.configureService();
    }
    ngAfterViewInit() {
        const oCol = this.table.getOColumn(this.column);
        if (Util.isDefined(oCol.editor)) {
            this.subscritpions.add(oCol.editor.onPostUpdateRecord.subscribe((data) => {
                this.queryData(data[this.tableColumn.attr], data);
            }));
        }
    }
    ngOnDestroy() {
        if (this.subscritpions) {
            this.subscritpions.unsubscribe();
        }
    }
    getDescriptionValue(cellvalue, rowValue) {
        if (Util.isDefined(cellvalue) && this.cellValues.indexOf(cellvalue) === -1) {
            this.queryData(cellvalue, rowValue);
            this.cellValues.push(cellvalue);
        }
        return '';
    }
    queryData(cellvalue, parentItem) {
        if (!this.dataService || !(this.queryMethod in this.dataService) || !this.entity) {
            console.warn('Service not properly configured! aborting query');
            return;
        }
        const filter = ServiceUtils.getFilterUsingParentKeys(parentItem, this._pKeysEquiv);
        const tableColAlias = Object.keys(this._pKeysEquiv).find(key => this._pKeysEquiv[key] === this.column);
        if (Util.isDefined(tableColAlias)) {
            if (!filter[tableColAlias]) {
                filter[tableColAlias] = cellvalue;
            }
        }
        else {
            filter[this.column] = cellvalue;
        }
        this.dataService[this.queryMethod](filter, this.colArray, this.entity)
            .subscribe((resp) => {
            if (resp.isSuccessful()) {
                this.responseMap[cellvalue] = resp.data[0][this.valueColumn];
                this.onDataLoaded.emit(this.responseMap[cellvalue]);
            }
        }, err => {
            console.error(err);
            if (err && typeof err !== 'object') {
                this.dialogService.alert('ERROR', err);
            }
            else {
                this.dialogService.alert('ERROR', 'MESSAGES.ERROR_QUERY');
            }
        });
    }
    configureService() {
        const configureServiceArgs = { injector: this.injector, baseService: OntimizeService, entity: this.entity, service: this.service, serviceType: this.serviceType };
        this.dataService = Util.configureService(configureServiceArgs);
    }
    getCellData(cellvalue, rowvalue) {
        return this.responseMap[cellvalue];
    }
    getFilterExpression(quickFilter) {
        const oCol = this.table.getOColumn(this.column);
        let result;
        let cacheValue = Object.keys(this.responseMap).find(key => Util.normalizeString(this.responseMap[key]).indexOf(Util.normalizeString(quickFilter)) !== -1);
        if (cacheValue) {
            cacheValue = this.parseByValueColumnType(cacheValue);
            result = FilterExpressionUtils.buildExpressionEquals(this.column, SQLTypes.parseUsingSQLType(cacheValue, SQLTypes.getSQLTypeKey(oCol.sqlType)));
        }
        return result;
    }
    setComponentPipe() {
        this.componentPipe = new OTranslatePipe(this.injector);
    }
    responseValue(cellvalue, rowvalue) {
        if (this.translate) {
            this.pipeArguments = this.translateArgsFn ? { values: this.translateArgsFn(rowvalue) } : {};
            return super.getCellData(cellvalue, rowvalue);
        }
        else {
            return cellvalue;
        }
    }
    parseByValueColumnType(val) {
        let value = val;
        if (this.valueColumnType === Codes.TYPE_INT) {
            const parsed = parseInt(value, 10);
            if (!isNaN(parsed)) {
                value = parsed;
            }
        }
        return value;
    }
    queryAllData() {
        return new Observable(observer => {
            if (!this.dataService || !(this.queryMethod in this.dataService) || !this.entity) {
                console.warn('Service not properly configured! aborting query');
                observer.next();
            }
            this.dataService[this.queryMethod]({}, this.colArray, this.entity)
                .subscribe((resp) => {
                if (resp.isSuccessful()) {
                    (resp.data || []).forEach(item => {
                        if (Util.isDefined(item[this.column])) {
                            this.cellValues.push(item[this.column]);
                            this.responseMap[item[this.column]] = item[this.valueColumn];
                        }
                    });
                    this.onDataLoaded.emit(this.responseMap);
                }
                observer.next();
            }, err => {
                console.error(err);
                observer.next();
            });
        });
    }
}
OTableCellRendererServiceComponent.DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_SERVICE = DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_SERVICE;
OTableCellRendererServiceComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-table-cell-renderer-service',
                template: "<ng-template #templateref let-cellvalue=\"cellvalue\" let-rowvalue=\"rowvalue\">\n  {{ getDescriptionValue(cellvalue, rowvalue) }}{{ responseValue(responseMap[cellvalue]) }}\n</ng-template>\n",
                inputs: DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_SERVICE,
                outputs: DEFAULT_OUTPUTS_O_TABLE_CELL_RENDERER_SERVICE,
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [
                    OntimizeServiceProvider
                ]
            }] }
];
OTableCellRendererServiceComponent.ctorParameters = () => [
    { type: Injector }
];
OTableCellRendererServiceComponent.propDecorators = {
    templateref: [{ type: ViewChild, args: ['templateref', { read: TemplateRef, static: true },] }]
};
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OTableCellRendererServiceComponent.prototype, "translate", void 0);
//# sourceMappingURL=data:application/json;base64,