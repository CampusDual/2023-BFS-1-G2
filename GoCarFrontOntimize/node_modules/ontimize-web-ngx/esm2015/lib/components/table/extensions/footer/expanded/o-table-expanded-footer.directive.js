import { Directive, ElementRef, Injector, Input, Renderer2 } from '@angular/core';
import { Subscription } from 'rxjs';
import { distinctUntilChanged, filter } from 'rxjs/operators';
import { OTranslateService } from '../../../../../services/translate/o-translate.service';
import { Util } from '../../../../../util';
import { OTableComponent } from './../../../o-table.component';
export class OTableExpandedFooterDirective {
    constructor(table, element, renderer, injector) {
        this.table = table;
        this.element = element;
        this.renderer = renderer;
        this.injector = injector;
        this.subscription = new Subscription();
        this.translateService = this.injector.get(OTranslateService);
    }
    set display(val) {
        this.showMessage(val);
    }
    set colspan(value) {
        this._colspan = value;
        if (this.tdTableWithMessage) {
            this.tdTableWithMessage.setAttribute('colspan', value);
        }
    }
    get colspan() {
        return this._colspan;
    }
    ngAfterViewInit() {
        if (this.element.nativeElement.childNodes[2]) {
            this.tableBody = this.element.nativeElement.childNodes[1];
        }
        this.registerContentChange();
    }
    registerContentChange() {
        const tr = this.renderer.createElement('tr');
        this.tdTableWithMessage = this.renderer.createElement('td');
        this.renderer.addClass(tr, 'o-table-no-results');
        tr.appendChild(this.tdTableWithMessage);
        this.renderer.appendChild(this.tableBody, tr);
        this.subscription.add(this.table.onContentChange.pipe(distinctUntilChanged((prev, curr) => prev.length === curr.length), filter(() => !!this.table.staticData)).subscribe(() => this.showMessage(true)));
        if (this.table.oTableQuickFilterComponent) {
            this.subscription.add(this.table.oTableQuickFilterComponent.onChange.pipe().subscribe(() => this.showMessage(true)));
        }
    }
    showMessage(display) {
        this.removeMessageSpan();
        if (display && this.table && this.table.dataSource && this.table.dataSource.renderedData.length === 0) {
            this.createMessageSpan();
        }
    }
    removeMessageSpan() {
        if (this.spanMessageNotResults) {
            this.renderer.removeChild(this.element.nativeElement, this.spanMessageNotResults);
        }
    }
    destroy() {
        this.subscription.unsubscribe();
    }
    buildMessage() {
        let message = '';
        message = this.translateService.get('TABLE.EMPTY');
        if (this.tableHasQuickFilter() && this.table.oTableQuickFilterComponent.value) {
            message += this.translateService.get('TABLE.EMPTY_USING_FILTER', [(this.table.oTableQuickFilterComponent.value)]);
        }
        return message;
    }
    tableHasQuickFilter() {
        return this.table.quickFilter && Util.isDefined(this.table.oTableQuickFilterComponent);
    }
    createMessageSpan() {
        const message = this.buildMessage();
        this.spanMessageNotResults = this.renderer.createElement('span');
        const messageNotResults = this.renderer.createText(message);
        if (this.tdTableWithMessage) {
            this.tdTableWithMessage.setAttribute('colspan', this.colspan);
            this.renderer.appendChild(this.spanMessageNotResults, messageNotResults);
            this.renderer.appendChild(this.tdTableWithMessage, this.spanMessageNotResults);
        }
    }
}
OTableExpandedFooterDirective.decorators = [
    { type: Directive, args: [{
                selector: '[oTableExpandedFooter]'
            },] }
];
OTableExpandedFooterDirective.ctorParameters = () => [
    { type: OTableComponent },
    { type: ElementRef },
    { type: Renderer2 },
    { type: Injector }
];
OTableExpandedFooterDirective.propDecorators = {
    display: [{ type: Input, args: ['oTableExpandedFooter',] }],
    colspan: [{ type: Input, args: ['oTableExpandedFooterColspan',] }]
};
//# sourceMappingURL=data:application/json;base64,