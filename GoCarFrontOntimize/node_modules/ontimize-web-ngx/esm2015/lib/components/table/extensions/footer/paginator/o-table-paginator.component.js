import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, forwardRef, Inject, Injector } from '@angular/core';
import { InputConverter } from '../../../../../decorators/input-converter';
import { OTableComponent } from '../../../o-table.component';
import { OBaseTablePaginator } from './o-base-table-paginator.class';
export const DEFAULT_PAGINATOR_TABLE = [
    'pageSize: page-size',
    'pageSizeOptions: page-size-options',
    'showFirstLastButtons: show-first-last-buttons'
];
export class OTablePaginatorComponent extends OBaseTablePaginator {
    constructor(injector, table) {
        super();
        this.injector = injector;
        this.table = table;
        this.showFirstLastButtons = true;
    }
    ngOnInit() {
        this.pageSize = this.table.queryRows;
        this.pageIndex = this.table.currentPage;
        this.showFirstLastButtons = this.table.showPaginatorFirstLastButtons;
        this.table.registerPagination(this);
    }
    get pageIndex() {
        return this._pageIndex;
    }
    set pageIndex(value) {
        this._pageIndex = value;
        if (this.table.matpaginator) {
            this.table.matpaginator.pageIndex = this._pageIndex;
        }
    }
    isShowingAllRows(selectedLength) {
        return false;
    }
}
OTablePaginatorComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-table-paginator',
                template: ' ',
                inputs: DEFAULT_PAGINATOR_TABLE,
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
OTablePaginatorComponent.ctorParameters = () => [
    { type: Injector },
    { type: OTableComponent, decorators: [{ type: Inject, args: [forwardRef(() => OTableComponent),] }] }
];
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OTablePaginatorComponent.prototype, "showFirstLastButtons", void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby10YWJsZS1wYWdpbmF0b3IuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vb250aW1pemUtd2ViLW5neC8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3RhYmxlL2V4dGVuc2lvbnMvZm9vdGVyL3BhZ2luYXRvci9vLXRhYmxlLXBhZ2luYXRvci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFFekcsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBRTNFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUVyRSxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRztJQUVyQyxxQkFBcUI7SUFFckIsb0NBQW9DO0lBQ3BDLCtDQUErQztDQUNoRCxDQUFDO0FBUUYsTUFBTSxPQUFPLHdCQUF5QixTQUFRLG1CQUFtQjtJQUsvRCxZQUNZLFFBQWtCLEVBQ3lCLEtBQXNCO1FBRTNFLEtBQUssRUFBRSxDQUFDO1FBSEUsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUN5QixVQUFLLEdBQUwsS0FBSyxDQUFpQjtRQUo3RSx5QkFBb0IsR0FBWSxJQUFJLENBQUM7SUFPckMsQ0FBQztJQUVELFFBQVE7UUFDTixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUM7UUFDeEMsSUFBSSxDQUFDLG9CQUFvQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsNkJBQTZCLENBQUM7UUFFckUsSUFBSSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRUQsSUFBSSxTQUFTO1FBQ1gsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxJQUFJLFNBQVMsQ0FBQyxLQUFhO1FBQ3pCLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO1FBQ3hCLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUU7WUFDM0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7U0FDckQ7SUFDSCxDQUFDO0lBRU0sZ0JBQWdCLENBQUMsY0FBc0I7UUFHNUMsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDOzs7WUF6Q0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxtQkFBbUI7Z0JBQzdCLFFBQVEsRUFBRSxHQUFHO2dCQUNiLE1BQU0sRUFBRSx1QkFBdUI7Z0JBQy9CLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2FBQ2hEOzs7WUFwQmdFLFFBQVE7WUFJaEUsZUFBZSx1QkF3Qm5CLE1BQU0sU0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsZUFBZSxDQUFDOztBQUozQztJQURDLGNBQWMsRUFBRTs7c0VBQ29CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgZm9yd2FyZFJlZiwgSW5qZWN0LCBJbmplY3RvciwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IElucHV0Q29udmVydGVyIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vZGVjb3JhdG9ycy9pbnB1dC1jb252ZXJ0ZXInO1xuaW1wb3J0IHsgT1RhYmxlUGFnaW5hdG9yIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vaW50ZXJmYWNlcy9vLXRhYmxlLXBhZ2luYXRvci5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgT1RhYmxlQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vLi4vby10YWJsZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgT0Jhc2VUYWJsZVBhZ2luYXRvciB9IGZyb20gJy4vby1iYXNlLXRhYmxlLXBhZ2luYXRvci5jbGFzcyc7XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX1BBR0lOQVRPUl9UQUJMRSA9IFtcbiAgLy8gcGFnZS1zaXplIFtudW1iZXJdOiBOdW1iZXIgb2YgaXRlbXMgdG8gZGlzcGxheSBvbiBhIHBhZ2UuIEJ5IGRlZmF1bHQgc2V0IHRvIDUwLlxuICAncGFnZVNpemU6IHBhZ2Utc2l6ZScsXG4gIC8vIHBhZ2VTaXplT3B0aW9ucyBbQXJyYXldOiBUaGUgc2V0IG9mIHByb3ZpZGVkIHBhZ2Ugc2l6ZSBvcHRpb25zIHRvIGRpc3BsYXkgdG8gdGhlIHVzZXIuXG4gICdwYWdlU2l6ZU9wdGlvbnM6IHBhZ2Utc2l6ZS1vcHRpb25zJyxcbiAgJ3Nob3dGaXJzdExhc3RCdXR0b25zOiBzaG93LWZpcnN0LWxhc3QtYnV0dG9ucydcbl07XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ28tdGFibGUtcGFnaW5hdG9yJyxcbiAgdGVtcGxhdGU6ICcgJyxcbiAgaW5wdXRzOiBERUZBVUxUX1BBR0lOQVRPUl9UQUJMRSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgT1RhYmxlUGFnaW5hdG9yQ29tcG9uZW50IGV4dGVuZHMgT0Jhc2VUYWJsZVBhZ2luYXRvciBpbXBsZW1lbnRzIE9UYWJsZVBhZ2luYXRvciwgT25Jbml0IHtcblxuICBASW5wdXRDb252ZXJ0ZXIoKVxuICBzaG93Rmlyc3RMYXN0QnV0dG9uczogYm9vbGVhbiA9IHRydWU7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIGluamVjdG9yOiBJbmplY3RvcixcbiAgICBASW5qZWN0KGZvcndhcmRSZWYoKCkgPT4gT1RhYmxlQ29tcG9uZW50KSkgcHJvdGVjdGVkIHRhYmxlOiBPVGFibGVDb21wb25lbnRcbiAgKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMucGFnZVNpemUgPSB0aGlzLnRhYmxlLnF1ZXJ5Um93cztcbiAgICB0aGlzLnBhZ2VJbmRleCA9IHRoaXMudGFibGUuY3VycmVudFBhZ2U7XG4gICAgdGhpcy5zaG93Rmlyc3RMYXN0QnV0dG9ucyA9IHRoaXMudGFibGUuc2hvd1BhZ2luYXRvckZpcnN0TGFzdEJ1dHRvbnM7XG5cbiAgICB0aGlzLnRhYmxlLnJlZ2lzdGVyUGFnaW5hdGlvbih0aGlzKTtcbiAgfVxuXG4gIGdldCBwYWdlSW5kZXgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fcGFnZUluZGV4O1xuICB9XG5cbiAgc2V0IHBhZ2VJbmRleCh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5fcGFnZUluZGV4ID0gdmFsdWU7XG4gICAgaWYgKHRoaXMudGFibGUubWF0cGFnaW5hdG9yKSB7XG4gICAgICB0aGlzLnRhYmxlLm1hdHBhZ2luYXRvci5wYWdlSW5kZXggPSB0aGlzLl9wYWdlSW5kZXg7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGlzU2hvd2luZ0FsbFJvd3Moc2VsZWN0ZWRMZW5ndGg6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIC8vIHJldHVybiB0aGlzLl9wYWdlU2l6ZU9wdGlvbnMuaW5kZXhPZihzZWxlY3RlZExlbmd0aCkgPT09ICh0aGlzLl9wYWdlU2l6ZU9wdGlvbnMubGVuZ3RoIC0gMSk7XG4gICAgLy8gdGVtcG9yYWwgd2hpbGUgbm90IGhhdmluZyBhbiBvcHRpb24gZm9yIHNob3dpbmcgYWxsIHJlY29yZHMgaW4gcGFnaW5hdGVkIHRhYmxlc1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuIl19