import { moveItemInArray } from '@angular/cdk/drag-drop';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject, Injector, ViewEncapsulation } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';
import { DialogService } from '../../../../../services/dialog.service';
import { OTranslateService } from '../../../../../services/translate/o-translate.service';
import { Codes } from '../../../../../util/codes';
import { Util } from '../../../../../util/util';
export class OTableVisibleColumnsDialogComponent {
    constructor(injector, dialogRef, data) {
        this.injector = injector;
        this.dialogRef = dialogRef;
        this.columns = [];
        this.rowHeight = Codes.DEFAULT_ROW_HEIGHT;
        this.activeColumnValueFilters = [];
        this.activeSortColumns = [];
        this.activeGroupByColumns = [];
        this.dialogService = this.injector.get(DialogService);
        this.cd = this.injector.get(ChangeDetectorRef);
        this.translateService = this.injector.get(OTranslateService);
        if (Util.isDefined(data.table)) {
            this.table = data.table;
            const visibleColumns = Util.parseArray(this.table.visibleColumns, true);
            this.table.oTableOptions.columns.filter(oCol => visibleColumns.indexOf(oCol.attr) !== -1 || oCol.definition !== undefined).forEach((oCol) => {
                this.columns.push({
                    attr: oCol.attr,
                    title: oCol.title,
                    visible: oCol.visible
                });
            });
            this.rowHeight = this.table.rowHeight;
            this.activeColumnValueFilters = this.table.dataSource.getColumnValueFilters().map(colValueFilter => colValueFilter.attr);
            this.activeSortColumns = this.table.sortColArray.map(col => col.columnName);
            this.activeGroupByColumns = this.table.groupedColumnsArray;
        }
    }
    onClickColumn(col) {
        const activeColFilter = this.activeColumnValueFilters.includes(col.attr);
        const activeSorting = this.activeSortColumns.includes(col.attr);
        const activeGrouping = this.activeGroupByColumns.includes(col.attr);
        if (col.visible && (activeColFilter || activeSorting || activeGrouping)) {
            const warnArgs = [];
            if (activeColFilter) {
                warnArgs.push(this.translateService.get('TABLE.VISIBLE_COLUMNS_DIALOG.VALUE_FILTER_WARN'));
            }
            if (activeSorting) {
                warnArgs.push(this.translateService.get('TABLE.VISIBLE_COLUMNS_DIALOG.SORT_WARN'));
            }
            if (activeGrouping) {
                warnArgs.push(this.translateService.get('TABLE.VISIBLE_COLUMNS_DIALOG.GROUPING_WARN'));
            }
            const dialogText = this.translateService.get('TABLE.VISIBLE_COLUMNS_DIALOG.HIDE_COLUMN_WARNING', warnArgs);
            this.dialogService.confirm('CONFIRM', dialogText).then(res => {
                if (res) {
                    col.deleteValueFilter = activeColFilter;
                    col.deleteSortColummn = activeSorting;
                    col.deleteGrupingColumn = activeGrouping;
                    col.visible = !col.visible;
                    this.cd.detectChanges();
                }
            });
        }
        else {
            col.visible = !col.visible;
            if (col.visible) {
                col.deleteValueFilter = false;
                col.deleteSortColummn = false;
                col.deleteGrupingColumn = false;
            }
        }
    }
    drop(event) {
        moveItemInArray(this.columns, event.previousIndex, event.currentIndex);
    }
    closeDialog() {
        const columnSortingToRemove = this.getColumnSortingToRemove();
        const newSortColumns = columnSortingToRemove.length > 0 ?
            this.table.sortColArray.filter(col => !columnSortingToRemove.includes(col.columnName)) :
            undefined;
        const columnGroupingToRemove = this.getColumnGroupingToRemove();
        const newGroupColumns = columnGroupingToRemove.length > 0 ?
            this.table.groupedColumnsArray.filter(col => !columnGroupingToRemove.includes(col)) :
            undefined;
        this.dialogRef.close({
            visibleColArray: this.getVisibleColumns(),
            columnsOrder: this.getColumnsOrder(),
            sortColumns: newSortColumns,
            columnValueFiltersToRemove: this.getColumnValueFiltersToRemove(),
            groupColumns: newGroupColumns
        });
    }
    getVisibleColumns() {
        return this.columns.filter(col => col.visible).map(col => col.attr);
    }
    getColumnsOrder() {
        return this.columns.map(col => col.attr);
    }
    getColumnValueFiltersToRemove() {
        return this.columns.filter(col => col.deleteValueFilter).map(col => col.attr);
    }
    getColumnSortingToRemove() {
        return this.columns.filter(col => col.deleteSortColummn).map(col => col.attr);
    }
    getColumnGroupingToRemove() {
        return this.columns.filter(col => col.deleteGrupingColumn).map(col => col.attr);
    }
}
OTableVisibleColumnsDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-table-visible-columns-dialog',
                template: "<span mat-dialog-title>{{ 'TABLE.BUTTONS.COLVIS' | oTranslate }}</span>\n\n\n<mat-dialog-content>\n  <div class=\"mat-subheader\">{{'TABLE.VISIBLE_COLUMNS.DESCRIPTION' | oTranslate}}</div>\n\n  <div [ngClass]=\"rowHeight\">\n    <mat-list cdkDropList (cdkDropListDropped)=\"drop($event)\" dense>\n      <mat-list-item *ngFor=\"let column of columns\" cdkDrag (click)=\"onClickColumn(column)\" [ngClass]=\"{'column-hidden':!column.visible}\"\n        class=\"o-drag-list-item-box\">\n        <mat-icon mat-list-icon svgIcon=\"ontimize:drag_handle\"></mat-icon>\n        <span mat-line>{{ (column.title || column.attr) | oTranslate }}</span>\n        <mat-icon *ngIf=\"column.visible\" svgIcon=\"ontimize:visibility\" color=\"primary\"></mat-icon>\n        <mat-icon *ngIf=\"!column.visible\" svgIcon=\"ontimize:visibility_off\"></mat-icon>\n        <mat-divider></mat-divider>\n      </mat-list-item>\n    </mat-list>\n  </div>\n</mat-dialog-content>\n\n<mat-dialog-actions fxLayoutAlign=\"end center\">\n  <button type=\"button\" mat-stroked-button [mat-dialog-close]=\"null\" class=\"o-button-default cancel\">{{ 'CANCEL' | oTranslate }}</button>\n  <button type=\"button\" mat-stroked-button (click)=\"closeDialog()\" class=\"o-button-primary\">{{ 'ACCEPT' | oTranslate }}</button>\n</mat-dialog-actions>\n",
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                host: {
                    '[class.o-table-visible-columns-dialog]': 'true'
                },
                styles: [".o-table-visible-columns-dialog .mat-dialog-content.mat-dialog-content{overflow:auto;padding-top:0;margin-top:24px}.o-table-visible-columns-dialog .mat-dialog-content.mat-dialog-content .mat-subheader{display:block}.o-table-visible-columns-dialog .mat-dialog-content.mat-dialog-content .title_list{font-weight:600;margin-bottom:6px;margin-top:12px}.o-table-visible-columns-dialog .mat-dialog-content.mat-dialog-content .cdk-drop-list{padding:0 12px}.o-table-visible-columns-dialog .mat-dialog-content.mat-dialog-content .mat-list .mat-list-item{cursor:pointer;height:auto}.o-table-visible-columns-dialog .mat-dialog-content.mat-dialog-content .mat-list .mat-list-item.column-hidden{opacity:.4}.o-table-visible-columns-dialog .mat-dialog-content.mat-dialog-content .mat-list .mat-list-item .mat-list-item-content{padding:0;cursor:move}.o-table-visible-columns-dialog .mat-dialog-content.mat-dialog-content .mat-list .mat-list-item .mat-list-item-content div.mat-list-text{padding:0 8px}.o-table-visible-columns-dialog .mat-dialog-content.mat-dialog-content .mat-list .mat-list-item .mat-list-item-content .mat-list-icon{display:flex}.o-table-visible-columns-dialog .mat-dialog-content.mat-dialog-content .mat-icon[svgicon=\"ontimize:drag_handle\"],.o-table-visible-columns-dialog .mat-dialog-content.mat-dialog-content .mat-list-text{cursor:move}.o-table-visible-columns-dialog .mat-dialog-content.mat-dialog-content .mat-icon[svgicon=\"ontimize:visibility\"],.o-table-visible-columns-dialog .mat-dialog-content.mat-dialog-content .mat-icon[svgicon=\"ontimize:visibility_off\"]{width:32px}"]
            }] }
];
OTableVisibleColumnsDialogComponent.ctorParameters = () => [
    { type: Injector },
    { type: MatDialogRef },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
];
//# sourceMappingURL=data:application/json;base64,