import { Directive, EventEmitter, Output } from '@angular/core';
import { MatSort } from '@angular/material';
import { Codes } from '../../../../util/codes';
import { Util } from '../../../../util/util';
export class OMatSort extends MatSort {
    constructor() {
        super(...arguments);
        this.activeArray = [];
        this.directionById = {};
        this.oSortChange = new EventEmitter();
    }
    set oMatSortColumns(value) {
        this.restart();
        this.setTableInfo(value);
    }
    setMultipleSort(val) {
        this.multipleSort = val;
    }
    getSortColumns() {
        const activeData = [];
        this.activeArray.forEach((s) => {
            activeData.push({
                id: s.id,
                direction: this.directionById[s.id]
            });
        });
        return activeData;
    }
    setSortColumns(sortColArray) {
        this.restart();
        this.setTableInfo(sortColArray);
    }
    restart() {
        this.activeArray = [];
        this.directionById = {};
    }
    setTableInfo(sortColArray) {
        sortColArray.forEach((colData) => {
            const sortDirection = colData.ascendent ? Codes.ASC_SORT : Codes.DESC_SORT;
            this.activeArray.push({
                id: colData.columnName,
                start: sortDirection,
                disableClear: false
            });
            this.directionById[colData.columnName] = sortDirection;
        });
    }
    addSortColumn(sortable) {
        if (this.isActive(sortable)) {
            this.direction = this.directionById[sortable.id];
            this.directionById[sortable.id] = this.getNextSortDirection(sortable);
            this.direction = '';
            if (this.directionById[sortable.id] === '') {
                this.deleteSortColumn(sortable.id);
            }
        }
        else {
            if (!this.multipleSort) {
                this.activeArray = [];
                this.directionById = {};
            }
            this.activeArray.push(sortable);
            this.directionById[sortable.id] = sortable.start ? sortable.start : this.start;
        }
        const activeData = this.getSortColumns();
        this._stateChanges.next();
        this.oSortChange.emit(activeData);
    }
    deleteSortColumn(id) {
        delete this.directionById[id];
        const index = this.activeArray.findIndex(element => element.id === id);
        if (index > -1) {
            this.activeArray.splice(index, 1);
        }
    }
    isActive(sortable) {
        return Util.isDefined(this.activeArray.find((s) => sortable.id === s.id));
    }
    hasDirection(id) {
        let direction;
        if (Util.isDefined(this.directionById[id])) {
            direction = this.directionById[id];
        }
        return (direction === 'asc' || direction === 'desc');
    }
    getSortedDataBySQLOrder(data, sqlOrderArray) {
        this.setSortColumns(sqlOrderArray);
        return this.getSortedData(data);
    }
    getSortedData(data) {
        const sortColumns = this.getSortColumns();
        if (sortColumns.length === 0 || data.length === 0) {
            return data;
        }
        this.sortables.forEach((value, key) => {
            this.deregister(value);
        });
        return this.sortByColumns(data, sortColumns);
    }
    sortByColumns(data, sortColumns) {
        const sortFunctionBind = this.sortFunction.bind(this);
        for (let i = 0, len = sortColumns.length; i < len; i++) {
            const sortC = sortColumns[i];
            this.activeSortColumn = sortC.id;
            this.activeSortDirection = sortC.direction;
            if (i === 0) {
                data = data.sort(sortFunctionBind);
            }
            else {
                const groupedData = this.getDataGrouped(data, sortColumns, i);
                if (groupedData.length >= data.length) {
                    break;
                }
                data = this.sortGroupedData(groupedData);
            }
        }
        return data;
    }
    getDataGrouped(data, sortColumns, index) {
        const propArr = [];
        sortColumns.forEach((item, i) => {
            if (i < index) {
                propArr.push(item.id);
            }
        });
        if (propArr.length === 0) {
            return data;
        }
        const result = [];
        data.forEach(item => {
            let value = '';
            propArr.forEach(prop => {
                value += item[prop];
            });
            const filtered = result.filter(resItem => resItem.key === value);
            if (filtered.length === 0) {
                result.push({
                    key: value,
                    values: [item]
                });
            }
            else if (filtered.length === 1) {
                filtered[0].values.push(item);
            }
        });
        return result;
    }
    sortGroupedData(groupedData) {
        const self = this;
        return groupedData.reduce((obj, item) => {
            const arr = item.values;
            const sorted = arr.length <= 1 ? arr : arr.sort(self.sortFunction.bind(self));
            obj.push(...sorted);
            return obj;
        }, []);
    }
    sortFunction(a, b) {
        let propertyA = '';
        let propertyB = '';
        [propertyA, propertyB] = [a[this.activeSortColumn], b[this.activeSortColumn]];
        const valueA = typeof propertyA === 'undefined' ? '' : propertyA === '' ? propertyA : isNaN(+propertyA) ? propertyA.toString().trim().toLowerCase() : +propertyA;
        const valueB = typeof propertyB === 'undefined' ? '' : propertyB === '' ? propertyB : isNaN(+propertyB) ? propertyB.toString().trim().toLowerCase() : +propertyB;
        return (valueA <= valueB ? -1 : 1) * (this.activeSortDirection === 'asc' ? 1 : -1);
    }
}
OMatSort.decorators = [
    { type: Directive, args: [{
                selector: '[oMatSort]',
                exportAs: 'oMatSort',
                inputs: ['disabled: oMatSortDisabled', 'oMatSortColumns']
            },] }
];
OMatSort.propDecorators = {
    oSortChange: [{ type: Output, args: ['matSortChange',] }]
};
//# sourceMappingURL=data:application/json;base64,