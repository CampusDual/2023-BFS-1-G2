import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, ComponentFactoryResolver, EventEmitter, forwardRef, Inject, Injector } from '@angular/core';
import { FormControl, Validators } from '@angular/forms';
import { InputConverter } from '../../../../../decorators/input-converter';
import { SnackBarService } from '../../../../../services/snackbar.service';
import { OTranslateService } from '../../../../../services/translate/o-translate.service';
import { ObservableWrapper } from '../../../../../util/async';
import { Util } from '../../../../../util/util';
import { OTableComponent } from '../../../o-table.component';
export const DEFAULT_INPUTS_O_TABLE_INSERTABLE_ROW = [
    'columns',
    'requiredColumns : required-columns',
    'position',
    'showPlaceHolder: show-placeholder',
    'includeParentKeys: include-parent-keys'
];
export const DEFAULT_OUTPUTS_O_TABLE_INSERTABLE_ROW = [
    'onPostInsertRecord'
];
export class OTableInsertableRowComponent {
    constructor(injector, table, resolver) {
        this.injector = injector;
        this.table = table;
        this.resolver = resolver;
        this.columnsArray = [];
        this.requiredColumnsArray = [];
        this.onPostInsertRecord = new EventEmitter();
        this.columnEditors = {};
        this.position = OTableInsertableRowComponent.DEFAULT_ROW_POSITION;
        this.showPlaceHolder = false;
        this.includeParentKeys = true;
        this.enabled = true;
        this.rowData = {};
        this.controls = {};
        this.translateService = this.injector.get(OTranslateService);
        this.snackBarService = this.injector.get(SnackBarService);
    }
    ngOnInit() {
        this.columnsArray = Util.parseArray(this.columns, true);
        if (this.columnsArray.length === 0) {
            this.columnsArray = this.table.oTableOptions.visibleColumns;
        }
        this.requiredColumnsArray = Util.parseArray(this.requiredColumns, true);
        if (OTableInsertableRowComponent.AVAILABLE_ROW_POSITIONS.indexOf((this.position || '').toLowerCase()) === -1) {
            this.position = OTableInsertableRowComponent.DEFAULT_ROW_POSITION;
        }
        this.table.setOTableInsertableRow(this);
    }
    isFirstRow() {
        return this.position === 'first';
    }
    isColumnInsertable(column) {
        return (this.columnsArray.indexOf(column.attr) !== -1);
    }
    isColumnRequired(column) {
        return (this.requiredColumnsArray.indexOf(column.attr) !== -1);
    }
    initializeEditors() {
        this.table.oTableOptions.columns
            .filter((col) => this.isColumnInsertable(col)).forEach(col => {
            const columnEditorType = col.editor ? col.editor.type : col.type;
            if (col.definition) {
                const editor = col.definition.buildCellEditor(columnEditorType, this.resolver, col.definition.container, col.definition, false);
                this.columnEditors[col.attr] = editor;
                let disabledCol = !this.enabled;
                if (!disabledCol) {
                    const columnPermissions = this.table.getOColumnPermissions(col.attr);
                    disabledCol = columnPermissions.enabled === false;
                }
                editor.enabled = !disabledCol;
                editor.showPlaceHolder = this.showPlaceHolder || editor.showPlaceHolder;
                editor.table = this.table;
                editor.tableColumn = col.editor ? col.editor.tableColumn : col.definition;
                editor.orequired = this.isColumnRequired(col);
                editor.formControl = this.getControl(col, disabledCol);
                editor.formGroup.addControl(editor.cellEditorId, editor.formControl);
                editor.controlArgs = { silent: true };
                editor.rowData = this.rowData;
                editor.startEdition(this.rowData);
                editor.formControl.markAsUntouched();
            }
        });
    }
    useCellEditor(column) {
        return this.isColumnInsertable(column) && Util.isDefined(this.columnEditors[column.attr]);
    }
    getControl(column, disabled = false) {
        if (!this.controls[column.attr]) {
            const validators = this.resolveValidators(column);
            const cfg = {
                value: undefined,
                disabled: disabled
            };
            this.controls[column.attr] = new FormControl(cfg, validators);
        }
        return this.controls[column.attr];
    }
    resolveValidators(column) {
        const validators = [];
        if (column.definition && column.definition.angularValidatorsFn) {
            column.definition.angularValidatorsFn.forEach((fn) => {
                validators.push(fn);
            });
        }
        if (this.isColumnRequired(column)) {
            validators.push(Validators.required);
        }
        return validators;
    }
    getPlaceholder(column) {
        let showPlaceHolder = this.showPlaceHolder;
        const cellEditor = this.columnEditors[column.attr];
        if (cellEditor) {
            showPlaceHolder = cellEditor.showPlaceHolder;
        }
        else if (column.definition) {
            showPlaceHolder = showPlaceHolder || column.definition.showPlaceHolder;
        }
        return showPlaceHolder ? this.translateService.get(column.title) : undefined;
    }
    handleKeyboardEvent(event) {
        if (event.keyCode !== 13) {
            return;
        }
        this.trWrapper = event.currentTarget;
        event.preventDefault();
        event.stopPropagation();
        this.insertRecord();
    }
    insertRecord() {
        if (!this.validateFields()) {
            return;
        }
        const values = this.getAttributesValuesToInsert();
        const insertObservable = this.table.insertRecord(values);
        if (insertObservable) {
            insertObservable.subscribe(res => {
                this.onInsertSuccess(res);
            }, error => {
                this.table.showDialogError(error, 'MESSAGES.ERROR_INSERT');
            });
        }
    }
    validateFields() {
        let valid = true;
        Object.keys(this.controls).forEach((controlKey) => {
            const control = this.controls[controlKey];
            control.markAsTouched();
            valid = valid && control.valid;
        });
        return valid;
    }
    getAttributesValuesToInsert() {
        let attrValues = {};
        if (this.includeParentKeys) {
            attrValues = this.table.getParentKeysValues();
        }
        Object.keys(this.controls).forEach((controlKey) => {
            attrValues[controlKey] = this.controls[controlKey].value;
        });
        return attrValues;
    }
    onInsertSuccess(res) {
        ObservableWrapper.callEmit(this.onPostInsertRecord, res);
        this.snackBarService.open('MESSAGES.INSERTED', { icon: 'check_circle' });
        this.cleanFields();
        if (this.table.daoTable.usingStaticData) {
            this.table.setDataArray(res);
        }
        else {
            this.table.reloadData();
        }
    }
    cleanFields() {
        const controlKeys = Object.keys(this.controls);
        controlKeys.forEach((controlKey) => {
            this.controls[controlKey].setValue(void 0);
        });
        const firstInputEl = this.trWrapper.querySelector('input');
        if (firstInputEl) {
            setTimeout(() => {
                firstInputEl.focus();
            });
        }
    }
    columnHasError(column, error) {
        const control = this.controls[column.attr];
        return control && control.touched && control.hasError(error);
    }
}
OTableInsertableRowComponent.AVAILABLE_ROW_POSITIONS = ['first', 'last'];
OTableInsertableRowComponent.DEFAULT_ROW_POSITION = 'last';
OTableInsertableRowComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-table-insertable-row',
                template: ' ',
                changeDetection: ChangeDetectionStrategy.OnPush,
                inputs: DEFAULT_INPUTS_O_TABLE_INSERTABLE_ROW,
                outputs: DEFAULT_OUTPUTS_O_TABLE_INSERTABLE_ROW
            }] }
];
OTableInsertableRowComponent.ctorParameters = () => [
    { type: Injector },
    { type: OTableComponent, decorators: [{ type: Inject, args: [forwardRef(() => OTableComponent),] }] },
    { type: ComponentFactoryResolver }
];
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OTableInsertableRowComponent.prototype, "showPlaceHolder", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OTableInsertableRowComponent.prototype, "includeParentKeys", void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby10YWJsZS1pbnNlcnRhYmxlLXJvdy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9vbnRpbWl6ZS13ZWItbmd4LyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvdGFibGUvZXh0ZW5zaW9ucy9oZWFkZXIvdGFibGUtaW5zZXJ0YWJsZS1yb3cvby10YWJsZS1pbnNlcnRhYmxlLXJvdy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULHdCQUF3QixFQUN4QixZQUFZLEVBQ1osVUFBVSxFQUNWLE1BQU0sRUFDTixRQUFRLEVBRVQsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLFdBQVcsRUFBZSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUV0RSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFDM0UsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDBDQUEwQyxDQUFDO0FBQzNFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVEQUF1RCxDQUFDO0FBRTFGLE9BQU8sRUFBYyxpQkFBaUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQzFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUdoRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFN0QsTUFBTSxDQUFDLE1BQU0scUNBQXFDLEdBQUc7SUFFbkQsU0FBUztJQUNULG9DQUFvQztJQUVwQyxVQUFVO0lBQ1YsbUNBQW1DO0lBQ25DLHdDQUF3QztDQUN6QyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sc0NBQXNDLEdBQUc7SUFDcEQsb0JBQW9CO0NBQ3JCLENBQUM7QUFVRixNQUFNLE9BQU8sNEJBQTRCO0lBNEJ2QyxZQUNZLFFBQWtCLEVBQ3lCLEtBQXNCLEVBQ2pFLFFBQWtDO1FBRmxDLGFBQVEsR0FBUixRQUFRLENBQVU7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QU8sSUFBSSxPQUFPLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDL0QsQ0FBQzs7QUE3TWEsb0RBQXVCLEdBQUcsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDNUMsaURBQW9CLEdBQUcsTUFBTSxDQUFDOztZQVg3QyxTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHdCQUF3QjtnQkFDbEMsUUFBUSxFQUFFLEdBQUc7Z0JBQ2IsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07Z0JBQy9DLE1BQU0sRUFBRSxxQ0FBcUM7Z0JBQzdDLE9BQU8sRUFBRSxzQ0FBc0M7YUFDaEQ7OztZQW5DQyxRQUFRO1lBYUQsZUFBZSx1QkFzRG5CLE1BQU0sU0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsZUFBZSxDQUFDO1lBdkUzQyx3QkFBd0I7O0FBMkR4QjtJQURDLGNBQWMsRUFBRTs7cUVBQ2dCO0FBRWpDO0lBREMsY0FBYyxFQUFFOzt1RUFDaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ29tcG9uZW50LFxuICBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXG4gIEV2ZW50RW1pdHRlcixcbiAgZm9yd2FyZFJlZixcbiAgSW5qZWN0LFxuICBJbmplY3RvcixcbiAgT25Jbml0XG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUNvbnRyb2wsIFZhbGlkYXRvckZuLCBWYWxpZGF0b3JzIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5pbXBvcnQgeyBJbnB1dENvbnZlcnRlciB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2RlY29yYXRvcnMvaW5wdXQtY29udmVydGVyJztcbmltcG9ydCB7IFNuYWNrQmFyU2VydmljZSB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3NlcnZpY2VzL3NuYWNrYmFyLnNlcnZpY2UnO1xuaW1wb3J0IHsgT1RyYW5zbGF0ZVNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9zZXJ2aWNlcy90cmFuc2xhdGUvby10cmFuc2xhdGUuc2VydmljZSc7XG5pbXBvcnQgeyBPUGVybWlzc2lvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi90eXBlcy9vLXBlcm1pc3Npb25zLnR5cGUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgT2JzZXJ2YWJsZVdyYXBwZXIgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi91dGlsL2FzeW5jJztcbmltcG9ydCB7IFV0aWwgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi91dGlsL3V0aWwnO1xuaW1wb3J0IHsgT0Jhc2VUYWJsZUNlbGxFZGl0b3IgfSBmcm9tICcuLi8uLi8uLi9jb2x1bW4vY2VsbC1lZGl0b3Ivby1iYXNlLXRhYmxlLWNlbGwtZWRpdG9yLmNsYXNzJztcbmltcG9ydCB7IE9Db2x1bW4gfSBmcm9tICcuLi8uLi8uLi9jb2x1bW4vby1jb2x1bW4uY2xhc3MnO1xuaW1wb3J0IHsgT1RhYmxlQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vLi4vby10YWJsZS5jb21wb25lbnQnO1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9JTlBVVFNfT19UQUJMRV9JTlNFUlRBQkxFX1JPVyA9IFtcbiAgLy8gY29sdW1ucyBbc3RyaW5nXTogY29sdW1ucyB0aGF0IGNhbiBiZSBpbnNlcnRlZCwgc2VwYXJhdGVkIGJ5ICc7Jy4gRGVmYXVsdDogYWxsIHZpc2libGUgY29sdW1ucy5cbiAgJ2NvbHVtbnMnLFxuICAncmVxdWlyZWRDb2x1bW5zIDogcmVxdWlyZWQtY29sdW1ucycsXG4gIC8vIHBvc2l0aW9uIFtmaXJzdCB8bGFzdCBdIGRlZmF1bHQ6IGxhc3RcbiAgJ3Bvc2l0aW9uJyxcbiAgJ3Nob3dQbGFjZUhvbGRlcjogc2hvdy1wbGFjZWhvbGRlcicsXG4gICdpbmNsdWRlUGFyZW50S2V5czogaW5jbHVkZS1wYXJlbnQta2V5cydcbl07XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX09VVFBVVFNfT19UQUJMRV9JTlNFUlRBQkxFX1JPVyA9IFtcbiAgJ29uUG9zdEluc2VydFJlY29yZCdcbl07XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ28tdGFibGUtaW5zZXJ0YWJsZS1yb3cnLFxuICB0ZW1wbGF0ZTogJyAnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgaW5wdXRzOiBERUZBVUxUX0lOUFVUU19PX1RBQkxFX0lOU0VSVEFCTEVfUk9XLFxuICBvdXRwdXRzOiBERUZBVUxUX09VVFBVVFNfT19UQUJMRV9JTlNFUlRBQkxFX1JPV1xufSlcblxuZXhwb3J0IGNsYXNzIE9UYWJsZUluc2VydGFibGVSb3dDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIHB1YmxpYyBzdGF0aWMgQVZBSUxBQkxFX1JPV19QT1NJVElPTlMgPSBbJ2ZpcnN0JywgJ2xhc3QnXTtcbiAgcHVibGljIHN0YXRpYyBERUZBVUxUX1JPV19QT1NJVElPTiA9ICdsYXN0JztcblxuICBwcm90ZWN0ZWQgY29sdW1uczogc3RyaW5nO1xuICBwcm90ZWN0ZWQgY29sdW1uc0FycmF5OiBBcnJheTxzdHJpbmc+ID0gW107XG5cbiAgcHJvdGVjdGVkIHJlcXVpcmVkQ29sdW1uczogc3RyaW5nO1xuICBwcm90ZWN0ZWQgcmVxdWlyZWRDb2x1bW5zQXJyYXk6IEFycmF5PHN0cmluZz4gPSBbXTtcblxuICBvblBvc3RJbnNlcnRSZWNvcmQ6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBjb2x1bW5FZGl0b3JzOiBhbnkgPSB7fTtcbiAgdHJXcmFwcGVyOiBFdmVudFRhcmdldDtcblxuICBwcm90ZWN0ZWQgcG9zaXRpb246IHN0cmluZyA9IE9UYWJsZUluc2VydGFibGVSb3dDb21wb25lbnQuREVGQVVMVF9ST1dfUE9TSVRJT047XG5cbiAgQElucHV0Q29udmVydGVyKClcbiAgc2hvd1BsYWNlSG9sZGVyOiBib29sZWFuID0gZmFsc2U7XG4gIEBJbnB1dENvbnZlcnRlcigpXG4gIGluY2x1ZGVQYXJlbnRLZXlzOiBib29sZWFuID0gdHJ1ZTtcblxuICBlbmFibGVkID0gdHJ1ZTtcbiAgcm93RGF0YSA9IHt9O1xuICBwcm90ZWN0ZWQgY29udHJvbHM6IGFueSA9IHt9O1xuICB0cmFuc2xhdGVTZXJ2aWNlOiBPVHJhbnNsYXRlU2VydmljZTtcbiAgc25hY2tCYXJTZXJ2aWNlOiBTbmFja0JhclNlcnZpY2U7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIGluamVjdG9yOiBJbmplY3RvcixcbiAgICBASW5qZWN0KGZvcndhcmRSZWYoKCkgPT4gT1RhYmxlQ29tcG9uZW50KSkgcHJvdGVjdGVkIHRhYmxlOiBPVGFibGVDb21wb25lbnQsXG4gICAgcHJvdGVjdGVkIHJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXJcbiAgKSB7XG4gICAgdGhpcy50cmFuc2xhdGVTZXJ2aWNlID0gdGhpcy5pbmplY3Rvci5nZXQoT1RyYW5zbGF0ZVNlcnZpY2UpO1xuICAgIHRoaXMuc25hY2tCYXJTZXJ2aWNlID0gdGhpcy5pbmplY3Rvci5nZXQoU25hY2tCYXJTZXJ2aWNlKTtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuY29sdW1uc0FycmF5ID0gVXRpbC5wYXJzZUFycmF5KHRoaXMuY29sdW1ucywgdHJ1ZSk7XG4gICAgaWYgKHRoaXMuY29sdW1uc0FycmF5Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy5jb2x1bW5zQXJyYXkgPSB0aGlzLnRhYmxlLm9UYWJsZU9wdGlvbnMudmlzaWJsZUNvbHVtbnM7XG4gICAgfVxuICAgIHRoaXMucmVxdWlyZWRDb2x1bW5zQXJyYXkgPSBVdGlsLnBhcnNlQXJyYXkodGhpcy5yZXF1aXJlZENvbHVtbnMsIHRydWUpO1xuICAgIGlmIChPVGFibGVJbnNlcnRhYmxlUm93Q29tcG9uZW50LkFWQUlMQUJMRV9ST1dfUE9TSVRJT05TLmluZGV4T2YoKHRoaXMucG9zaXRpb24gfHwgJycpLnRvTG93ZXJDYXNlKCkpID09PSAtMSkge1xuICAgICAgdGhpcy5wb3NpdGlvbiA9IE9UYWJsZUluc2VydGFibGVSb3dDb21wb25lbnQuREVGQVVMVF9ST1dfUE9TSVRJT047XG4gICAgfVxuICAgIHRoaXMudGFibGUuc2V0T1RhYmxlSW5zZXJ0YWJsZVJvdyh0aGlzKTtcbiAgfVxuXG4gIGlzRmlyc3RSb3coKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMucG9zaXRpb24gPT09ICdmaXJzdCc7XG4gIH1cblxuICBpc0NvbHVtbkluc2VydGFibGUoY29sdW1uOiBPQ29sdW1uKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICh0aGlzLmNvbHVtbnNBcnJheS5pbmRleE9mKGNvbHVtbi5hdHRyKSAhPT0gLTEpO1xuICB9XG5cbiAgaXNDb2x1bW5SZXF1aXJlZChjb2x1bW46IE9Db2x1bW4pOiBib29sZWFuIHtcbiAgICByZXR1cm4gKHRoaXMucmVxdWlyZWRDb2x1bW5zQXJyYXkuaW5kZXhPZihjb2x1bW4uYXR0cikgIT09IC0xKTtcbiAgfVxuXG4gIGluaXRpYWxpemVFZGl0b3JzKCk6IHZvaWQge1xuICAgIHRoaXMudGFibGUub1RhYmxlT3B0aW9ucy5jb2x1bW5zXG4gICAgICAuZmlsdGVyKChjb2wpID0+IHRoaXMuaXNDb2x1bW5JbnNlcnRhYmxlKGNvbCkpLmZvckVhY2goY29sID0+IHtcbiAgICAgICAgY29uc3QgY29sdW1uRWRpdG9yVHlwZSA9IGNvbC5lZGl0b3IgPyBjb2wuZWRpdG9yLnR5cGUgOiBjb2wudHlwZTtcbiAgICAgICAgaWYgKGNvbC5kZWZpbml0aW9uKSB7XG4gICAgICAgICAgY29uc3QgZWRpdG9yOiBPQmFzZVRhYmxlQ2VsbEVkaXRvciA9IGNvbC5kZWZpbml0aW9uLmJ1aWxkQ2VsbEVkaXRvcihjb2x1bW5FZGl0b3JUeXBlLCB0aGlzLnJlc29sdmVyLCBjb2wuZGVmaW5pdGlvbi5jb250YWluZXIsIGNvbC5kZWZpbml0aW9uLCBmYWxzZSk7XG4gICAgICAgICAgdGhpcy5jb2x1bW5FZGl0b3JzW2NvbC5hdHRyXSA9IGVkaXRvcjtcbiAgICAgICAgICBsZXQgZGlzYWJsZWRDb2wgPSAhdGhpcy5lbmFibGVkO1xuICAgICAgICAgIGlmICghZGlzYWJsZWRDb2wpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbHVtblBlcm1pc3Npb25zOiBPUGVybWlzc2lvbnMgPSB0aGlzLnRhYmxlLmdldE9Db2x1bW5QZXJtaXNzaW9ucyhjb2wuYXR0cik7XG4gICAgICAgICAgICBkaXNhYmxlZENvbCA9IGNvbHVtblBlcm1pc3Npb25zLmVuYWJsZWQgPT09IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlZGl0b3IuZW5hYmxlZCA9ICFkaXNhYmxlZENvbDtcbiAgICAgICAgICBlZGl0b3Iuc2hvd1BsYWNlSG9sZGVyID0gdGhpcy5zaG93UGxhY2VIb2xkZXIgfHwgZWRpdG9yLnNob3dQbGFjZUhvbGRlcjtcbiAgICAgICAgICBlZGl0b3IudGFibGUgPSB0aGlzLnRhYmxlO1xuICAgICAgICAgIGVkaXRvci50YWJsZUNvbHVtbiA9IGNvbC5lZGl0b3IgPyBjb2wuZWRpdG9yLnRhYmxlQ29sdW1uIDogY29sLmRlZmluaXRpb247XG4gICAgICAgICAgZWRpdG9yLm9yZXF1aXJlZCA9IHRoaXMuaXNDb2x1bW5SZXF1aXJlZChjb2wpO1xuICAgICAgICAgIGVkaXRvci5mb3JtQ29udHJvbCA9IHRoaXMuZ2V0Q29udHJvbChjb2wsIGRpc2FibGVkQ29sKTtcbiAgICAgICAgICBlZGl0b3IuZm9ybUdyb3VwLmFkZENvbnRyb2woZWRpdG9yLmNlbGxFZGl0b3JJZCwgZWRpdG9yLmZvcm1Db250cm9sKTtcbiAgICAgICAgICBlZGl0b3IuY29udHJvbEFyZ3MgPSB7IHNpbGVudDogdHJ1ZSB9O1xuICAgICAgICAgIGVkaXRvci5yb3dEYXRhID0gdGhpcy5yb3dEYXRhO1xuICAgICAgICAgIGVkaXRvci5zdGFydEVkaXRpb24odGhpcy5yb3dEYXRhKTtcbiAgICAgICAgICBlZGl0b3IuZm9ybUNvbnRyb2wubWFya0FzVW50b3VjaGVkKCk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gIH1cblxuICB1c2VDZWxsRWRpdG9yKGNvbHVtbjogT0NvbHVtbik6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmlzQ29sdW1uSW5zZXJ0YWJsZShjb2x1bW4pICYmIFV0aWwuaXNEZWZpbmVkKHRoaXMuY29sdW1uRWRpdG9yc1tjb2x1bW4uYXR0cl0pO1xuICB9XG5cbiAgZ2V0Q29udHJvbChjb2x1bW46IE9Db2x1bW4sIGRpc2FibGVkOiBib29sZWFuID0gZmFsc2UpOiBGb3JtQ29udHJvbCB7XG4gICAgaWYgKCF0aGlzLmNvbnRyb2xzW2NvbHVtbi5hdHRyXSkge1xuICAgICAgY29uc3QgdmFsaWRhdG9yczogVmFsaWRhdG9yRm5bXSA9IHRoaXMucmVzb2x2ZVZhbGlkYXRvcnMoY29sdW1uKTtcbiAgICAgIGNvbnN0IGNmZyA9IHtcbiAgICAgICAgdmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkXG4gICAgICB9O1xuICAgICAgdGhpcy5jb250cm9sc1tjb2x1bW4uYXR0cl0gPSBuZXcgRm9ybUNvbnRyb2woY2ZnLCB2YWxpZGF0b3JzKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY29udHJvbHNbY29sdW1uLmF0dHJdO1xuICB9XG5cbiAgcmVzb2x2ZVZhbGlkYXRvcnMoY29sdW1uOiBPQ29sdW1uKTogVmFsaWRhdG9yRm5bXSB7XG4gICAgY29uc3QgdmFsaWRhdG9yczogVmFsaWRhdG9yRm5bXSA9IFtdO1xuICAgIGlmIChjb2x1bW4uZGVmaW5pdGlvbiAmJiBjb2x1bW4uZGVmaW5pdGlvbi5hbmd1bGFyVmFsaWRhdG9yc0ZuKSB7XG4gICAgICBjb2x1bW4uZGVmaW5pdGlvbi5hbmd1bGFyVmFsaWRhdG9yc0ZuLmZvckVhY2goKGZuOiBWYWxpZGF0b3JGbikgPT4ge1xuICAgICAgICB2YWxpZGF0b3JzLnB1c2goZm4pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGlmICh0aGlzLmlzQ29sdW1uUmVxdWlyZWQoY29sdW1uKSkge1xuICAgICAgdmFsaWRhdG9ycy5wdXNoKFZhbGlkYXRvcnMucmVxdWlyZWQpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsaWRhdG9ycztcbiAgfVxuXG4gIGdldFBsYWNlaG9sZGVyKGNvbHVtbjogT0NvbHVtbik6IHN0cmluZyB7XG4gICAgbGV0IHNob3dQbGFjZUhvbGRlciA9IHRoaXMuc2hvd1BsYWNlSG9sZGVyO1xuICAgIGNvbnN0IGNlbGxFZGl0b3IgPSB0aGlzLmNvbHVtbkVkaXRvcnNbY29sdW1uLmF0dHJdO1xuICAgIGlmIChjZWxsRWRpdG9yKSB7XG4gICAgICBzaG93UGxhY2VIb2xkZXIgPSBjZWxsRWRpdG9yLnNob3dQbGFjZUhvbGRlcjtcbiAgICB9IGVsc2UgaWYgKGNvbHVtbi5kZWZpbml0aW9uKSB7XG4gICAgICBzaG93UGxhY2VIb2xkZXIgPSBzaG93UGxhY2VIb2xkZXIgfHwgY29sdW1uLmRlZmluaXRpb24uc2hvd1BsYWNlSG9sZGVyO1xuICAgIH1cbiAgICByZXR1cm4gc2hvd1BsYWNlSG9sZGVyID8gdGhpcy50cmFuc2xhdGVTZXJ2aWNlLmdldChjb2x1bW4udGl0bGUpIDogdW5kZWZpbmVkO1xuICB9XG5cbiAgaGFuZGxlS2V5Ym9hcmRFdmVudChldmVudDogS2V5Ym9hcmRFdmVudCkge1xuICAgIGlmIChldmVudC5rZXlDb2RlICE9PSAxMykge1xuICAgICAgLy8gbm90IGludHJvXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMudHJXcmFwcGVyID0gZXZlbnQuY3VycmVudFRhcmdldDtcblxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgdGhpcy5pbnNlcnRSZWNvcmQoKTtcbiAgfVxuXG4gIGluc2VydFJlY29yZCgpIHtcbiAgICBpZiAoIXRoaXMudmFsaWRhdGVGaWVsZHMoKSkge1xuICAgICAgLy8gdGhpcy50YWJsZS5zaG93RGlhbG9nRXJyb3IoJ1RBQkxFLlJPV19WQUxJREFUSU9OX0VSUk9SJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHZhbHVlcyA9IHRoaXMuZ2V0QXR0cmlidXRlc1ZhbHVlc1RvSW5zZXJ0KCk7XG4gICAgY29uc3QgaW5zZXJ0T2JzZXJ2YWJsZTogT2JzZXJ2YWJsZTxhbnk+ID0gdGhpcy50YWJsZS5pbnNlcnRSZWNvcmQodmFsdWVzKTtcbiAgICBpZiAoaW5zZXJ0T2JzZXJ2YWJsZSkge1xuICAgICAgaW5zZXJ0T2JzZXJ2YWJsZS5zdWJzY3JpYmUocmVzID0+IHtcbiAgICAgICAgdGhpcy5vbkluc2VydFN1Y2Nlc3MocmVzKTtcbiAgICAgIH0sIGVycm9yID0+IHtcbiAgICAgICAgdGhpcy50YWJsZS5zaG93RGlhbG9nRXJyb3IoZXJyb3IsICdNRVNTQUdFUy5FUlJPUl9JTlNFUlQnKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCB2YWxpZGF0ZUZpZWxkcygpOiBib29sZWFuIHtcbiAgICBsZXQgdmFsaWQgPSB0cnVlO1xuICAgIC8vIGNvbHVtbnMgd2l0aCBubyBlZGl0b3IgZGVmaW5lZFxuICAgIE9iamVjdC5rZXlzKHRoaXMuY29udHJvbHMpLmZvckVhY2goKGNvbnRyb2xLZXkpID0+IHtcbiAgICAgIGNvbnN0IGNvbnRyb2wgPSB0aGlzLmNvbnRyb2xzW2NvbnRyb2xLZXldO1xuICAgICAgY29udHJvbC5tYXJrQXNUb3VjaGVkKCk7XG4gICAgICB2YWxpZCA9IHZhbGlkICYmIGNvbnRyb2wudmFsaWQ7XG4gICAgfSk7XG4gICAgcmV0dXJuIHZhbGlkO1xuICB9XG5cbiAgcHJvdGVjdGVkIGdldEF0dHJpYnV0ZXNWYWx1ZXNUb0luc2VydCgpOiBvYmplY3Qge1xuICAgIGxldCBhdHRyVmFsdWVzID0ge307XG4gICAgaWYgKHRoaXMuaW5jbHVkZVBhcmVudEtleXMpIHtcbiAgICAgIGF0dHJWYWx1ZXMgPSB0aGlzLnRhYmxlLmdldFBhcmVudEtleXNWYWx1ZXMoKTtcbiAgICB9XG4gICAgT2JqZWN0LmtleXModGhpcy5jb250cm9scykuZm9yRWFjaCgoY29udHJvbEtleSkgPT4ge1xuICAgICAgYXR0clZhbHVlc1tjb250cm9sS2V5XSA9IHRoaXMuY29udHJvbHNbY29udHJvbEtleV0udmFsdWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIGF0dHJWYWx1ZXM7XG4gIH1cblxuICBwcm90ZWN0ZWQgb25JbnNlcnRTdWNjZXNzKHJlczogYW55KSB7XG4gICAgT2JzZXJ2YWJsZVdyYXBwZXIuY2FsbEVtaXQodGhpcy5vblBvc3RJbnNlcnRSZWNvcmQsIHJlcyk7XG4gICAgdGhpcy5zbmFja0JhclNlcnZpY2Uub3BlbignTUVTU0FHRVMuSU5TRVJURUQnLCB7IGljb246ICdjaGVja19jaXJjbGUnIH0pO1xuICAgIHRoaXMuY2xlYW5GaWVsZHMoKTtcblxuICAgIGlmICh0aGlzLnRhYmxlLmRhb1RhYmxlLnVzaW5nU3RhdGljRGF0YSkge1xuICAgICAgdGhpcy50YWJsZS5zZXREYXRhQXJyYXkocmVzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy50YWJsZS5yZWxvYWREYXRhKCk7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIGNsZWFuRmllbGRzKCkge1xuICAgIC8vIGNvbHVtbnMgd2l0aCBubyBlZGl0b3IgZGVmaW5lZFxuICAgIGNvbnN0IGNvbnRyb2xLZXlzID0gT2JqZWN0LmtleXModGhpcy5jb250cm9scyk7XG4gICAgY29udHJvbEtleXMuZm9yRWFjaCgoY29udHJvbEtleSkgPT4ge1xuICAgICAgdGhpcy5jb250cm9sc1tjb250cm9sS2V5XS5zZXRWYWx1ZSh2b2lkIDApO1xuICAgIH0pO1xuICAgIGNvbnN0IGZpcnN0SW5wdXRFbCA9ICh0aGlzLnRyV3JhcHBlciBhcyBhbnkpLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0Jyk7XG4gICAgaWYgKGZpcnN0SW5wdXRFbCkge1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGZpcnN0SW5wdXRFbC5mb2N1cygpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgY29sdW1uSGFzRXJyb3IoY29sdW1uOiBPQ29sdW1uLCBlcnJvcjogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgY29uc3QgY29udHJvbCA9IHRoaXMuY29udHJvbHNbY29sdW1uLmF0dHJdO1xuICAgIHJldHVybiBjb250cm9sICYmIGNvbnRyb2wudG91Y2hlZCAmJiBjb250cm9sLmhhc0Vycm9yKGVycm9yKTtcbiAgfVxuXG59XG4iXX0=