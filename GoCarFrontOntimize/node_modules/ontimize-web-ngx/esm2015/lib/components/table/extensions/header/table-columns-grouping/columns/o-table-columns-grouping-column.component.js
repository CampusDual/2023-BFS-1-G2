import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component } from '@angular/core';
import { InputConverter } from '../../../../../../decorators/input-converter';
import { Util } from '../../../../../../util';
export const DEFAULT_INPUTS_O_TABLE_COLUMN_GROUPING_COLUMN = [
    'attr',
    'title',
    'aggregateName: aggregate-name',
    'aggregate',
    'aggregateFunction: aggregate-function',
    'expandGroupsSameLevel: expand-groups-same-level',
    'changeAggregateSameLevel: change-aggregate-same-level',
];
export class OTableColumnsGroupingColumnComponent {
    constructor() {
        this.expandGroupsSameLevel = true;
        this.changeAggregateSameLevel = true;
    }
    set aggregate(value) {
        this._aggregate = value;
    }
    get aggregate() {
        if (Util.isDefined(this.aggregateFunction) && Util.isDefined(this.aggregateName)) {
            return this.aggregateName;
        }
        return this._aggregate;
    }
    getAggregateConfiguration() {
        return {
            attr: this.attr,
            title: this.title,
            aggregateName: this.aggregateName,
            aggregate: this.aggregate,
            aggregateFunction: this.aggregateFunction
        };
    }
}
OTableColumnsGroupingColumnComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-table-columns-grouping-column',
                template: ' ',
                changeDetection: ChangeDetectionStrategy.OnPush,
                inputs: DEFAULT_INPUTS_O_TABLE_COLUMN_GROUPING_COLUMN
            }] }
];
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OTableColumnsGroupingColumnComponent.prototype, "expandGroupsSameLevel", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OTableColumnsGroupingColumnComponent.prototype, "changeAggregateSameLevel", void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby10YWJsZS1jb2x1bW5zLWdyb3VwaW5nLWNvbHVtbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9vbnRpbWl6ZS13ZWItbmd4LyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvdGFibGUvZXh0ZW5zaW9ucy9oZWFkZXIvdGFibGUtY29sdW1ucy1ncm91cGluZy9jb2x1bW5zL28tdGFibGUtY29sdW1ucy1ncm91cGluZy1jb2x1bW4uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRW5FLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw4Q0FBOEMsQ0FBQztBQUc5RSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFOUMsTUFBTSxDQUFDLE1BQU0sNkNBQTZDLEdBQUc7SUFFM0QsTUFBTTtJQUVOLE9BQU87SUFFUCwrQkFBK0I7SUFFL0IsV0FBVztJQUVYLHVDQUF1QztJQUV2QyxpREFBaUQ7SUFFakQsdURBQXVEO0NBQ3hELENBQUM7QUFTRixNQUFNLE9BQU8sb0NBQW9DO0lBUGpEO1FBY0UsMEJBQXFCLEdBQVksSUFBSSxDQUFDO1FBRXRDLDZCQUF3QixHQUFZLElBQUksQ0FBQztJQXNCM0MsQ0FBQztJQXBCQyxJQUFJLFNBQVMsQ0FBQyxLQUFhO1FBQ3pCLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO0lBQzFCLENBQUM7SUFFRCxJQUFJLFNBQVM7UUFDWCxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUU7WUFDaEYsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDO1NBQzNCO1FBQ0QsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQ3pCLENBQUM7SUFFRCx5QkFBeUI7UUFDdkIsT0FBTztZQUNMLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtZQUNmLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztZQUNqQixhQUFhLEVBQUUsSUFBSSxDQUFDLGFBQWE7WUFDakMsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTO1lBQ3pCLGlCQUFpQixFQUFFLElBQUksQ0FBQyxpQkFBaUI7U0FDMUMsQ0FBQTtJQUNILENBQUM7OztZQXJDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGlDQUFpQztnQkFDM0MsUUFBUSxFQUFFLEdBQUc7Z0JBQ2IsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07Z0JBQy9DLE1BQU0sRUFBRSw2Q0FBNkM7YUFDdEQ7O0FBU0M7SUFEQyxjQUFjLEVBQUU7O21GQUNxQjtBQUV0QztJQURDLGNBQWMsRUFBRTs7c0ZBQ3dCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBJbnB1dENvbnZlcnRlciB9IGZyb20gJy4uLy4uLy4uLy4uLy4uLy4uL2RlY29yYXRvcnMvaW5wdXQtY29udmVydGVyJztcbmltcG9ydCB7IEdyb3VwZWRDb2x1bW5BZ2dyZWdhdGVDb25maWd1cmF0aW9uIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vLi4vaW50ZXJmYWNlcy9vLXRhYmxlLWNvbHVtbnMtZ3JvdXBpbmctaW50ZXJmYWNlJztcbmltcG9ydCB7IEFnZ3JlZ2F0ZUZ1bmN0aW9uIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vLi4vdHlwZXMvYWdncmVnYXRlLWZ1bmN0aW9uLnR5cGUnO1xuaW1wb3J0IHsgVXRpbCB9IGZyb20gJy4uLy4uLy4uLy4uLy4uLy4uL3V0aWwnO1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9JTlBVVFNfT19UQUJMRV9DT0xVTU5fR1JPVVBJTkdfQ09MVU1OID0gW1xuICAvLyBhdHRyIFtzdHJpbmddOiBjb2x1bW4gbmFtZS5cbiAgJ2F0dHInLFxuICAvLyB0aXRsZSBbc3RyaW5nXTogVGl0bGUgZm9yIHRoZSBoZWFkZXIgYWdncmVnYXRlIGNvbHVtblxuICAndGl0bGUnLFxuICAvLyBhZ2dyZWdhdGUtbmFtZSBbc3RyaW5nXTogTmFtZSBvZiB0aGUgYWdncmVnYXRlIG9wdGlvblxuICAnYWdncmVnYXRlTmFtZTogYWdncmVnYXRlLW5hbWUnLFxuICAvLyBhZ2dyZWdhdGUgW3N1bSB8IGNvdW50IHwgYXZnIHwgbWluIHxtYXhdXG4gICdhZ2dyZWdhdGUnLFxuICAvLyBmdW5jdGlvbi1hZ2dyZWdhdGUgWyAodmFsdWU6IGFueVtdKSA9PiBudW1iZXJdIEZ1bmN0aW9uIHRoYXQgY2FsY3VsYXRlcyBhIHZhbHVlIG9uIHRoZSB2YWx1ZXMgb2YgdGhlIGNvbHVtbiAnYXR0cidcbiAgJ2FnZ3JlZ2F0ZUZ1bmN0aW9uOiBhZ2dyZWdhdGUtZnVuY3Rpb24nLFxuICAvLyBleHBhbmQtZ3JvdXBzLXNhbWUtbGV2ZWxbYm9vbGVhbl06IEluZGljYXRlcyBpZiBjbGljayBpbiByb3cgZXhwYW5kcy9jb2xsYXBzZXMgYWxsIHJvd3Mgb24gc2FtZSBsZXZlbC4gQnkgZGVmYXVsdDogdHJ1ZVxuICAnZXhwYW5kR3JvdXBzU2FtZUxldmVsOiBleHBhbmQtZ3JvdXBzLXNhbWUtbGV2ZWwnLFxuICAvLyBhZ2dyZWdhdGUgW2Jvb2xlYW5dXG4gICdjaGFuZ2VBZ2dyZWdhdGVTYW1lTGV2ZWw6IGNoYW5nZS1hZ2dyZWdhdGUtc2FtZS1sZXZlbCcsXG5dO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdvLXRhYmxlLWNvbHVtbnMtZ3JvdXBpbmctY29sdW1uJyxcbiAgdGVtcGxhdGU6ICcgJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIGlucHV0czogREVGQVVMVF9JTlBVVFNfT19UQUJMRV9DT0xVTU5fR1JPVVBJTkdfQ09MVU1OXG59KVxuXG5leHBvcnQgY2xhc3MgT1RhYmxlQ29sdW1uc0dyb3VwaW5nQ29sdW1uQ29tcG9uZW50IHtcbiAgcHVibGljIGF0dHI6IHN0cmluZztcbiAgcHVibGljIHRpdGxlOiBzdHJpbmc7XG4gIHB1YmxpYyBhZ2dyZWdhdGVOYW1lOiBzdHJpbmc7XG4gIHByaXZhdGUgX2FnZ3JlZ2F0ZTogc3RyaW5nO1xuICBwdWJsaWMgYWdncmVnYXRlRnVuY3Rpb246IEFnZ3JlZ2F0ZUZ1bmN0aW9uO1xuICBASW5wdXRDb252ZXJ0ZXIoKVxuICBleHBhbmRHcm91cHNTYW1lTGV2ZWw6IGJvb2xlYW4gPSB0cnVlO1xuICBASW5wdXRDb252ZXJ0ZXIoKVxuICBjaGFuZ2VBZ2dyZWdhdGVTYW1lTGV2ZWw6IGJvb2xlYW4gPSB0cnVlO1xuIFxuICBzZXQgYWdncmVnYXRlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9hZ2dyZWdhdGUgPSB2YWx1ZTtcbiAgfVxuXG4gIGdldCBhZ2dyZWdhdGUoKTogc3RyaW5nIHtcbiAgICBpZiAoVXRpbC5pc0RlZmluZWQodGhpcy5hZ2dyZWdhdGVGdW5jdGlvbikgJiYgVXRpbC5pc0RlZmluZWQodGhpcy5hZ2dyZWdhdGVOYW1lKSkge1xuICAgICAgcmV0dXJuIHRoaXMuYWdncmVnYXRlTmFtZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2FnZ3JlZ2F0ZTtcbiAgfVxuXG4gIGdldEFnZ3JlZ2F0ZUNvbmZpZ3VyYXRpb24oKTogR3JvdXBlZENvbHVtbkFnZ3JlZ2F0ZUNvbmZpZ3VyYXRpb24ge1xuICAgIHJldHVybiB7XG4gICAgICBhdHRyOiB0aGlzLmF0dHIsXG4gICAgICB0aXRsZTogdGhpcy50aXRsZSxcbiAgICAgIGFnZ3JlZ2F0ZU5hbWU6IHRoaXMuYWdncmVnYXRlTmFtZSxcbiAgICAgIGFnZ3JlZ2F0ZTogdGhpcy5hZ2dyZWdhdGUsXG4gICAgICBhZ2dyZWdhdGVGdW5jdGlvbjogdGhpcy5hZ2dyZWdhdGVGdW5jdGlvblxuICAgIH1cbiAgfVxufVxuIl19