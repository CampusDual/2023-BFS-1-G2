import { Injectable } from "@angular/core";
import { Subject } from "rxjs";
import { distinctUntilChanged } from "rxjs/operators";
export class OTableVirtualScrollStrategy {
    constructor() {
        this.indexChange = new Subject();
        this.scrolledIndexChange = this.indexChange.pipe(distinctUntilChanged());
        this.stickyChange = new Subject();
        this.bufferMultiplier = 1;
        this._dataLength = 0;
    }
    get dataLength() {
        return this._dataLength;
    }
    set dataLength(value) {
        this._dataLength = value;
        this.onDataLengthChanged();
    }
    attach(viewport) {
        this.viewport = viewport;
        this.onDataLengthChanged();
        this.updateContent();
    }
    detach() {
    }
    destroy() {
        this.indexChange.complete();
        this.stickyChange.complete();
    }
    onContentRendered() {
    }
    onRenderedOffsetChanged() {
    }
    scrollToIndex(index, behavior) {
    }
    onContentScrolled() {
        this.updateContent();
    }
    setConfig(rowHeight, headerHeight, footerHeight) {
        if (this.rowHeight === rowHeight
            && this.headerHeight === headerHeight
            && this.footerHeight === footerHeight) {
            return;
        }
        this.rowHeight = rowHeight;
        this.headerHeight = headerHeight;
        this.footerHeight = footerHeight;
        this.onDataLengthChanged();
    }
    onDataLengthChanged() {
        if (this.viewport) {
            this.viewport.setTotalContentSize(this.dataLength * this.rowHeight + this.headerHeight + this.footerHeight);
            this.viewport.scrollToOffset(0);
            this.updateContent();
        }
    }
    updateContent() {
        if (!this.viewport || !this.rowHeight || this.dataLength === 0) {
            return;
        }
        const scrollOffset = this.viewport.measureScrollOffset();
        const itemsDisplayed = Math.ceil(this.viewport.getViewportSize() / this.rowHeight);
        const renderedOffset = this.viewport.getOffsetToRenderedContentStart();
        const start = renderedOffset / this.rowHeight;
        const bufferItems = Math.ceil(itemsDisplayed * this.bufferMultiplier);
        const bufferOffset = renderedOffset + bufferItems * this.rowHeight;
        const relativeScrollOffset = scrollOffset - bufferOffset;
        const rowsScrolled = relativeScrollOffset / this.rowHeight;
        const displayed = scrollOffset / this.rowHeight;
        this.indexChange.next(displayed);
        const rowsToMove = Math.sign(rowsScrolled) * Math.floor(Math.abs(rowsScrolled));
        const adjustedRenderedOffset = Math.max(0, renderedOffset + rowsToMove * this.rowHeight);
        this.viewport.setRenderedContentOffset(adjustedRenderedOffset);
        const adjustedStart = Math.max(0, start + rowsToMove);
        const adjustedEnd = adjustedStart + itemsDisplayed + bufferItems;
        this.viewport.setRenderedRange({ start: adjustedStart, end: adjustedEnd });
        this.stickyChange.next(adjustedRenderedOffset);
    }
}
OTableVirtualScrollStrategy.decorators = [
    { type: Injectable }
];
//# sourceMappingURL=data:application/json;base64,