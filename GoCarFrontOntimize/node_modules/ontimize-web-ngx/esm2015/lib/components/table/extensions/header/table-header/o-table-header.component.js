import { ChangeDetectionStrategy, Component, forwardRef, Inject, ViewChild, ViewEncapsulation } from "@angular/core";
import { OTableComponent } from "../../../o-table.component";
import { OMatSortHeader } from "../../sort/o-mat-sort-header";
import { OTableHeaderColumnFilterIconComponent } from "../table-header-column-filter-icon/o-table-header-column-filter-icon.component";
export const DEFAULT_INPUTS_O_TABLE_HEADER = [
    'column'
];
export class OTableHeaderComponent {
    constructor(table) {
        this.table = table;
        this.resizable = this.table.resizable;
    }
    set columnFilterIcon(value) {
        this._columnFilterIcon = value;
    }
    isModeColumnFilterable(column) {
        return this.table.isColumnFiltersActive && this.table.isColumnFilterable(column);
    }
    setFilterIconHintVisible(visible) {
        if (this._columnFilterIcon) {
            this._columnFilterIcon.filterIconHintVisible.next(visible);
        }
    }
    ngAfterViewInit() {
        this.table.registerTableHeaders(this);
    }
}
OTableHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-table-header',
                inputs: DEFAULT_INPUTS_O_TABLE_HEADER,
                template: "<o-table-header-column-filter-icon #columnFilterIcon *ngIf=\"isModeColumnFilterable(column)\" [column]=\"column\">\n</o-table-header-column-filter-icon>\n\n<ng-container *ngIf=\"column.orderable\">\n    <span o-mat-sort-header>{{ column.title | oTranslate }}</span>\n</ng-container>\n<ng-container *ngIf=\"!column.orderable\">\n    <span class=\"header-title-container\">{{ column.title | oTranslate }}</span>\n</ng-container>\n\n<o-table-column-resizer *ngIf=\"resizable\" [column]=\"column\"></o-table-column-resizer>",
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                host: {
                    '[class.o-table-header]': 'true',
                    '(mouseenter)': 'setFilterIconHintVisible(true)',
                    '(mouseleave)': 'setFilterIconHintVisible(false)'
                }
            }] }
];
OTableHeaderComponent.ctorParameters = () => [
    { type: OTableComponent, decorators: [{ type: Inject, args: [forwardRef(() => OTableComponent),] }] }
];
OTableHeaderComponent.propDecorators = {
    columnFilterIcon: [{ type: ViewChild, args: ['columnFilterIcon', { static: false },] }],
    matSortHeader: [{ type: ViewChild, args: [OMatSortHeader, { static: false },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby10YWJsZS1oZWFkZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vb250aW1pemUtd2ViLW5neC8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3RhYmxlL2V4dGVuc2lvbnMvaGVhZGVyL3RhYmxlLWhlYWRlci9vLXRhYmxlLWhlYWRlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVySCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDN0QsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQzlELE9BQU8sRUFBRSxxQ0FBcUMsRUFBRSxNQUFNLGdGQUFnRixDQUFDO0FBRXZJLE1BQU0sQ0FBQyxNQUFNLDZCQUE2QixHQUFHO0lBQzNDLFFBQVE7Q0FDVCxDQUFBO0FBYUQsTUFBTSxPQUFPLHFCQUFxQjtJQVloQyxZQUN1RCxLQUFzQjtRQUF0QixVQUFLLEdBQUwsS0FBSyxDQUFpQjtRQUUzRSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDO0lBQ3hDLENBQUM7SUFWRCxJQUFzRCxnQkFBZ0IsQ0FBQyxLQUE0QztRQUNqSCxJQUFJLENBQUMsaUJBQWlCLEdBQUcsS0FBSyxDQUFDO0lBQ2pDLENBQUM7SUFXRCxzQkFBc0IsQ0FBQyxNQUFlO1FBQ3BDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ25GLENBQUM7SUFFRCx3QkFBd0IsQ0FBQyxPQUFnQjtRQUN2QyxJQUFJLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtZQUMxQixJQUFJLENBQUMsaUJBQWlCLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQzVEO0lBQ0gsQ0FBQztJQUVELGVBQWU7UUFDYixJQUFJLENBQUMsS0FBSyxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3hDLENBQUM7OztZQTNDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGdCQUFnQjtnQkFDMUIsTUFBTSxFQUFFLDZCQUE2QjtnQkFDckMsbWhCQUE4QztnQkFDOUMsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7Z0JBQ3JDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2dCQUMvQyxJQUFJLEVBQUU7b0JBQ0osd0JBQXdCLEVBQUUsTUFBTTtvQkFDaEMsY0FBYyxFQUFFLGdDQUFnQztvQkFDaEQsY0FBYyxFQUFFLGlDQUFpQztpQkFDbEQ7YUFDRjs7O1lBbEJRLGVBQWUsdUJBZ0NuQixNQUFNLFNBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLGVBQWUsQ0FBQzs7OytCQVAxQyxTQUFTLFNBQUMsa0JBQWtCLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFOzRCQUkvQyxTQUFTLFNBQUMsY0FBYyxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIGZvcndhcmRSZWYsIEluamVjdCwgVmlld0NoaWxkLCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBPQ29sdW1uIH0gZnJvbSBcIi4uLy4uLy4uL2NvbHVtblwiO1xuaW1wb3J0IHsgT1RhYmxlQ29tcG9uZW50IH0gZnJvbSBcIi4uLy4uLy4uL28tdGFibGUuY29tcG9uZW50XCI7XG5pbXBvcnQgeyBPTWF0U29ydEhlYWRlciB9IGZyb20gXCIuLi8uLi9zb3J0L28tbWF0LXNvcnQtaGVhZGVyXCI7XG5pbXBvcnQgeyBPVGFibGVIZWFkZXJDb2x1bW5GaWx0ZXJJY29uQ29tcG9uZW50IH0gZnJvbSBcIi4uL3RhYmxlLWhlYWRlci1jb2x1bW4tZmlsdGVyLWljb24vby10YWJsZS1oZWFkZXItY29sdW1uLWZpbHRlci1pY29uLmNvbXBvbmVudFwiO1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9JTlBVVFNfT19UQUJMRV9IRUFERVIgPSBbXG4gICdjb2x1bW4nXG5dXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdvLXRhYmxlLWhlYWRlcicsXG4gIGlucHV0czogREVGQVVMVF9JTlBVVFNfT19UQUJMRV9IRUFERVIsXG4gIHRlbXBsYXRlVXJsOiAnLi9vLXRhYmxlLWhlYWRlci5jb21wb25lbnQuaHRtbCcsXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBob3N0OiB7XG4gICAgJ1tjbGFzcy5vLXRhYmxlLWhlYWRlcl0nOiAndHJ1ZScsXG4gICAgJyhtb3VzZWVudGVyKSc6ICdzZXRGaWx0ZXJJY29uSGludFZpc2libGUodHJ1ZSknLFxuICAgICcobW91c2VsZWF2ZSknOiAnc2V0RmlsdGVySWNvbkhpbnRWaXNpYmxlKGZhbHNlKSdcbiAgfVxufSlcbmV4cG9ydCBjbGFzcyBPVGFibGVIZWFkZXJDb21wb25lbnQge1xuXG4gIHB1YmxpYyBjb2x1bW46IE9Db2x1bW5cbiAgcHVibGljIHJlc2l6YWJsZTogYm9vbGVhbjtcbiAgcHJvdGVjdGVkIF9jb2x1bW5GaWx0ZXJJY29uOiBPVGFibGVIZWFkZXJDb2x1bW5GaWx0ZXJJY29uQ29tcG9uZW50O1xuXG4gIEBWaWV3Q2hpbGQoJ2NvbHVtbkZpbHRlckljb24nLCB7IHN0YXRpYzogZmFsc2UgfSkgc2V0IGNvbHVtbkZpbHRlckljb24odmFsdWU6IE9UYWJsZUhlYWRlckNvbHVtbkZpbHRlckljb25Db21wb25lbnQpIHtcbiAgICB0aGlzLl9jb2x1bW5GaWx0ZXJJY29uID0gdmFsdWU7XG4gIH1cblxuICBAVmlld0NoaWxkKE9NYXRTb3J0SGVhZGVyLCB7IHN0YXRpYzogZmFsc2UgfSkgbWF0U29ydEhlYWRlcjogT01hdFNvcnRIZWFkZXI7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChmb3J3YXJkUmVmKCgpID0+IE9UYWJsZUNvbXBvbmVudCkpIHByb3RlY3RlZCB0YWJsZTogT1RhYmxlQ29tcG9uZW50XG4gICkge1xuICAgIHRoaXMucmVzaXphYmxlID0gdGhpcy50YWJsZS5yZXNpemFibGU7XG4gIH1cblxuXG4gIGlzTW9kZUNvbHVtbkZpbHRlcmFibGUoY29sdW1uOiBPQ29sdW1uKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMudGFibGUuaXNDb2x1bW5GaWx0ZXJzQWN0aXZlICYmIHRoaXMudGFibGUuaXNDb2x1bW5GaWx0ZXJhYmxlKGNvbHVtbik7XG4gIH1cblxuICBzZXRGaWx0ZXJJY29uSGludFZpc2libGUodmlzaWJsZTogYm9vbGVhbikge1xuICAgIGlmICh0aGlzLl9jb2x1bW5GaWx0ZXJJY29uKSB7XG4gICAgICB0aGlzLl9jb2x1bW5GaWx0ZXJJY29uLmZpbHRlckljb25IaW50VmlzaWJsZS5uZXh0KHZpc2libGUpO1xuICAgIH1cbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLnRhYmxlLnJlZ2lzdGVyVGFibGVIZWFkZXJzKHRoaXMpO1xuICB9XG5cbn0iXX0=