import { animate, state, style, transition, trigger } from '@angular/animations';
import { ChangeDetectionStrategy, Component, forwardRef, Inject, ViewEncapsulation } from '@angular/core';
import { AnimationDurations } from '@angular/material';
import { BehaviorSubject, Subscription } from 'rxjs';
import { Util } from '../../../../../util/util';
import { OTableComponent } from '../../../o-table.component';
export const DEFAULT_INPUTS_O_TABLE_COLUMN_FILTER_ICON = [
    'column'
];
export class OTableHeaderColumnFilterIconComponent {
    constructor(table) {
        this.table = table;
        this.isColumnFilterActive = new BehaviorSubject(false);
        this.filterIconHintVisible = new BehaviorSubject(false);
        this.indicatorNumber = new BehaviorSubject('');
        this.subscription = new Subscription();
        this.filterIconStateView = new BehaviorSubject('INACTIVE');
        this.subscription.add(this.table.onFilterByColumnChange.subscribe(() => {
            this.updateStateColumnFilter();
        }));
        this.subscription.add(this.filterIconHintVisible.subscribe((value) => {
            this.setFilterIconHintVisible(value);
        }));
    }
    ngOnInit() {
        this.updateStateColumnFilter();
    }
    updateStateColumnFilter() {
        this.indicatorNumber.next(this.getFilterIndicatorNumbered());
        this.isColumnFilterActive.next(Util.isDefined(this.getColumnValueFilterByAttr()));
        this.filterIconStateView.next(this.isColumnFilterActive.getValue() ? 'ACTIVE' : 'INACTIVE');
    }
    getColumnValueFilterByAttr() {
        const columnValueFilters = this.table.dataSource.getColumnValueFilters();
        return columnValueFilters.find(item => item.attr === this.column.attr);
    }
    openColumnFilterDialog(event) {
        this.table.openColumnFilterDialog(this.column, event);
    }
    getFilterIndicatorNumbered() {
        let result = '';
        const columnValueFilters = this.table.dataSource.getColumnValueFilters();
        if (columnValueFilters.length < 2) {
            return result;
        }
        const index = columnValueFilters.findIndex(x => x.attr === this.column.attr);
        if (index > -1) {
            result += index + 1;
        }
        return result;
    }
    setFilterIconHintVisible(visible) {
        if (this.filterIconStateView.getValue() === 'ACTIVE') {
            return;
        }
        this.filterIconStateView.next(visible ? 'HINT' : 'INACTIVE');
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
}
OTableHeaderColumnFilterIconComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-table-header-column-filter-icon',
                inputs: DEFAULT_INPUTS_O_TABLE_COLUMN_FILTER_ICON,
                template: "<mat-icon class=\"column-filter-icon\" [ngClass]=\"{'column-filter-icon-active':isColumnFilterActive | async}\"\n  (click)=\"openColumnFilterDialog($event)\" [@iconState]=\"filterIconStateView | async\">\n  filter_alt\n</mat-icon>\n<span class=\"o-table-header-indicator-numbered\">\n  {{ indicatorNumber | async }}\n</span>",
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                host: {
                    '[class.o-table-column-filter-icon]': 'true'
                },
                animations: [
                    trigger('iconState', [
                        state('ACTIVE, HINT', style({ opacity: 1 })),
                        state('INACTIVE', style({ opacity: 0 })),
                        transition('* <=> HINT', animate(AnimationDurations.ENTERING))
                    ]),
                ],
                styles: [".o-table .o-table-container .mat-table .mat-header-cell .o-table-column-filter-icon{display:flex;position:absolute;left:0}.o-table .o-table-container .mat-table .mat-header-cell .o-table-column-filter-icon .o-table-header-indicator-numbered{right:-5px;bottom:-8px}"]
            }] }
];
OTableHeaderColumnFilterIconComponent.ctorParameters = () => [
    { type: OTableComponent, decorators: [{ type: Inject, args: [forwardRef(() => OTableComponent),] }] }
];
//# sourceMappingURL=data:application/json;base64,