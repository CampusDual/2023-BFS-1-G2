import { ChangeDetectionStrategy, Component, Injector, ViewChild } from '@angular/core';
import { FormControl, FormGroup, Validators } from '@angular/forms';
import { MatDialogRef, MatSelectionList } from '@angular/material';
import { OTableBaseDialogClass } from '../o-table-base-dialog.class';
export class OTableStoreConfigurationDialogComponent extends OTableBaseDialogClass {
    constructor(dialogRef, injector) {
        super(injector);
        this.dialogRef = dialogRef;
        this.injector = injector;
        this.properties = [{
                property: 'sort-columns',
                name: 'TABLE.DIALOG.PROPERTIES.SORT',
                info: 'TABLE.DIALOG.PROPERTIES.SORT.INFO'
            }, {
                property: 'oColumns-display',
                name: 'TABLE.DIALOG.PROPERTIES.COLUMNS_DISPLAY',
                info: 'TABLE.DIALOG.PROPERTIES.COLUMNS_DISPLAY.INFO'
            }, {
                property: 'quick-filter',
                name: 'TABLE.DIALOG.PROPERTIES.QUICK_FILTER',
                info: 'TABLE.DIALOG.PROPERTIES.QUICK_FILTER.INFO'
            }, {
                property: 'columns-filter',
                name: 'TABLE.DIALOG.PROPERTIES.COLUMNS_FILTER',
                info: 'TABLE.DIALOG.PROPERTIES.COLUMNS_FILTER.INFO'
            }, {
                property: 'filter-builder',
                name: 'TABLE.DIALOG.PROPERTIES.FILTER_BUILDER',
                info: 'TABLE.DIALOG.PROPERTIES.FILTER_BUILDER.INFO'
            }, {
                property: 'page',
                name: 'TABLE.DIALOG.PROPERTIES.PAGE',
                info: 'TABLE.DIALOG.PROPERTIES.PAGE.INFO'
            }];
        this.formGroup = new FormGroup({
            name: new FormControl('', [
                Validators.required
            ]),
            description: new FormControl('')
        });
        this.setFormControl(this.formGroup.get('name'));
    }
    ngAfterViewInit() {
        this.propertiesList.selectAll();
    }
    areAllSelected() {
        return this.propertiesList && this.propertiesList.options && this.propertiesList.options.length === this.propertiesList.selectedOptions.selected.length;
    }
    onSelectAllChange(event) {
        event.checked ? this.propertiesList.selectAll() : this.propertiesList.deselectAll();
    }
    getConfigurationAttributes() {
        return this.formGroup.value;
    }
    getSelectedTableProperties() {
        const selected = this.propertiesList.selectedOptions.selected;
        return selected.length ? selected.map(item => item.value) : [];
    }
    isIndeterminate() {
        return !this.areAllSelected();
    }
}
OTableStoreConfigurationDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-table-store-configuration-dialog',
                template: "<span mat-dialog-title>{{ 'TABLE.BUTTONS.SAVE_CONFIGURATION' | oTranslate }}</span>\n\n<mat-dialog-content>\n  <div mat-subheader>{{ 'TABLE.DIALOG.SAVE_CONFIGURATION' | oTranslate }}</div>\n  <form #form [formGroup]=\"formGroup\" fxLayout=\"column\">\n    <mat-form-field>\n      <input matInput [matTooltip]=\"tooltipText\" [matTooltipClass]=\"tooltipClass\" placeholder=\"{{ 'TABLE.DIALOG.CONFIGURATION_NAME' | oTranslate }}\"\n        formControlName=\"name\" required />\n      <mat-error *oMatError=\"hasError(formGroup.controls['name'], 'required')\">\n        {{ 'FORM_VALIDATION.REQUIRED' | oTranslate }}\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field class=\"example-full-width\">\n      <textarea matInput placeholder=\"{{ 'TABLE.DIALOG.CONFIGURATION_DESCRIPTION' | oTranslate }}\" formControlName=\"description\" rows=\"4\"\n        cols=\"50\"></textarea>\n    </mat-form-field>\n    <div class=\"inner-subheader\" mat-subheader>{{ 'TABLE.DIALOG.CONFIGURATION_PROPERTIES' | oTranslate }}</div>\n    <div fxLayout=\"column\">\n      <mat-checkbox (change)=\"onSelectAllChange($event)\" [checked]=\"areAllSelected()\" [indeterminate]=\"isIndeterminate()\" class=\"select-all-checkbox\">\n        {{ 'SELECT_ALL' | oTranslate }}\n      </mat-checkbox>\n\n      <mat-selection-list #propertiesList dense class=\"o-table-save-configuration-dialog-list o-scroll\">\n        <mat-list-option checkboxPosition=\"before\" *ngFor=\"let property of properties\" [value]=\"property.property\">\n          <div fxLayout=\"row\" fxLayoutAlign=\"center center\" fxFlex>\n            <span matLine fxFlex>{{ property.name | oTranslate }}</span>\n            <mat-icon *ngIf=\"property.info\" matTooltip=\"{{ property.info | oTranslate }}\" class=\"o-tscd-list-tooltip\">info</mat-icon>\n          </div>\n        </mat-list-option>\n      </mat-selection-list>\n    </div>\n  </form>\n</mat-dialog-content>\n\n<mat-dialog-actions align=\"end\">\n  <button type=\"button\" mat-stroked-button class=\"mat-primary\" [mat-dialog-close]=\"false\" class=\"o-button-default cancel\">\n    {{ 'CANCEL' | oTranslate }}</button>\n  <button type=\"button\" mat-stroked-button class=\"mat-primary\" [mat-dialog-close]=\"true\"\n    [disabled]=\"!formGroup.valid || propertiesList.selectedOptions.selected.length===0\" class=\"o-button-primary\">{{ 'SAVE' | oTranslate }}</button>\n</mat-dialog-actions>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".select-all-checkbox{padding:6px 0}.o-table-save-configuration-dialog-list{max-height:120px;overflow-y:scroll}.o-table-save-configuration-dialog-list .mat-list-item{height:30px}.o-table-save-configuration-dialog-list .mat-list-item .o-tscd-list-tooltip.mat-icon{opacity:.25}"]
            }] }
];
OTableStoreConfigurationDialogComponent.ctorParameters = () => [
    { type: MatDialogRef },
    { type: Injector }
];
OTableStoreConfigurationDialogComponent.propDecorators = {
    propertiesList: [{ type: ViewChild, args: ['propertiesList', { static: false },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby10YWJsZS1zdG9yZS1jb25maWd1cmF0aW9uLWRpYWxvZy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9vbnRpbWl6ZS13ZWItbmd4LyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvdGFibGUvZXh0ZW5zaW9ucy9kaWFsb2cvc3RvcmUtY29uZmlndXJhdGlvbi9vLXRhYmxlLXN0b3JlLWNvbmZpZ3VyYXRpb24tZGlhbG9nLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWlCLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZHLE9BQU8sRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3BFLE9BQU8sRUFBcUIsWUFBWSxFQUFpQixnQkFBZ0IsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRXJHLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBUXJFLE1BQU0sT0FBTyx1Q0FBd0MsU0FBUSxxQkFBcUI7SUFzQ2hGLFlBQ1MsU0FBZ0UsRUFDN0QsUUFBa0I7UUFFNUIsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBSFQsY0FBUyxHQUFULFNBQVMsQ0FBdUQ7UUFDN0QsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQW5DdkIsZUFBVSxHQUFVLENBQUM7Z0JBQzFCLFFBQVEsRUFBRSxjQUFjO2dCQUN4QixJQUFJLEVBQUUsOEJBQThCO2dCQUNwQyxJQUFJLEVBQUUsbUNBQW1DO2FBQzFDLEVBQUU7Z0JBQ0QsUUFBUSxFQUFFLGtCQUFrQjtnQkFDNUIsSUFBSSxFQUFFLHlDQUF5QztnQkFDL0MsSUFBSSxFQUFFLDhDQUE4QzthQUNyRCxFQUFFO2dCQUNELFFBQVEsRUFBRSxjQUFjO2dCQUN4QixJQUFJLEVBQUUsc0NBQXNDO2dCQUM1QyxJQUFJLEVBQUUsMkNBQTJDO2FBQ2xELEVBQUU7Z0JBQ0QsUUFBUSxFQUFFLGdCQUFnQjtnQkFDMUIsSUFBSSxFQUFFLHdDQUF3QztnQkFDOUMsSUFBSSxFQUFFLDZDQUE2QzthQUNwRCxFQUFFO2dCQUNELFFBQVEsRUFBRSxnQkFBZ0I7Z0JBQzFCLElBQUksRUFBRSx3Q0FBd0M7Z0JBQzlDLElBQUksRUFBRSw2Q0FBNkM7YUFDcEQsRUFBRTtnQkFDRCxRQUFRLEVBQUUsTUFBTTtnQkFDaEIsSUFBSSxFQUFFLDhCQUE4QjtnQkFDcEMsSUFBSSxFQUFFLG1DQUFtQzthQUMxQyxDQUFDLENBQUM7UUFFSSxjQUFTLEdBQWMsSUFBSSxTQUFTLENBQUM7WUFDMUMsSUFBSSxFQUFFLElBQUksV0FBVyxDQUFDLEVBQUUsRUFBRTtnQkFDeEIsVUFBVSxDQUFDLFFBQVE7YUFDcEIsQ0FBQztZQUNGLFdBQVcsRUFBRSxJQUFJLFdBQVcsQ0FBQyxFQUFFLENBQUM7U0FDakMsQ0FBQyxDQUFDO1FBT0QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFTSxlQUFlO1FBQ3BCLElBQUksQ0FBQyxjQUFjLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDbEMsQ0FBQztJQUVNLGNBQWM7UUFDbkIsT0FBTyxJQUFJLENBQUMsY0FBYyxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLE1BQU0sS0FBSyxJQUFJLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO0lBQzFKLENBQUM7SUFFTSxpQkFBaUIsQ0FBQyxLQUF3QjtRQUMvQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3RGLENBQUM7SUFFTSwwQkFBMEI7UUFDL0IsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQztJQUM5QixDQUFDO0lBRU0sMEJBQTBCO1FBQy9CLE1BQU0sUUFBUSxHQUFvQixJQUFJLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUM7UUFDL0UsT0FBTyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDakUsQ0FBQztJQUVNLGVBQWU7UUFDcEIsT0FBTyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUNoQyxDQUFDOzs7WUEzRUYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxvQ0FBb0M7Z0JBQzlDLGkzRUFBa0U7Z0JBRWxFLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNOzthQUNoRDs7O1lBVDJCLFlBQVk7WUFGb0IsUUFBUTs7OzZCQWNqRSxTQUFTLFNBQUMsZ0JBQWdCLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgSW5qZWN0b3IsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUNvbnRyb2wsIEZvcm1Hcm91cCwgVmFsaWRhdG9ycyB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IE1hdENoZWNrYm94Q2hhbmdlLCBNYXREaWFsb2dSZWYsIE1hdExpc3RPcHRpb24sIE1hdFNlbGVjdGlvbkxpc3QgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbCc7XG5cbmltcG9ydCB7IE9UYWJsZUJhc2VEaWFsb2dDbGFzcyB9IGZyb20gJy4uL28tdGFibGUtYmFzZS1kaWFsb2cuY2xhc3MnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdvLXRhYmxlLXN0b3JlLWNvbmZpZ3VyYXRpb24tZGlhbG9nJyxcbiAgdGVtcGxhdGVVcmw6ICcuL28tdGFibGUtc3RvcmUtY29uZmlndXJhdGlvbi1kaWFsb2cuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9vLXRhYmxlLXN0b3JlLWNvbmZpZ3VyYXRpb24tZGlhbG9nLmNvbXBvbmVudC5zY3NzJ10sXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIE9UYWJsZVN0b3JlQ29uZmlndXJhdGlvbkRpYWxvZ0NvbXBvbmVudCBleHRlbmRzIE9UYWJsZUJhc2VEaWFsb2dDbGFzcyBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuXG4gIEBWaWV3Q2hpbGQoJ3Byb3BlcnRpZXNMaXN0JywgeyBzdGF0aWM6IGZhbHNlIH0pXG4gIHB1YmxpYyBwcm9wZXJ0aWVzTGlzdDogTWF0U2VsZWN0aW9uTGlzdDtcblxuICBwdWJsaWMgcHJvcGVydGllczogYW55W10gPSBbe1xuICAgIHByb3BlcnR5OiAnc29ydC1jb2x1bW5zJyxcbiAgICBuYW1lOiAnVEFCTEUuRElBTE9HLlBST1BFUlRJRVMuU09SVCcsXG4gICAgaW5mbzogJ1RBQkxFLkRJQUxPRy5QUk9QRVJUSUVTLlNPUlQuSU5GTydcbiAgfSwge1xuICAgIHByb3BlcnR5OiAnb0NvbHVtbnMtZGlzcGxheScsXG4gICAgbmFtZTogJ1RBQkxFLkRJQUxPRy5QUk9QRVJUSUVTLkNPTFVNTlNfRElTUExBWScsXG4gICAgaW5mbzogJ1RBQkxFLkRJQUxPRy5QUk9QRVJUSUVTLkNPTFVNTlNfRElTUExBWS5JTkZPJ1xuICB9LCB7XG4gICAgcHJvcGVydHk6ICdxdWljay1maWx0ZXInLFxuICAgIG5hbWU6ICdUQUJMRS5ESUFMT0cuUFJPUEVSVElFUy5RVUlDS19GSUxURVInLFxuICAgIGluZm86ICdUQUJMRS5ESUFMT0cuUFJPUEVSVElFUy5RVUlDS19GSUxURVIuSU5GTydcbiAgfSwge1xuICAgIHByb3BlcnR5OiAnY29sdW1ucy1maWx0ZXInLFxuICAgIG5hbWU6ICdUQUJMRS5ESUFMT0cuUFJPUEVSVElFUy5DT0xVTU5TX0ZJTFRFUicsXG4gICAgaW5mbzogJ1RBQkxFLkRJQUxPRy5QUk9QRVJUSUVTLkNPTFVNTlNfRklMVEVSLklORk8nXG4gIH0sIHtcbiAgICBwcm9wZXJ0eTogJ2ZpbHRlci1idWlsZGVyJyxcbiAgICBuYW1lOiAnVEFCTEUuRElBTE9HLlBST1BFUlRJRVMuRklMVEVSX0JVSUxERVInLFxuICAgIGluZm86ICdUQUJMRS5ESUFMT0cuUFJPUEVSVElFUy5GSUxURVJfQlVJTERFUi5JTkZPJ1xuICB9LCB7XG4gICAgcHJvcGVydHk6ICdwYWdlJyxcbiAgICBuYW1lOiAnVEFCTEUuRElBTE9HLlBST1BFUlRJRVMuUEFHRScsXG4gICAgaW5mbzogJ1RBQkxFLkRJQUxPRy5QUk9QRVJUSUVTLlBBR0UuSU5GTydcbiAgfV07XG5cbiAgcHVibGljIGZvcm1Hcm91cDogRm9ybUdyb3VwID0gbmV3IEZvcm1Hcm91cCh7XG4gICAgbmFtZTogbmV3IEZvcm1Db250cm9sKCcnLCBbXG4gICAgICBWYWxpZGF0b3JzLnJlcXVpcmVkXG4gICAgXSksXG4gICAgZGVzY3JpcHRpb246IG5ldyBGb3JtQ29udHJvbCgnJylcbiAgfSk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIGRpYWxvZ1JlZjogTWF0RGlhbG9nUmVmPE9UYWJsZVN0b3JlQ29uZmlndXJhdGlvbkRpYWxvZ0NvbXBvbmVudD4sXG4gICAgcHJvdGVjdGVkIGluamVjdG9yOiBJbmplY3RvclxuICApIHtcbiAgICBzdXBlcihpbmplY3Rvcik7XG4gICAgdGhpcy5zZXRGb3JtQ29udHJvbCh0aGlzLmZvcm1Hcm91cC5nZXQoJ25hbWUnKSk7XG4gIH1cblxuICBwdWJsaWMgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgIHRoaXMucHJvcGVydGllc0xpc3Quc2VsZWN0QWxsKCk7XG4gIH1cblxuICBwdWJsaWMgYXJlQWxsU2VsZWN0ZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMucHJvcGVydGllc0xpc3QgJiYgdGhpcy5wcm9wZXJ0aWVzTGlzdC5vcHRpb25zICYmIHRoaXMucHJvcGVydGllc0xpc3Qub3B0aW9ucy5sZW5ndGggPT09IHRoaXMucHJvcGVydGllc0xpc3Quc2VsZWN0ZWRPcHRpb25zLnNlbGVjdGVkLmxlbmd0aDtcbiAgfVxuXG4gIHB1YmxpYyBvblNlbGVjdEFsbENoYW5nZShldmVudDogTWF0Q2hlY2tib3hDaGFuZ2UpOiB2b2lkIHtcbiAgICBldmVudC5jaGVja2VkID8gdGhpcy5wcm9wZXJ0aWVzTGlzdC5zZWxlY3RBbGwoKSA6IHRoaXMucHJvcGVydGllc0xpc3QuZGVzZWxlY3RBbGwoKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRDb25maWd1cmF0aW9uQXR0cmlidXRlcygpOiBhbnkge1xuICAgIHJldHVybiB0aGlzLmZvcm1Hcm91cC52YWx1ZTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRTZWxlY3RlZFRhYmxlUHJvcGVydGllcygpOiBhbnlbXSB7XG4gICAgY29uc3Qgc2VsZWN0ZWQ6IE1hdExpc3RPcHRpb25bXSA9IHRoaXMucHJvcGVydGllc0xpc3Quc2VsZWN0ZWRPcHRpb25zLnNlbGVjdGVkO1xuICAgIHJldHVybiBzZWxlY3RlZC5sZW5ndGggPyBzZWxlY3RlZC5tYXAoaXRlbSA9PiBpdGVtLnZhbHVlKSA6IFtdO1xuICB9XG5cbiAgcHVibGljIGlzSW5kZXRlcm1pbmF0ZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gIXRoaXMuYXJlQWxsU2VsZWN0ZWQoKTtcbiAgfVxuXG59XG4iXX0=