import { BehaviorSubject, merge, of } from 'rxjs';
export class OTableDao {
    constructor(dataService, entity, methods) {
        this.dataService = dataService;
        this.entity = entity;
        this.methods = methods;
        this.usingStaticData = false;
        this._isLoadingResults = false;
        this.dataChange = new BehaviorSubject([]);
        this.sqlTypesChange = new BehaviorSubject({});
    }
    get data() { return this.dataChange.value; }
    get sqlTypes() { return this.sqlTypesChange.value; }
    getQuery(queryArgs) {
        this.isLoadingResults = true;
        return this.dataService[this.methods.query].apply(this.dataService, queryArgs);
    }
    removeQuery(filters) {
        return merge(...filters.map((kv => this.dataService[this.methods.delete](kv, this.entity))));
    }
    insertQuery(av, sqlTypes) {
        if (this.usingStaticData) {
            this.data.push(av);
            return of(this.data);
        }
        else {
            return this.dataService[this.methods.insert](av, this.entity, sqlTypes);
        }
    }
    updateQuery(kv, av, sqlTypes) {
        if (this.usingStaticData) {
            return of([]);
        }
        else {
            return this.dataService[this.methods.update](kv, av, this.entity, sqlTypes);
        }
    }
    setDataArray(data) {
        this.dataChange.next(data);
        this.isLoadingResults = false;
        return of(data);
    }
    setAsynchronousColumn(value, rowData) {
        let index = null;
        for (let i = 0; i < this.data.length; i++) {
            if (this.data[i] === rowData) {
                index = i;
                break;
            }
        }
        if (index !== null) {
            Object.assign(this.data[index], value);
        }
    }
    get isLoadingResults() {
        return this._isLoadingResults;
    }
    set isLoadingResults(val) {
        if (val) {
            this.cleanTimer();
            this.loadingTimer = setTimeout(() => {
                this._isLoadingResults = val;
            }, 500);
        }
        else {
            this.cleanTimer();
            this._isLoadingResults = val;
        }
    }
    cleanTimer() {
        if (this.loadingTimer) {
            clearTimeout(this.loadingTimer);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby10YWJsZS5kYW8uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9vbnRpbWl6ZS13ZWItbmd4LyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvdGFibGUvZXh0ZW5zaW9ucy9vLXRhYmxlLmRhby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFFLEtBQUssRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFLOUQsTUFBTSxPQUFPLFNBQVM7SUFhcEIsWUFDVSxXQUFnQixFQUNoQixNQUFjLEVBQ2QsT0FBWTtRQUZaLGdCQUFXLEdBQVgsV0FBVyxDQUFLO1FBQ2hCLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDZCxZQUFPLEdBQVAsT0FBTyxDQUFLO1FBZHRCLG9CQUFlLEdBQVksS0FBSyxDQUFDO1FBR3ZCLHNCQUFpQixHQUFZLEtBQUssQ0FBQztRQUc3QyxlQUFVLEdBQUcsSUFBSSxlQUFlLENBQVEsRUFBRSxDQUFDLENBQUM7UUFDNUMsbUJBQWMsR0FBRyxJQUFJLGVBQWUsQ0FBUyxFQUFFLENBQUMsQ0FBQztJQVE3QyxDQUFDO0lBUEwsSUFBSSxJQUFJLEtBQVksT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDbkQsSUFBSSxRQUFRLEtBQWEsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFXNUQsUUFBUSxDQUFDLFNBQXlCO1FBQ2hDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUM7UUFDN0IsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDakYsQ0FBQztJQUVELFdBQVcsQ0FBQyxPQUFZO1FBQ3RCLE9BQU8sS0FBSyxDQUFDLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDL0YsQ0FBQztJQUVELFdBQVcsQ0FBQyxFQUFVLEVBQUUsUUFBaUI7UUFDdkMsSUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFO1lBQ3hCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ25CLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN0QjthQUFNO1lBQ0wsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7U0FDekU7SUFDSCxDQUFDO0lBRUQsV0FBVyxDQUFDLEVBQVUsRUFBRSxFQUFVLEVBQUUsUUFBaUI7UUFDbkQsSUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFO1lBRXhCLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ2Y7YUFBTTtZQUNMLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztTQUM3RTtJQUNILENBQUM7SUFNRCxZQUFZLENBQUMsSUFBZ0I7UUFDM0IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDM0IsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEtBQUssQ0FBQztRQUM5QixPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNsQixDQUFDO0lBRUQscUJBQXFCLENBQUMsS0FBaUIsRUFBRSxPQUFZO1FBRW5ELElBQUksS0FBSyxHQUFHLElBQUksQ0FBQztRQUNqQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDekMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLE9BQU8sRUFBRTtnQkFDNUIsS0FBSyxHQUFHLENBQUMsQ0FBQztnQkFDVixNQUFNO2FBQ1A7U0FDRjtRQUNELElBQUksS0FBSyxLQUFLLElBQUksRUFBRTtZQUNsQixNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDeEM7SUFDSCxDQUFDO0lBRUQsSUFBSSxnQkFBZ0I7UUFDbEIsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUM7SUFDaEMsQ0FBQztJQUVELElBQUksZ0JBQWdCLENBQUMsR0FBWTtRQUMvQixJQUFJLEdBQUcsRUFBRTtZQUNQLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUNsQixJQUFJLENBQUMsWUFBWSxHQUFHLFVBQVUsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2xDLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxHQUFHLENBQUM7WUFDL0IsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1NBQ1Q7YUFBTTtZQUNMLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUNsQixJQUFJLENBQUMsaUJBQWlCLEdBQUcsR0FBRyxDQUFDO1NBQzlCO0lBQ0gsQ0FBQztJQUVTLFVBQVU7UUFDbEIsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ3JCLFlBQVksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDakM7SUFDSCxDQUFDO0NBRUYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIG1lcmdlLCBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBPUXVlcnlEYXRhQXJncyB9IGZyb20gJy4uLy4uLy4uL3R5cGVzL3F1ZXJ5LWRhdGEtYXJncy50eXBlJztcblxuXG5leHBvcnQgY2xhc3MgT1RhYmxlRGFvIHtcblxuICB1c2luZ1N0YXRpY0RhdGE6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBwcm90ZWN0ZWQgbG9hZGluZ1RpbWVyO1xuICBwcm90ZWN0ZWQgX2lzTG9hZGluZ1Jlc3VsdHM6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAvKiogU3RyZWFtIHRoYXQgZW1pdHMgd2hlbmV2ZXIgdGhlIGRhdGEgaGFzIGJlZW4gbW9kaWZpZWQuICovXG4gIGRhdGFDaGFuZ2UgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PGFueVtdPihbXSk7XG4gIHNxbFR5cGVzQ2hhbmdlID0gbmV3IEJlaGF2aW9yU3ViamVjdDxvYmplY3Q+KHt9KTtcbiAgZ2V0IGRhdGEoKTogYW55W10geyByZXR1cm4gdGhpcy5kYXRhQ2hhbmdlLnZhbHVlOyB9XG4gIGdldCBzcWxUeXBlcygpOiBvYmplY3QgeyByZXR1cm4gdGhpcy5zcWxUeXBlc0NoYW5nZS52YWx1ZTsgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgZGF0YVNlcnZpY2U6IGFueSxcbiAgICBwcml2YXRlIGVudGl0eTogc3RyaW5nLFxuICAgIHByaXZhdGUgbWV0aG9kczogYW55XG4gICkgeyB9XG5cbiAgLyoqXG4gICAqIENhbGwgdGhlIHNlcnZpY2UgcXVlcnkgYW5kIGVtaXQgZGF0YSBoYXMgYmVuIG1vZGlmaWVkXG4gICAqL1xuICBnZXRRdWVyeShxdWVyeUFyZ3M6IE9RdWVyeURhdGFBcmdzKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICB0aGlzLmlzTG9hZGluZ1Jlc3VsdHMgPSB0cnVlO1xuICAgIHJldHVybiB0aGlzLmRhdGFTZXJ2aWNlW3RoaXMubWV0aG9kcy5xdWVyeV0uYXBwbHkodGhpcy5kYXRhU2VydmljZSwgcXVlcnlBcmdzKTtcbiAgfVxuXG4gIHJlbW92ZVF1ZXJ5KGZpbHRlcnM6IGFueSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIG1lcmdlKC4uLmZpbHRlcnMubWFwKChrdiA9PiB0aGlzLmRhdGFTZXJ2aWNlW3RoaXMubWV0aG9kcy5kZWxldGVdKGt2LCB0aGlzLmVudGl0eSkpKSk7XG4gIH1cblxuICBpbnNlcnRRdWVyeShhdjogb2JqZWN0LCBzcWxUeXBlcz86IG9iamVjdCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgaWYgKHRoaXMudXNpbmdTdGF0aWNEYXRhKSB7XG4gICAgICB0aGlzLmRhdGEucHVzaChhdik7XG4gICAgICByZXR1cm4gb2YodGhpcy5kYXRhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuZGF0YVNlcnZpY2VbdGhpcy5tZXRob2RzLmluc2VydF0oYXYsIHRoaXMuZW50aXR5LCBzcWxUeXBlcyk7XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlUXVlcnkoa3Y6IG9iamVjdCwgYXY6IG9iamVjdCwgc3FsVHlwZXM/OiBvYmplY3QpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIGlmICh0aGlzLnVzaW5nU3RhdGljRGF0YSkge1xuICAgICAgLy8gT25seSB0byBzaW11bGF0ZSB0aGUgc2VydmljZSByZXNwb25zZSwgdGhlIG1vZGVsIGNoYW5nZSBpcyBkb25lIGluIHRoZSBlZGl0b3JcbiAgICAgIHJldHVybiBvZihbXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmRhdGFTZXJ2aWNlW3RoaXMubWV0aG9kcy51cGRhdGVdKGt2LCBhdiwgdGhpcy5lbnRpdHksIHNxbFR5cGVzKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2V0IGRhdGEgYXJyYXkgYW5kIGVtaXQgZGF0YSBoYXMgYmVuIG1vZGlmaWVkXG4gICAqIEBwYXJhbSBkYXRhXG4gICAqL1xuICBzZXREYXRhQXJyYXkoZGF0YTogQXJyYXk8YW55Pikge1xuICAgIHRoaXMuZGF0YUNoYW5nZS5uZXh0KGRhdGEpO1xuICAgIHRoaXMuaXNMb2FkaW5nUmVzdWx0cyA9IGZhbHNlO1xuICAgIHJldHVybiBvZihkYXRhKTtcbiAgfVxuXG4gIHNldEFzeW5jaHJvbm91c0NvbHVtbih2YWx1ZTogQXJyYXk8YW55Piwgcm93RGF0YTogYW55KSB7XG4gICAgLy8gT2JqZWN0LmFzc2lnbih0aGlzLmRhdGFbcm93SW5kZXhdLCB2YWx1ZSk7XG4gICAgbGV0IGluZGV4ID0gbnVsbDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHRoaXMuZGF0YVtpXSA9PT0gcm93RGF0YSkge1xuICAgICAgICBpbmRleCA9IGk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaW5kZXggIT09IG51bGwpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5kYXRhW2luZGV4XSwgdmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIGdldCBpc0xvYWRpbmdSZXN1bHRzKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9pc0xvYWRpbmdSZXN1bHRzO1xuICB9XG5cbiAgc2V0IGlzTG9hZGluZ1Jlc3VsdHModmFsOiBib29sZWFuKSB7XG4gICAgaWYgKHZhbCkge1xuICAgICAgdGhpcy5jbGVhblRpbWVyKCk7XG4gICAgICB0aGlzLmxvYWRpbmdUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLl9pc0xvYWRpbmdSZXN1bHRzID0gdmFsO1xuICAgICAgfSwgNTAwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jbGVhblRpbWVyKCk7XG4gICAgICB0aGlzLl9pc0xvYWRpbmdSZXN1bHRzID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBjbGVhblRpbWVyKCkge1xuICAgIGlmICh0aGlzLmxvYWRpbmdUaW1lcikge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMubG9hZGluZ1RpbWVyKTtcbiAgICB9XG4gIH1cblxufVxuIl19