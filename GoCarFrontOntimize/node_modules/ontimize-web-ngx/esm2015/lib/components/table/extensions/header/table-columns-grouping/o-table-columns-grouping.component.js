import { ChangeDetectionStrategy, Component, ContentChildren, forwardRef, Inject, Injector, QueryList } from '@angular/core';
import { Util } from '../../../../../util/util';
import { OTableComponent } from '../../../o-table.component';
import { OTableColumnsGroupingColumnComponent } from './columns/o-table-columns-grouping-column.component';
export const DEFAULT_INPUTS_O_TABLE_COLUMN_GROUPING = [
    'columns',
    'excludedAggregateColumns: excluded-aggregate-columns'
];
export const DEFAULT_OUTPUTS_O_TABLE_COLUMN_GROUPING = [];
export class OTableColumnsGroupingComponent {
    constructor(injector, table) {
        this.injector = injector;
        this.table = table;
        this._columnsArray = [];
        this._excludedAggregateColumnsArray = [];
    }
    set columns(arg) {
        this._columnsArray = Util.parseArray(arg, true);
    }
    get columnsArray() {
        return this._columnsArray;
    }
    set excludedAggregateColumns(arg) {
        this._excludedAggregateColumnsArray = Util.parseArray(arg, true);
    }
    ngOnInit() {
        if (this._columnsArray.length === 0) {
            this._columnsArray = this.table.groupedColumnsArray;
        }
        this.table.setOTableColumnsGrouping(this);
    }
    useColumnAggregate(columnAttr, hasDefaultAggregate) {
        if (this._excludedAggregateColumnsArray.includes(columnAttr)) {
            return false;
        }
        const columnConf = this.getColumnGrouping(columnAttr);
        return hasDefaultAggregate || Util.isDefined(columnConf);
    }
    getColumnGrouping(columnAttr) {
        return this.groupingColumns.find(col => col.attr === columnAttr);
    }
}
OTableColumnsGroupingComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-table-columns-grouping',
                template: ' ',
                changeDetection: ChangeDetectionStrategy.OnPush,
                inputs: DEFAULT_INPUTS_O_TABLE_COLUMN_GROUPING,
                outputs: DEFAULT_OUTPUTS_O_TABLE_COLUMN_GROUPING
            }] }
];
OTableColumnsGroupingComponent.ctorParameters = () => [
    { type: Injector },
    { type: OTableComponent, decorators: [{ type: Inject, args: [forwardRef(() => OTableComponent),] }] }
];
OTableColumnsGroupingComponent.propDecorators = {
    groupingColumns: [{ type: ContentChildren, args: [OTableColumnsGroupingColumnComponent, { descendants: true },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby10YWJsZS1jb2x1bW5zLWdyb3VwaW5nLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL29udGltaXplLXdlYi1uZ3gvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90YWJsZS9leHRlbnNpb25zL2hlYWRlci90YWJsZS1jb2x1bW5zLWdyb3VwaW5nL28tdGFibGUtY29sdW1ucy1ncm91cGluZy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsZUFBZSxFQUNmLFVBQVUsRUFDVixNQUFNLEVBQ04sUUFBUSxFQUVSLFNBQVMsRUFDVixNQUFNLGVBQWUsQ0FBQztBQUd2QixPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDaEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzdELE9BQU8sRUFBRSxvQ0FBb0MsRUFBRSxNQUFNLHFEQUFxRCxDQUFDO0FBRTNHLE1BQU0sQ0FBQyxNQUFNLHNDQUFzQyxHQUFHO0lBRXBELFNBQVM7SUFDVCxzREFBc0Q7Q0FDdkQsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLHVDQUF1QyxHQUFHLEVBQ3RELENBQUM7QUFVRixNQUFNLE9BQU8sOEJBQThCO0lBUXpDLFlBQ1ksUUFBa0IsRUFDeUIsS0FBc0I7UUFEakUsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUN5QixVQUFLLEdBQUwsS0FBSyxDQUFpQjtRQVJuRSxrQkFBYSxHQUFhLEVBQUUsQ0FBQztRQUM3QixtQ0FBOEIsR0FBYSxFQUFFLENBQUM7SUFRcEQsQ0FBQztJQUdMLElBQUksT0FBTyxDQUFDLEdBQVc7UUFDckIsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRUQsSUFBSSxZQUFZO1FBQ2QsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDO0lBQzVCLENBQUM7SUFFRCxJQUFJLHdCQUF3QixDQUFDLEdBQVc7UUFDdEMsSUFBSSxDQUFDLDhCQUE4QixHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ25FLENBQUM7SUFFRCxRQUFRO1FBQ04sSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDbkMsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLG1CQUFtQixDQUFDO1NBQ3JEO1FBQ0QsSUFBSSxDQUFDLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRUQsa0JBQWtCLENBQUMsVUFBa0IsRUFBRSxtQkFBNEI7UUFDakUsSUFBSSxJQUFJLENBQUMsOEJBQThCLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQzVELE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFDRCxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDdEQsT0FBTyxtQkFBbUIsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFFRCxpQkFBaUIsQ0FBQyxVQUFVO1FBQzFCLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxLQUFLLFVBQVUsQ0FBQyxDQUFDO0lBQ25FLENBQUM7OztZQW5ERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLDBCQUEwQjtnQkFDcEMsUUFBUSxFQUFFLEdBQUc7Z0JBQ2IsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07Z0JBQy9DLE1BQU0sRUFBRSxzQ0FBc0M7Z0JBQzlDLE9BQU8sRUFBRSx1Q0FBdUM7YUFDakQ7OztZQXpCQyxRQUFRO1lBT0QsZUFBZSx1QkE4Qm5CLE1BQU0sU0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsZUFBZSxDQUFDOzs7OEJBTDFDLGVBQWUsU0FBQyxvQ0FBb0MsRUFBRSxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ29tcG9uZW50LFxuICBDb250ZW50Q2hpbGRyZW4sXG4gIGZvcndhcmRSZWYsXG4gIEluamVjdCxcbiAgSW5qZWN0b3IsXG4gIE9uSW5pdCxcbiAgUXVlcnlMaXN0XG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBPVGFibGVDb2x1bW5zR3JvdXBpbmcgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9pbnRlcmZhY2VzL28tdGFibGUtY29sdW1ucy1ncm91cGluZy1pbnRlcmZhY2UnO1xuaW1wb3J0IHsgVXRpbCB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3V0aWwvdXRpbCc7XG5pbXBvcnQgeyBPVGFibGVDb21wb25lbnQgfSBmcm9tICcuLi8uLi8uLi9vLXRhYmxlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBPVGFibGVDb2x1bW5zR3JvdXBpbmdDb2x1bW5Db21wb25lbnQgfSBmcm9tICcuL2NvbHVtbnMvby10YWJsZS1jb2x1bW5zLWdyb3VwaW5nLWNvbHVtbi5jb21wb25lbnQnO1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9JTlBVVFNfT19UQUJMRV9DT0xVTU5fR1JPVVBJTkcgPSBbXG4gIC8vIGNvbHVtbnMgW3N0cmluZ106IGNvbHVtbnMgdGhhdCBtaWdodCBiZSBmaWx0ZXJlZCwgc2VwYXJhdGVkIGJ5ICc7Jy4gRGVmYXVsdDogYWxsIHZpc2libGUgY29sdW1ucy5cbiAgJ2NvbHVtbnMnLFxuICAnZXhjbHVkZWRBZ2dyZWdhdGVDb2x1bW5zOiBleGNsdWRlZC1hZ2dyZWdhdGUtY29sdW1ucydcbl07XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX09VVFBVVFNfT19UQUJMRV9DT0xVTU5fR1JPVVBJTkcgPSBbXG5dO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdvLXRhYmxlLWNvbHVtbnMtZ3JvdXBpbmcnLFxuICB0ZW1wbGF0ZTogJyAnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgaW5wdXRzOiBERUZBVUxUX0lOUFVUU19PX1RBQkxFX0NPTFVNTl9HUk9VUElORyxcbiAgb3V0cHV0czogREVGQVVMVF9PVVRQVVRTX09fVEFCTEVfQ09MVU1OX0dST1VQSU5HXG59KVxuXG5leHBvcnQgY2xhc3MgT1RhYmxlQ29sdW1uc0dyb3VwaW5nQ29tcG9uZW50IGltcGxlbWVudHMgT1RhYmxlQ29sdW1uc0dyb3VwaW5nLCBPbkluaXQge1xuXG4gIHByb3RlY3RlZCBfY29sdW1uc0FycmF5OiBzdHJpbmdbXSA9IFtdO1xuICBwcm90ZWN0ZWQgX2V4Y2x1ZGVkQWdncmVnYXRlQ29sdW1uc0FycmF5OiBzdHJpbmdbXSA9IFtdO1xuXG4gIEBDb250ZW50Q2hpbGRyZW4oT1RhYmxlQ29sdW1uc0dyb3VwaW5nQ29sdW1uQ29tcG9uZW50LCB7IGRlc2NlbmRhbnRzOiB0cnVlIH0pXG4gIGdyb3VwaW5nQ29sdW1uczogUXVlcnlMaXN0PE9UYWJsZUNvbHVtbnNHcm91cGluZ0NvbHVtbkNvbXBvbmVudD47XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIGluamVjdG9yOiBJbmplY3RvcixcbiAgICBASW5qZWN0KGZvcndhcmRSZWYoKCkgPT4gT1RhYmxlQ29tcG9uZW50KSkgcHJvdGVjdGVkIHRhYmxlOiBPVGFibGVDb21wb25lbnRcbiAgKSB7IH1cblxuXG4gIHNldCBjb2x1bW5zKGFyZzogc3RyaW5nKSB7XG4gICAgdGhpcy5fY29sdW1uc0FycmF5ID0gVXRpbC5wYXJzZUFycmF5KGFyZywgdHJ1ZSk7XG4gIH1cblxuICBnZXQgY29sdW1uc0FycmF5KCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gdGhpcy5fY29sdW1uc0FycmF5O1xuICB9XG5cbiAgc2V0IGV4Y2x1ZGVkQWdncmVnYXRlQ29sdW1ucyhhcmc6IHN0cmluZykge1xuICAgIHRoaXMuX2V4Y2x1ZGVkQWdncmVnYXRlQ29sdW1uc0FycmF5ID0gVXRpbC5wYXJzZUFycmF5KGFyZywgdHJ1ZSk7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICBpZiAodGhpcy5fY29sdW1uc0FycmF5Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy5fY29sdW1uc0FycmF5ID0gdGhpcy50YWJsZS5ncm91cGVkQ29sdW1uc0FycmF5O1xuICAgIH1cbiAgICB0aGlzLnRhYmxlLnNldE9UYWJsZUNvbHVtbnNHcm91cGluZyh0aGlzKTtcbiAgfVxuXG4gIHVzZUNvbHVtbkFnZ3JlZ2F0ZShjb2x1bW5BdHRyOiBzdHJpbmcsIGhhc0RlZmF1bHRBZ2dyZWdhdGU6IGJvb2xlYW4pOiBib29sZWFuIHtcbiAgICBpZiAodGhpcy5fZXhjbHVkZWRBZ2dyZWdhdGVDb2x1bW5zQXJyYXkuaW5jbHVkZXMoY29sdW1uQXR0cikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgY29sdW1uQ29uZiA9IHRoaXMuZ2V0Q29sdW1uR3JvdXBpbmcoY29sdW1uQXR0cik7XG4gICAgcmV0dXJuIGhhc0RlZmF1bHRBZ2dyZWdhdGUgfHwgVXRpbC5pc0RlZmluZWQoY29sdW1uQ29uZik7XG4gIH1cblxuICBnZXRDb2x1bW5Hcm91cGluZyhjb2x1bW5BdHRyKSB7XG4gICAgcmV0dXJuIHRoaXMuZ3JvdXBpbmdDb2x1bW5zLmZpbmQoY29sID0+IGNvbC5hdHRyID09PSBjb2x1bW5BdHRyKTtcbiAgfVxuXG59XG4iXX0=