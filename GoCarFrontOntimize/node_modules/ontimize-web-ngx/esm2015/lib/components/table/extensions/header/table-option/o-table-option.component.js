import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, Injector, ViewEncapsulation } from '@angular/core';
import { InputConverter } from '../../../../../decorators/input-converter';
export const DEFAULT_INPUTS_O_TABLE_OPTION = [
    'oattr: attr',
    'enabled',
    'icon',
    'showCheckboxOption : show-checkbox-option',
    'olabel: label',
    'active'
];
export const DEFAULT_OUTPUTS_O_TABLE_OPTION = [
    'onClick'
];
export class OTableOptionComponent {
    constructor(injector, elRef) {
        this.injector = injector;
        this.elRef = elRef;
        this.onClick = new EventEmitter();
        this.enabled = true;
        this.showCheckboxOption = false;
        this.active = false;
        try {
            this.cd = this.injector.get(ChangeDetectorRef);
        }
        catch (e) {
        }
    }
    innerOnClick() {
        this.onClick.emit();
        this.setActive(!this.active);
    }
    get activeCheckboxOption() {
        return this.showCheckboxOption && this.active;
    }
    setActive(val) {
        this.active = val;
        this.cd.detectChanges();
    }
}
OTableOptionComponent.O_TABLE_OPTION_ACTIVE_CLASS = 'o-table-option-active';
OTableOptionComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-table-option',
                template: "<ng-container *ngIf=\"showCheckboxOption; then checkboxTemplate; else buttonTemplate\"></ng-container>\n\n<ng-template #checkboxTemplate>\n  <span mat-menu-item>\n    <mat-checkbox [disabled]=\"!enabled\" [ngModel]=\"activeCheckboxOption\" (change)=\"innerOnClick()\" disableRipple=\"true\"> \n      {{ olabel | oTranslate }}\n      <mat-icon *ngIf=\"icon\"> {{ icon }}</mat-icon>\n    </mat-checkbox>\n  </span>\n</ng-template>\n\n<ng-template #buttonTemplate>\n  <button [disabled]=\"!enabled\" type=\"button\" (click)=\"innerOnClick()\" mat-menu-item fxLayout=\"row\"\n    fxLayoutAlign=\"start center\">\n    {{ olabel | oTranslate }}\n    <mat-icon *ngIf=\"icon\"> {{ icon }}</mat-icon>\n  </button>\n</ng-template>",
                inputs: DEFAULT_INPUTS_O_TABLE_OPTION,
                outputs: DEFAULT_OUTPUTS_O_TABLE_OPTION,
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                host: {
                    '[class.o-table-option]': 'true',
                },
                styles: [""]
            }] }
];
OTableOptionComponent.ctorParameters = () => [
    { type: Injector },
    { type: ElementRef }
];
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OTableOptionComponent.prototype, "enabled", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OTableOptionComponent.prototype, "showCheckboxOption", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OTableOptionComponent.prototype, "active", void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby10YWJsZS1vcHRpb24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vb250aW1pemUtd2ViLW5neC8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3RhYmxlL2V4dGVuc2lvbnMvaGVhZGVyL3RhYmxlLW9wdGlvbi9vLXRhYmxlLW9wdGlvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCx1QkFBdUIsRUFDdkIsaUJBQWlCLEVBQ2pCLFNBQVMsRUFDVCxVQUFVLEVBQ1YsWUFBWSxFQUNaLFFBQVEsRUFFUixpQkFBaUIsRUFDbEIsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBRTNFLE1BQU0sQ0FBQyxNQUFNLDZCQUE2QixHQUFHO0lBQzNDLGFBQWE7SUFDYixTQUFTO0lBQ1QsTUFBTTtJQUVOLDJDQUEyQztJQUMzQyxlQUFlO0lBQ2YsUUFBUTtDQUNULENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSw4QkFBOEIsR0FBRztJQUM1QyxTQUFTO0NBQ1YsQ0FBQztBQWVGLE1BQU0sT0FBTyxxQkFBcUI7SUFrQmhDLFlBQ1ksUUFBa0IsRUFDckIsS0FBaUI7UUFEZCxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQ3JCLFVBQUssR0FBTCxLQUFLLENBQVk7UUFoQjFCLFlBQU8sR0FBeUIsSUFBSSxZQUFZLEVBQVUsQ0FBQztRQUkzRCxZQUFPLEdBQVksSUFBSSxDQUFDO1FBSXhCLHVCQUFrQixHQUFZLEtBQUssQ0FBQztRQUVwQyxXQUFNLEdBQVksS0FBSyxDQUFDO1FBUXRCLElBQUk7WUFDRixJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFvQixpQkFBNEMsQ0FBQyxDQUFDO1NBQzlGO1FBQUMsT0FBTyxDQUFDLEVBQUU7U0FDWDtJQUNILENBQUM7SUFFRCxZQUFZO1FBQ1YsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNwQixJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFRCxJQUFJLG9CQUFvQjtRQUN0QixPQUFPLElBQUksQ0FBQyxrQkFBa0IsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ2hELENBQUM7SUFFRCxTQUFTLENBQUMsR0FBWTtRQUNwQixJQUFJLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQztRQUNsQixJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQzFCLENBQUM7O0FBdENhLGlEQUEyQixHQUFHLHVCQUF1QixDQUFDOztZQWZyRSxTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGdCQUFnQjtnQkFDMUIsNHRCQUE4QztnQkFFOUMsTUFBTSxFQUFFLDZCQUE2QjtnQkFDckMsT0FBTyxFQUFFLDhCQUE4QjtnQkFDdkMsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7Z0JBQ3JDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2dCQUMvQyxJQUFJLEVBQUU7b0JBQ0osd0JBQXdCLEVBQUUsTUFBTTtpQkFDakM7O2FBQ0Y7OztZQWhDQyxRQUFRO1lBRlIsVUFBVTs7QUE0Q1Y7SUFEQyxjQUFjLEVBQUU7O3NEQUNPO0FBSXhCO0lBREMsY0FBYyxFQUFFOztpRUFDbUI7QUFFcEM7SUFEQyxjQUFjLEVBQUU7O3FEQUNPIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIEV2ZW50RW1pdHRlcixcbiAgSW5qZWN0b3IsXG4gIFR5cGUsXG4gIFZpZXdFbmNhcHN1bGF0aW9uXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBJbnB1dENvbnZlcnRlciB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2RlY29yYXRvcnMvaW5wdXQtY29udmVydGVyJztcblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfSU5QVVRTX09fVEFCTEVfT1BUSU9OID0gW1xuICAnb2F0dHI6IGF0dHInLFxuICAnZW5hYmxlZCcsXG4gICdpY29uJyxcbiAgLy9zaG93LWNoZWNrYm94LW9wdGlvbiBbc3RyaW5nXVt5ZXN8bm98dHJ1ZXxmYWxzZV06IHNob3cgY2hlY2tib3ggb3B0aW9uLiBEZWZhdWx0IDpuby5cbiAgJ3Nob3dDaGVja2JveE9wdGlvbiA6IHNob3ctY2hlY2tib3gtb3B0aW9uJyxcbiAgJ29sYWJlbDogbGFiZWwnLFxuICAnYWN0aXZlJ1xuXTtcblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfT1VUUFVUU19PX1RBQkxFX09QVElPTiA9IFtcbiAgJ29uQ2xpY2snXG5dO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdvLXRhYmxlLW9wdGlvbicsXG4gIHRlbXBsYXRlVXJsOiAnLi9vLXRhYmxlLW9wdGlvbi5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL28tdGFibGUtb3B0aW9uLmNvbXBvbmVudC5zY3NzJ10sXG4gIGlucHV0czogREVGQVVMVF9JTlBVVFNfT19UQUJMRV9PUFRJT04sXG4gIG91dHB1dHM6IERFRkFVTFRfT1VUUFVUU19PX1RBQkxFX09QVElPTixcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIGhvc3Q6IHtcbiAgICAnW2NsYXNzLm8tdGFibGUtb3B0aW9uXSc6ICd0cnVlJyxcbiAgfVxufSlcblxuZXhwb3J0IGNsYXNzIE9UYWJsZU9wdGlvbkNvbXBvbmVudCB7XG5cbiAgcHVibGljIHN0YXRpYyBPX1RBQkxFX09QVElPTl9BQ1RJVkVfQ0xBU1MgPSAnby10YWJsZS1vcHRpb24tYWN0aXZlJztcblxuICBvbkNsaWNrOiBFdmVudEVtaXR0ZXI8b2JqZWN0PiA9IG5ldyBFdmVudEVtaXR0ZXI8b2JqZWN0PigpO1xuXG4gIG9hdHRyOiBzdHJpbmc7XG4gIEBJbnB1dENvbnZlcnRlcigpXG4gIGVuYWJsZWQ6IGJvb2xlYW4gPSB0cnVlO1xuICBpY29uOiBzdHJpbmc7XG4gIG9sYWJlbDogc3RyaW5nO1xuICBASW5wdXRDb252ZXJ0ZXIoKVxuICBzaG93Q2hlY2tib3hPcHRpb246IGJvb2xlYW4gPSBmYWxzZTtcbiAgQElucHV0Q29udmVydGVyKClcbiAgYWN0aXZlOiBib29sZWFuID0gZmFsc2U7XG5cbiAgY2Q6IENoYW5nZURldGVjdG9yUmVmO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCBpbmplY3RvcjogSW5qZWN0b3IsXG4gICAgcHVibGljIGVsUmVmOiBFbGVtZW50UmVmXG4gICkge1xuICAgIHRyeSB7XG4gICAgICB0aGlzLmNkID0gdGhpcy5pbmplY3Rvci5nZXQ8Q2hhbmdlRGV0ZWN0b3JSZWY+KENoYW5nZURldGVjdG9yUmVmIGFzIFR5cGU8Q2hhbmdlRGV0ZWN0b3JSZWY+KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgfVxuICB9XG5cbiAgaW5uZXJPbkNsaWNrKCkge1xuICAgIHRoaXMub25DbGljay5lbWl0KCk7XG4gICAgdGhpcy5zZXRBY3RpdmUoIXRoaXMuYWN0aXZlKTtcbiAgfVxuXG4gIGdldCBhY3RpdmVDaGVja2JveE9wdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5zaG93Q2hlY2tib3hPcHRpb24gJiYgdGhpcy5hY3RpdmU7XG4gIH1cblxuICBzZXRBY3RpdmUodmFsOiBib29sZWFuKSB7XG4gICAgdGhpcy5hY3RpdmUgPSB2YWw7XG4gICAgdGhpcy5jZC5kZXRlY3RDaGFuZ2VzKCk7XG4gIH1cblxufVxuIl19