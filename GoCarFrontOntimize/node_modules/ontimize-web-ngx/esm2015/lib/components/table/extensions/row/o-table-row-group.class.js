import { Subject } from 'rxjs';
import { Util } from '../../../../util/util';
export class OTableGroupedRow {
    constructor(arg) {
        this.level = 0;
        this.expanded = true;
        this.columnsData = {};
        this.aggregateFunctionChange = new Subject();
        if (Util.isDefined(arg)) {
            this.column = arg.column;
            this.keysAsString = arg.keysAsString;
            this.level = arg.level;
            this.parent = arg.parent;
        }
    }
    get visible() {
        return !this.parent || (this.parent.visible && this.parent.expanded);
    }
    hasColumnData(columnAttr) {
        return Util.isDefined(this.columnsData[columnAttr]);
    }
    hasActiveAggregate(columnAttr) {
        return this.hasColumnData(columnAttr) && Util.isDefined(this.columnsData[columnAttr].activeAggregate);
    }
    getColumnGroupingComponent(columnAttr) {
        return this.hasColumnData(columnAttr) ? this.columnsData[columnAttr].component : null;
    }
    getColumnAggregateValue(columnAttr) {
        return this.columnsData[columnAttr].value;
    }
    setColumnAggregateValue(columnAttr, value) {
        this.columnsData[columnAttr].value = value;
    }
    expandSameLevel(defaultValue) {
        if (!this.hasColumnData(this.column)) {
            return defaultValue;
        }
        const groupingComponent = this.getColumnGroupingComponent(this.column);
        if (Util.isDefined(groupingComponent)) {
            return groupingComponent.expandGroupsSameLevel;
        }
        return defaultValue;
    }
    setColumnAggregateData(columnAttr, value) {
        if (this.hasColumnData(columnAttr)) {
            this.columnsData[columnAttr].data = value;
        }
    }
    getColumnAggregateData(columnAttr) {
        return this.hasColumnData(columnAttr) ? this.columnsData[columnAttr].data : [];
    }
    setColumnActiveAggregateFunction(columnAttr, aggregateFnName, emitEvent = true) {
        if (this.hasColumnData(columnAttr)) {
            this.columnsData[columnAttr].activeAggregate = aggregateFnName;
        }
        else {
            this.columnsData[columnAttr] = {
                component: null,
                activeAggregate: aggregateFnName,
                value: null,
                data: []
            };
        }
        if (emitEvent) {
            let changeAllGroupedRows = true;
            const groupingComponent = this.getColumnGroupingComponent(columnAttr);
            if (Util.isDefined(groupingComponent)) {
                changeAllGroupedRows = groupingComponent.changeAggregateSameLevel;
            }
            this.aggregateFunctionChange.next({
                columnAttr: columnAttr,
                activeAggregate: aggregateFnName,
                changeAllGroupedRows: changeAllGroupedRows,
                row: this
            });
        }
    }
    getColumnActiveAggregateTitle(columnAttr) {
        const conf = this.getActiveColumnAggregateConfiguration(columnAttr);
        if (conf.title) {
            return conf.title;
        }
        return `AGGREGATE_NAME.${conf.aggregateName || conf.aggregate}`;
    }
    initializeColumnAggregate(columnAttr, component) {
        if (!this.columnsData.hasOwnProperty(columnAttr)) {
            this.columnsData[columnAttr] = {
                component: null,
                activeAggregate: 'sum',
                value: null,
                data: []
            };
        }
        if (Util.isDefined(component)) {
            this.columnsData[columnAttr].component = component;
            this.columnsData[columnAttr].activeAggregate = component.aggregate;
        }
    }
    getActiveColumnAggregateConfiguration(columnAttr) {
        if (!this.hasColumnData(columnAttr)) {
            return {
                attr: columnAttr,
                aggregate: 'sum'
            };
        }
        const activeAggregate = this.columnsData[columnAttr].activeAggregate;
        const groupingColumnComponent = this.columnsData[columnAttr].component;
        if (Util.isDefined(groupingColumnComponent) && groupingColumnComponent.aggregate === activeAggregate) {
            return groupingColumnComponent.getAggregateConfiguration();
        }
        return {
            attr: columnAttr,
            aggregate: this.columnsData[columnAttr].activeAggregate
        };
    }
}
//# sourceMappingURL=data:application/json;base64,