import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, forwardRef, Inject, Injector, ViewChild, ViewEncapsulation } from '@angular/core';
import { FormControl } from '@angular/forms';
import { MatMenu } from '@angular/material';
import { fromEvent } from 'rxjs';
import { debounceTime, distinctUntilChanged } from 'rxjs/operators';
import { O_INPUTS_OPTIONS } from '../../../../../config/app-config';
import { FilterExpressionUtils } from '../../../../../util/filter-expression.utils';
import { Util } from '../../../../../util/util';
import { OTableComponent } from '../../../o-table.component';
export const DEFAULT_INPUTS_O_TABLE_QUICKFILTER = [
    'placeholder'
];
export const DEFAULT_OUTPUTS_O_TABLE_QUICKFILTER = [
    'onChange'
];
export class OTableQuickfilterComponent {
    constructor(injector, elRef, table) {
        this.injector = injector;
        this.elRef = elRef;
        this.table = table;
        this._placeholder = 'TABLE.FILTER';
        this.onChange = new EventEmitter();
        this.formControl = new FormControl();
    }
    get placeholder() {
        return this._placeholder;
    }
    set placeholder(value) {
        if (Util.isDefined(value)) {
            this._placeholder = value;
        }
    }
    ngOnInit() {
        this.table.registerQuickFilter(this);
        this.matMenu.xPosition = 'before';
    }
    ngAfterViewInit() {
        this.initializeEventFilter();
        try {
            this.oInputsOptions = this.injector.get(O_INPUTS_OPTIONS);
        }
        catch (e) {
            this.oInputsOptions = {};
        }
        Util.parseOInputsOptions(this.elRef, this.oInputsOptions);
    }
    ngOnDestroy() {
        if (this.quickFilterObservable) {
            this.quickFilterObservable.unsubscribe();
        }
    }
    get oTableOptions() {
        return this.table.oTableOptions;
    }
    get quickFilterColumns() {
        return this.table.oTableOptions.columns.filter(oCol => {
            return oCol.searchable && oCol.visible;
        });
    }
    get filterExpression() {
        let result = this.getUserFilter();
        if (!Util.isDefined(result) && Util.isDefined(this.value) && this.value.length > 0) {
            const expressions = [];
            const searchingCols = this.oTableOptions.columns.filter(oCol => oCol.searching && oCol.visible && oCol.searchable && this.isFilterableColumn(oCol));
            expressions.push(...this.getColumnsWithoutRendererExpressions(searchingCols));
            const renderersExpr = this.getColumnsRendererExpressions(searchingCols);
            const notNullExpressions = renderersExpr.filter(expr => Util.isDefined(expr));
            if (expressions.length === 0 && notNullExpressions.length === 0) {
                this.table.abortQuery.next(true);
            }
            expressions.push(...notNullExpressions);
            if (expressions.length > 0) {
                result = expressions.reduce((a, b) => FilterExpressionUtils.buildComplexExpression(a, b, FilterExpressionUtils.OP_OR));
            }
        }
        return result;
    }
    getUserFilter() {
        let result;
        if (this.table.quickFilterCallback instanceof Function) {
            const userFilter = this.table.quickFilterCallback(this.value);
            if (Util.isDefined(userFilter) && FilterExpressionUtils.instanceofExpression(userFilter)) {
                result = userFilter;
            }
            else if (Util.isDefined(userFilter)) {
                result = FilterExpressionUtils.buildExpressionFromObject(userFilter);
            }
        }
        return result;
    }
    initializeEventFilter() {
        if (this.filter && !this.quickFilterObservable) {
            this.quickFilterObservable = fromEvent(this.filter.nativeElement, 'keyup')
                .pipe(debounceTime(150))
                .pipe(distinctUntilChanged())
                .subscribe(() => {
                const filterVal = this.filter.nativeElement.value;
                if (!this.table.dataSource || this.value === filterVal) {
                    return;
                }
                this.setValue(filterVal);
                this.onChange.emit(this.value);
            });
            const filterValue = this.value || this.filter.nativeElement.value;
            this.formControl.setValue(filterValue);
        }
    }
    setValue(value, trigger = true) {
        this.value = value;
        this.formControl.setValue(this.value);
        if (trigger && this.table && !this.table.pageable && this.table.dataSource) {
            this.table.dataSource.quickFilter = this.value;
        }
    }
    onMenuClosed() {
        this.setValue(this.value);
        this.onChange.emit(this.value);
    }
    isChecked(column) {
        return column.searching;
    }
    onCheckboxChange(column, event) {
        column.searching = event.checked;
    }
    showCaseSensitiveCheckbox() {
        return this.table.showCaseSensitiveCheckbox();
    }
    areAllColumnsChecked() {
        return this.quickFilterColumns.every((col) => col.searching);
    }
    getCountColumnsChecked() {
        let count = 0;
        this.quickFilterColumns.forEach((col) => {
            if (col.searching) {
                count++;
            }
        });
        return count;
    }
    onSelectAllChange(event) {
        this.quickFilterColumns.forEach((col) => col.searching = event.checked);
    }
    isFilterableColumn(column) {
        return !column.renderer || (column.type === 'string' ||
            column.type === 'translate' ||
            column.type === 'integer' ||
            column.type === 'real' ||
            column.type === 'percentage' ||
            column.type === 'currency' ||
            column.type === 'service');
    }
    getColumnsWithoutRendererExpressions(columns) {
        return columns
            .filter(oCol => !Util.isDefined(oCol.renderer))
            .map(oCol => {
            if (Util.isDefined(oCol.filterExpressionFunction)) {
                return oCol.filterExpressionFunction(oCol.attr, this.value);
            }
            else {
                return FilterExpressionUtils.buildExpressionLike(oCol.attr, this.value);
            }
        });
    }
    getColumnsRendererExpressions(columns) {
        return columns
            .filter(oCol => Util.isDefined(oCol.renderer) && !Util.isDefined(oCol.filterExpressionFunction))
            .map(oCol => {
            if (Util.isDefined(oCol.renderer.getFilterExpression)) {
                return oCol.renderer.getFilterExpression(this.value);
            }
            return FilterExpressionUtils.buildExpressionLike(oCol.attr, this.value);
        });
    }
}
OTableQuickfilterComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-table-quickfilter',
                template: "<div class=\"quickFilter\" fxLayout=\"row\">\n\n  <mat-form-field appearance=\"outline\" floatLabel=\"never\">\n    <input matInput #filter [formControl]=\"formControl\" (click)=\"$event.stopPropagation()\">\n    <mat-placeholder class=\"placeholder\">{{ placeholder | oTranslate}}</mat-placeholder>\n    <div matPrefix>\n      <mat-icon svgIcon=\"ontimize:search\" [matBadge]=\"areAllColumnsChecked()?'':getCountColumnsChecked()\" matBadgeSize=\"small\"></mat-icon>\n      <button mat-icon-button [matMenuTriggerFor]=\"menu\" (menuClosed)=\"onMenuClosed()\" (click)=\"$event.stopPropagation()\">\n        <mat-icon class=\"search-icon\">expand_more</mat-icon>\n      </button>\n    </div>\n\n    <mat-menu #menu=\"matMenu\" class=\"o-table-quickfilter-menu\">\n      <div fxLayout=\"column\" class=\"checkbox-container\">\n\n        <mat-checkbox (click)=\"$event.stopPropagation()\" [checked]=\"areAllColumnsChecked()\" (change)=\"onSelectAllChange($event)\">\n          {{ 'SELECT_ALL' | oTranslate}}\n        </mat-checkbox>\n        <mat-divider></mat-divider>\n\n        <ng-container *ngFor=\"let column of quickFilterColumns\">\n          <mat-checkbox (click)=\"$event.stopPropagation()\" [checked]=\"isChecked(column)\" (change)=\"onCheckboxChange(column, $event)\">\n            {{ column.title | oTranslate }}\n          </mat-checkbox>\n        </ng-container>\n\n        <ng-container *ngIf=\"showCaseSensitiveCheckbox()\">\n          <mat-divider></mat-divider>\n          <mat-checkbox (click)=\"$event.stopPropagation()\" [checked]=\"oTableOptions.filterCaseSensitive\"\n            (change)=\"oTableOptions.filterCaseSensitive = $event.checked\">\n            {{ 'TABLE.FILTER.CASE_SENSITIVE' | oTranslate}}\n          </mat-checkbox>\n        </ng-container>\n      </div>\n    </mat-menu>\n  </mat-form-field>\n</div>\n",
                inputs: DEFAULT_INPUTS_O_TABLE_QUICKFILTER,
                outputs: DEFAULT_OUTPUTS_O_TABLE_QUICKFILTER,
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                host: {
                    '[class.o-table-quickfilter]': 'true',
                },
                styles: [".o-table-quickfilter .quickFilter .mat-form-field .mat-form-field-wrapper{margin:0;padding-bottom:0}.o-table-quickfilter .quickFilter .mat-form-field .mat-form-field-wrapper .mat-form-field-flex{align-items:initial;margin-top:0;height:32px;line-height:32px}.o-table-quickfilter .quickFilter .mat-form-field .mat-form-field-wrapper .mat-form-field-flex .mat-form-field-outline,.o-table-quickfilter .quickFilter .mat-form-field .mat-form-field-wrapper .mat-form-field-flex .mat-form-field-prefix,.o-table-quickfilter .quickFilter .mat-form-field .mat-form-field-wrapper .mat-form-field-flex .mat-form-field-suffix{top:0}.o-table-quickfilter .quickFilter .mat-form-field .mat-form-field-wrapper .mat-form-field-flex .mat-form-field-infix{padding:0 4px;border-top:0}.o-table-quickfilter .quickFilter .mat-form-field .mat-form-field-wrapper .mat-form-field-flex .mat-form-field-prefix{padding-bottom:0}.o-table-quickfilter .quickFilter .mat-form-field .mat-form-field-wrapper .mat-form-field-flex .mat-form-field-prefix div{align-items:center;display:inline-flex;margin:2px 0}.o-table-quickfilter .quickFilter .mat-form-field .mat-form-field-wrapper .mat-form-field-flex .mat-form-field-prefix div .mat-badge-content{background-color:#3c8500;width:14px;height:14px;line-height:14px;top:-4px;right:-4px}.o-table-quickfilter .quickFilter .mat-form-field .mat-form-field-wrapper .mat-form-field-flex .mat-form-field-prefix div .mat-icon,.o-table-quickfilter .quickFilter .mat-form-field .mat-form-field-wrapper .mat-form-field-flex .mat-form-field-prefix div button{margin-right:6px}.o-table-quickfilter .quickFilter .mat-form-field .mat-form-field-wrapper .mat-form-field-flex .mat-form-field-prefix div button.mat-icon-button{height:100%;width:auto}.o-table-quickfilter .quickFilter .mat-form-field .mat-form-field-wrapper .mat-form-field-flex .mat-form-field-prefix div button.mat-icon-button .mat-button-ripple.mat-ripple{display:none}.o-table-quickfilter .search-icon{cursor:pointer}.o-table-quickfilter-menu .mat-divider{margin:8px 0}.o-table-quickfilter-menu .checkbox-container{padding:6px 12px}.o-table-quickfilter-menu .checkbox-container .mat-checkbox-layout{white-space:normal}.o-table-quickfilter-menu .checkbox-container .mat-checkbox-layout .mat-checkbox-ripple{display:none}"]
            }] }
];
OTableQuickfilterComponent.ctorParameters = () => [
    { type: Injector },
    { type: ElementRef },
    { type: OTableComponent, decorators: [{ type: Inject, args: [forwardRef(() => OTableComponent),] }] }
];
OTableQuickfilterComponent.propDecorators = {
    filter: [{ type: ViewChild, args: ['filter', { static: false },] }],
    matMenu: [{ type: ViewChild, args: ['menu', { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,