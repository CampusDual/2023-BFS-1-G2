import { DataSource } from '@angular/cdk/collections';
import { EventEmitter } from '@angular/core';
import { BehaviorSubject, merge, Subject, Subscription } from 'rxjs';
import { distinctUntilChanged, map } from 'rxjs/operators';
import { ColumnValueFilterOperator } from '../../../types/table/o-column-value-filter.type';
import { Codes } from '../../../util';
import { Util } from '../../../util/util';
import { OTableGroupedRow } from './row/o-table-row-group.class';
export class OnRangeChangeVirtualScroll {
    constructor(data) {
        this.range = data;
    }
}
export class DefaultOTableDataSource extends DataSource {
    constructor(table) {
        super();
        this.table = table;
        this.dataTotalsChange = new BehaviorSubject([]);
        this._virtualPageChange = new BehaviorSubject(new OnRangeChangeVirtualScroll({ start: 0, end: 0 }));
        this._quickFilterChange = new BehaviorSubject('');
        this._columnValueFilterChange = new BehaviorSubject(null);
        this.groupByColumnChange = new Subject();
        this.filteredData = [];
        this.aggregateData = {};
        this.onRenderedDataChange = new EventEmitter();
        this._renderedData = [];
        this.resultsLength = 0;
        this.columnValueFilters = [];
        this.groupedRowState = [];
        this.activeAggregates = {};
        this.groupedRowsSubscription = new Subscription();
        this.levelsExpansionState = {};
        this._database = table.daoTable;
        if (this._database) {
            this.resultsLength = this._database.data.length;
        }
        if (table.paginator) {
            this._paginator = table.matpaginator;
        }
        if (this.table.virtualScrollViewport) {
            this.table.virtualScrollViewport.renderedRangeStream
                .pipe(distinctUntilChanged())
                .subscribe((value) => {
                this._virtualPageChange.next(new OnRangeChangeVirtualScroll(value));
            });
        }
        this._tableOptions = table.oTableOptions;
        this._sort = table.sort;
    }
    get data() { return this.dataTotalsChange.value; }
    get quickFilter() { return this._quickFilterChange.value || ''; }
    set quickFilter(filter) {
        this._quickFilterChange.next(filter);
    }
    sortFunction(a, b) {
        return this._sort.sortFunction(a, b);
    }
    get renderedData() {
        return this._renderedData;
    }
    set renderedData(arg) {
        this._renderedData = arg;
        this.onRenderedDataChange.emit();
    }
    connect() {
        const displayDataChanges = [
            this._database.dataChange
        ];
        if (!this.table.pageable) {
            if (this._sort) {
                displayDataChanges.push(this._sort.oSortChange);
            }
            if (this._tableOptions.filter) {
                displayDataChanges.push(this._quickFilterChange);
            }
            if (this._paginator) {
                displayDataChanges.push(this._paginator.page);
            }
        }
        if (this.table.virtualScrollViewport) {
            displayDataChanges.push(this._virtualPageChange);
        }
        displayDataChanges.push(this._columnValueFilterChange);
        if (this.table.groupable) {
            displayDataChanges.push(this.groupByColumnChange);
        }
        return merge(...displayDataChanges).pipe(map((x) => {
            let data = Object.assign([], this._database.data);
            if (x instanceof OnRangeChangeVirtualScroll) {
                data = this.getVirtualScrollData(this.renderedData, x);
            }
            else {
                if (this.existsAnyCalculatedColumn()) {
                    data = this.getColumnCalculatedData(data);
                }
                if (!this.table.pageable) {
                    data = this.getColumnValueFilterData(data);
                    data = this.getQuickFilterData(data);
                    data = this.getSortedData(data);
                }
                this.filteredData = Object.assign([], data);
                if (this.table.pageable) {
                    const totalRecordsNumber = this.table.getTotalRecordsNumber();
                    this.resultsLength = totalRecordsNumber !== undefined ? totalRecordsNumber : data.length;
                }
                else {
                    this.resultsLength = data.length;
                    data = this.getPaginationData(data);
                }
                if (this.table.groupable && !Util.isArrayEmpty(this.table.groupedColumnsArray) && data.length > 0) {
                    data = this.getGroupedData(data);
                }
                this.renderedData = data;
                if (this.table.virtualScrollViewport && !this._paginator) {
                    data = this.getVirtualScrollData(data, new OnRangeChangeVirtualScroll({ start: 0, end: Codes.LIMIT_SCROLLVIRTUAL }));
                }
                this.aggregateData = this.getAggregatesData(this.renderedData);
            }
            return data;
        }));
    }
    getGroupedData(data) {
        data = this.getSubGroupsOfGroupedRow(data);
        data = this.filterCollapsedRowGroup(data);
        return data;
    }
    getSubGroupsOfGroupedRow(data) {
        return data = this.getSublevel(data, 0);
    }
    getAggregatesData(data) {
        const obj = {};
        if (typeof this._tableOptions === 'undefined') {
            return obj;
        }
        this._tableOptions.columns.forEach((column) => {
            let totalValue = '';
            if (column.aggregate && column.visible) {
                totalValue = this.calculateAggregate(data, column.attr, column.aggregate.operator);
            }
            const key = column.attr;
            obj[key] = totalValue;
        });
        return obj;
    }
    getColumnCalculatedData(data) {
        const self = this;
        const calculatedCols = this._tableOptions.columns.filter((oCol) => oCol.visible && oCol.calculate !== undefined);
        return data.map((row) => {
            calculatedCols.forEach((oColumn) => {
                let value;
                if (typeof oColumn.calculate === 'string') {
                    value = self.transformFormula(oColumn.calculate, row);
                }
                else if (typeof oColumn.calculate === 'function') {
                    value = oColumn.calculate(row);
                }
                row[oColumn.attr] = isNaN(value) ? 0 : value;
            });
            return row;
        });
    }
    transformFormula(formulaArg, row) {
        let formula = formulaArg;
        const columnsAttr = this._tableOptions.columns.map((oCol) => oCol.attr);
        columnsAttr.forEach((column) => {
            formula = formula.replace(column, row[column]);
        });
        let resultFormula = '';
        try {
            resultFormula = (new Function('return ' + formula))();
        }
        catch (e) {
            console.error('Operation defined in the calculated column is incorrect ');
        }
        return resultFormula;
    }
    getQuickFilterData(data) {
        if (Util.isDefined(this.quickFilter) && this.quickFilter.length > 0) {
            const filterData = !this._tableOptions.filterCaseSensitive ? this.quickFilter.toLowerCase() : this.quickFilter;
            return data.filter((item) => {
                const passCustomFilter = this.fulfillsCustomFilterFunctions(filterData, item);
                const passSearchString = this.fulfillsQuickfilter(filterData, item);
                return passCustomFilter || passSearchString;
            });
        }
        else {
            return data;
        }
    }
    getPaginationData(data) {
        if (!this._paginator || isNaN(this._paginator.pageSize)) {
            return data;
        }
        let startIndex = isNaN(this._paginator.pageSize) ? 0 : this._paginator.pageIndex * this._paginator.pageSize;
        if (data.length > 0 && data.length < startIndex) {
            startIndex = 0;
            this._paginator.pageIndex = 0;
        }
        return data.splice(startIndex, this._paginator.pageSize);
    }
    getVirtualScrollData(data, x) {
        return data.slice(x.range.start, x.range.end);
    }
    disconnect() {
        this.dataTotalsChange.complete();
        this._quickFilterChange.complete();
        this._columnValueFilterChange.complete();
        this.groupByColumnChange.complete();
        this._virtualPageChange.complete();
    }
    fulfillsCustomFilterFunctions(filter, item) {
        const customFilterCols = this.table.oTableOptions.columns.filter(oCol => oCol.useCustomFilterFunction());
        return customFilterCols.some(oCol => oCol.renderer.filterFunction(item[oCol.attr], item, filter));
    }
    fulfillsQuickfilter(filter, item) {
        const columns = this._tableOptions.columns.filter((oCol) => oCol.useQuickfilterFunction());
        let searchStr = columns.map((oCol) => oCol.getFilterValue(item[oCol.attr], item).join(' ')).join(' ');
        if (!this._tableOptions.filterCaseSensitive) {
            searchStr = searchStr.toLowerCase();
        }
        return searchStr.indexOf(filter) !== -1;
    }
    getSortedData(data) {
        return this._sort.getSortedData(data);
    }
    getTableData() {
        return this._database.data;
    }
    getCurrentData() {
        return this.getData();
    }
    getCurrentAllData() {
        return this.getAllData(false, false);
    }
    getCurrentRendererData() {
        return this.getRenderedData(this.renderedData);
    }
    getAllRendererData() {
        return this.getAllData(true, true);
    }
    get sqlTypes() {
        return this._database.sqlTypes;
    }
    getData() {
        return this.renderedData;
    }
    getRenderedData(data) {
        const visibleColumns = this._tableOptions.columns.filter(oCol => oCol.visible);
        return data.map((row) => {
            const obj = {};
            visibleColumns.forEach((oCol) => {
                const useRenderer = oCol.renderer && oCol.renderer.getCellData;
                obj[oCol.attr] = useRenderer ? oCol.renderer.getCellData(row[oCol.attr], row) : row[oCol.attr];
            });
            return obj;
        });
    }
    getAllData(usingRendererers, onlyVisibleColumns) {
        let tableColumns = this._tableOptions.columns;
        if (onlyVisibleColumns) {
            tableColumns = this._tableOptions.columns.filter(oCol => oCol.visible);
        }
        return this.filteredData.map((row) => {
            const obj = {};
            tableColumns.forEach((oCol) => {
                const useRenderer = usingRendererers && oCol.renderer && oCol.renderer.getCellData;
                obj[oCol.attr] = useRenderer ? oCol.renderer.getCellData(row[oCol.attr], row) : row[oCol.attr];
            });
            return obj;
        });
    }
    getRenderersData(data, tableColumns) {
        return data.map((row) => {
            const obj = Object.assign({}, row);
            tableColumns.forEach((oCol) => {
                obj[oCol.attr] = oCol.renderer.getCellData(row[oCol.attr], row);
            });
            return obj;
        });
    }
    getColumnData(ocolumn) {
        return this.renderedData.map((row) => {
            const obj = {};
            if (ocolumn) {
                obj[ocolumn] = row[ocolumn];
            }
            return obj;
        });
    }
    initializeColumnsFilters(filters) {
        this.columnValueFilters = [];
        filters.forEach(filter => {
            this.columnValueFilters.push(filter);
        });
        if (!this.table.pageable) {
            this._columnValueFilterChange.next(null);
        }
    }
    isColumnValueFilterActive() {
        return this.columnValueFilters.length !== 0;
    }
    getColumnValueFilters() {
        return this.columnValueFilters;
    }
    getColumnValueFilterByAttr(attr) {
        return this.columnValueFilters.find(item => item.attr === attr);
    }
    clearColumnFilters(trigger = true, columnsAttr) {
        if (Util.isDefined(columnsAttr)) {
            this.columnValueFilters = this.columnValueFilters.filter(x => !columnsAttr.includes(x.attr));
        }
        else {
            this.columnValueFilters = [];
        }
        if (trigger) {
            this._columnValueFilterChange.next(null);
        }
    }
    clearColumnFilter(attr, trigger = true) {
        this.columnValueFilters = this.columnValueFilters.filter(x => x.attr !== attr);
        if (trigger) {
            this._columnValueFilterChange.next(null);
        }
    }
    addColumnFilter(filter) {
        const existingFilterIndex = this.columnValueFilters.findIndex(item => item.attr === filter.attr);
        if (existingFilterIndex > -1) {
            this.columnValueFilters.splice(existingFilterIndex, 1, filter);
        }
        else {
            let validFilter = Util.isDefined(filter.values);
            if (validFilter) {
                switch (filter.operator) {
                    case ColumnValueFilterOperator.IN:
                        validFilter = filter.values.length > 0;
                        break;
                    case ColumnValueFilterOperator.BETWEEN:
                        validFilter = filter.values.length === 2;
                        break;
                    case ColumnValueFilterOperator.EQUAL:
                    case ColumnValueFilterOperator.LESS_EQUAL:
                    case ColumnValueFilterOperator.MORE_EQUAL:
                        validFilter = true;
                        break;
                    default:
                        validFilter = false;
                }
                if (validFilter) {
                    this.columnValueFilters.push(filter);
                }
            }
        }
        if (!this.table.pageable) {
            this._columnValueFilterChange.next(null);
        }
    }
    getColumnValueFilterData(data) {
        this.columnValueFilters.forEach(filter => {
            const filterColumn = this.table.oTableOptions.columns.find(col => col.attr === filter.attr);
            if (filterColumn) {
                switch (filter.operator) {
                    case ColumnValueFilterOperator.IN:
                        const filterValues = (filter.values || []).reduce((previous, current) => previous.concat(filterColumn.getFilterValue(current).map(f => Util.normalizeString(f))), []);
                        data = data.filter((item) => {
                            if (filterColumn.renderer && filterColumn.renderer.filterFunction) {
                                return filterColumn.renderer.filterFunction(item[filter.attr], item);
                            }
                            else {
                                const colValues = filterColumn.getFilterValue(item[filter.attr], item).map(f => Util.normalizeString(f));
                                return filterValues.some(value => colValues.indexOf(value) !== -1);
                            }
                        });
                        break;
                    case ColumnValueFilterOperator.EQUAL:
                        const normalizedValue = Util.normalizeString(filter.values);
                        data = data.filter(item => {
                            const colValues = filterColumn.getFilterValue(item[filter.attr], item).map(f => Util.normalizeString(f));
                            let regExp;
                            if (normalizedValue.includes('*')) {
                                regExp = new RegExp('^' + normalizedValue.split('*').join('.*') + '$');
                            }
                            return colValues.some(colValue => regExp ? regExp.test(colValue) : colValue.includes(normalizedValue));
                        });
                        break;
                    case ColumnValueFilterOperator.BETWEEN:
                        data = data.filter(item => item[filter.attr] >= filter.values[0] && item[filter.attr] <= filter.values[1]);
                        break;
                    case ColumnValueFilterOperator.MORE_EQUAL:
                        data = data.filter(item => item[filter.attr] >= filter.values);
                        break;
                    case ColumnValueFilterOperator.LESS_EQUAL:
                        data = data.filter(item => item[filter.attr] <= filter.values);
                        break;
                }
            }
        });
        return data;
    }
    getAggregateData(column) {
        const obj = {};
        let totalValue = '';
        if (typeof this._tableOptions === 'undefined') {
            return new Array(obj);
        }
        totalValue = this.aggregateData[column.attr];
        return totalValue;
    }
    calculateAggregate(data, columnAttr, operator) {
        let resultAggregate;
        if (typeof operator === 'string') {
            switch (operator.toLowerCase()) {
                case 'count':
                    resultAggregate = this.count(columnAttr, data);
                    break;
                case 'min':
                    resultAggregate = this.min(columnAttr, data);
                    break;
                case 'max':
                    resultAggregate = this.max(columnAttr, data);
                    break;
                case 'avg':
                    resultAggregate = this.avg(columnAttr, data);
                    break;
                default:
                    resultAggregate = this.sum(columnAttr, data);
                    break;
            }
        }
        else {
            const columnData = this.getColumnData(columnAttr);
            if (typeof operator === 'function') {
                resultAggregate = operator(columnData);
            }
        }
        return resultAggregate;
    }
    sum(column, data) {
        let value = 0;
        if (data) {
            if (data[0] instanceof OTableGroupedRow) {
                this.getDataFromFirstLevelTableGroupRow(data).forEach(x => {
                    value = x.getColumnAggregateData(column).reduce((acumulator, currentValue) => {
                        return acumulator + (isNaN(currentValue[column]) ? 0 : currentValue[column]);
                    }, value);
                });
            }
            else {
                value = data.reduce((acumulator, currentValue) => {
                    return acumulator + (isNaN(currentValue[column]) ? 0 : currentValue[column]);
                }, value);
            }
        }
        return +(value).toFixed(2);
    }
    count(column, data) {
        let value = 0;
        if (data) {
            if (data[0] instanceof OTableGroupedRow) {
                this.getDataFromFirstLevelTableGroupRow(data).forEach(x => {
                    value = x.getColumnAggregateData(column).reduce((acumulator) => {
                        return acumulator + 1;
                    }, value);
                });
            }
            else {
                value = data.reduce((acumulator) => {
                    return acumulator + 1;
                }, 0);
            }
        }
        return value;
    }
    avg(column, data) {
        const totalSum = this.sum(column, data);
        const totalCount = this.count(column, data);
        return +((totalSum === 0 || totalCount === 0) ? 0 : (totalSum / totalCount)).toFixed(2);
    }
    min(column, data) {
        let tempMin = [];
        if (data[0] instanceof OTableGroupedRow) {
            tempMin = this.getDataFromFirstLevelTableGroupRow(data).map(x => {
                return Math.min(...x.getColumnAggregateData(column).map(x => x[column]));
            });
        }
        else {
            tempMin = data.map(x => x[column]);
        }
        return tempMin.length > 0 ? Math.min(...tempMin) : 0;
    }
    max(column, data) {
        let tempMax = [];
        if (data[0] instanceof OTableGroupedRow) {
            tempMax = this.getDataFromFirstLevelTableGroupRow(data).map(x => {
                return Math.max(...x.getColumnAggregateData(column).map(x => x[column]));
            });
        }
        else {
            tempMax = data.map(x => x[column]);
        }
        return tempMax.length > 0 ? Math.max(...tempMax) : 0;
    }
    isFirstLevelTableGroupRow(tableRowGroupData) {
        return tableRowGroupData instanceof OTableGroupedRow && tableRowGroupData.level === 1;
    }
    getDataFromFirstLevelTableGroupRow(data) {
        return data.filter(x => this.isFirstLevelTableGroupRow(x));
    }
    existsAnyCalculatedColumn() {
        return this._tableOptions.columns.find((oCol) => oCol.calculate !== undefined) !== undefined;
    }
    updateRenderedRowData(rowData) {
        const tableKeys = this.table.getKeys();
        const record = this.renderedData.find((data) => {
            let found = true;
            for (let i = 0, len = tableKeys.length; i < len; i++) {
                const key = tableKeys[i];
                if (data[key] !== rowData[key]) {
                    found = false;
                    break;
                }
            }
            return found;
        });
        if (Util.isDefined(record)) {
            Object.assign(record, rowData);
        }
    }
    getDataInformationByGroup(data, level) {
        const recordHash = {};
        data.forEach((row, i) => {
            const keys = {};
            for (let i = 0; i <= level; i++) {
                keys[this.table.groupedColumnsArray[i]] = this.table.getColumnDataByAttr(this.table.groupedColumnsArray[i], row);
            }
            const recordKey = JSON.stringify(keys);
            if (recordHash.hasOwnProperty(recordKey)) {
                recordHash[recordKey].push(i);
            }
            else {
                recordHash[recordKey] = [i];
            }
        });
        return recordHash;
    }
    recalculateColumnAggregate(columnAttr, row) {
        const aggregateConf = row.getActiveColumnAggregateConfiguration(columnAttr);
        const data = row.getColumnAggregateData(columnAttr);
        const value = this.calculateAggregate(data, aggregateConf.attr, aggregateConf.aggregateFunction || aggregateConf.aggregate);
        row.setColumnAggregateValue(columnAttr, value);
    }
    getSublevel(data, level, parent) {
        if (level >= this.table.groupedColumnsArray.length) {
            return data;
        }
        const recordHash = this.getDataInformationByGroup(data, level);
        let result = [];
        Object.keys(recordHash).forEach(recordKey => {
            const row = new OTableGroupedRow({
                column: this.table.groupedColumnsArray[level],
                keysAsString: recordKey,
                level: level + 1,
                parent: parent
            });
            this.groupedRowsSubscription.add(row.aggregateFunctionChange.subscribe(arg => {
                if (arg.changeAllGroupedRows) {
                    this.activeAggregates[arg.columnAttr] = arg.activeAggregate;
                    this.renderedData.filter(row => row instanceof OTableGroupedRow).forEach(row => {
                        row.setColumnActiveAggregateFunction(arg.columnAttr, arg.activeAggregate, false);
                        this.recalculateColumnAggregate(arg.columnAttr, row);
                    });
                }
                else {
                    this.recalculateColumnAggregate(arg.columnAttr, arg.row);
                }
            }));
            const affectedIndexes = recordHash[row.keysAsString];
            const groupData = data.filter((row, index) => affectedIndexes.includes(index));
            this.table.visibleColArray.forEach((columnAttr, i) => {
                if (i === 0) {
                    row.title = this.getTextGroupRow(row, affectedIndexes.length);
                }
                const useColumnAggregate = this.table.useColumnGroupingAggregate(columnAttr);
                if (useColumnAggregate) {
                    row.initializeColumnAggregate(columnAttr, this.table.getColumnGroupingComponent(columnAttr));
                    if (Util.isDefined(this.activeAggregates[columnAttr])) {
                        row.setColumnActiveAggregateFunction(columnAttr, this.activeAggregates[columnAttr], false);
                    }
                    if (row.hasActiveAggregate(columnAttr)) {
                        const aggregateData = groupData.map(x => { const obj = {}; obj[columnAttr] = x[columnAttr]; return obj; });
                        row.setColumnAggregateData(columnAttr, aggregateData);
                        const aggregateConf = row.getActiveColumnAggregateConfiguration(columnAttr);
                        const value = this.calculateAggregate(aggregateData, aggregateConf.attr, aggregateConf.aggregateFunction || aggregateConf.aggregate);
                        row.setColumnAggregateValue(columnAttr, value);
                    }
                }
            });
            row.expanded = this.getExpansionState(row);
            const subGroup = this.getSublevel(groupData, level + 1, row);
            subGroup.unshift(row);
            result = result.concat(subGroup);
        });
        return result;
    }
    filterCollapsedRowGroup(data) {
        return data.filter((row) => (row instanceof OTableGroupedRow) ? row.visible : this.belongsToExpandedGroupedRow(data, row));
    }
    belongsToExpandedGroupedRow(data, row) {
        let parent;
        let match = false;
        for (let index = 0; index < data.length && !match; index++) {
            if (data[index] instanceof OTableGroupedRow) {
                parent = data[index];
            }
            else if (Util.isEquivalent(data[index], row)) {
                match = true;
            }
        }
        return Util.isDefined(parent) ? (parent.visible && parent.expanded) : true;
    }
    updateGroupedColumns() {
        this.groupByColumnChange.next();
    }
    toggleGroupByColumn(rowGroup) {
        if (rowGroup.expandSameLevel(this.table.expandGroupsSameLevel)) {
            this.levelsExpansionState[rowGroup.level] = !rowGroup.expanded;
        }
        else {
            this.updateStateRowGrouped(rowGroup);
        }
        this.groupByColumnChange.next();
    }
    setRowGroupLevelExpansion(rowGroup, value) {
        this.levelsExpansionState[rowGroup.level] = value;
        this.groupByColumnChange.next();
    }
    updateStateRowGrouped(rowGroup) {
        const stateRowGrouped = this.groupedRowState.find(row => rowGroup.keysAsString === row.keysAsString && JSON.stringify(rowGroup.parent) === JSON.stringify(row.parent));
        if (Util.isDefined(stateRowGrouped)) {
            stateRowGrouped.expanded = !stateRowGrouped.expanded;
        }
        else {
            rowGroup.expanded = !rowGroup.expanded;
            this.groupedRowState.push(rowGroup);
        }
    }
    getTextGroupRow(group, totalCounts) {
        const field = this.table.groupedColumnsArray[group.level - 1];
        let value = JSON.parse(group.keysAsString)[this.table.groupedColumnsArray[group.level - 1]];
        const oCol = this.table.getOColumn(field);
        if (!value && Util.isDefined(oCol.renderer) && this.table.isInstanceOfOTableCellRendererServiceComponent(oCol.renderer)) {
            value = ' - ';
            if (!this.table.onDataLoadedCellRendererSubscription) {
                this.table.onDataLoadedCellRendererSubscription = oCol.renderer.onDataLoaded.subscribe(x => {
                    this.updateGroupedColumns();
                });
            }
        }
        return this.table.translateService.get(oCol.title) + ': ' + value + ' (' + totalCounts + ')';
    }
    getExpansionState(row) {
        let expansionState = !parent || !this.table.collapseGroupedColumns;
        if (row.expandSameLevel(this.table.expandGroupsSameLevel)) {
            expansionState = this.levelsExpansionState.hasOwnProperty(row.level) ? this.levelsExpansionState[row.level] : expansionState;
        }
        else {
            const rowGroup = this.groupedRowState.find(x => x.keysAsString === row.keysAsString && JSON.stringify(x.parent) === JSON.stringify(row.parent));
            expansionState = rowGroup ? rowGroup.expanded : expansionState;
        }
        return expansionState;
    }
}
//# sourceMappingURL=data:application/json;base64,