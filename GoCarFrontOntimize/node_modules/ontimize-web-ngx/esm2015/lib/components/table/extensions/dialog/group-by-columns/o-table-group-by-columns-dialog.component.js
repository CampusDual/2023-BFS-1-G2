import { ChangeDetectionStrategy, Component, Inject, ViewChild, ViewEncapsulation } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';
import { Util } from '../../../../../util/util';
import { ODualListSelectorComponent } from '../../../../dual-list-selector/o-dual-list-selector.component';
export class OTableGroupByColumnsDialogComponent {
    constructor(dialogRef, data) {
        this.dialogRef = dialogRef;
        this.columns = [];
        this.groupedColumns = [];
        this.groupedColumnTypes = [];
        if (Util.isArray(data.groupedColumns) && !Util.isArrayEmpty(data.groupedColumns)) {
            this.groupedColumns = data.groupedColumns.map((attr) => {
                const indexCol = data.columnsData.findIndex((col) => col.attr === attr);
                if (indexCol > -1) {
                    return data.columnsData[indexCol];
                }
            });
        }
        const self = this;
        if (Util.isArray(data.columnsData)) {
            this.columns = data.columnsData.filter((oCol) => oCol.visible && oCol.groupable && self.groupedColumns.findIndex(x => x.attr === oCol.attr) === -1);
        }
        if (Util.isDefined(data.groupedColumnTypes)) {
            this.groupedColumnTypes = data.groupedColumnTypes;
        }
    }
    getGroupedColumns() {
        return this.dualListSelector.getSelectedItems().map((oCol) => oCol.attr);
    }
    getGroupedColumnTypes() {
        return this.dualListSelector.getGroupedColumnTypes();
    }
}
OTableGroupByColumnsDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-table-group-by-columns-dialog',
                template: "<span mat-dialog-title>{{ 'TABLE.BUTTONS.GROUPBY' | oTranslate }}</span>\n\n<mat-dialog-content>\n  <o-dual-list-selector #dualListSelector [data-source]=\"columns\" [data-destination]=\"groupedColumns\" [grouped-column-types]=\"groupedColumnTypes\"\n    key=\"attr\" display=\"title\" title-list-data-source=\"TABLE_GROUP_BY_COLUMNS_DIALOG.ALL_COLUMNS\"\n    title-list-data-destination=\"TABLE_GROUP_BY_COLUMNS_DIALOG.GROUPED_COLUMNS\" description=\"TABLE_GROUP_BY_COLUMNS_DIALOG.DESCRIPTION\" fxFlexFill>\n  </o-dual-list-selector>\n</mat-dialog-content>\n\n<mat-dialog-actions fxLayoutAlign=\"end center\">\n  <button type=\"button\" mat-stroked-button [mat-dialog-close]=\"false\" class=\"o-button-default cancel\">{{ 'CANCEL' | oTranslate }}</button>\n  <button type=\"button\" mat-stroked-button [mat-dialog-close]=\"true\" class=\"o-button-primary\">{{ 'ACCEPT' | oTranslate }}</button>\n</mat-dialog-actions>\n",
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                host: {
                    '[class.o-table-group-by-column-dialog]': 'true'
                },
                styles: [".o-table-group-by-column-dialog{display:flex;flex-direction:column;height:100%}.o-table-group-by-column-dialog .mat-dialog-content{flex:1}"]
            }] }
];
OTableGroupByColumnsDialogComponent.ctorParameters = () => [
    { type: MatDialogRef },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
];
OTableGroupByColumnsDialogComponent.propDecorators = {
    dualListSelector: [{ type: ViewChild, args: ['dualListSelector', { static: false },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby10YWJsZS1ncm91cC1ieS1jb2x1bW5zLWRpYWxvZy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9vbnRpbWl6ZS13ZWItbmd4LyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvdGFibGUvZXh0ZW5zaW9ucy9kaWFsb2cvZ3JvdXAtYnktY29sdW1ucy9vLXRhYmxlLWdyb3VwLWJ5LWNvbHVtbnMtZGlhbG9nLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekcsT0FBTyxFQUFFLGVBQWUsRUFBRSxZQUFZLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUVsRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDaEQsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sK0RBQStELENBQUM7QUFhM0csTUFBTSxPQUFPLG1DQUFtQztJQVE5QyxZQUNTLFNBQTRELEVBQzFDLElBQVM7UUFEM0IsY0FBUyxHQUFULFNBQVMsQ0FBbUQ7UUFQOUQsWUFBTyxHQUFtQixFQUFFLENBQUM7UUFDN0IsbUJBQWMsR0FBbUIsRUFBRSxDQUFDO1FBQ3BDLHVCQUFrQixHQUEwQixFQUFFLENBQUM7UUFTcEQsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxFQUFFO1lBQ2hGLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFZLEVBQUUsRUFBRTtnQkFDN0QsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFZLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLENBQUM7Z0JBQ2pGLElBQUksUUFBUSxHQUFHLENBQUMsQ0FBQyxFQUFFO29CQUNqQixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7aUJBQ25DO1lBQ0gsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUVELE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQztRQUNsQixJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQ2xDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFhLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FFOUo7UUFDRCxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEVBQUU7WUFDM0MsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQztTQUNuRDtJQUNILENBQUM7SUFFRCxpQkFBaUI7UUFDZixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQWEsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3BGLENBQUM7SUFFRCxxQkFBcUI7UUFDbkIsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMscUJBQXFCLEVBQUUsQ0FBQztJQUN2RCxDQUFDOzs7WUFoREYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxpQ0FBaUM7Z0JBQzNDLG02QkFBNkQ7Z0JBRTdELGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO2dCQUNyQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFDL0MsSUFBSSxFQUFFO29CQUNKLHdDQUF3QyxFQUFFLE1BQU07aUJBQ2pEOzthQUNGOzs7WUFmeUIsWUFBWTs0Q0EwQmpDLE1BQU0sU0FBQyxlQUFlOzs7K0JBSnhCLFNBQVMsU0FBQyxrQkFBa0IsRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBJbmplY3QsIFZpZXdDaGlsZCwgVmlld0VuY2Fwc3VsYXRpb24gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1BVF9ESUFMT0dfREFUQSwgTWF0RGlhbG9nUmVmIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwnO1xuaW1wb3J0IHsgT0dyb3VwZWRDb2x1bW5UeXBlcyB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3R5cGVzJztcbmltcG9ydCB7IFV0aWwgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi91dGlsL3V0aWwnO1xuaW1wb3J0IHsgT0R1YWxMaXN0U2VsZWN0b3JDb21wb25lbnQgfSBmcm9tICcuLi8uLi8uLi8uLi9kdWFsLWxpc3Qtc2VsZWN0b3Ivby1kdWFsLWxpc3Qtc2VsZWN0b3IuY29tcG9uZW50JztcbmltcG9ydCB7IE9Db2x1bW4gfSBmcm9tICcuLi8uLi8uLi9jb2x1bW4vby1jb2x1bW4uY2xhc3MnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdvLXRhYmxlLWdyb3VwLWJ5LWNvbHVtbnMtZGlhbG9nJyxcbiAgdGVtcGxhdGVVcmw6ICdvLXRhYmxlLWdyb3VwLWJ5LWNvbHVtbnMtZGlhbG9nLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJ28tdGFibGUtZ3JvdXAtYnktY29sdW1ucy1kaWFsb2cuY29tcG9uZW50LnNjc3MnXSxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIGhvc3Q6IHtcbiAgICAnW2NsYXNzLm8tdGFibGUtZ3JvdXAtYnktY29sdW1uLWRpYWxvZ10nOiAndHJ1ZSdcbiAgfVxufSlcbmV4cG9ydCBjbGFzcyBPVGFibGVHcm91cEJ5Q29sdW1uc0RpYWxvZ0NvbXBvbmVudCB7XG5cbiAgcHVibGljIGNvbHVtbnM6IEFycmF5PE9Db2x1bW4+ID0gW107XG4gIHB1YmxpYyBncm91cGVkQ29sdW1uczogQXJyYXk8T0NvbHVtbj4gPSBbXTtcbiAgcHVibGljIGdyb3VwZWRDb2x1bW5UeXBlczogT0dyb3VwZWRDb2x1bW5UeXBlc1tdID0gW107XG5cbiAgQFZpZXdDaGlsZCgnZHVhbExpc3RTZWxlY3RvcicsIHsgc3RhdGljOiBmYWxzZSB9KSBkdWFsTGlzdFNlbGVjdG9yOiBPRHVhbExpc3RTZWxlY3RvckNvbXBvbmVudDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgZGlhbG9nUmVmOiBNYXREaWFsb2dSZWY8T1RhYmxlR3JvdXBCeUNvbHVtbnNEaWFsb2dDb21wb25lbnQ+LFxuICAgIEBJbmplY3QoTUFUX0RJQUxPR19EQVRBKSBkYXRhOiBhbnlcbiAgKSB7XG5cbiAgICBpZiAoVXRpbC5pc0FycmF5KGRhdGEuZ3JvdXBlZENvbHVtbnMpICYmICFVdGlsLmlzQXJyYXlFbXB0eShkYXRhLmdyb3VwZWRDb2x1bW5zKSkge1xuICAgICAgdGhpcy5ncm91cGVkQ29sdW1ucyA9IGRhdGEuZ3JvdXBlZENvbHVtbnMubWFwKChhdHRyOiBzdHJpbmcpID0+IHtcbiAgICAgICAgY29uc3QgaW5kZXhDb2wgPSBkYXRhLmNvbHVtbnNEYXRhLmZpbmRJbmRleCgoY29sOiBPQ29sdW1uKSA9PiBjb2wuYXR0ciA9PT0gYXR0cik7XG4gICAgICAgIGlmIChpbmRleENvbCA+IC0xKSB7XG4gICAgICAgICAgcmV0dXJuIGRhdGEuY29sdW1uc0RhdGFbaW5kZXhDb2xdO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBpZiAoVXRpbC5pc0FycmF5KGRhdGEuY29sdW1uc0RhdGEpKSB7XG4gICAgICB0aGlzLmNvbHVtbnMgPSBkYXRhLmNvbHVtbnNEYXRhLmZpbHRlcigob0NvbDogT0NvbHVtbikgPT4gb0NvbC52aXNpYmxlICYmIG9Db2wuZ3JvdXBhYmxlICYmIHNlbGYuZ3JvdXBlZENvbHVtbnMuZmluZEluZGV4KHggPT4geC5hdHRyID09PSBvQ29sLmF0dHIpID09PSAtMSk7XG5cbiAgICB9XG4gICAgaWYgKFV0aWwuaXNEZWZpbmVkKGRhdGEuZ3JvdXBlZENvbHVtblR5cGVzKSkge1xuICAgICAgdGhpcy5ncm91cGVkQ29sdW1uVHlwZXMgPSBkYXRhLmdyb3VwZWRDb2x1bW5UeXBlcztcbiAgICB9XG4gIH1cblxuICBnZXRHcm91cGVkQ29sdW1ucygpOiBBcnJheTxzdHJpbmc+IHtcbiAgICByZXR1cm4gdGhpcy5kdWFsTGlzdFNlbGVjdG9yLmdldFNlbGVjdGVkSXRlbXMoKS5tYXAoKG9Db2w6IE9Db2x1bW4pID0+IG9Db2wuYXR0cik7XG4gIH1cblxuICBnZXRHcm91cGVkQ29sdW1uVHlwZXMoKTogT0dyb3VwZWRDb2x1bW5UeXBlc1tdIHtcbiAgICByZXR1cm4gdGhpcy5kdWFsTGlzdFNlbGVjdG9yLmdldEdyb3VwZWRDb2x1bW5UeXBlcygpO1xuICB9XG59XG4iXX0=