import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, forwardRef, Inject, Injector, ViewEncapsulation, } from '@angular/core';
import { InputConverter } from '../../../../../decorators/input-converter';
import { Codes } from '../../../../../util/codes';
import { Util } from '../../../../../util/util';
import { OTableComponent } from '../../../o-table.component';
export const DEFAULT_INPUTS_O_TABLE_BUTTON = [
    'oattr: attr',
    'enabled',
    'icon',
    'svgIcon: svg-icon',
    'iconPosition: icon-position',
    'olabel: label'
];
export const DEFAULT_OUTPUTS_O_TABLE_BUTTON = [
    'onClick'
];
export class OTableButtonComponent {
    constructor(injector, elRef, _table) {
        this.injector = injector;
        this.elRef = elRef;
        this._table = _table;
        this.onClick = new EventEmitter();
        this.enabled = true;
    }
    ngOnInit() {
        if (!Util.isDefined(this.icon) && !Util.isDefined(this.svgIcon)) {
            this.icon = 'priority_high';
        }
        this.iconPosition = Util.parseIconPosition(this.iconPosition);
    }
    innerOnClick(event) {
        event.stopPropagation();
        this.onClick.emit();
    }
    isIconPositionLeft() {
        return this.iconPosition === Codes.ICON_POSITION_LEFT;
    }
    get table() {
        return this._table;
    }
}
OTableButtonComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-table-button',
                template: "<ng-container *ngIf=\"table.showButtonsText\">\n  <button type=\"button\" [disabled]=\"!enabled\" [class.disabled]=\"!enabled\" mat-stroked-button (click)=\"innerOnClick($event)\">\n    <mat-icon *ngIf=\"isIconPositionLeft() && svgIcon !== undefined\" [svgIcon]=\"svgIcon\"></mat-icon>\n    <mat-icon *ngIf=\"isIconPositionLeft() && svgIcon === undefined\">{{ icon }}</mat-icon>\n    <span>{{ olabel | oTranslate }}</span>\n    <mat-icon *ngIf=\"!isIconPositionLeft() && svgIcon !== undefined\" [svgIcon]=\"svgIcon\"></mat-icon>\n    <mat-icon *ngIf=\"!isIconPositionLeft() && svgIcon === undefined\">{{ icon }}</mat-icon>\n  </button>\n</ng-container>\n\n<ng-container *ngIf=\"!table.showButtonsText\">\n  <button type=\"button\" [disabled]=\"!enabled\" [class.disabled]=\"!enabled\" mat-icon-button (click)=\"innerOnClick($event)\">\n    <mat-icon *ngIf=\"isIconPositionLeft() && svgIcon !== undefined\" [svgIcon]=\"svgIcon\"></mat-icon>\n    <mat-icon *ngIf=\"isIconPositionLeft() && svgIcon === undefined\">{{ icon }}</mat-icon>\n    <mat-icon *ngIf=\"!isIconPositionLeft() && svgIcon !== undefined\" [svgIcon]=\"svgIcon\"></mat-icon>\n    <mat-icon *ngIf=\"!isIconPositionLeft() && svgIcon === undefined\">{{ icon }}</mat-icon>\n  </button>\n</ng-container>\n",
                inputs: DEFAULT_INPUTS_O_TABLE_BUTTON,
                outputs: DEFAULT_OUTPUTS_O_TABLE_BUTTON,
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                host: {
                    '[class.o-table-button]': 'true',
                    '[class.text]': 'table.showButtonsText',
                    '[class.no-text]': '!table.showButtonsText',
                }
            }] }
];
OTableButtonComponent.ctorParameters = () => [
    { type: Injector },
    { type: ElementRef },
    { type: OTableComponent, decorators: [{ type: Inject, args: [forwardRef(() => OTableComponent),] }] }
];
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OTableButtonComponent.prototype, "enabled", void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby10YWJsZS1idXR0b24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vb250aW1pemUtd2ViLW5neC8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3RhYmxlL2V4dGVuc2lvbnMvaGVhZGVyL3RhYmxlLWJ1dHRvbi9vLXRhYmxlLWJ1dHRvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBQ1osVUFBVSxFQUNWLE1BQU0sRUFDTixRQUFRLEVBRVIsaUJBQWlCLEdBQ2xCLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQztBQUMzRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDbEQsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUc3RCxNQUFNLENBQUMsTUFBTSw2QkFBNkIsR0FBRztJQUMzQyxhQUFhO0lBQ2IsU0FBUztJQUNULE1BQU07SUFDTixtQkFBbUI7SUFDbkIsNkJBQTZCO0lBQzdCLGVBQWU7Q0FDaEIsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLDhCQUE4QixHQUFHO0lBQzVDLFNBQVM7Q0FDVixDQUFDO0FBZUYsTUFBTSxPQUFPLHFCQUFxQjtJQVloQyxZQUNZLFFBQWtCLEVBQ3JCLEtBQWlCLEVBQzZCLE1BQXVCO1FBRmxFLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDckIsVUFBSyxHQUFMLEtBQUssQ0FBWTtRQUM2QixXQUFNLEdBQU4sTUFBTSxDQUFpQjtRQWJ2RSxZQUFPLEdBQXlCLElBQUksWUFBWSxFQUFVLENBQUM7UUFJM0QsWUFBTyxHQUFZLElBQUksQ0FBQztJQVUzQixDQUFDO0lBRUUsUUFBUTtRQUNiLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQy9ELElBQUksQ0FBQyxJQUFJLEdBQUcsZUFBZSxDQUFDO1NBQzdCO1FBQ0QsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFFTSxZQUFZLENBQUMsS0FBSztRQUN2QixLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDeEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBRU0sa0JBQWtCO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDLFlBQVksS0FBSyxLQUFLLENBQUMsa0JBQWtCLENBQUM7SUFDeEQsQ0FBQztJQUVELElBQUksS0FBSztRQUNQLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDOzs7WUFqREYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxnQkFBZ0I7Z0JBQzFCLDR2Q0FBOEM7Z0JBQzlDLE1BQU0sRUFBRSw2QkFBNkI7Z0JBQ3JDLE9BQU8sRUFBRSw4QkFBOEI7Z0JBQ3ZDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO2dCQUNyQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFDL0MsSUFBSSxFQUFFO29CQUNKLHdCQUF3QixFQUFFLE1BQU07b0JBQ2hDLGNBQWMsRUFBRSx1QkFBdUI7b0JBQ3ZDLGlCQUFpQixFQUFFLHdCQUF3QjtpQkFDNUM7YUFDRjs7O1lBcENDLFFBQVE7WUFKUixVQUFVO1lBWUgsZUFBZSx1QkE0Q25CLE1BQU0sU0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsZUFBZSxDQUFDOztBQVQzQztJQURDLGNBQWMsRUFBRTs7c0RBQ2MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBFdmVudEVtaXR0ZXIsXG4gIGZvcndhcmRSZWYsXG4gIEluamVjdCxcbiAgSW5qZWN0b3IsXG4gIE9uSW5pdCxcbiAgVmlld0VuY2Fwc3VsYXRpb24sXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBJbnB1dENvbnZlcnRlciB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2RlY29yYXRvcnMvaW5wdXQtY29udmVydGVyJztcbmltcG9ydCB7IENvZGVzIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vdXRpbC9jb2Rlcyc7XG5pbXBvcnQgeyBVdGlsIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vdXRpbC91dGlsJztcbmltcG9ydCB7IE9UYWJsZUNvbXBvbmVudCB9IGZyb20gJy4uLy4uLy4uL28tdGFibGUuY29tcG9uZW50JztcbmltcG9ydCB7IE9UYWJsZUJ1dHRvbiB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2ludGVyZmFjZXMvby10YWJsZS1idXR0b24uaW50ZXJmYWNlJztcblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfSU5QVVRTX09fVEFCTEVfQlVUVE9OID0gW1xuICAnb2F0dHI6IGF0dHInLFxuICAnZW5hYmxlZCcsXG4gICdpY29uJyxcbiAgJ3N2Z0ljb246IHN2Zy1pY29uJyxcbiAgJ2ljb25Qb3NpdGlvbjogaWNvbi1wb3NpdGlvbicsXG4gICdvbGFiZWw6IGxhYmVsJ1xuXTtcblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfT1VUUFVUU19PX1RBQkxFX0JVVFRPTiA9IFtcbiAgJ29uQ2xpY2snXG5dO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdvLXRhYmxlLWJ1dHRvbicsXG4gIHRlbXBsYXRlVXJsOiAnLi9vLXRhYmxlLWJ1dHRvbi5jb21wb25lbnQuaHRtbCcsXG4gIGlucHV0czogREVGQVVMVF9JTlBVVFNfT19UQUJMRV9CVVRUT04sXG4gIG91dHB1dHM6IERFRkFVTFRfT1VUUFVUU19PX1RBQkxFX0JVVFRPTixcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIGhvc3Q6IHtcbiAgICAnW2NsYXNzLm8tdGFibGUtYnV0dG9uXSc6ICd0cnVlJyxcbiAgICAnW2NsYXNzLnRleHRdJzogJ3RhYmxlLnNob3dCdXR0b25zVGV4dCcsXG4gICAgJ1tjbGFzcy5uby10ZXh0XSc6ICchdGFibGUuc2hvd0J1dHRvbnNUZXh0JyxcbiAgfVxufSlcbmV4cG9ydCBjbGFzcyBPVGFibGVCdXR0b25Db21wb25lbnQgaW1wbGVtZW50cyBPVGFibGVCdXR0b24sIE9uSW5pdCB7XG5cbiAgcHVibGljIG9uQ2xpY2s6IEV2ZW50RW1pdHRlcjxvYmplY3Q+ID0gbmV3IEV2ZW50RW1pdHRlcjxvYmplY3Q+KCk7XG5cbiAgcHVibGljIG9hdHRyOiBzdHJpbmc7XG4gIEBJbnB1dENvbnZlcnRlcigpXG4gIHB1YmxpYyBlbmFibGVkOiBib29sZWFuID0gdHJ1ZTtcbiAgcHVibGljIGljb246IHN0cmluZztcbiAgcHVibGljIHN2Z0ljb246IHN0cmluZztcbiAgcHVibGljIG9sYWJlbDogc3RyaW5nO1xuICBwdWJsaWMgaWNvblBvc2l0aW9uOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIGluamVjdG9yOiBJbmplY3RvcixcbiAgICBwdWJsaWMgZWxSZWY6IEVsZW1lbnRSZWYsXG4gICAgQEluamVjdChmb3J3YXJkUmVmKCgpID0+IE9UYWJsZUNvbXBvbmVudCkpIHByb3RlY3RlZCBfdGFibGU6IE9UYWJsZUNvbXBvbmVudFxuICApIHsgfVxuXG4gIHB1YmxpYyBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICBpZiAoIVV0aWwuaXNEZWZpbmVkKHRoaXMuaWNvbikgJiYgIVV0aWwuaXNEZWZpbmVkKHRoaXMuc3ZnSWNvbikpIHtcbiAgICAgIHRoaXMuaWNvbiA9ICdwcmlvcml0eV9oaWdoJztcbiAgICB9XG4gICAgdGhpcy5pY29uUG9zaXRpb24gPSBVdGlsLnBhcnNlSWNvblBvc2l0aW9uKHRoaXMuaWNvblBvc2l0aW9uKTtcbiAgfVxuXG4gIHB1YmxpYyBpbm5lck9uQ2xpY2soZXZlbnQpOiB2b2lkIHtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB0aGlzLm9uQ2xpY2suZW1pdCgpO1xuICB9XG5cbiAgcHVibGljIGlzSWNvblBvc2l0aW9uTGVmdCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5pY29uUG9zaXRpb24gPT09IENvZGVzLklDT05fUE9TSVRJT05fTEVGVDtcbiAgfVxuXG4gIGdldCB0YWJsZSgpOiBPVGFibGVDb21wb25lbnQge1xuICAgIHJldHVybiB0aGlzLl90YWJsZTtcbiAgfVxuXG59XG4iXX0=