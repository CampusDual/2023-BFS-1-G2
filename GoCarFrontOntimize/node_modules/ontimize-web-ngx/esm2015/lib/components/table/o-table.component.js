import * as tslib_1 from "tslib";
import { animate, state, style, transition, trigger } from '@angular/animations';
import { SelectionModel } from '@angular/cdk/collections';
import { moveItemInArray } from '@angular/cdk/drag-drop';
import { DomPortalOutlet, TemplatePortal } from '@angular/cdk/portal';
import { CdkVirtualScrollViewport, VIRTUAL_SCROLL_STRATEGY } from '@angular/cdk/scrolling';
import { ApplicationRef, ChangeDetectionStrategy, Component, ComponentFactoryResolver, ContentChild, ContentChildren, ElementRef, EventEmitter, forwardRef, HostListener, Inject, Injector, NgZone, Optional, QueryList, TemplateRef, ViewChild, ViewContainerRef, ViewEncapsulation } from '@angular/core';
import { MatDialog, MatTab, MatTabGroup } from '@angular/material';
import moment from 'moment';
import { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';
import { debounceTime, distinctUntilChanged, filter, map } from 'rxjs/operators';
import { BooleanConverter, InputConverter } from '../../decorators/input-converter';
import { ComponentStateServiceProvider, OntimizeServiceProvider, O_COMPONENT_STATE_SERVICE } from '../../services/factories';
import { SnackBarService } from '../../services/snackbar.service';
import { OTableComponentStateService } from '../../services/state/o-table-component-state.service';
import { ColumnValueFilterOperator } from '../../types/table/o-column-value-filter.type';
import { TableFilterByColumnDialogResult } from '../../types/table/o-table-filter-by-column-data.type';
import { ObservableWrapper } from '../../util/async';
import { Codes } from '../../util/codes';
import { FilterExpressionUtils } from '../../util/filter-expression.utils';
import { PermissionsUtils } from '../../util/permissions';
import { ServiceUtils } from '../../util/service.utils';
import { SQLTypes } from '../../util/sqltypes';
import { Util } from '../../util/util';
import { OFormComponent } from '../form/o-form.component';
import { AbstractOServiceComponent, DEFAULT_INPUTS_O_SERVICE_COMPONENT, DEFAULT_OUTPUTS_O_SERVICE_COMPONENT } from '../o-service-component.class';
import { OColumn } from './column/o-column.class';
import { OTableContextMenuComponent } from './extensions/contextmenu/o-table-context-menu.component';
import { DefaultOTableOptions } from './extensions/default-o-table-options.class';
import { OTableFilterByColumnDataDialogComponent } from './extensions/dialog/filter-by-column/o-table-filter-by-column-data-dialog.component';
import { OBaseTablePaginator } from './extensions/footer/paginator/o-base-table-paginator.class';
import { OTableButtonComponent } from './extensions/header/table-button/o-table-button.component';
import { OTableColumnsFilterComponent } from './extensions/header/table-columns-filter/o-table-columns-filter.component';
import { OTableOptionComponent } from './extensions/header/table-option/o-table-option.component';
import { OTableDataSourceService } from './extensions/o-table-datasource.service';
import { OTableVirtualScrollStrategy } from './extensions/o-table-strategy.service';
import { OTableDao } from './extensions/o-table.dao';
import { OTableGroupedRow } from './extensions/row/o-table-row-group.class';
import { OTableRowExpandableComponent, OTableRowExpandedChange } from './extensions/row/table-row-expandable/o-table-row-expandable.component';
import { OMatSort } from './extensions/sort/o-mat-sort';
import { O_TABLE_GLOBAL_CONFIG } from './utils/o-table.tokens';
import { OTableColumnSelectAllDirective } from './extensions/header/table-column-select-all/o-table-column-select-all.directive';
export const DEFAULT_INPUTS_O_TABLE = [
    ...DEFAULT_INPUTS_O_SERVICE_COMPONENT,
    'visibleColumns: visible-columns',
    'defaultVisibleColumns: default-visible-columns',
    'sortColumns: sort-columns',
    'quickFilterCallback: quick-filter-function',
    'deleteButton: delete-button',
    'refreshButton: refresh-button',
    'columnsVisibilityButton: columns-visibility-button',
    'exportButton: export-button',
    'showConfigurationOption: show-configuration-option',
    'showButtonsText: show-buttons-text',
    'selectAllCheckbox: select-all-checkbox',
    'paginationControls: pagination-controls',
    'fixedHeader: fixed-header',
    'showTitle: show-title',
    'editionMode: edition-mode',
    'selectionMode: selection-mode',
    'horizontalScroll: horizontal-scroll',
    'showPaginatorFirstLastButtons: show-paginator-first-last-buttons',
    'autoAlignTitles: auto-align-titles',
    'multipleSort: multiple-sort',
    'selectAllCheckboxVisible: select-all-checkbox-visible',
    'orderable',
    'resizable',
    'keepSelectedItems: keep-selected-items',
    'exportMode: export-mode',
    'exportServiceType: export-service-type',
    'autoAdjust: auto-adjust',
    'showFilterOption: show-filter-option',
    'visibleExportDialogButtons: visible-export-dialog-buttons',
    'rowClass: row-class',
    'filterColumnActiveByDefault:filter-column-active-by-default',
    'groupedColumns: grouped-columns',
    'groupable',
    'expandGroupsSameLevel: expand-groups-same-level',
    'collapseGroupedColumns: collapse-grouped-columns',
    'virtualScroll: virtual-scroll',
    'contextMenu: context-menu',
    'showExpandableIconFunction: show-expandable-icon-function',
    'showReportOnDemandOption: show-report-on-demand-option',
    'showChartsOnDemandOption: show-charts-on-demand-option',
    'showResetWidthOption: show-reset-width-option',
    'disableSelectionFunction: disable-selection-function'
];
export const DEFAULT_OUTPUTS_O_TABLE = [
    ...DEFAULT_OUTPUTS_O_SERVICE_COMPONENT,
    'onRowSelected',
    'onRowDeselected',
    'onRowDeleted'
];
const stickyHeaderSelector = '.mat-header-row .mat-table-sticky';
const stickyFooterSelector = '.mat-footer-row .mat-table-sticky';
const rowSelector = '.mat-row';
const headerSelector = '.mat-header-row';
const footerSelector = '.mat-footer-row';
export class OTableComponent extends AbstractOServiceComponent {
    constructor(injector, elRef, dialog, _viewContainerRef, appRef, _componentFactoryResolver, form, scrollStrategy) {
        super(injector, elRef, form);
        this.injector = injector;
        this.dialog = dialog;
        this._viewContainerRef = _viewContainerRef;
        this.appRef = appRef;
        this._componentFactoryResolver = _componentFactoryResolver;
        this.scrollStrategy = scrollStrategy;
        this.DETAIL_MODE_NONE = Codes.DETAIL_MODE_NONE;
        this.EDIT_MODE_NONE = Codes.EDITION_MODE_NONE;
        this.tableHeaders = [];
        this.portalHost = [];
        this.selectAllCheckbox = false;
        this.exportButton = true;
        this.showConfigurationOption = true;
        this.columnsVisibilityButton = true;
        this.showFilterOption = true;
        this.showReportOnDemandOption = true;
        this.showChartsOnDemandOption = true;
        this.showButtonsText = true;
        this.filterColumnActiveByDefault = true;
        this.showResetWidthOption = true;
        this.insertButton = true;
        this.refreshButton = true;
        this.deleteButton = true;
        this.fixedHeader = true;
        this.showTitle = false;
        this.editionMode = Codes.EDITION_MODE_NONE;
        this.selectionMode = Codes.SELECTION_MODE_MULTIPLE;
        this._horizontalScroll = false;
        this.showPaginatorFirstLastButtons = true;
        this.autoAlignTitles = false;
        this.multipleSort = true;
        this.orderable = true;
        this.resizable = true;
        this.autoAdjust = true;
        this.groupable = true;
        this.expandGroupsSameLevel = true;
        this.collapseGroupedColumns = false;
        this.virtualScroll = true;
        this.contextMenu = true;
        this.keepSelectedItems = true;
        this.exportMode = Codes.EXPORT_MODE_VISIBLE;
        this.searcheableColumns = [];
        this.groupedColumnTypes = [];
        this._visibleColArray = [];
        this.sortColArray = [];
        this.pendingQuery = false;
        this.pendingQueryFilter = undefined;
        this.setStaticData = false;
        this.avoidQueryColumns = [];
        this.asyncLoadColumns = [];
        this.asyncLoadSubscriptions = {};
        this.finishQuerySubscription = false;
        this.onRowSelected = new EventEmitter();
        this.onRowDeselected = new EventEmitter();
        this.onRowDeleted = new EventEmitter();
        this.onReinitialize = new EventEmitter();
        this.onContentChange = new EventEmitter();
        this.onFilterByColumnChange = new EventEmitter();
        this.showTotalsSubject = new BehaviorSubject(false);
        this.showTotals = this.showTotalsSubject.asObservable();
        this.loadingSortingSubject = new BehaviorSubject(false);
        this.loadingSorting = this.loadingSortingSubject.asObservable();
        this.loadingScrollSubject = new BehaviorSubject(false);
        this.loadingScroll = this.loadingScrollSubject.asObservable();
        this.showLoading = combineLatest([
            this.loading.pipe(debounceTime(200)),
            this.loadingSorting,
            this.loadingScroll
        ]).pipe(distinctUntilChanged((prev, curr) => prev[0] === curr[0] && prev[1] === curr[1] && prev[2] === curr[2]), map((res) => res.some(r => r)));
        this.showFirstInsertableRow = false;
        this.showLastInsertableRow = false;
        this.clickDelay = 200;
        this.clickPrevent = false;
        this.onUpdateScrolledState = new EventEmitter();
        this.storePaginationState = false;
        this.pageScrollVirtual = 1;
        this.groupedColumnsArray = [];
        this._isColumnFiltersActive = false;
        this.groupingHeadersRows = [];
        this.triggerSelectionEvents = true;
        this._oTableOptions = new DefaultOTableOptions();
        try {
            this.tabGroupContainer = this.injector.get(MatTabGroup);
            this.tabContainer = this.injector.get(MatTab);
        }
        catch (error) {
        }
        this.snackBarService = this.injector.get(SnackBarService);
        this.getGlobalConfig();
    }
    set cdkVirtualScrollViewport(value) {
        if (value != this.virtualScrollViewport) {
            this.virtualScrollViewport = value;
            this.updateHeaderAndFooterStickyPositions();
            if (this.checkViewportSizeSubscription) {
                this.checkViewportSizeSubscription.unsubscribe();
            }
            if (this.virtualScrollViewport) {
                this.checkViewportSizeSubscription = this.checkViewPortSubject.subscribe(x => {
                    if (x) {
                        this.checkViewportSize();
                    }
                });
            }
            this.setDatasource();
            this.registerSortListener();
        }
    }
    get diameterSpinner() {
        const minHeight = OTableComponent.DEFAULT_BASE_SIZE_SPINNER;
        let height = 0;
        if (this.spinnerContainer && this.spinnerContainer.nativeElement) {
            height = this.spinnerContainer.nativeElement.offsetHeight;
        }
        if (height > 0 && height <= 100) {
            return Math.floor(height - (height * 0.1));
        }
        else {
            return minHeight;
        }
    }
    get oTableOptions() {
        return this._oTableOptions;
    }
    set oTableOptions(value) {
        this._oTableOptions = value;
    }
    set quickFilter(value) {
        value = Util.parseBoolean(String(value));
        this._quickFilter = value;
        this._oTableOptions.filter = value;
    }
    get quickFilter() {
        return this._quickFilter;
    }
    set filterCaseSensitive(value) {
        this._filterCaseSensitive = BooleanConverter(value);
        if (this._oTableOptions) {
            this._oTableOptions.filterCaseSensitive = this._filterCaseSensitive;
        }
    }
    get filterCaseSensitive() {
        return this._filterCaseSensitive;
    }
    set horizontalScroll(value) {
        this._horizontalScroll = BooleanConverter(value);
        this.refreshColumnsWidth();
    }
    get horizontalScroll() {
        return this._horizontalScroll;
    }
    get enabled() {
        return this.oenabled;
    }
    set selectAllCheckboxVisible(value) {
        this._selectAllCheckboxVisible = BooleanConverter(value);
        if (this.state) {
            this._selectAllCheckboxVisible = BooleanConverter(this.state.selectColumnVisible);
        }
        this._oTableOptions.selectColumn.visible = this._selectAllCheckboxVisible;
        this.initializeCheckboxColumn();
    }
    get selectAllCheckboxVisible() {
        return this._selectAllCheckboxVisible;
    }
    get visibleColArray() {
        return this._visibleColArray;
    }
    set visibleColArray(arg) {
        const permissionsBlocked = this.permissions ? this.permissions.columns.filter(col => col.visible === false).map(col => col.attr) : [];
        const permissionsChecked = arg.filter(value => permissionsBlocked.indexOf(value) === -1);
        this._visibleColArray = permissionsChecked;
        if (this._oTableOptions) {
            const containsSelectionCol = this._oTableOptions.visibleColumns.indexOf(Codes.NAME_COLUMN_SELECT) !== -1;
            const containsExpandableCol = this._oTableOptions.visibleColumns.indexOf(Codes.NAME_COLUMN_EXPANDABLE) !== -1;
            if (containsSelectionCol) {
                this._visibleColArray.unshift(Codes.NAME_COLUMN_SELECT);
            }
            if (containsSelectionCol && containsExpandableCol) {
                this._visibleColArray = [this._visibleColArray[0]].concat(Codes.NAME_COLUMN_EXPANDABLE, this._visibleColArray.splice(1));
            }
            else {
                if (containsExpandableCol) {
                    this._visibleColArray.unshift(Codes.NAME_COLUMN_EXPANDABLE);
                }
            }
            this._oTableOptions.visibleColumns = this._visibleColArray;
            this.groupingHeadersRows = this._oTableOptions.visibleColumns.map(visibleCol => 'groupHeader-' + visibleCol);
        }
    }
    set currentPage(val) {
        this._currentPage = val;
        if (this.paginator) {
            this.paginator.pageIndex = val;
            if (this.matpaginator) {
                this.matpaginator.pageIndex = val;
            }
        }
    }
    get currentPage() {
        return this._currentPage;
    }
    updateScrolledState() {
        if (this.horizontalScroll) {
            setTimeout(() => {
                const bodyWidth = this.tableBodyEl.nativeElement.clientWidth;
                const scrollWidth = this.tableBodyEl.nativeElement.scrollWidth;
                const previousState = this.horizontalScrolled;
                this.horizontalScrolled = scrollWidth > bodyWidth;
                if (previousState !== this.horizontalScrolled) {
                    this.onUpdateScrolledState.emit(this.horizontalScrolled);
                }
            }, 0);
        }
        this.refreshColumnsWidth();
        this.checkViewportSize();
    }
    get isColumnFiltersActive() {
        return this._isColumnFiltersActive;
    }
    set isColumnFiltersActive(val) {
        this._isColumnFiltersActive = val;
    }
    getGlobalConfig() {
        try {
            this.oTableGlobalConfig = this.injector.get(O_TABLE_GLOBAL_CONFIG);
            this.autoAdjust = this.oTableGlobalConfig.autoAdjust;
        }
        catch (error) {
        }
    }
    get state() {
        return this.componentStateService.state;
    }
    ngOnInit() {
        this.initialize();
        if (this.oTableButtons && this.tableButtons && this.tableButtons.length > 0) {
            this.oTableButtons.registerButtons(this.tableButtons.toArray());
        }
    }
    ngAfterViewInit() {
        super.afterViewInit();
        this.initTableAfterViewInit();
        if (this.oTableMenu) {
            this.matMenu = this.oTableMenu.matMenu;
            this.oTableMenu.registerOptions(this.tableOptions.toArray());
        }
        if (this.tableRowExpandable) {
            this.expandableItem = new SelectionModel(this.tableRowExpandable.multiple, []);
            this.createExpandableColumn();
        }
    }
    ngAfterContentInit() {
        if (this.tableColumnSelectAllContentChild) {
            this.setCustomDefinitionInSelectColumn(this.tableColumnSelectAllContentChild);
        }
    }
    setCustomDefinitionInSelectColumn(definition) {
        if (definition.title) {
            this._oTableOptions.selectColumn.title = definition.title;
        }
        if (definition.width) {
            this._oTableOptions.selectColumn.width = definition.width;
        }
        if (definition.minWidth) {
            this._oTableOptions.selectColumn.minWidth = definition.minWidth;
        }
        if (definition.maxWidth) {
            this._oTableOptions.selectColumn.maxWidth = definition.maxWidth;
        }
        if (definition.resizable) {
            this._oTableOptions.selectColumn.resizable = definition.resizable;
        }
    }
    ngAfterViewChecked() {
        this.cd.detectChanges();
    }
    ngOnChanges(changes) {
        if (Util.isDefined(changes.autoAdjust) && changes.autoAdjust.currentValue !== changes.autoAdjust.previousValue) {
            this.autoAdjust = changes.autoAdjust.currentValue;
        }
    }
    updateHeaderAndFooterStickyPositions() {
        if (this.virtualScrollSubscription) {
            this.virtualScrollSubscription.unsubscribe();
        }
        if (this.virtualScrollViewport) {
            const zone = this.injector.get(NgZone);
            this.virtualScrollSubscription = this.scrollStrategy.stickyChange.pipe(distinctUntilChanged(), filter(() => this.fixedHeader || this.hasInsertableRow())).subscribe(x => {
                zone.run(() => {
                    this.elRef.nativeElement.querySelectorAll(stickyHeaderSelector).forEach((el) => {
                        el.style.top = -x + 'px';
                    });
                    this.elRef.nativeElement.querySelectorAll(stickyFooterSelector).forEach((el) => {
                        el.style.bottom = x + 'px';
                    });
                });
            });
        }
    }
    createExpandableColumn() {
        this._oTableOptions.expandableColumn = new OColumn();
        this._oTableOptions.expandableColumn.visible = this.tableRowExpandable && this.tableRowExpandable.expandableColumnVisible;
        this.updateStateExpandedColumn();
    }
    ngOnDestroy() {
        if (this.portalHost) {
            this.portalHost.forEach(x => x.detach());
        }
        this.destroy();
    }
    getSuffixColumnInsertable() {
        return Codes.SUFFIX_COLUMN_INSERTABLE;
    }
    getActionsPermissions() {
        return this.permissions ? (this.permissions.actions || []) : [];
    }
    getMenuPermissions() {
        const result = this.permissions ? this.permissions.menu : undefined;
        return result ? result : {
            visible: true,
            enabled: true,
            items: []
        };
    }
    getOColumnPermissions(attr) {
        const columns = this.permissions ? (this.permissions.columns || []) : [];
        return columns.find(comp => comp.attr === attr) || { attr: attr, enabled: true, visible: true };
    }
    getActionPermissions(attr) {
        const actionsPerm = this.permissions ? (this.permissions.actions || []) : [];
        const permissions = actionsPerm.find(p => p.attr === attr);
        return permissions || {
            attr: attr,
            visible: true,
            enabled: true
        };
    }
    checkEnabledActionPermission(attr) {
        const actionsPerm = this.permissions ? (this.permissions.actions || []) : [];
        const permissions = actionsPerm.find(p => p.attr === attr);
        const enabledPermision = PermissionsUtils.checkEnabledPermission(permissions);
        if (!enabledPermision) {
            this.snackBarService.open('MESSAGES.OPERATION_NOT_ALLOWED_PERMISSION');
        }
        return enabledPermision;
    }
    initialize() {
        super.initialize();
        this._oTableOptions = new DefaultOTableOptions();
        if (this.tabGroupContainer && this.tabContainer) {
            this.registerTabListener();
        }
        this.initializeParams();
        this.initializeDao();
        this.permissions = this.permissionsService.getTablePermissions(this.oattr, this.actRoute);
    }
    initializeDao() {
        const queryMethodName = this.pageable ? this.paginatedQueryMethod : this.queryMethod;
        const methods = {
            query: queryMethodName,
            update: this.updateMethod,
            delete: this.deleteMethod,
            insert: this.insertMethod
        };
        if (this.staticData) {
            this.queryOnBind = false;
            this.queryOnInit = false;
            this.daoTable = new OTableDao(undefined, this.entity, methods);
            this.setDataArray(this.staticData);
        }
        else {
            this.configureService();
            this.daoTable = new OTableDao(this.dataService, this.entity, methods);
        }
    }
    reinitialize(options) {
        if (options) {
            const clonedOpts = Object.assign({}, options);
            if (clonedOpts.hasOwnProperty('entity')) {
                this.entity = clonedOpts.entity;
            }
            if (clonedOpts.hasOwnProperty('service')) {
                this.service = clonedOpts.service;
            }
            if (clonedOpts.hasOwnProperty('columns')) {
                this.columns = clonedOpts.columns;
            }
            if (clonedOpts.hasOwnProperty('visibleColumns')) {
                this.visibleColumns = clonedOpts.visibleColumns;
            }
            if (clonedOpts.hasOwnProperty('defaultVisibleColumns')) {
                this.defaultVisibleColumns = clonedOpts.defaultVisibleColumns;
            }
            if (clonedOpts.hasOwnProperty('keys')) {
                this.keys = clonedOpts.keys;
            }
            if (clonedOpts.hasOwnProperty('sortColumns')) {
                this.sortColumns = clonedOpts.sortColumns;
            }
            if (clonedOpts.hasOwnProperty('parentKeys')) {
                this.parentKeys = clonedOpts.parentKeys;
            }
            if (clonedOpts.hasOwnProperty('filterColumns')) {
                if (!this.oTableColumnsFilterComponent) {
                    this.oTableColumnsFilterComponent = new OTableColumnsFilterComponent(this.injector, this);
                    this.oTableMenu.onVisibleFilterOptionChange.next(this.filterColumnActiveByDefault);
                    this.oTableColumnsFilterComponent.columns = clonedOpts.filterColumns;
                }
                else {
                    this.oTableColumnsFilterComponent.columns = this.searcheableColumns.join(";");
                }
            }
        }
        this.destroy();
        this.initialize();
        this.state.reset(this.pageable);
        this.initTableAfterViewInit();
        this.onReinitialize.emit(null);
    }
    initTableAfterViewInit() {
        this.parseVisibleColumns();
        this.parseSearcheableColumns();
        this.setDatasource();
        this.registerDataSourceListeners();
        this.parseGroupedColumns();
        this.parseGroupedColumnTypes();
        this.parseSortColumns();
        this.registerSortListener();
        this.setFiltersConfiguration();
        this.addDefaultRowButtons();
        if (Util.isDefined(this.oTableColumnsGroupingComponent)) {
            this.setGroupColumns(this.oTableColumnsGroupingComponent.columnsArray);
        }
        if (this.queryOnInit) {
            this.queryData();
        }
    }
    parseSearcheableColumns() {
        this.searcheableColumns = this.visibleColArray.filter(col => {
            const oCol = this.getOColumn(col);
            return oCol && oCol.searchable;
        });
    }
    destroy() {
        super.destroy();
        if (this.tabGroupChangeSubscription) {
            this.tabGroupChangeSubscription.unsubscribe();
        }
        if (this.selectionChangeSubscription) {
            this.selectionChangeSubscription.unsubscribe();
        }
        if (this.sortSubscription) {
            this.sortSubscription.unsubscribe();
        }
        if (this.onRenderedDataChange) {
            this.onRenderedDataChange.unsubscribe();
        }
        if (this.contextMenuSubscription) {
            this.contextMenuSubscription.unsubscribe();
        }
        if (this.virtualScrollSubscription) {
            this.virtualScrollSubscription.unsubscribe();
        }
        if (this.checkViewportSizeSubscription) {
            this.checkViewportSizeSubscription.unsubscribe();
        }
        if (this.scrollStrategy) {
            this.scrollStrategy.destroy();
        }
        Object.keys(this.asyncLoadSubscriptions).forEach(idx => {
            if (this.asyncLoadSubscriptions[idx]) {
                this.asyncLoadSubscriptions[idx].unsubscribe();
            }
        });
    }
    getDataToStore() {
        return this.componentStateService.getDataToStore();
    }
    registerQuickFilter(arg) {
        const quickFilter = arg;
        this.quickFilterComponent = undefined;
        this.oTableQuickFilterComponent = quickFilter;
        if (Util.isDefined(this.oTableQuickFilterComponent)) {
            this.oTableQuickFilterComponent.setValue(this.state.quickFilterValue, false);
            this.quickFilterSubscription = this.oTableQuickFilterComponent.onChange.subscribe(val => {
                this.onSearch.emit(val);
            });
        }
    }
    registerPagination(value) {
        this.paginationControls = true;
        this.paginator = value;
    }
    registerContextMenu(value) {
        this.tableContextMenu = value;
        this.contextMenuSubscription = this.tableContextMenu.onShow.subscribe((params) => {
            params.class = 'o-table-context-menu ' + this.rowHeight;
            if (params.data && !this.isRowSelected(params.data.rowValue)) {
                this.clearSelection();
                this.selectedRow(params.data.rowValue);
            }
        });
    }
    registerDefaultColumn(column) {
        if (Util.isDefined(this.getOColumn(column))) {
            return;
        }
        const colDef = this.createOColumn(column, this);
        this.pushOColumnDefinition(colDef);
    }
    registerColumn(column) {
        const columnAttr = (typeof column === 'string') ? column : column.attr;
        const columnPermissions = this.getOColumnPermissions(columnAttr);
        if (!columnPermissions.visible) {
            return;
        }
        if (typeof column === 'string') {
            this.registerDefaultColumn(column);
            return;
        }
        const columnDef = this.getOColumn(column.attr);
        if (Util.isDefined(columnDef) && Util.isDefined(columnDef.definition)) {
            return;
        }
        const colDef = this.createOColumn(column.attr, this, column);
        let columnWidth = column.width;
        const storedData = this.state.getColumnDisplay(colDef);
        if (Util.isDefined(storedData) && Util.isDefined(storedData.width)) {
            if (this.state.initialConfiguration.columnsDisplay) {
                const initialStoredData = this.state.initialConfiguration.getColumnDisplay(colDef);
                if (initialStoredData && initialStoredData.width === colDef.definition.originalWidth) {
                    columnWidth = storedData.width;
                }
            }
            else {
                columnWidth = storedData.width;
            }
        }
        if (Util.isDefined(columnWidth)) {
            colDef.width = columnWidth;
        }
        if (column && (column.asyncLoad || column.type === 'action')) {
            this.avoidQueryColumns.push(column.attr);
            if (column.asyncLoad) {
                this.asyncLoadColumns.push(column.attr);
            }
        }
        this.pushOColumnDefinition(colDef);
    }
    pushOColumnDefinition(colDef) {
        colDef.visible = (this._visibleColArray.indexOf(colDef.attr) !== -1);
        const alreadyExisting = this.getOColumn(colDef.attr);
        if (alreadyExisting !== undefined) {
            const replacingIndex = this._oTableOptions.columns.indexOf(alreadyExisting);
            this._oTableOptions.columns[replacingIndex] = colDef;
        }
        else {
            this._oTableOptions.columns.push(colDef);
        }
        this.ensureColumnsOrder();
        this.refreshEditionModeWarn();
    }
    refreshEditionModeWarn() {
        if (this.editionMode !== Codes.EDITION_MODE_NONE) {
            return;
        }
        const editableColumns = this._oTableOptions.columns.filter(col => {
            return Util.isDefined(col.editor);
        });
        setTimeout(() => {
            if (editableColumns.length > 0 && !this.hasInsertableRow()) {
                console.warn('Using a column with a editor but there is no edition-mode defined');
            }
        }, 100);
    }
    registerColumnAggregate(column) {
        this.showTotalsSubject.next(true);
        const alreadyExisting = this.getOColumn(column.attr);
        if (alreadyExisting !== undefined) {
            const replacingIndex = this._oTableOptions.columns.indexOf(alreadyExisting);
            this._oTableOptions.columns[replacingIndex].aggregate = column;
        }
    }
    registerTableHeaders(tableHeader) {
        if (this.tableHeaders.findIndex(header => header.column.attr === tableHeader.column.attr) === -1) {
            this.tableHeaders.push(tableHeader);
        }
    }
    parseVisibleColumns(defaultConfiguration = false) {
        if (this.state.columnsDisplay) {
            let stateCols = [];
            this.state.columnsDisplay.forEach((oCol, index) => {
                const isVisibleColInColumns = this._oTableOptions.columns.find(col => col.attr === oCol.attr) !== undefined;
                if (isVisibleColInColumns) {
                    stateCols.push(oCol);
                }
                else {
                    console.warn('Unable to load the column ' + oCol.attr + ' from the localstorage');
                }
            });
            if (defaultConfiguration) {
                stateCols = this.state.initialConfiguration.columnsDisplay;
            }
            else {
                stateCols = this.checkChangesVisibleColummnsInInitialConfiguration(stateCols);
            }
            this._oTableOptions.columns.sort((a, b) => {
                const indexA = stateCols.findIndex(col => col.attr === a.attr);
                const indexB = stateCols.findIndex(col => col.attr === b.attr);
                return indexA - indexB;
            });
            this.visibleColArray = stateCols.filter(item => item.visible).map(item => item.attr);
        }
        else {
            this.visibleColArray = Util.parseArray(this.defaultVisibleColumns ? this.defaultVisibleColumns : this.visibleColumns, true);
            this._oTableOptions.columns.sort((a, b) => this.visibleColArray.indexOf(a.attr) - this.visibleColArray.indexOf(b.attr));
        }
    }
    checkChangesVisibleColummnsInInitialConfiguration(stateCols) {
        if (this.state.initialConfiguration.columnsDisplay) {
            const originalVisibleColArray = this.state.initialConfiguration.columnsDisplay.filter(x => x.visible).map(x => x.attr);
            const visibleColArray = Util.parseArray(this.visibleColumns, true);
            const colToAddInVisibleCol = Util.differenceArrays(visibleColArray, originalVisibleColArray);
            colToAddInVisibleCol.forEach((colAdd) => {
                let indexCol = stateCols.findIndex(col => col.attr === colAdd);
                if (indexCol > -1) {
                    stateCols[indexCol].visible = true;
                }
                stateCols.sort((a, b) => visibleColArray.indexOf(a.attr) - visibleColArray.indexOf(b.attr));
            });
            const colToDeleteInVisibleCol = Util.differenceArrays(originalVisibleColArray, visibleColArray);
            if (colToDeleteInVisibleCol.length > 0) {
                stateCols = stateCols.filter(col => colToDeleteInVisibleCol.indexOf(col.attr) === -1);
            }
            const changeSortVisibleColumns = JSON.stringify(visibleColArray) !== JSON.stringify(originalVisibleColArray);
            if (changeSortVisibleColumns && visibleColArray.length === originalVisibleColArray.length) {
                visibleColArray.forEach((col, toIndex) => {
                    const fromIndexToChange = stateCols.findIndex(stateCol => stateCol.attr === col);
                    moveItemInArray(stateCols, fromIndexToChange, toIndex);
                });
            }
        }
        return stateCols;
    }
    parseSortColumns() {
        const sortColumnsParam = this.state.sortColumns || this.sortColumns;
        this.sortColArray = ServiceUtils.parseSortColumns(sortColumnsParam);
        if (this.state.sortColumns && this.state.initialConfiguration.sortColumns) {
            const initialConfigSortColumnsArray = ServiceUtils.parseSortColumns(this.state.initialConfiguration.sortColumns);
            const originalSortColumnsArray = ServiceUtils.parseSortColumns(this.sortColumns);
            const colToAddInVisibleCol = Util.differenceArrays(originalSortColumnsArray, initialConfigSortColumnsArray);
            if (colToAddInVisibleCol.length > 0) {
                colToAddInVisibleCol.forEach(colAdd => {
                    this.sortColArray.push(colAdd);
                });
            }
            const colToDelInVisibleCol = Util.differenceArrays(initialConfigSortColumnsArray, originalSortColumnsArray);
            if (colToDelInVisibleCol.length > 0) {
                colToDelInVisibleCol.forEach((colDel) => {
                    this.sortColArray.forEach((col, i) => {
                        if (col.columnName === colDel.columnName) {
                            this.sortColArray.splice(i, 1);
                        }
                    });
                });
            }
        }
        for (let i = this.sortColArray.length - 1; i >= 0; i--) {
            const colName = this.sortColArray[i].columnName;
            const oCol = this.getOColumn(colName);
            if (!Util.isDefined(oCol) || !oCol.orderable) {
                this.sortColArray.splice(i, 1);
            }
        }
    }
    ensureColumnsOrder() {
        let columnsOrder = [];
        if (this.state.columnsDisplay) {
            columnsOrder = this.state.columnsDisplay.map(item => item.attr);
        }
        else {
            columnsOrder = this.colArray.filter(attr => this.visibleColArray.indexOf(attr) === -1);
            columnsOrder.push(...this.visibleColArray);
        }
        this._oTableOptions.columns.sort((a, b) => {
            if (columnsOrder.indexOf(a.attr) === -1) {
                return 0;
            }
            else {
                return columnsOrder.indexOf(a.attr) - columnsOrder.indexOf(b.attr);
            }
        });
    }
    initializeParams() {
        if (!this.visibleColumns) {
            this.visibleColumns = this.columns;
        }
        if (this.colArray.length) {
            this.colArray.forEach((x) => this.registerColumn(x));
            this.ensureColumnsOrder();
        }
        this._oTableOptions.filter = this.quickFilter;
        if (this.state.currentPage) {
            this.currentPage = this.state.currentPage;
        }
        if (!this.paginator && this.paginationControls) {
            this.paginator = new OBaseTablePaginator();
            this.paginator.pageSize = this.queryRows;
            this.paginator.pageIndex = this.currentPage;
            this.paginator.showFirstLastButtons = this.showPaginatorFirstLastButtons;
        }
        if (!Util.isDefined(this.selectAllCheckboxVisible)) {
            this._oTableOptions.selectColumn.visible = !!this.state.selectColumnVisible;
        }
        else {
            if (Util.isDefined(this.state.initialConfiguration.selectColumnVisible)
                && this.selectAllCheckboxVisible === this.state.initialConfiguration.selectColumnVisible) {
                this._oTableOptions.selectColumn.visible = !!this.state.selectColumnVisible;
            }
            else {
                this._oTableOptions.selectColumn.visible = this.selectAllCheckboxVisible;
            }
        }
        this.isColumnFiltersActive = this.filterColumnActiveByDefault;
        this.initializeCheckboxColumn();
        if (this.storeState) {
            if (Util.isDefined(this.state.queryRows) && Util.isDefined(this.state.initialConfiguration.queryRows)
                && this.state.initialConfiguration.queryRows === this.originalQueryRows) {
                this.queryRows = this.state.queryRows;
            }
        }
    }
    updateStateExpandedColumn() {
        if (!this.tableRowExpandable || !this.tableRowExpandable.expandableColumnVisible) {
            return;
        }
        if (this._oTableOptions.visibleColumns[0] === Codes.NAME_COLUMN_SELECT && this._oTableOptions.visibleColumns[1] !== Codes.NAME_COLUMN_EXPANDABLE) {
            this._oTableOptions.visibleColumns = [this._oTableOptions.visibleColumns[0]].concat(Codes.NAME_COLUMN_EXPANDABLE, this._oTableOptions.visibleColumns.splice(1));
        }
        else if (this._oTableOptions.visibleColumns[0] !== Codes.NAME_COLUMN_EXPANDABLE) {
            this._oTableOptions.visibleColumns.unshift(Codes.NAME_COLUMN_EXPANDABLE);
        }
    }
    registerTabListener() {
        this.tabGroupChangeSubscription = this.tabGroupContainer.selectedTabChange.subscribe((evt) => {
            let interval;
            const timerCallback = (tab) => {
                if (tab && tab.content.isAttached) {
                    clearInterval(interval);
                    if (tab === this.tabContainer) {
                        this.insideTabBugWorkaround();
                        if (this.pendingQuery) {
                            this.queryData(this.pendingQueryFilter);
                        }
                        this.checkViewportSize();
                    }
                }
            };
            interval = setInterval(() => { timerCallback(evt.tab); }, 100);
        });
    }
    insideTabBugWorkaround() {
        this.refreshSortHeaders();
    }
    registerSortListener() {
        if (Util.isDefined(this.sort)) {
            this.sortSubscription = this.sort.oSortChange.subscribe(this.onSortChange.bind(this));
            this.sort.setMultipleSort(this.multipleSort);
        }
        if (this.sortColumns && this.staticData) {
            this.updateSortingSubject(true);
        }
    }
    updateSortingSubject(value) {
        const ngZone = this.injector.get(NgZone);
        if (ngZone) {
            ngZone.run(() => this.loadingSortingSubject.next(value));
        }
        else {
            this.loadingSortingSubject.next(value);
            if (this.cd && !this.cd.destroyed) {
                this.cd.detectChanges();
            }
        }
    }
    onSortChange(sortArray) {
        this.sortColArray = [];
        sortArray.forEach((sort) => {
            if (sort.direction !== '') {
                this.sortColArray.push({
                    columnName: sort.id,
                    ascendent: sort.direction === Codes.ASC_SORT
                });
            }
        });
        if (this.pageable) {
            this.reloadData();
        }
        else {
            this.updateSortingSubject(true);
        }
    }
    setDatasource() {
        const dataSourceService = this.injector.get(OTableDataSourceService);
        this.dataSource = dataSourceService.getInstance(this);
    }
    registerDataSourceListeners() {
        this.onRenderedDataChange = this.dataSource.onRenderedDataChange.subscribe(() => {
            this.stopEdition();
            this.checkSelectedItemData();
            if (!this.pageable) {
                setTimeout(() => {
                    this.updateSortingSubject(false);
                    if (this.cd && !this.cd.destroyed) {
                        this.cd.detectChanges();
                    }
                }, 500);
            }
        });
    }
    getExpandedRowContainerClass(rowIndex) {
        return OTableComponent.EXPANDED_ROW_CONTAINER_CLASS + rowIndex;
    }
    getExpandableItems() {
        return this.expandableItem.selected;
    }
    toogleRowExpandable(item, rowIndex, event) {
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
        this.expandableItem.toggle(item);
        if (this.portalHost[rowIndex]) {
            this.portalHost[rowIndex].detach();
        }
        if (this.getStateExpand(item) === 'collapsed') {
            const eventTableRowExpandableChange = this.emitTableRowExpandableChangeEvent(item, rowIndex);
            this.tableRowExpandable.onCollapsed.emit(eventTableRowExpandableChange);
        }
        else {
            this.portalHost[rowIndex] = new DomPortalOutlet(this.elRef.nativeElement.querySelector('.' + this.getExpandedRowContainerClass(rowIndex)), this._componentFactoryResolver, this.appRef, this.injector);
            const templatePortal = new TemplatePortal(this.tableRowExpandable.templateRef, this._viewContainerRef, { $implicit: item });
            this.portalHost[rowIndex].attachTemplatePortal(templatePortal);
            const eventTableRowExpandableChange = this.emitTableRowExpandableChangeEvent(item, rowIndex);
            this.tableRowExpandable.onExpanded.emit(eventTableRowExpandableChange);
        }
    }
    emitTableRowExpandableChangeEvent(data, rowIndex) {
        const event = new OTableRowExpandedChange();
        event.rowIndex = rowIndex;
        event.data = data;
        return event;
    }
    isExpanded(data) {
        return this.expandableItem.isSelected(data);
    }
    getStateExpand(row) {
        return this.isExpanded(row) ? 'expanded' : 'collapsed';
    }
    isColumnExpandable() {
        return (Util.isDefined(this.tableRowExpandable) && Util.isDefined(this._oTableOptions.expandableColumn)) ? this._oTableOptions.expandableColumn.visible : false;
    }
    get hasExpandedRow() {
        return Util.isDefined(this.tableRowExpandable);
    }
    hasInsertableRow() {
        return Util.isDefined(this.oTableInsertableRowComponent);
    }
    getNumVisibleColumns() {
        return this.oTableOptions.visibleColumns.length;
    }
    queryData(filter, ovrrArgs) {
        if (this.isInsideInactiveTab()) {
            this.pendingQuery = true;
            this.pendingQueryFilter = filter;
            return;
        }
        this.pendingQuery = false;
        this.pendingQueryFilter = undefined;
        this.queryCellRenderers().subscribe(() => {
            super.queryData(filter, ovrrArgs);
        });
    }
    isInsideInactiveTab() {
        let result = false;
        if (this.tabContainer && this.tabGroupContainer) {
            result = !(this.tabContainer.isActive || (this.tabGroupContainer.selectedIndex === this.tabContainer.position));
        }
        return result;
    }
    getComponentFilter(existingFilter = {}) {
        let filter = existingFilter;
        if (this.pageable) {
            if (Object.keys(filter).length > 0) {
                const parentItemExpr = FilterExpressionUtils.buildExpressionFromObject(filter);
                filter = {};
                filter[FilterExpressionUtils.FILTER_EXPRESSION_KEY] = parentItemExpr;
            }
            const beColFilter = this.getColumnFiltersExpression();
            if (beColFilter && !Util.isDefined(filter[FilterExpressionUtils.FILTER_EXPRESSION_KEY])) {
                filter[FilterExpressionUtils.FILTER_EXPRESSION_KEY] = beColFilter;
            }
            else if (beColFilter) {
                filter[FilterExpressionUtils.FILTER_EXPRESSION_KEY] =
                    FilterExpressionUtils.buildComplexExpression(filter[FilterExpressionUtils.FILTER_EXPRESSION_KEY], beColFilter, FilterExpressionUtils.OP_AND);
            }
        }
        return super.getComponentFilter(filter);
    }
    getQuickFilterExpression() {
        if (Util.isDefined(this.oTableQuickFilterComponent) && this.pageable) {
            return this.oTableQuickFilterComponent.filterExpression;
        }
        return undefined;
    }
    getColumnFiltersExpression() {
        const columnFilters = this.dataSource.getColumnValueFilters();
        const beColumnFilters = [];
        columnFilters.forEach(colFilter => {
            switch (colFilter.operator) {
                case ColumnValueFilterOperator.IN:
                    if (Util.isArray(colFilter.values)) {
                        const besIn = colFilter.values.map(value => FilterExpressionUtils.buildExpressionEquals(colFilter.attr, value));
                        let beIn = besIn.pop();
                        besIn.forEach(be => {
                            beIn = FilterExpressionUtils.buildComplexExpression(beIn, be, FilterExpressionUtils.OP_OR);
                        });
                        beColumnFilters.push(beIn);
                    }
                    break;
                case ColumnValueFilterOperator.BETWEEN:
                    if (Util.isArray(colFilter.values) && colFilter.values.length === 2) {
                        const beFrom = FilterExpressionUtils.buildExpressionMoreEqual(colFilter.attr, colFilter.values[0]);
                        const beTo = FilterExpressionUtils.buildExpressionLessEqual(colFilter.attr, colFilter.values[1]);
                        beColumnFilters.push(FilterExpressionUtils.buildComplexExpression(beFrom, beTo, FilterExpressionUtils.OP_AND));
                    }
                    break;
                case ColumnValueFilterOperator.EQUAL:
                    beColumnFilters.push(FilterExpressionUtils.buildExpressionLike(colFilter.attr, colFilter.values));
                    break;
                case ColumnValueFilterOperator.LESS_EQUAL:
                    beColumnFilters.push(FilterExpressionUtils.buildExpressionLessEqual(colFilter.attr, colFilter.values));
                    break;
                case ColumnValueFilterOperator.MORE_EQUAL:
                    beColumnFilters.push(FilterExpressionUtils.buildExpressionMoreEqual(colFilter.attr, colFilter.values));
                    break;
            }
        });
        let beColFilter = beColumnFilters.pop();
        beColumnFilters.forEach(be => {
            beColFilter = FilterExpressionUtils.buildComplexExpression(beColFilter, be, FilterExpressionUtils.OP_AND);
        });
        return beColFilter;
    }
    updatePaginationInfo(queryRes) {
        super.updatePaginationInfo(queryRes);
    }
    initViewPort(data) {
        if (this.virtualScrollViewport && data) {
            const headerElRef = this.elRef.nativeElement.querySelector(headerSelector);
            const footerElRef = this.elRef.nativeElement.querySelector(footerSelector);
            const rowElRef = this.elRef.nativeElement.querySelector(rowSelector);
            const headerHeight = headerElRef ? headerElRef.offsetHeight : 0;
            const footerHeight = footerElRef ? footerElRef.offsetHeight : 0;
            const rowHeight = rowElRef ? rowElRef.offsetHeight : OTableComponent.DEFAULT_ROW_HEIGHT;
            this.scrollStrategy.setConfig(rowHeight, headerHeight, footerHeight);
            if (this.previousRendererData !== this.dataSource.renderedData) {
                this.scrollStrategy.dataLength = data.length;
            }
        }
    }
    setData(data, sqlTypes) {
        this.daoTable.sqlTypesChange.next(sqlTypes);
        this.daoTable.setDataArray(data);
        this.updateScrolledState();
        if (this.pageable) {
            ObservableWrapper.callEmit(this.onPaginatedDataLoaded, data);
        }
        ObservableWrapper.callEmit(this.onDataLoaded, this.daoTable.data);
    }
    showDialogError(error, errorOptional) {
        if (Util.isDefined(error) && !Util.isObject(error)) {
            this.dialogService.alert('ERROR', error);
        }
        else {
            this.dialogService.alert('ERROR', errorOptional);
        }
    }
    projectContentChanged() {
        setTimeout(() => {
            this.updateSortingSubject(false);
        }, 500);
        this.loadingScrollSubject.next(false);
        this.initViewPort(this.dataSource.renderedData);
        if (this.previousRendererData !== this.dataSource.renderedData) {
            this.previousRendererData = this.dataSource.renderedData;
            ObservableWrapper.callEmit(this.onContentChange, this.dataSource.renderedData);
        }
        if (this.state.selection && this.dataSource.renderedData.length > 0 && this.getSelectedItems().length === 0) {
            this.checkSelectedItemData();
        }
    }
    getAttributesValuesToQuery() {
        const columns = super.getAttributesValuesToQuery();
        if (this.avoidQueryColumns.length > 0) {
            for (let i = columns.length - 1; i >= 0; i--) {
                const col = columns[i];
                if (this.avoidQueryColumns.indexOf(col) !== -1) {
                    columns.splice(i, 1);
                }
            }
        }
        return columns;
    }
    getQueryArguments(filter, ovrrArgs) {
        const queryArguments = super.getQueryArguments(filter, ovrrArgs);
        Object.assign(queryArguments[3], this.getSqlTypesForFilter(queryArguments[1]));
        Object.assign(queryArguments[3], ovrrArgs ? ovrrArgs.sqltypes || {} : {});
        if (this.pageable) {
            queryArguments[5] = this.paginator.isShowingAllRows(queryArguments[5]) ? this.state.totalQueryRecordsNumber : queryArguments[5];
            queryArguments[6] = this.sortColArray;
        }
        return queryArguments;
    }
    getSqlTypesForFilter(filter) {
        const allSqlTypes = this.getSqlTypes();
        const sqlTypes = {};
        Object.keys(allSqlTypes).forEach(key => {
            if (filter.indexOf(key) !== -1 && allSqlTypes[key] !== SQLTypes.OTHER) {
                sqlTypes[key] = allSqlTypes[key];
            }
        });
        return sqlTypes;
    }
    onExportButtonClicked() {
        if (this.oTableMenu) {
            this.oTableMenu.onExportButtonClicked();
        }
    }
    onChangeColumnsVisibilityClicked() {
        if (this.oTableMenu) {
            this.oTableMenu.onChangeColumnsVisibilityClicked();
        }
    }
    onMatTableContentChanged() {
    }
    add() {
        if (!this.checkEnabledActionPermission(PermissionsUtils.ACTION_INSERT)) {
            return;
        }
        super.insertDetail();
    }
    remove(clearSelectedItems = false) {
        if (!this.checkEnabledActionPermission(PermissionsUtils.ACTION_DELETE)) {
            return;
        }
        const selectedItems = this.getSelectedItems();
        if (selectedItems.length === 0) {
            return;
        }
        this.dialogService.confirm('CONFIRM', 'MESSAGES.CONFIRM_DELETE').then(res => {
            if (res === true) {
                if (this.dataService && (this.deleteMethod in this.dataService) && this.entity && (this.keysArray.length > 0)) {
                    const filters = ServiceUtils.getArrayProperties(selectedItems, this.keysArray);
                    const sqlTypesArg = this.getSqlTypesOfKeys();
                    this.daoTable.removeQuery(filters, sqlTypesArg).subscribe(() => {
                        ObservableWrapper.callEmit(this.onRowDeleted, selectedItems);
                    }, error => {
                        this.showDialogError(error, 'MESSAGES.ERROR_DELETE');
                    }, () => {
                        selectedItems.forEach(item => {
                            this.selection.deselect(item);
                        });
                        this.reloadData();
                    });
                }
                else {
                    this.deleteLocalItems();
                }
            }
            else if (clearSelectedItems) {
                this.clearSelection();
            }
        });
    }
    refresh() {
        this.reloadData();
    }
    showAndSelectAllCheckbox() {
        if (this.isSelectionModeMultiple()) {
            if (this.selectAllCheckbox) {
                this._oTableOptions.selectColumn.visible = true;
            }
            this.initializeCheckboxColumn();
            this.selectAll();
        }
    }
    reloadPaginatedDataFromStart(clearSelectedItems = true) {
        if (this.pageable) {
            this.currentPage = 0;
            this.reloadData(clearSelectedItems);
        }
    }
    reloadData(clearSelectedItems = true) {
        if (!this.checkEnabledActionPermission(PermissionsUtils.ACTION_REFRESH)) {
            return;
        }
        this.componentStateService.refreshSelection();
        if (clearSelectedItems) {
            this.clearSelection();
        }
        this.finishQuerySubscription = false;
        this.pendingQuery = true;
        let queryArgs;
        if (this.pageable) {
            queryArgs = {
                offset: this.currentPage * this.queryRows,
                length: this.queryRows
            };
        }
        this.stopEdition(false);
        this.queryData(void 0, queryArgs);
    }
    handleClick(row, column, rowIndex, cellRef, event) {
        this.clickTimer = setTimeout(() => {
            if (!this.clickPrevent) {
                if (this.oenabled && column.editor
                    && (this.detailMode !== Codes.DETAIL_MODE_CLICK)
                    && (this.editionMode === Codes.EDITION_MODE_CLICK)) {
                    this.activateColumnEdition(column, row, cellRef);
                }
                else {
                    this.doHandleClick(row, column.attr, rowIndex, event);
                }
            }
            this.clickPrevent = false;
        }, this.clickDelay);
    }
    doHandleClick(row, column, rowIndex, $event) {
        if (!this.oenabled) {
            return;
        }
        if ((this.detailMode === Codes.DETAIL_MODE_CLICK)) {
            this.onClick.emit({ row: row, rowIndex: rowIndex, mouseEvent: $event, columnName: column, cell: row[column] });
            this.saveDataNavigationInLocalStorage();
            this.clearSelection();
            this.selectedRow(row);
            this.viewDetail(row);
            return;
        }
        if (this.isSelectionModeMultiple() && ($event.ctrlKey || $event.metaKey)) {
            this.selectedRow(row);
            this.onClick.emit({ row: row, rowIndex: rowIndex, mouseEvent: $event, columnName: column, cell: row[column] });
        }
        else if (this.isSelectionModeMultiple() && $event.shiftKey) {
            this.handleMultipleSelection(row);
        }
        else if (!this.isSelectionModeNone()) {
            const selectedItems = this.getSelectedItems();
            if (this.isRowSelected(row) && selectedItems.length === 1 && this.editionEnabled) {
                return;
            }
            else {
                this.clearSelectionAndEditing();
            }
            this.selectedRow(row);
            this.onClick.emit({ row: row, rowIndex: rowIndex, mouseEvent: $event, columnName: column, cell: row[column] });
        }
    }
    handleMultipleSelection(item) {
        if (this.selection.selected.length > 0) {
            const first = this.dataSource.renderedData.indexOf(this.selection.selected[0]);
            const last = this.dataSource.renderedData.indexOf(item);
            const indexFrom = Math.min(first, last);
            const indexTo = Math.max(first, last);
            this.clearSelection();
            this.dataSource.renderedData.slice(indexFrom, indexTo + 1).forEach(e => this.selectedRow(e));
            ObservableWrapper.callEmit(this.onClick, this.selection.selected);
        }
    }
    saveDataNavigationInLocalStorage() {
        super.saveDataNavigationInLocalStorage();
        this.storePaginationState = true;
    }
    handleDoubleClick(row, column, rowIndex, cellRef, $event) {
        clearTimeout(this.clickTimer);
        this.clickPrevent = true;
        if (this.oenabled && column.editor
            && (!Codes.isDoubleClickMode(this.detailMode))
            && (Codes.isDoubleClickMode(this.editionMode))) {
            this.activateColumnEdition(column, row, cellRef);
        }
        else {
            this.onDoubleClick.emit({ row: row, rowIndex: rowIndex, mouseEvent: $event, columnName: column.attr, cell: row[column.attr] });
            if (this.oenabled && Codes.isDoubleClickMode(this.detailMode)) {
                this.saveDataNavigationInLocalStorage();
                this.viewDetail(row);
            }
        }
    }
    get editionEnabled() {
        return this._oTableOptions.columns.some(item => item.editing);
    }
    handleDOMClick(event) {
        if (this._oTableOptions.selectColumn.visible) {
            return;
        }
        if (this.editionEnabled) {
            return;
        }
        const overlayContainer = document.body.getElementsByClassName('cdk-overlay-container')[0];
        if (overlayContainer && overlayContainer.contains(event.target)) {
            return;
        }
        const tableContainer = this.elRef.nativeElement.querySelector('.o-table-container');
        const tableContent = this.elRef.nativeElement.querySelector('.o-table-container table.mat-table');
        if (tableContainer && tableContent && tableContainer.contains(event.target) && !tableContent.contains(event.target)) {
            this.clearSelection();
        }
    }
    activateColumnEdition(column, row, cellRef) {
        if (cellRef && column.editing && this.editingCell === cellRef) {
            return;
        }
        const columnPermissions = this.getOColumnPermissions(column.attr);
        if (columnPermissions.enabled === false) {
            console.warn(`${column.attr} edition not allowed due to permissions`);
            return;
        }
        this.clearSelectionAndEditing();
        this.selectedRow(row);
        this.editingCell = cellRef;
        const rowData = {};
        this.keysArray.forEach((key) => {
            rowData[key] = row[key];
        });
        rowData[column.attr] = row[column.attr];
        this.editingRow = row;
        column.editing = true;
        column.editor.startEdition(rowData);
    }
    updateCellData(column, data, saveChanges) {
        if (!this.checkEnabledActionPermission(PermissionsUtils.ACTION_UPDATE)) {
            const res = new Observable(innerObserver => {
                innerObserver.error();
            });
            return res;
        }
        column.editing = false;
        if (saveChanges && this.editingRow !== undefined) {
            Object.assign(this.editingRow, data);
        }
        this.stopEdition();
        if (saveChanges && column.editor.updateRecordOnEdit) {
            const toUpdate = {};
            toUpdate[column.attr] = data[column.attr];
            const kv = this.extractKeysFromRecord(data);
            return this.updateRecord(kv, toUpdate);
        }
        return undefined;
    }
    getKeysValues() {
        const data = this.getAllValues();
        return data.map((row) => {
            const obj = {};
            this.keysArray.forEach((key) => {
                if (row[key] !== undefined) {
                    obj[key] = row[key];
                }
            });
            return obj;
        });
    }
    onShowsSelects() {
        if (this.oTableMenu) {
            this.oTableMenu.onShowsSelects();
        }
    }
    initializeCheckboxColumn() {
        if (!this.selectionChangeSubscription && this._oTableOptions.selectColumn.visible) {
            this.selectionChangeSubscription = this.selection.changed.subscribe((selectionData) => {
                if (this.triggerSelectionEvents && selectionData) {
                    if (selectionData.added.length > 0) {
                        ObservableWrapper.callEmit(this.onRowSelected, selectionData.added);
                    }
                    if (selectionData.removed.length > 0) {
                        ObservableWrapper.callEmit(this.onRowDeselected, selectionData.removed);
                    }
                }
            });
        }
        this.updateSelectionColumnState();
    }
    updateSelectionColumnState() {
        if (!this._oTableOptions.selectColumn.visible) {
            this.clearSelection();
        }
        if (this._oTableOptions.visibleColumns && this._oTableOptions.selectColumn.visible
            && this._oTableOptions.visibleColumns[0] !== Codes.NAME_COLUMN_SELECT) {
            this._oTableOptions.visibleColumns.unshift(Codes.NAME_COLUMN_SELECT);
        }
        else if (this._oTableOptions.visibleColumns && !this._oTableOptions.selectColumn.visible
            && this._oTableOptions.visibleColumns[0] === Codes.NAME_COLUMN_SELECT) {
            this._oTableOptions.visibleColumns.shift();
        }
        this.updateStateExpandedColumn();
    }
    getNumRowSelectedInCurrentData() {
        return this.dataSource ? this.dataSource.renderedData.filter(x => !this.isDisableCheckbox(x) && this.isRowSelected(x)).length : 0;
    }
    isAllSelected() {
        const numSelected = this.getNumRowSelectedInCurrentData();
        const numRows = this.dataSource ? this.dataSource.renderedData.length : 0;
        return numSelected > 0 && numSelected === numRows;
    }
    isIndeterminate() {
        const numSelected = this.getNumRowSelectedInCurrentData();
        const numRows = this.dataSource ? this.dataSource.renderedData.length : 0;
        return numSelected > 0 && numRows > 0 && numSelected !== numRows;
    }
    masterToggle(event) {
        event.checked ? this.selectAll() : this.clearSelection();
    }
    selectAll() {
        this.dataSource.renderedData.forEach(row => this.setSelected(row));
    }
    selectionCheckboxToggle(event, row) {
        if (this.isSelectionModeSingle()) {
            this.clearSelection();
        }
        event.checked ? this.selectedRow(row) : this.selection.deselect(row);
        this.state.selection = this.selection.selected;
    }
    selectedRow(row) {
        this.setSelected(row);
        this.cd.detectChanges();
    }
    clearSelection() {
        if (Util.isDefined(this.selection)) {
            this.selection.clear();
        }
        if (Util.isDefined(this.state)) {
            this.state.selection = [];
        }
    }
    setSelected(item) {
        if (this.isDisableCheckbox(item)) {
            return;
        }
        if (Util.isDefined(item) && !this.isRowSelected(item)) {
            this.selection.select(item);
        }
    }
    get showDeleteButton() {
        return this.deleteButton;
    }
    getTrackByFunction() {
        const self = this;
        return (index, item) => {
            let itemId = '';
            if (this.isGroup(index, item)) {
                itemId += item.column;
            }
            else {
                const keysLenght = self.keysArray.length;
                self.keysArray.forEach((key, idx) => {
                    const suffix = idx < (keysLenght - 1) ? ';' : '';
                    itemId += item[key] + suffix;
                });
            }
            const hasAsyncAndVisibleCols = this.asyncLoadColumns.some(c => this._oTableOptions.visibleColumns.includes(c));
            if (self.asyncLoadColumns.length && hasAsyncAndVisibleCols && !self.finishQuerySubscription) {
                self.queryRowAsyncData(index, item);
                if (self.paginator && index === (self.paginator.pageSize - 1)) {
                    self.finishQuerySubscription = true;
                }
                return itemId;
            }
            else {
                return itemId;
            }
        };
    }
    queryRowAsyncData(rowIndex, rowData) {
        const kv = ServiceUtils.getObjectProperties(rowData, this.keysArray);
        const av = this.asyncLoadColumns.filter(c => this._oTableOptions.visibleColumns.indexOf(c) !== -1);
        if (av.length === 0) {
            return;
        }
        const columnQueryArgs = [kv, av, this.entity, undefined, undefined, undefined, undefined];
        const queryMethodName = this.pageable ? this.paginatedQueryMethod : this.queryMethod;
        if (this.dataService && (queryMethodName in this.dataService) && this.entity) {
            if (this.asyncLoadSubscriptions[rowIndex]) {
                this.asyncLoadSubscriptions[rowIndex].unsubscribe();
            }
            this.asyncLoadSubscriptions[rowIndex] = this.dataService[queryMethodName]
                .apply(this.dataService, columnQueryArgs)
                .subscribe((res) => {
                if (res.isSuccessful()) {
                    let data;
                    if (Util.isArray(res.data) && res.data.length === 1) {
                        data = res.data[0];
                    }
                    else if (Util.isObject(res.data)) {
                        data = res.data;
                    }
                    this.daoTable.setAsynchronousColumn(data, rowData);
                    this.cd.detectChanges();
                }
            });
        }
    }
    getValue() {
        return this.dataSource.getCurrentData();
    }
    getAllValues() {
        return this.dataSource.getCurrentAllData();
    }
    getAllRenderedValues() {
        return this.dataSource.getAllRendererData();
    }
    getRenderedValue() {
        return this.dataSource.getCurrentRendererData();
    }
    getSqlTypes() {
        const allSqlTypes = Util.isDefined(this.dataSource.sqlTypes) ? this.dataSource.sqlTypes : {};
        this._oTableOptions.columns.forEach((col) => {
            if (col.sqlType) {
                allSqlTypes[col.attr] = col.sqlType;
            }
        });
        return allSqlTypes;
    }
    setOTableColumnsFilter(tableColumnsFilter) {
        this.oTableColumnsFilterComponent = tableColumnsFilter;
    }
    get filterColumns() {
        if (this.state.initialConfiguration.filterColumns === this.originalFilterColumns
            && this.state.filterColumns) {
            return this.state.filterColumns;
        }
        return this.originalFilterColumns;
    }
    get originalFilterColumns() {
        let sortColumnsFilter = [];
        if (this.oTableColumnsFilterComponent) {
            sortColumnsFilter = this.oTableColumnsFilterComponent.columnsArray;
        }
        return sortColumnsFilter;
    }
    get originalGroupedColumnsArray() {
        return Util.parseArray(this.groupedColumns, true);
    }
    getStoredColumnsFilters() {
        return this.state.storedFilters;
    }
    getStoredGroupedColumns() {
        return this.state.storedConfigurations;
    }
    onFilterByColumnClicked() {
        if (this.oTableMenu) {
            this.oTableMenu.onFilterByColumnClicked();
        }
    }
    onStoreFilterClicked() {
        if (this.oTableMenu) {
            this.oTableMenu.onStoreFilterClicked();
        }
    }
    onLoadFilterClicked() {
        if (this.oTableMenu) {
            this.oTableMenu.onLoadFilterClicked();
        }
    }
    onClearFilterClicked() {
        if (this.oTableMenu) {
            this.oTableMenu.onClearFilterClicked();
        }
    }
    clearFilters(triggerDatasourceUpdate = true) {
        this.dataSource.clearColumnFilters(triggerDatasourceUpdate);
        if (this.oTableMenu && this.oTableMenu.columnFilterOption) {
            this.oTableMenu.columnFilterOption.setActive(this.isColumnFiltersActive);
        }
        this.onFilterByColumnChange.emit();
        if (this.oTableQuickFilterComponent) {
            this.oTableQuickFilterComponent.setValue(void 0);
        }
        if (this.filterBuilder) {
            this.filterBuilder.clearFilter();
            this.filterBuilder.triggerReload();
        }
    }
    clearColumnFilter(attr, triggerDatasourceUpdate = true) {
        this.dataSource.clearColumnFilter(attr, triggerDatasourceUpdate);
        this.onFilterByColumnChange.emit();
        this.reloadPaginatedDataFromStart(false);
    }
    filterByColumn(columnValueFilter) {
        this.dataSource.addColumnFilter(columnValueFilter);
        this.onFilterByColumnChange.emit();
        if (this.pageable) {
            this.reloadPaginatedDataFromStart(false);
        }
    }
    clearColumnFilters(triggerDatasourceUpdate = true, columnsAttr) {
        this.dataSource.clearColumnFilters(triggerDatasourceUpdate, columnsAttr);
        this.onFilterByColumnChange.emit();
        this.reloadPaginatedDataFromStart(false);
    }
    isColumnFilterable(column) {
        return Util.isDefined(this.oTableColumnsFilterComponent) ? this.oTableColumnsFilterComponent.isColumnFilterable(column.attr) : this.isSearcheableColumn(column);
    }
    isSearcheableColumn(column) {
        return this.searcheableColumns.includes(column.attr);
    }
    isColumnFilterActive(column) {
        return this.isColumnFiltersActive && Util.isDefined(this.dataSource.getColumnValueFilterByAttr(column.attr));
    }
    openColumnFilterDialog(column, event) {
        event.stopPropagation();
        event.preventDefault();
        const dialogRef = this.dialog.open(OTableFilterByColumnDataDialogComponent, {
            data: {
                previousFilter: this.dataSource.getColumnValueFilterByAttr(column.attr),
                column: column,
                activeSortDirection: this.getSortFilterColumn(column),
                tableData: this.dataSource.getCurrentData(),
                preloadValues: this.oTableColumnsFilterComponent ? this.oTableColumnsFilterComponent.preloadValues : true,
                mode: this.oTableColumnsFilterComponent ? this.oTableColumnsFilterComponent.mode : 'default',
                startView: this.getStartViewFilterColumn(column)
            },
            minWidth: '380px',
            disableClose: true,
            panelClass: ['o-dialog-class', 'o-table-dialog']
        });
        dialogRef.afterClosed().subscribe(result => {
            switch (result) {
                case TableFilterByColumnDialogResult.ACCEPT:
                    const columnValueFilter = dialogRef.componentInstance.getColumnValuesFilter();
                    this.filterByColumn(columnValueFilter);
                    break;
                case TableFilterByColumnDialogResult.CLEAR:
                    const col = dialogRef.componentInstance.column;
                    this.clearColumnFilter(col.attr);
                    break;
            }
        });
        dialogRef.componentInstance.onSortFilterValuesChange.subscribe(sortedFilterableColumn => {
            this.storeFilterColumns(sortedFilterableColumn);
        });
    }
    storeFilterColumns(sortColumnFilter) {
        if (this.state.filterColumns) {
            const filterColumn = this.filterColumns.find(x => x.attr === sortColumnFilter.attr);
            if (Util.isDefined(filterColumn)) {
                filterColumn.sort = sortColumnFilter.sort;
            }
            else {
                this.filterColumns.push(sortColumnFilter);
            }
        }
        this.state.filterColumns = this.filterColumns;
    }
    getStartViewFilterColumn(column) {
        let startView;
        if (this.state.filterColumns) {
            this.state.filterColumns.forEach((element) => {
                if (element.attr === column.attr) {
                    startView = element.startView;
                }
            });
        }
        if (!Util.isDefined(startView) && this.oTableColumnsFilterComponent) {
            startView = this.oTableColumnsFilterComponent.getStartViewValueOfFilterColumn(column.attr);
        }
        return startView;
    }
    getSortFilterColumn(column) {
        let sortColumn;
        if (this.state.filterColumns) {
            const filterCol = this.state.filterColumns.find((element) => element.attr === column.attr);
            if (filterCol) {
                sortColumn = filterCol.sort;
            }
        }
        if (!Util.isDefined(sortColumn) && this.oTableColumnsFilterComponent) {
            sortColumn = this.oTableColumnsFilterComponent.getSortValueOfFilterColumn(column.attr);
        }
        if (!Util.isDefined(sortColumn) && this.sortColArray.find(x => x.columnName === column.attr)) {
            sortColumn = this.isColumnSortActive(column) ? 'asc' : 'desc';
        }
        return sortColumn;
    }
    get disableTableMenuButton() {
        return !!(this.permissions && this.permissions.menu && this.permissions.menu.enabled === false);
    }
    get showTableMenuButton() {
        const permissionHidden = !!(this.permissions && this.permissions.menu && this.permissions.menu.visible === false);
        if (permissionHidden) {
            return false;
        }
        const staticOpt = this.selectAllCheckbox || this.exportButton || this.showConfigurationOption || this.columnsVisibilityButton || (this.showFilterOption && this.oTableColumnsFilterComponent !== undefined);
        return staticOpt || this.tableOptions.length > 0;
    }
    setOTableInsertableRow(tableInsertableRow) {
        const insertPerm = this.getActionPermissions(PermissionsUtils.ACTION_INSERT);
        if (insertPerm.visible) {
            tableInsertableRow.enabled = insertPerm.enabled;
            this.oTableInsertableRowComponent = tableInsertableRow;
            this.showFirstInsertableRow = this.oTableInsertableRowComponent.isFirstRow();
            this.showLastInsertableRow = !this.showFirstInsertableRow;
            this.oTableInsertableRowComponent.initializeEditors();
        }
    }
    clearSelectionAndEditing(clearSelection = true) {
        if (clearSelection) {
            this.clearSelection();
        }
        this._oTableOptions.columns
            .filter(oColumn => oColumn.editing)
            .forEach(oColumn => {
            oColumn.editing = false;
        });
    }
    checkSelectedItemData() {
        this.triggerSelectionEvents = false;
        if (Util.isDefined(this.state.selection) && this.state.selection.length > 0) {
            this.state.selection.forEach(selectedItem => {
                const selectedItemKeys = Object.keys(selectedItem);
                const foundItem = this.dataSource.renderedData.find(data => selectedItemKeys.every(key => data[key] === selectedItem[key]));
                if (foundItem && !this.isRowSelected(foundItem)) {
                    this.setSelected(foundItem);
                }
            });
        }
        this.triggerSelectionEvents = true;
    }
    useDetailButton(column) {
        return column.type === 'editButtonInRow' || column.type === 'detailButtonInRow';
    }
    onDetailButtonClick(column, row, event) {
        event.preventDefault();
        event.stopPropagation();
        switch (column.type) {
            case 'editButtonInRow':
                this.editDetail(row);
                break;
            case 'detailButtonInRow':
                this.viewDetail(row);
                break;
        }
    }
    getDetailButtonIcon(column) {
        let result = '';
        switch (column.type) {
            case 'editButtonInRow':
                result = this.editButtonInRowIcon;
                break;
            case 'detailButtonInRow':
                result = this.detailButtonInRowIcon;
                break;
        }
        return result;
    }
    usePlainRender(column, row) {
        return !this.useDetailButton(column) && !column.renderer && (!column.editor || (!column.editing || !this.isRowSelected(row)));
    }
    useCellRenderer(column, row) {
        return column.renderer && (!column.editing || column.editing && !this.isRowSelected(row));
    }
    useCellEditor(column, row) {
        if (column.editor && column.editor.autoCommit) {
            return false;
        }
        return column.editor && column.editing && this.isRowSelected(row);
    }
    isSelectionModeMultiple() {
        return this.selectionMode === Codes.SELECTION_MODE_MULTIPLE;
    }
    isSelectionModeSingle() {
        return this.selectionMode === Codes.SELECTION_MODE_SINGLE;
    }
    isSelectionModeNone() {
        return this.selectionMode === Codes.SELECTION_MODE_NONE;
    }
    onChangePage(evt) {
        this.finishQuerySubscription = false;
        if (!this.pageable) {
            this.currentPage = evt.pageIndex;
            return;
        }
        const goingBack = evt.pageIndex < this.currentPage;
        this.currentPage = evt.pageIndex;
        const pageSize = this.paginator.isShowingAllRows(evt.pageSize) ? this.state.totalQueryRecordsNumber : evt.pageSize;
        const oldQueryRows = this.queryRows;
        const changingPageSize = (oldQueryRows !== pageSize);
        this.queryRows = pageSize;
        this.paginator.pageSize = pageSize;
        let newStartRecord;
        let queryLength;
        if (goingBack || changingPageSize) {
            newStartRecord = (this.currentPage * this.queryRows);
            queryLength = this.queryRows;
        }
        else {
            newStartRecord = Math.max(this.state.queryRecordOffset, (this.currentPage * this.queryRows));
            const newEndRecord = Math.min(newStartRecord + this.queryRows, this.state.totalQueryRecordsNumber);
            queryLength = Math.min(this.queryRows, newEndRecord - newStartRecord);
        }
        const queryArgs = {
            offset: newStartRecord,
            length: queryLength
        };
        this.finishQuerySubscription = false;
        this.queryData(void 0, queryArgs);
    }
    getOColumn(attr) {
        return this._oTableOptions ? this._oTableOptions.columns.find(item => item.name === attr) : undefined;
    }
    insertRecord(recordData, sqlTypes) {
        if (!this.checkEnabledActionPermission(PermissionsUtils.ACTION_INSERT)) {
            return undefined;
        }
        if (!Util.isDefined(sqlTypes)) {
            const allSqlTypes = this.getSqlTypes();
            sqlTypes = {};
            Object.keys(recordData).forEach(key => {
                sqlTypes[key] = allSqlTypes[key];
            });
        }
        return this.daoTable.insertQuery(recordData, sqlTypes);
    }
    updateRecord(filter, updateData, sqlTypes) {
        if (!this.checkEnabledActionPermission(PermissionsUtils.ACTION_UPDATE)) {
            return of(this.dataSource.data);
        }
        const sqlTypesArg = sqlTypes || {};
        if (!Util.isDefined(sqlTypes)) {
            const allSqlTypes = this.getSqlTypes();
            Object.keys(filter).forEach(key => {
                sqlTypesArg[key] = allSqlTypes[key];
            });
            Object.keys(updateData).forEach(key => {
                sqlTypesArg[key] = allSqlTypes[key];
            });
        }
        return this.daoTable.updateQuery(filter, updateData, sqlTypesArg);
    }
    getDataArray() {
        return this.daoTable.data;
    }
    setDataArray(data) {
        if (this.daoTable) {
            this.pageable = false;
            this.staticData = data;
            this.daoTable.usingStaticData = true;
            this.daoTable.setDataArray(this.staticData);
            this.onDataLoaded.emit(this.daoTable.data);
        }
    }
    deleteLocalItems() {
        const dataArray = this.getDataArray();
        const selectedItems = this.getSelectedItems();
        selectedItems.forEach((selectedItem) => {
            for (let j = dataArray.length - 1; j >= 0; --j) {
                if (Util.equals(selectedItem, dataArray[j])) {
                    dataArray.splice(j, 1);
                    break;
                }
            }
        });
        this.clearSelection();
        this.setDataArray(dataArray);
    }
    isColumnSortActive(column) {
        const found = this.sortColArray.find(sortC => sortC.columnName === column.attr);
        return found !== undefined;
    }
    isColumnDescSortActive(column) {
        const found = this.sortColArray.find(sortC => sortC.columnName === column.attr && !sortC.ascendent);
        return found !== undefined;
    }
    hasTabGroupChangeSubscription() {
        return this.tabGroupChangeSubscription !== undefined;
    }
    isEmpty(value) {
        return !Util.isDefined(value) || ((typeof value === 'string') && !value);
    }
    setFiltersConfiguration(storage = this.state) {
        if (storage.initialConfiguration.filterCaseSensitive !== this.filterCaseSensitive) {
            this._oTableOptions.filterCaseSensitive = this.filterCaseSensitive;
        }
        else {
            this._oTableOptions.filterCaseSensitive = storage.hasOwnProperty('filter-case-sensitive') ? storage['filter-case-sensitive'] : this.filterCaseSensitive;
        }
        if (storage.initialConfiguration.filterColumnActiveByDefault !== this.filterColumnActiveByDefault) {
            this.isColumnFiltersActive = this.filterColumnActiveByDefault;
        }
        else {
            const confFilterColumnActiveByDefault = storage.hasOwnProperty('filter-column-active') ? storage['filter-column-active'] : this.filterColumnActiveByDefault;
            this.isColumnFiltersActive = confFilterColumnActiveByDefault || this.state.columnValueFilters.length > 0;
        }
        if (Util.isDefined(storage.columnValueFilters)) {
            this.dataSource.initializeColumnsFilters(this.state.columnValueFilters);
            this.onFilterByColumnChange.emit();
        }
        if (this.oTableQuickFilterComponent) {
            this.oTableQuickFilterComponent.setValue(storage['filter']);
            (storage['oColumns'] || []).forEach((oColData) => {
                const oCol = this.getOColumn(oColData.attr);
                if (oCol && oColData.hasOwnProperty('searching')) {
                    oCol.searching = oColData.searching;
                }
            });
        }
        if (this.filterBuilder && Util.isDefined(storage.filterBuilderValues)) {
            this.filterBuilder.setFilterValues(storage.filterBuilderValues);
            this.filterBuilder.triggerReload();
        }
    }
    onStoreConfigurationClicked() {
        if (this.oTableMenu) {
            this.oTableMenu.onStoreConfigurationClicked();
        }
    }
    onApplyConfigurationClicked() {
        if (this.oTableMenu) {
            this.oTableMenu.onApplyConfigurationClicked();
        }
    }
    applyDefaultConfiguration() {
        this.initializeParams();
        this.parseVisibleColumns(true);
        this.reinitializateQuickFilterColumns();
        this.resetQueryRows();
        const initialConfigSortColumnsArray = ServiceUtils.parseSortColumns(this.state.initialConfiguration.sortColumns);
        this.reinitializeSortColumns(initialConfigSortColumnsArray);
        this.onReinitialize.emit(null);
        this.clearFilters(false);
        this.reloadData();
    }
    resetQueryRows() {
        if (Util.isDefined(this.state.initialConfiguration.queryRows)) {
            this.queryRows = this.state.initialConfiguration.queryRows;
        }
    }
    applyConfiguration(configurationName) {
        const storedConfiguration = this.state.getStoredConfiguration(configurationName);
        if (storedConfiguration) {
            const properties = storedConfiguration['stored-properties'] || [];
            properties.forEach(property => {
                switch (property) {
                    case 'sort-columns':
                        this.reinitializeSortColumns();
                        break;
                    case 'oColumns-display':
                        this.parseVisibleColumns();
                        this.initializeCheckboxColumn();
                        break;
                    case 'quick-filter':
                    case 'columns-filter':
                    case 'filter-builder':
                        this.setFiltersConfiguration();
                        break;
                    case 'grouped-columns':
                        this.parseGroupedColumns();
                        break;
                    case 'page':
                        this.currentPage = this.state.currentPage;
                        this.queryRows = this.state.queryRows;
                        break;
                }
            });
            this.reloadData();
        }
    }
    getTitleAlignClass(oCol) {
        let align;
        const hasTitleAlign = Util.isDefined(oCol.definition) && Util.isDefined(oCol.definition.titleAlign);
        const autoAlign = (this.autoAlignTitles && !hasTitleAlign) || (hasTitleAlign && oCol.definition.titleAlign === Codes.COLUMN_TITLE_ALIGN_AUTO);
        if (!autoAlign) {
            return oCol.getTitleAlignClass();
        }
        switch (oCol.type) {
            case 'image':
            case 'date':
            case 'action':
            case 'boolean':
                align = Codes.COLUMN_TITLE_ALIGN_CENTER;
                break;
            case 'currency':
            case 'integer':
            case 'real':
            case 'percentage':
                align = Codes.COLUMN_TITLE_ALIGN_END;
                break;
            case 'service':
            default:
                align = Codes.COLUMN_TITLE_ALIGN_START;
                break;
        }
        return align;
    }
    getCellAlignClass(column) {
        return Util.isDefined(column.definition) && Util.isDefined(column.definition.contentAlign) ? 'o-' + column.definition.contentAlign : '';
    }
    getGroupHeaderCellAlignClass(column) {
        const classNameArray = [];
        const oCol = this.getOColumn(column.substr('groupHeader-'.length));
        if (Util.isDefined(oCol)) {
            classNameArray.push(this.getCellAlignClass(oCol));
            classNameArray.push(oCol.className ? oCol.className : '');
        }
        return classNameArray;
    }
    addDefaultRowButtons() {
        if (this.editButtonInRow) {
            this.addButtonInRow('editButtonInRow');
        }
        if (this.detailButtonInRow) {
            this.addButtonInRow('detailButtonInRow');
        }
    }
    addButtonInRow(name) {
        const colDef = this.createOColumn(name, this);
        colDef.type = name;
        colDef.visible = true;
        colDef.searchable = false;
        colDef.orderable = false;
        colDef.resizable = false;
        colDef.groupable = false;
        colDef.title = undefined;
        colDef.width = '48px';
        this.pushOColumnDefinition(colDef);
        this._oTableOptions.visibleColumns.push(name);
    }
    get headerHeight() {
        let height = 0;
        if (this.tableHeaderEl && this.tableHeaderEl.nativeElement) {
            height += this.tableHeaderEl.nativeElement.offsetHeight;
        }
        if (this.tableToolbarEl && this.tableToolbarEl.nativeElement) {
            height += this.tableToolbarEl.nativeElement.offsetHeight;
        }
        return height;
    }
    isDetailMode() {
        return this.detailMode !== Codes.DETAIL_MODE_NONE;
    }
    copyAll() {
        Util.copyToClipboard(JSON.stringify(this.getRenderedValue()));
    }
    copySelection() {
        const selectedItems = this.dataSource.getRenderedData(this.getSelectedItems());
        Util.copyToClipboard(JSON.stringify(selectedItems));
    }
    viewDetail(item) {
        if (!this.checkEnabledActionPermission('detail')) {
            return;
        }
        super.viewDetail(item);
    }
    editDetail(item) {
        if (!this.checkEnabledActionPermission('edit')) {
            return;
        }
        super.editDetail(item);
    }
    getOColumnFromTh(th) {
        let result;
        const classList = [].slice.call(th.classList);
        const columnClass = classList.find((className) => (className.startsWith('mat-column-')));
        if (Util.isDefined(columnClass)) {
            result = this.getOColumn(columnClass.substr('mat-column-'.length));
        }
        return result;
    }
    getOColumnFromGroupHeaderColumn(attr) {
        return this.getOColumn(attr.substr('groupHeader-'.length));
    }
    getThWidthFromOColumn(oColumn) {
        let widthColumn;
        const thArray = this.tableHeaderEl.nativeElement.children;
        for (let i = 0; i < thArray.length && !Util.isDefined(widthColumn); i++) {
            const th = thArray[i];
            const classList = th.classList;
            for (let j = 0; j < classList.length && !Util.isDefined(widthColumn); j++) {
                if (classList[j] === 'mat-column-' + oColumn.attr) {
                    widthColumn = th.clientWidth;
                }
            }
        }
        return widthColumn;
    }
    getColumnInsertable(name) {
        return name + this.getSuffixColumnInsertable();
    }
    isRowSelected(row) {
        const keys = Object.keys(row);
        return !this.isSelectionModeNone() && this.selection.selected.some((element) => keys.every(key => row[key] === element[key]));
    }
    refreshColumnsWidth() {
        setTimeout(() => {
            this._oTableOptions.columns.filter(c => c.visible).forEach(c => {
                if (Util.isDefined(c.definition) && Util.isDefined(c.definition.width)) {
                    c.width = c.definition.width;
                }
                c.setRenderWidth(this.horizontalScroll, this.getClientWidthColumn(c));
            });
            this.cd.detectChanges();
        }, 0);
    }
    createOColumn(attr, table, column) {
        const instance = new OColumn();
        if (attr) {
            instance.attr = attr;
        }
        if (table) {
            instance.setDefaultProperties({
                orderable: this.orderable,
                resizable: this.resizable,
                groupable: this.groupable
            });
        }
        if (column) {
            instance.setColumnProperties(column);
        }
        return instance;
    }
    registerOTableButtons(arg) {
        this.oTableButtons = arg;
        if (this.oTableButtons && this.tableButtons && this.tableButtons.length > 0) {
            this.oTableButtons.registerButtons(this.tableButtons.toArray());
        }
    }
    getClientWidthColumn(col) {
        return col.DOMWidth || this.getThWidthFromOColumn(col);
    }
    getMinWidthColumn(col) {
        return Util.extractPixelsValue(col.minWidth, Codes.DEFAULT_COLUMN_MIN_WIDTH) + 'px';
    }
    showExpandableRow() {
        return Util.isDefined(this.tableRowExpandable);
    }
    get enabledVirtualScroll() {
        return this.virtualScroll && !this.showExpandableRow() && this.groupedColumnsArray.length === 0;
    }
    parseGroupedColumns() {
        let result = this.state.groupedColumns || this.originalGroupedColumnsArray;
        if (this.state.groupedColumns && this.state.initialConfiguration.groupedColumns) {
            const difference = this.state.initialConfiguration.groupedColumns
                .filter(x => !this.originalGroupedColumnsArray.includes(x));
            if (difference.length > 0) {
                result = this.originalGroupedColumnsArray;
            }
        }
        this.setGroupColumns(result);
    }
    parseGroupedColumnTypes() {
        this.groupedColumnTypes = this.state.groupedColumnTypes;
    }
    groupByColumn(column, type) {
        this.checkGroupByColumn(column.attr, true);
        if (type) {
            this.updateGroupedColumnTypes(column.attr, true, type);
        }
        this.dataSource.updateGroupedColumns();
    }
    unGroupByColumn(column) {
        this.checkGroupByColumn(column.attr, false);
        this.updateGroupedColumnTypes(column.attr, false);
        this.dataSource.updateGroupedColumns();
    }
    unGroupByAllColumns() {
        this.setGroupColumns([]);
        this.groupedColumnTypes = [];
    }
    setGroupColumns(value) {
        this.groupedColumnsArray = value;
        this.dataSource.updateGroupedColumns();
    }
    setGroupedColumnTypes(value) {
        this.groupedColumnTypes = value;
    }
    checkGroupByColumn(field, add) {
        let found = null;
        for (const column of this.groupedColumnsArray) {
            if (column === field) {
                found = this.groupedColumnsArray.indexOf(column, 0);
            }
        }
        if (found != null && found >= 0) {
            if (!add) {
                this.groupedColumnsArray.splice(found, 1);
            }
        }
        else {
            if (add) {
                this.groupedColumnsArray.push(field);
            }
        }
    }
    isGroup(index, item) {
        return item instanceof OTableGroupedRow;
    }
    isNotGroup(index, item) {
        return !(item instanceof OTableGroupedRow);
    }
    getLastGroups() {
        const scores = this.dataSource.renderedData;
        const maxLevel = scores.reduce((acc, curr) => curr.level > acc ? curr.level : acc, 0);
        const maxLevelRenderedData = scores.reduce((r, o) => o.level === maxLevel ? [...r, o] : r, []);
        return maxLevelRenderedData.length;
    }
    groupHeaderClick(row) {
        this.dataSource.toggleGroupByColumn(row);
    }
    isInstanceOfOTableCellRendererServiceComponent(renderer) {
        return Util.isDefined(renderer) && renderer.onDataLoaded && renderer.queryAllData;
    }
    getColumnDataByAttr(attr, row) {
        let operation = null;
        if (this.groupedColumnTypes.length != 0 && this.groupedColumnTypes.findIndex(column => column.attr == attr) != -1) {
            operation = this.groupedColumnTypes[this.groupedColumnTypes.findIndex(column => column.attr == attr)].type;
        }
        const oCol = this.getOColumn(attr);
        if (!Util.isDefined(oCol)) {
            return row[attr];
        }
        const useRenderer = oCol.renderer && oCol.renderer.getCellData;
        if (operation == null) {
            return useRenderer ? oCol.renderer.getCellData(row[oCol.attr], row) : row[oCol.attr];
        }
        else {
            const date = moment(row[oCol.attr]);
            const language = this.translateService.getCurrentLang();
            switch (operation) {
                case "YEAR": return date.year();
                case "MONTH": return moment().locale(language).month(date.month()).format("MMMM");
                case "YEAR_MONTH": return moment().locale(language).month(date.month()).year(date.year()).format("MMMM, YYYY");
                case "YEAR_MONTH_DAY": return useRenderer ? oCol.renderer.getCellData(row[oCol.attr], row) : row[oCol.attr];
            }
        }
    }
    updateGroupedColumnTypes(attr, add, operation) {
        let groupedColumns = [];
        let index = this.groupedColumnTypes.findIndex(column => column.attr == attr);
        if (index != -1) {
            if (!add) {
                this.groupedColumnTypes.splice(index, 1);
            }
        }
        else {
            if (add) {
                this.groupedColumnTypes.push({ "attr": attr, "type": operation });
            }
        }
        this.state.groupedColumnTypes = groupedColumns;
    }
    getClassNameGroupHeader(row) {
        let className = '';
        if (row.level <= 10) {
            className = 'o-table-group-row o-table-group-row-level-' + row.level;
        }
        return className;
    }
    stopEdition(clearSelection) {
        clearSelection = clearSelection ? clearSelection : false;
        this.editingCell = undefined;
        this.editingRow = undefined;
        this.clearSelectionAndEditing(clearSelection);
    }
    storeFilterInState(arg) {
        this.componentStateService.storeFilter(arg);
    }
    reinitializateQuickFilterColumns() {
        this._oTableOptions.columns
            .filter(column => column.searchable && column.visible)
            .forEach(column => column.searching = true);
    }
    reinitializeSortColumns(sortColumns) {
        this.tableHeaders = [];
        if (Util.isDefined(sortColumns)) {
            this.sortColArray = sortColumns;
        }
        else {
            this.parseSortColumns();
        }
        this.sort.setSortColumns(this.sortColArray);
        this.refreshSortHeaders();
    }
    refreshSortHeaders() {
        this.tableHeaders.filter(header => Util.isDefined(header.matSortHeader)).forEach(header => header.matSortHeader.refresh());
    }
    getQuickFilterValue() {
        return Util.isDefined(this.oTableQuickFilterComponent) ?
            this.oTableQuickFilterComponent.value :
            '';
    }
    queryCellRenderers() {
        const quickFilterValue = this.getQuickFilterValue();
        if (Util.isDefined(quickFilterValue) && quickFilterValue.length > 0) {
            const queries = this.oTableOptions.columns
                .filter(oCol => oCol.searching && this.isInstanceOfOTableCellRendererServiceComponent(oCol.renderer))
                .map(oCol => oCol.renderer.queryAllData());
            return queries.length > 0 ? combineLatest(queries) : of(null);
        }
        return of(null);
    }
    tableQuickFilterChanged(value) {
        if (this.pageable) {
            this.queryCellRenderers().subscribe(() => {
                this.reloadPaginatedDataFromStart(false);
            });
        }
        else {
            if (value && value.length) {
                this.dataSource.quickFilter = value;
            }
        }
    }
    filterData(value, loadMore) {
    }
    setOTableColumnsGrouping(value) {
        this.oTableColumnsGroupingComponent = value;
    }
    getColumnGroupingComponent(columnAttr) {
        let result;
        if (Util.isDefined(this.oTableColumnsGroupingComponent)) {
            result = this.oTableColumnsGroupingComponent.getColumnGrouping(columnAttr);
        }
        return result;
    }
    useColumnGroupingAggregate(columnAttr) {
        const oCol = this.getOColumn(columnAttr);
        if (!Util.isDefined(oCol)) {
            return false;
        }
        const sqlType = this.getSqlTypes()[columnAttr];
        const hasDefaultAggregate = SQLTypes.isNumericSQLType(sqlType)
            && (!Util.isDefined(oCol.renderer) || OTableComponent.AVAILABLE_GROUPING_COLUMNS_RENDERERS.includes(oCol.type));
        if (!Util.isDefined(this.oTableColumnsGroupingComponent)) {
            return hasDefaultAggregate;
        }
        return this.oTableColumnsGroupingComponent.useColumnAggregate(columnAttr, hasDefaultAggregate);
    }
    checkViewportSize() {
        if (this.virtualScrollViewport) {
            this.virtualScrollViewport.checkViewportSize();
        }
    }
    showExpandableIcon(row, rowIndex) {
        return (Util.isDefined(this.showExpandableIconFunction) && this.showExpandableIconFunction instanceof Function) ? Util.wrapIntoObservable(this.showExpandableIconFunction(row, rowIndex)) : of(true);
    }
    getColumnsNotIncluded() {
        let colsNotIncluded = [];
        colsNotIncluded = this.oTableOptions.columns.filter(c => void 0 !== c.renderer && c.type === 'image').map(c => c.attr);
        colsNotIncluded.push(Codes.NAME_COLUMN_SELECT);
        colsNotIncluded.push(Codes.NAME_COLUMN_EXPANDABLE);
        return colsNotIncluded;
    }
    getColumnNames(columns) {
        const tableColumnNames = {};
        columns.forEach(c => {
            const oColumn = this._oTableOptions.columns.find(oc => oc.attr === c);
            tableColumnNames[c] = this.translateService.get(oColumn.title ? oColumn.title : oColumn.attr);
        });
        return tableColumnNames;
    }
    resetColumnsWidth() {
        this._oTableOptions.columns.forEach(c => {
            if (Util.isDefined(c.definition)) {
                c.width = Util.isDefined(c.definition.width) ? c.definition.width : c.definition.originalWidth;
            }
            else {
                c.width = "auto";
            }
        });
        this.cd.detectChanges();
        this.updateColumnsDOMWidth();
    }
    updateColumnsDOMWidth() {
        this._oTableOptions.columns.forEach(c => {
            c.DOMWidth = this.getThWidthFromOColumn(c);
        });
    }
    isDisableCheckbox(item) {
        let disable = false;
        if (Util.isDefined(this.disableSelectionFunction)) {
            return this.disableSelectionFunction(item);
        }
        return disable;
    }
}
OTableComponent.DEFAULT_BASE_SIZE_SPINNER = 100;
OTableComponent.FIRST_LAST_CELL_PADDING = 24;
OTableComponent.EXPANDED_ROW_CONTAINER_CLASS = 'expanded-row-container-';
OTableComponent.AVAILABLE_GROUPING_COLUMNS_RENDERERS = ['currency', 'integer', 'real'];
OTableComponent.DEFAULT_ROW_HEIGHT = 36;
OTableComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-table',
                template: "<div class=\"o-table-container\" fxLayout=\"column\" fxLayoutAlign=\"start stretch\" [style.display]=\"isVisible()? '' : 'none'\"\n  [class.block-events]=\"showLoading | async\">\n\n  <o-data-toolbar #tableToolbar *ngIf=\"hasControls()\" [title]=\"title\" [show-title]=\"showTitle\" class=\"o-table-toolbar\">\n    <ng-container o-data-toolbar-projection-start>\n      <o-table-buttons #tableButtons [insert-button]=\"insertButton\" [refresh-button]=\"refreshButton\" [delete-button]=\"showDeleteButton\">\n        <ng-content select=\"o-table-button\"></ng-content>\n      </o-table-buttons>\n    </ng-container>\n    <ng-content select=\"[o-table-toolbar][position=start]\" ngProjectAs=\"[o-data-toolbar-custom-projection-start]\">\n    </ng-content>\n    <ng-content select=\"[o-table-toolbar][position=end]\" ngProjectAs=\"[o-data-toolbar-custom-projection-end]\">\n    </ng-content>\n    <ng-content select=\"[o-table-toolbar]\" ngProjectAs=\"[o-data-toolbar-custom-projection-start]\">\n    </ng-content>\n    <ng-container o-data-toolbar-projection-end>\n      <ng-container *ngIf=\"quickfilterContentChild; else defaultQuickFilter\">\n        <ng-content select=\"o-table-quickfilter\"></ng-content>\n      </ng-container>\n      <ng-template #defaultQuickFilter>\n        <ng-container *ngIf=\"quickFilter\">\n          <o-table-quickfilter (onChange)=\"tableQuickFilterChanged($event)\">\n          </o-table-quickfilter>\n        </ng-container>\n      </ng-template>\n      <button type=\"button\" *ngIf=\"showTableMenuButton\" mat-icon-button class=\"o-table-menu-button\" [matMenuTriggerFor]=\"tableMenu.matMenu\"\n        (click)=\"$event.stopPropagation()\">\n        <mat-icon svgIcon=\"ontimize:more_vert\"></mat-icon>\n      </button>\n      <o-table-menu #tableMenu [select-all-checkbox]=\"selectAllCheckbox\" [export-button]=\"exportButton\"\n        [columns-visibility-button]=\"columnsVisibilityButton\" [show-configuration-option]=\"showConfigurationOption\"\n        [show-filter-option]=\"showFilterOption\" [show-report-on-demand-option]=\"showReportOnDemandOption\"\n        [show-charts-on-demand-option]=\"showChartsOnDemandOption\" [show-reset-width-option]=\"showResetWidthOption\" [show-group-by-option]=\"groupable\">\n        <ng-content select=\"o-table-option\"></ng-content>\n      </o-table-menu>\n      <ng-template #exportOptsTemplate>\n        <ng-content select=\"o-table-export-button\"></ng-content>\n      </ng-template>\n    </ng-container>\n  </o-data-toolbar>\n\n  <div #tableBody class=\"o-table-body o-scroll\" [class.horizontal-scroll]=\"horizontalScroll\" [class.scrolled]=\"horizontalScrolled\">\n    <ng-container *ngIf=\"!enabledVirtualScroll; else tableWithVirtualScroll\">\n      <div class=\"o-table-overflow o-scroll\">\n        <ng-template *ngTemplateOutlet=\"table\"></ng-template>\n      </div>\n    </ng-container>\n    <ng-template #tableWithVirtualScroll>\n      <cdk-virtual-scroll-viewport #virtualScrollViewPort fxFlex>\n        <ng-template *ngTemplateOutlet=\"table\"></ng-template>\n      </cdk-virtual-scroll-viewport>\n    </ng-template>\n  </div>\n  <!--TABLE PAGINATOR-->\n  <mat-paginator *ngIf=\"paginator\" #matpaginator [length]=\"dataSource?.resultsLength\" [pageIndex]=\"paginator.pageIndex\" [pageSize]=\"queryRows\"\n    [pageSizeOptions]=\"paginator.pageSizeOptions\" (page)=\"onChangePage($event)\" [showFirstLastButtons]=\"paginator.showFirstLastButtons\">\n  </mat-paginator>\n\n  <!--LOADING-->\n  <div #spinnerContainer *ngIf=\"showLoading | async\" fxLayout=\"column\" fxLayoutAlign=\"center center\" [ngStyle]=\"{'top.px': headerHeight}\"\n    class=\"spinner-container\" [class.spinner-container-scrollable]=\"loadingScroll | async\">\n    <mat-progress-spinner mode=\"indeterminate\" strokeWidth=\"3\" [diameter]=\"diameterSpinner\"></mat-progress-spinner>\n  </div>\n\n  <!-- Disable blocker -->\n  <div *ngIf=\"!enabled\" class=\"o-table-disabled-blocker\"></div>\n</div>\n\n<ng-template #table>\n\n  <table mat-table #table [class.autoadjusted]=\"autoAdjust\" [trackBy]=\"getTrackByFunction()\" [dataSource]=\"dataSource\" oMatSort\n    [oMatSortColumns]=\"sortColArray\" [ngClass]=\"rowHeightObservable | async\" (cdkObserveContent)=\"projectContentChanged()\"\n    [oTableExpandedFooter]=\"!(loading | async)\" [oTableExpandedFooterColspan]=\"visibleColArray.length\" [multiTemplateDataRows]=\"showExpandableRow()\"\n    aria-describedby=\"ontimize-web table\">\n\n    <!--Checkbox Column -->\n    <ng-container [matColumnDef]=\"oTableOptions.selectColumn.name\" *ngIf=\"oTableOptions.selectColumn.visible\">\n      <ng-container *ngIf=\"!tableColumnSelectAllContentChild; else customHeaderSelectAllTemplate\">\n        <th mat-header-cell *matHeaderCellDef>\n          <div class=\"content\">\n            <o-table-header-select-all [column]=\"oTableOptions.selectColumn\"></o-table-header-select-all>\n          </div>\n        </th>\n        <td mat-cell *matCellDef=\"let row\">\n          <mat-checkbox name=\"id[]\" (click)=\"$event.stopPropagation()\" [disabled]=\"isDisableCheckbox(row)\"\n            (change)=\"selectionCheckboxToggle($event, row)\" [checked]=\"isRowSelected(row)\">\n          </mat-checkbox>\n        </td>\n      </ng-container>\n      <ng-template #customHeaderSelectAllTemplate>\n        <th mat-header-cell *matHeaderCellDef [class.resizable]=\"resizable\"\n          class=\"mat-header-select-all-with-title o-center\" [style.width]=\"oTableOptions.selectColumn.width\"\n          [style.min-width]=\"getMinWidthColumn(oTableOptions.selectColumn)\" [style.max-width]=\"oTableOptions.selectColumn.maxWidth\">\n          <div class=\"content\">\n            <o-table-header-select-all [column]=\"oTableOptions.selectColumn\"></o-table-header-select-all>\n          </div>\n        </th>\n        <td mat-cell *matCellDef=\"let row\" class=\"o-center\" [style.width]=\"oTableOptions.selectColumn.width\"\n          [style.min-width]=\"getMinWidthColumn(oTableOptions.selectColumn)\" [style.max-width]=\"oTableOptions.selectColumn.maxWidth\">\n          <mat-checkbox name=\"id[]\" (click)=\"$event.stopPropagation()\" [disabled]=\"isDisableCheckbox(row)\"\n            (change)=\"selectionCheckboxToggle($event, row)\" [checked]=\"isRowSelected(row)\">\n          </mat-checkbox>\n        </td>\n      </ng-template>\n\n\n      <td mat-footer-cell *matFooterCellDef></td>\n    </ng-container>\n\n    <!--Expandable Column -->\n    <ng-container [matColumnDef]=\"oTableOptions.expandableColumn.name\" *ngIf=\"isColumnExpandable()\">\n      <th mat-header-cell *matHeaderCellDef>\n        {{ oTableOptions.expandableColumn.title }}\n      </th>\n      <td mat-cell *matCellDef=\"let row;let rowIndex = dataIndex\">\n        <mat-icon *ngIf=\"showExpandableIcon(row, rowIndex) | async\" (click)=\"toogleRowExpandable(row, rowIndex, $event)\">\n          <ng-container *ngIf=\"isExpanded(row)\">{{ tableRowExpandable.iconCollapse }}</ng-container>\n          <ng-container *ngIf=\"!isExpanded(row)\">{{ tableRowExpandable.iconExpand }}</ng-container>\n        </mat-icon>\n      </td>\n    </ng-container>\n\n    <!-- Generic column definition -->\n    <ng-container *ngFor=\"let column of oTableOptions.columns\" [matColumnDef]=\"column.name\">\n      <!--Define header-cell-->\n\n      <th mat-header-cell *matHeaderCellDef [ngClass]=\"getTitleAlignClass(column)\" [class.resizable]=\"resizable\" [style.width]=\"column.width\"\n        [style.min-width]=\"getMinWidthColumn(column)\" [style.max-width]=\"column.maxWidth\">\n\n        <div class=\"content\">\n          <o-table-header [column]=\"column\"></o-table-header>\n        </div>\n      </th>\n\n\n      <!--Define mat-cell-->\n      <ng-container *ngIf=\"!table.multiTemplateDataRows; else cellTemplateMultiTemplateDataRows\">\n        <td #cell mat-cell *matCellDef=\"let row;let rowIndex = index \" [ngClass]=\"[column.className, getCellAlignClass(column)]\"\n          (click)=\"handleClick(row, column, rowIndex, cell, $event)\" (dblclick)=\"handleDoubleClick(row, column, rowIndex, cell, $event)\"\n          [class.empty-cell]=\"isEmpty(row[column.name])\" [matTooltipDisabled]=\"!column.hasTooltip()\" [matTooltip]=\"column.getTooltip(row)\"\n          matTooltipPosition=\"below\" matTooltipShowDelay=\"750\" matTooltipClass=\"o-table-cell-tooltip\"\n          [class.o-mat-cell-multiline]=\"(column.isMultiline | async)\" [oContextMenu]=\"tableContextMenu\"\n          [oContextMenuData]=\"{ cellName:column.name, rowValue:row, rowIndex:rowIndex}\" [style.width]=\"column.width\"\n          [style.min-width]=\"getMinWidthColumn(column)\" [style.max-width]=\"column.maxWidth\"\n          [class.o-table-editing-cell]=\"isRowSelected(row) && column.editing\">\n          <ng-container *ngTemplateOutlet=\"cellRenderer;context:{column:column,row:row}\"></ng-container>\n        </td>\n      </ng-container>\n      <ng-template #cellTemplateMultiTemplateDataRows>\n        <td #cell mat-cell *matCellDef=\"let row;let rowIndex = dataIndex \" [ngClass]=\"[column.className, getCellAlignClass(column)]\"\n          (click)=\"handleClick(row, column, rowIndex, cell, $event)\" (dblclick)=\"handleDoubleClick(row, column, rowIndex, cell, $event)\"\n          [class.empty-cell]=\"isEmpty(row[column.name])\" [matTooltipDisabled]=\"!column.hasTooltip()\" [matTooltip]=\"column.getTooltip(row)\"\n          matTooltipPosition=\"below\" matTooltipShowDelay=\"750\" matTooltipClass=\"o-table-cell-tooltip\"\n          [class.o-mat-cell-multiline]=\"(column.isMultiline | async)\" [oContextMenu]=\"tableContextMenu\"\n          [oContextMenuData]=\"{ cellName:column.name, rowValue:row, rowIndex:rowIndex}\" [style.width]=\"column.width\"\n          [style.min-width]=\"getMinWidthColumn(column)\" [style.max-width]=\"column.maxWidth\"\n          [class.o-table-editing-cell]=\"isRowSelected(row) && column.editing\">\n          <ng-container *ngTemplateOutlet=\"cellRenderer;context:{column:column,row:row}\"></ng-container>\n\n        </td>\n      </ng-template>\n      <!--Define mat-footer-cell-->\n      <ng-container *ngIf=\"showTotals | async\">\n        <td mat-footer-cell *matFooterCellDef [ngClass]=\"column.className\">\n          <div class=\"title\" *ngIf=\"column.aggregate && column.aggregate.title\">\n            {{ column.aggregate.title | oTranslate }}\n          </div>\n          <ng-container *ngIf=\"!column.renderer\">\n            {{ dataSource.getAggregateData(column) }}\n          </ng-container>\n          <ng-template *ngIf=\"column.renderer && column.aggregate\" [ngTemplateOutlet]=\"column.renderer.templateref\"\n            [ngTemplateOutletContext]=\"{cellvalue: dataSource.getAggregateData(column)}\"></ng-template>\n        </td>\n      </ng-container>\n\n    </ng-container>\n\n    <!-- Expanded Content Column - The detail row is made up of this one column that spans across all columns -->\n    <ng-container *ngIf=\"hasExpandedRow\">\n      <ng-container matColumnDef=\"expandedDetail\">\n        <td mat-cell *matCellDef=\"let row;let rowIndex= dataIndex\" [attr.colspan]=\"oTableOptions.visibleColumns.length\">\n          <div [ngClass]=\"getExpandedRowContainerClass(rowIndex)\" [@detailExpand]=\"getStateExpand(row)\">\n          </div>\n        </td>\n      </ng-container>\n    </ng-container>\n\n    <!--FOOTER-INSERTABLE-->\n    <ng-container *ngIf=\"showLastInsertableRow && oTableInsertableRowComponent\">\n      <ng-container [matColumnDef]=\"oTableOptions.selectColumn.name + getSuffixColumnInsertable()\" *ngIf=\"oTableOptions.selectColumn.visible\">\n        <td mat-footer-cell *matFooterCellDef>\n        </td>\n      </ng-container>\n      <ng-container *ngFor=\"let column of oTableOptions.columns\" [matColumnDef]=\"column.name+ getSuffixColumnInsertable()\">\n\n        <td mat-footer-cell *matFooterCellDef [ngClass]=\"column.className\">\n          <ng-container *ngIf=\"oTableInsertableRowComponent.isColumnInsertable(column) && !oTableInsertableRowComponent.useCellEditor(column)\">\n            <mat-form-field class=\"insertable-form-field o-table-cell-editor-text o-table-cell-editor\" [hideRequiredMarker]=\"false\"\n              floatLabel=\"never\">\n              <input matInput type=\"text\" [placeholder]=\"oTableInsertableRowComponent.getPlaceholder(column)\" [id]=\"column.attr\"\n                [formControl]=\"oTableInsertableRowComponent.getControl(column)\" [required]=\"oTableInsertableRowComponent.isColumnRequired(column)\">\n              <mat-error *oMatError=\"oTableInsertableRowComponent.columnHasError(column, 'required')\">\n                {{ 'FORM_VALIDATION.REQUIRED' | oTranslate }}\n              </mat-error>\n            </mat-form-field>\n          </ng-container>\n\n          <ng-container *ngIf=\"oTableInsertableRowComponent.isColumnInsertable(column) && oTableInsertableRowComponent.useCellEditor(column)\">\n            <ng-template [ngTemplateOutlet]=\"oTableInsertableRowComponent.columnEditors[column.attr].templateref\"\n              [ngTemplateOutletContext]=\"{ rowvalue: oTableInsertableRowComponent.rowData }\">\n            </ng-template>\n          </ng-container>\n        </td>\n      </ng-container>\n\n    </ng-container>\n\n    <ng-container *ngIf=\"showFirstInsertableRow && oTableInsertableRowComponent\">\n      <ng-container [matColumnDef]=\"getColumnInsertable(oTableOptions.selectColumn.name)\" *ngIf=\"oTableOptions.selectColumn.visible\">\n        <td mat-header-cell *matHeaderCellDef>\n        </td>\n      </ng-container>\n      <ng-container *ngFor=\"let column of oTableOptions.columns\" [matColumnDef]=\"getColumnInsertable(column.name)\">\n\n        <td mat-header-cell *matHeaderCellDef [ngClass]=\"column.className\">\n          <ng-container *ngIf=\"oTableInsertableRowComponent.isColumnInsertable(column) && !oTableInsertableRowComponent.useCellEditor(column)\">\n            <mat-form-field class=\"insertable-form-field\" [hideRequiredMarker]=\"false\" floatLabel=\"never\">\n              <input matInput type=\"text\" [placeholder]=\"oTableInsertableRowComponent.getPlaceholder(column)\" [id]=\"column.attr\"\n                [formControl]=\"oTableInsertableRowComponent.getControl(column)\" [required]=\"oTableInsertableRowComponent.isColumnRequired(column)\">\n              <mat-error *oMatError=\"oTableInsertableRowComponent.columnHasError(column, 'required')\">\n                {{ 'FORM_VALIDATION.REQUIRED' | oTranslate }}\n              </mat-error>\n            </mat-form-field>\n          </ng-container>\n\n          <ng-container *ngIf=\"oTableInsertableRowComponent.isColumnInsertable(column) && oTableInsertableRowComponent.useCellEditor(column)\">\n            <ng-template [ngTemplateOutlet]=\"oTableInsertableRowComponent.columnEditors[column.attr].templateref\"\n              [ngTemplateOutletContext]=\"{ rowvalue: oTableInsertableRowComponent.rowData }\">\n            </ng-template>\n          </ng-container>\n        </td>\n      </ng-container>\n\n    </ng-container>\n\n    <!-- Definition column group header -->\n    <ng-container *ngFor=\"let column of groupingHeadersRows; let i = index\" [matColumnDef]=\"column\">\n      <td mat-cell *matCellDef=\"let group\" class=\"grouping-row\" [oContextMenu]=\"tableContextMenu\"\n        [oContextMenuData]=\"{ cellName:column, rowValue:group, rowIndex:i}\" [ngClass]=\"getGroupHeaderCellAlignClass(column)\">\n        <div *ngIf=\"i===0\" class=\"grouping-title-wrapper\" [ngStyle]=\"{'padding-left': 20*(group.level-1)+'px'}\">\n          <mat-icon>{{ group.expanded ? 'expand_more' : 'chevron_right' }}</mat-icon>\n          {{ group.title }}\n        </div>\n        <div class=\"grouping-aggregate\" *ngIf=\"group.hasActiveAggregate(visibleColArray[i])\">\n          {{ group.getColumnActiveAggregateTitle(visibleColArray[i]) | oTranslate }} :\n          <ng-container *ngIf=\"!getOColumnFromGroupHeaderColumn(column).renderer\">\n            {{ group.getColumnAggregateValue(visibleColArray[i])}}\n          </ng-container>\n          <ng-container *ngIf=\"getOColumnFromGroupHeaderColumn(column).renderer\">\n            <ng-template\n              *ngTemplateOutlet=\"getOColumnFromGroupHeaderColumn(column).renderer?.templateref; context:{ cellvalue:  group.getColumnAggregateValue(visibleColArray[i]) }\">\n            </ng-template>\n          </ng-container>\n        </div>\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"position\">\n      <td mat-cell *matCellDef=\"let row\"> {{row}} </td>\n    </ng-container>\n\n    <tr #tableHeader mat-header-row *matHeaderRowDef=\"oTableOptions.visibleColumns; sticky: fixedHeader\"></tr>\n\n    <ng-container *ngIf=\"!table.multiTemplateDataRows; else rowTemplateMultiTemplateDataRows\">\n      <tr mat-row oTableRow *matRowDef=\"let row; columns: oTableOptions.visibleColumns; when:isNotGroup; let rowIndex = index\"\n        [class.selected]=\"isRowSelected(row)\" [ngClass]=\"row | oTableRowClass: rowIndex: rowClass\">\n      </tr>\n    </ng-container>\n    <ng-template #rowTemplateMultiTemplateDataRows>\n      <tr mat-row oTableRow *matRowDef=\"let row; columns: oTableOptions.visibleColumns; when:isNotGroup; let rowIndex = dataIndex\"\n        [class.selected]=\"isRowSelected(row)\" [ngClass]=\"row | oTableRowClass: rowIndex: rowClass\">\n      </tr>\n    </ng-template>\n\n    <!-- Row Group header -->\n    <tr mat-row *matRowDef=\"let row; columns: groupingHeadersRows; when:isGroup\" (click)=\"groupHeaderClick(row)\"\n      [ngClass]=\"getClassNameGroupHeader(row)\">\n    </tr>\n\n    <!-- Expanded detail row-->\n    <ng-container *ngIf=\"hasExpandedRow\">\n      <tr mat-row *matRowDef=\"let row; columns: ['expandedDetail']\" class=\"o-table-row-expanded\"></tr>\n    </ng-container>\n\n    <ng-container *ngIf=\"showLastInsertableRow\">\n      <tr mat-footer-row *matFooterRowDef=\"oTableOptions.columnsInsertables; sticky: true\"\n        (keyup)=\"oTableInsertableRowComponent.handleKeyboardEvent($event)\" class=\"o-table-insertable\"></tr>\n    </ng-container>\n    <ng-container *ngIf=\"showFirstInsertableRow\">\n      <tr mat-header-row *matHeaderRowDef=\"oTableOptions.columnsInsertables; sticky: true\"\n        (keyup)=\"oTableInsertableRowComponent.handleKeyboardEvent($event)\" class=\"o-table-insertable\"> </tr>\n    </ng-container>\n    <ng-container *ngIf=\"showTotals | async\">\n      <tr mat-footer-row *matFooterRowDef=\"oTableOptions.visibleColumns; sticky: true\" class=\"o-table-aggregate\">\n      </tr>\n    </ng-container>\n  </table>\n\n</ng-template>\n\n<ng-container *ngIf=\"!contextMenuContentChild && contextMenu\">\n  <o-table-context-menu [insert]=\"insertButton\" [edit]=\"editionMode !== EDIT_MODE_NONE\" [view-detail]=\"detailMode !== DETAIL_MODE_NONE\"\n    [refresh]=\"refreshButton\" [delete]=\"deleteButton\" [filter]=\"showFilterOption\" [group-by-row]=\"groupable\">\n  </o-table-context-menu>\n</ng-container>\n\n<ng-template #cellRenderer let-row=\"row\" let-column=\"column\">\n  <div class=\"content\">\n\n    <ng-container [ngSwitch]=\"true\">\n      <ng-container *ngSwitchCase=\"column.renderer != null && (!column.editing || column.editing && !isRowSelected(row))\">\n        <ng-template *ngTemplateOutlet=\"column.renderer?.templateref; context:{ cellvalue: row[column.name], rowvalue:row }\">\n        </ng-template>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"isRowSelected(row) && column.editing\">\n        <ng-template *ngTemplateOutlet=\"column.editor?.templateref; context:{ cellvalue: row[column.name], rowvalue:row }\">\n        </ng-template>\n      </ng-container>\n\n      <ng-container *ngSwitchCase=\"column.type === 'editButtonInRow' || column.type === 'detailButtonInRow'\">\n        <div fxLayoutAlign=\"center center\" class=\"o-action-cell-renderer\" (click)=\"onDetailButtonClick(column, row, $event)\">\n          <mat-icon>{{ getDetailButtonIcon(column) }}</mat-icon>\n        </div>\n      </ng-container>\n      <ng-container *ngSwitchDefault>{{ row[column.name] }}</ng-container>\n    </ng-container>\n\n  </div>\n</ng-template>\n",
                providers: [
                    OntimizeServiceProvider,
                    ComponentStateServiceProvider,
                    OTableDataSourceService,
                    { provide: O_COMPONENT_STATE_SERVICE, useClass: OTableComponentStateService },
                    { provide: VIRTUAL_SCROLL_STRATEGY, useClass: OTableVirtualScrollStrategy }
                ],
                animations: [
                    trigger('detailExpand', [
                        state('collapsed', style({ height: '0px', minHeight: '0' })),
                        state('expanded', style({ height: '*' })),
                        transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),
                    ])
                ],
                inputs: DEFAULT_INPUTS_O_TABLE,
                outputs: DEFAULT_OUTPUTS_O_TABLE,
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                host: {
                    '[class.o-table]': 'true',
                    '[class.ontimize-table]': 'true',
                    '[class.o-table-fixed]': 'fixedHeader',
                    '[class.o-table-disabled]': '!enabled',
                    '(document:click)': 'handleDOMClick($event)'
                },
                styles: [".o-table{height:100%;max-height:100%;width:100%}.o-table.o-table-disabled{opacity:.4}.o-table .o-table-container{height:100%;display:flex;flex-direction:column;flex-wrap:nowrap;justify-content:flex-start;align-items:flex-start;align-content:stretch;min-width:100%;min-height:400px;position:relative;padding:0 .5%}.o-table .o-table-container .o-table-body .o-table-overflow{overflow-y:auto;overflow-x:hidden;min-width:100%}.o-table .o-table-container .o-table-body.horizontal-scroll .o-table-overflow{overflow-x:auto}.o-table .o-table-container .o-table-body thead .mat-header-row th:last-child .o-table-column-resizer{display:none}.o-table .o-table-container.block-events{pointer-events:none}.o-table .o-table-container.block-events>.o-table-body .mat-header-row,.o-table .o-table-container.block-events>.o-table-toolbar{opacity:.75}.o-table .o-table-container .o-table-toolbar{height:40px}.o-table .o-table-container .o-table-toolbar>div{max-height:100%}.o-table .o-table-container .o-table-toolbar .buttons{margin:0 10px 0 4px}.o-table .o-table-container .o-table-body{display:flex;flex:1 1 auto;max-width:100%;height:100%;overflow:hidden;position:relative}.o-table .o-table-container .o-table-body .spinner-container{position:absolute;top:0;left:0;right:0;bottom:0;z-index:500;visibility:visible;opacity:1;transition:opacity .25s linear}.o-table .o-table-container .o-table-body.horizontal-scroll{overflow-x:auto;padding-bottom:16px}.o-table .o-table-container .o-table-body.horizontal-scroll .mat-header-cell{width:150px}.o-table .o-table-container .o-table-body .o-table-no-results{cursor:default;text-align:center}.o-table .o-table-container .o-table-body .o-table-no-results td{text-align:center}.o-table .o-table-container .mat-table{table-layout:fixed;width:100%}.o-table .o-table-container .mat-table.autoadjusted{table-layout:auto}.o-table .o-table-container .mat-table td .content,.o-table .o-table-container .mat-table th .content{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.o-table .o-table-container .mat-table.small .column-filter-icon{margin-top:2px}.o-table .o-table-container .mat-table.small .mat-sort-header-arrow{margin-top:4px}.o-table .o-table-container .mat-table.small .mat-header-row .mat-checkbox-inner-container,.o-table .o-table-container .mat-table.small .mat-row .mat-checkbox-inner-container{height:16px;width:16px}.o-table .o-table-container .mat-table.small .mat-header-row .mat-checkbox-inner-container .mat-checkbox-checkmark-path,.o-table .o-table-container .mat-table.small .mat-row .mat-checkbox-inner-container .mat-checkbox-checkmark-path{width:2.13333px}.o-table .o-table-container .mat-table.small .mat-header-row .mat-checkbox-inner-container .mat-checkbox-mixedmark,.o-table .o-table-container .mat-table.small .mat-row .mat-checkbox-inner-container .mat-checkbox-mixedmark{height:2px}.o-table .o-table-container .mat-table.small .mat-header-row .mat-cell .image-avatar,.o-table .o-table-container .mat-table.small .mat-header-row .mat-header-cell .image-avatar,.o-table .o-table-container .mat-table.small .mat-row .mat-cell .image-avatar,.o-table .o-table-container .mat-table.small .mat-row .mat-header-cell .image-avatar{width:24px;height:24px}.o-table .o-table-container .mat-table.medium .column-filter-icon{margin-top:2px}.o-table .o-table-container .mat-table.medium .mat-sort-header-arrow{margin-top:5px}.o-table .o-table-container .mat-table.medium .mat-header-row .mat-checkbox-inner-container,.o-table .o-table-container .mat-table.medium .mat-row .mat-checkbox-inner-container{height:18px;width:18px}.o-table .o-table-container .mat-table.medium .mat-header-row .mat-checkbox-inner-container .mat-checkbox-checkmark-path,.o-table .o-table-container .mat-table.medium .mat-row .mat-checkbox-inner-container .mat-checkbox-checkmark-path{width:2.4px}.o-table .o-table-container .mat-table.medium .mat-header-row .mat-checkbox-inner-container .mat-checkbox-mixedmark,.o-table .o-table-container .mat-table.medium .mat-row .mat-checkbox-inner-container .mat-checkbox-mixedmark{height:2px}.o-table .o-table-container .mat-table.large .column-filter-icon{margin-top:4px}.o-table .o-table-container .mat-table.large .mat-sort-header-arrow{margin-top:7px}.o-table .o-table-container .mat-table tr.mat-row.o-table-row-expanded{height:0}.o-table .o-table-container .mat-table tr.o-table-insertable td{height:1px}.o-table .o-table-container .mat-table .mat-row{box-sizing:border-box;transition:background-color .2s;position:relative;-webkit-touch-callout:none;-webkit-user-select:none;user-select:none}.o-table .o-table-container .mat-table .mat-row .mat-cell{padding:0 12px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.o-table .o-table-container .mat-table .mat-row .mat-cell:not(.o-column-image):first-of-type{padding-left:24px}.o-table .o-table-container .mat-table .mat-row .mat-cell:last-of-type{padding-right:24px}.o-table .o-table-container .mat-table .mat-row .mat-cell.grouping-row{padding-top:30px;cursor:pointer}.o-table .o-table-container .mat-table .mat-row .mat-cell.grouping-row .grouping-title-wrapper{position:absolute;width:100%;left:0;top:0;text-align:left}.o-table .o-table-container .mat-table .mat-row .mat-cell.grouping-row .grouping-aggregate{font-weight:700;font-size:14px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;padding-bottom:8px}.o-table .o-table-container .mat-table .mat-row .mat-cell.empty-cell{min-height:16px}.o-table .o-table-container .mat-table .mat-row .mat-cell .action-cell-renderer{cursor:pointer}.o-table .o-table-container .mat-table .mat-row .mat-cell.o-start{text-align:start}.o-table .o-table-container .mat-table .mat-row .mat-cell.o-center{text-align:center}.o-table .o-table-container .mat-table .mat-row .mat-cell.o-end{text-align:end}.o-table .o-table-container .mat-table .mat-row .mat-cell *{vertical-align:middle}.o-table .o-table-container .mat-table .mat-row .mat-cell.o-mat-cell-multiline:not(.mat-header-cell){padding:6px 12px}.o-table .o-table-container .mat-table .mat-row .mat-cell.o-mat-cell-multiline .content{overflow:initial;white-space:normal;text-overflow:unset}.o-table .o-table-container .mat-table .mat-row .mat-cell .image-avatar{width:32px;height:32px;margin:1px auto;overflow:hidden;border-radius:50%;position:relative;z-index:1}.o-table .o-table-container .mat-table .mat-row .mat-cell .image-avatar img{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);width:100%;max-width:inherit;max-height:inherit}.o-table .o-table-container .mat-table .o-action-cell-renderer{display:inline-block;cursor:pointer}.o-table .o-table-container .mat-table .mat-header-cell{overflow:hidden;position:relative;box-sizing:border-box;padding:0 12px;vertical-align:middle}.o-table .o-table-container .mat-table .mat-header-cell.resizable{padding-right:24px}.o-table .o-table-container .mat-table .mat-header-cell.mat-column-select.mat-header-select-all-with-title{padding-right:12px}.o-table .o-table-container .mat-table .mat-header-cell:first-of-type{padding-left:0}.o-table .o-table-container .mat-table .mat-header-cell:not(.o-column-image){overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.o-table .o-table-container .mat-table .mat-header-cell .o-table-header-indicator-numbered{font-size:8px;position:absolute;text-align:center;display:inline-block;width:18px;height:18px;line-height:18px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;pointer-events:none;bottom:-10px;right:-9px}.o-table .o-table-container .mat-table .mat-header-cell .column-filter-icon{cursor:pointer;float:left;font-size:18px;width:18px;height:18px;margin-right:2px;line-height:1}.o-table .o-table-container .mat-table .mat-header-cell .mat-sort-header-button{flex:1;display:block;place-content:center}.o-table .o-table-container .mat-table .mat-header-cell .mat-sort-header-arrow{position:absolute;right:0}.o-table .o-table-container .mat-table .mat-header-cell .header-title-container{cursor:default}.o-table .o-table-container .mat-table .mat-header-cell.resizable .mat-sort-header-arrow{margin-right:12px}.o-table .o-table-container .mat-table .mat-header-cell .header-title-container,.o-table .o-table-container .mat-table .mat-header-cell .mat-sort-header-button{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.o-table .o-table-container .mat-table .mat-header-cell.start,.o-table .o-table-container .mat-table .mat-header-cell.start .mat-sort-header-button{text-align:left}.o-table .o-table-container .mat-table .mat-header-cell.center,.o-table .o-table-container .mat-table .mat-header-cell.center .mat-sort-header-button{text-align:center}.o-table .o-table-container .mat-table .mat-header-cell.center [o-mat-sort-header] .mat-sort-header-button{padding-left:12px}.o-table .o-table-container .mat-table .mat-header-cell.end,.o-table .o-table-container .mat-table .mat-header-cell.end .mat-sort-header-button{text-align:right}.o-table .o-table-container .mat-table .mat-cell.mat-column-select,.o-table .o-table-container .mat-table .mat-header-cell.mat-column-select{box-sizing:content-box;overflow:initial}.o-table .o-table-container .mat-table .mat-cell.mat-column-select:not(.mat-header-select-all-with-title),.o-table .o-table-container .mat-table .mat-header-cell.mat-column-select:not(.mat-header-select-all-with-title){width:18px}.o-table .o-table-container .mat-table .mat-cell.mat-column-select .mat-checkbox-layout,.o-table .o-table-container .mat-table .mat-header-cell.mat-column-select .mat-checkbox-layout{text-overflow:ellipsis;overflow:hidden;display:inline}.o-table .o-table-container .mat-table .mat-cell.mat-column-expandable,.o-table .o-table-container .mat-table .mat-header-cell.mat-column-expandable{width:40px;box-sizing:content-box;padding:0 0 0 24px;overflow:initial}.o-table .o-table-container .mat-table .mat-cell .row-container-expanded{overflow:hidden;display:flex}.o-table .o-table-container .o-table-disabled-blocker{bottom:0;left:0;position:absolute;right:0;top:0;z-index:100}.o-table .spinner-container{position:absolute;top:0;left:0;right:0;bottom:0;z-index:500;visibility:visible;opacity:1;transition:opacity .25s linear}.o-table .spinner-container-scrollable{position:relative}.o-table.o-table-fixed{display:flex}.o-table.o-table-fixed .o-table-container{display:flex;flex-direction:column}.o-table.o-table-fixed .o-table-body{display:flex;flex:1}.o-table.o-table-fixed .o-table-body .o-table-overflow{flex:1;overflow-y:auto}.mat-tooltip.o-table-cell-tooltip{word-wrap:break-word;overflow:hidden;min-width:140px}"]
            }] }
];
OTableComponent.ctorParameters = () => [
    { type: Injector },
    { type: ElementRef },
    { type: MatDialog },
    { type: ViewContainerRef },
    { type: ApplicationRef },
    { type: ComponentFactoryResolver },
    { type: OFormComponent, decorators: [{ type: Optional }, { type: Inject, args: [forwardRef(() => OFormComponent),] }] },
    { type: OTableVirtualScrollStrategy, decorators: [{ type: Optional }, { type: Inject, args: [VIRTUAL_SCROLL_STRATEGY,] }] }
];
OTableComponent.propDecorators = {
    sort: [{ type: ViewChild, args: [OMatSort, { static: false },] }],
    cdkVirtualScrollViewport: [{ type: ViewChild, args: ['virtualScrollViewPort', { static: false },] }],
    spinnerContainer: [{ type: ViewChild, args: ['spinnerContainer', { read: ElementRef, static: false },] }],
    tableRowExpandable: [{ type: ContentChild, args: [OTableRowExpandableComponent, { static: false },] }],
    tableBodyEl: [{ type: ViewChild, args: ['tableBody', { static: false },] }],
    tableHeaderEl: [{ type: ViewChild, args: ['tableHeader', { read: ElementRef, static: false },] }],
    tableToolbarEl: [{ type: ViewChild, args: ['tableToolbar', { read: ElementRef, static: false },] }],
    oTableMenu: [{ type: ViewChild, args: ['tableMenu', { static: false },] }],
    tableOptions: [{ type: ContentChildren, args: [OTableOptionComponent,] }],
    tableButtons: [{ type: ContentChildren, args: [OTableButtonComponent,] }],
    quickfilterContentChild: [{ type: ContentChild, args: ['o-table-quickfilter', { static: true },] }],
    tableColumnSelectAllContentChild: [{ type: ContentChild, args: [OTableColumnSelectAllDirective, { static: true },] }],
    exportOptsTemplate: [{ type: ViewChild, args: ['exportOptsTemplate', { static: false },] }],
    updateScrolledState: [{ type: HostListener, args: ['window:resize', [],] }],
    contextMenuContentChild: [{ type: ContentChild, args: [OTableContextMenuComponent, { static: true },] }]
};
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OTableComponent.prototype, "selectAllCheckbox", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OTableComponent.prototype, "exportButton", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OTableComponent.prototype, "showConfigurationOption", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OTableComponent.prototype, "columnsVisibilityButton", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OTableComponent.prototype, "showFilterOption", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OTableComponent.prototype, "showReportOnDemandOption", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OTableComponent.prototype, "showChartsOnDemandOption", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OTableComponent.prototype, "showButtonsText", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OTableComponent.prototype, "filterColumnActiveByDefault", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OTableComponent.prototype, "showResetWidthOption", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OTableComponent.prototype, "insertButton", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OTableComponent.prototype, "refreshButton", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OTableComponent.prototype, "deleteButton", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OTableComponent.prototype, "fixedHeader", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OTableComponent.prototype, "showTitle", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], OTableComponent.prototype, "horizontalScroll", null);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OTableComponent.prototype, "showPaginatorFirstLastButtons", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OTableComponent.prototype, "autoAlignTitles", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OTableComponent.prototype, "multipleSort", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OTableComponent.prototype, "orderable", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OTableComponent.prototype, "resizable", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OTableComponent.prototype, "autoAdjust", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OTableComponent.prototype, "groupable", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OTableComponent.prototype, "expandGroupsSameLevel", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OTableComponent.prototype, "collapseGroupedColumns", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OTableComponent.prototype, "virtualScroll", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OTableComponent.prototype, "contextMenu", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OTableComponent.prototype, "keepSelectedItems", void 0);
//# sourceMappingURL=data:application/json;base64,