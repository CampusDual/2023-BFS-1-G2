import * as tslib_1 from "tslib";
import { ChangeDetectorRef, HostListener, isDevMode } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { BehaviorSubject } from 'rxjs';
import { InputConverter } from '../decorators/input-converter';
import { DialogService } from '../services/dialog.service';
import { LocalStorageService } from '../services/local-storage.service';
import { OErrorDialogManager } from '../services/o-error-dialog-manager.service';
import { OntimizeService } from '../services/ontimize/ontimize.service';
import { AbstractComponentStateService } from '../services/state/o-component-state.service';
import { Codes } from '../util/codes';
import { ServiceUtils } from '../util/service.utils';
import { Util } from '../util/util';
import { OExpandableContainerComponent } from './expandable-container/o-expandable-container.component';
import { OFormComponent } from './form/o-form.component';
export const DEFAULT_INPUTS_O_SERVICE_BASE_COMPONENT = [
    'oattr: attr',
    'service',
    'serviceType : service-type',
    'entity',
    'queryOnInit: query-on-init',
    'queryOnBind: query-on-bind',
    'queryOnEvent: query-on-event',
    'pageable',
    'columns',
    'keys',
    'parentKeys: parent-keys',
    'staticData: static-data',
    'queryMethod: query-method',
    'paginatedQueryMethod : paginated-query-method',
    'oQueryRows: query-rows',
    'insertMethod: insert-method',
    'updateMethod: update-method',
    'deleteMethod: delete-method',
    'storeState: store-state',
    'queryWithNullParentKeys: query-with-null-parent-keys',
    'queryFallbackFunction: query-fallback-function'
];
export class AbstractOServiceBaseComponent {
    constructor(injector) {
        this.injector = injector;
        this.queryOnInit = true;
        this.queryOnBind = true;
        this.pageable = false;
        this.queryMethod = Codes.QUERY_METHOD;
        this.paginatedQueryMethod = Codes.PAGINATED_QUERY_METHOD;
        this.originalQueryRows = Codes.DEFAULT_QUERY_ROWS;
        this._queryRows = this.originalQueryRows;
        this.insertMethod = Codes.INSERT_METHOD;
        this.updateMethod = Codes.UPDATE_METHOD;
        this.deleteMethod = Codes.DELETE_METHOD;
        this.storeState = true;
        this.queryWithNullParentKeys = false;
        this.colArray = [];
        this.keysArray = [];
        this._pKeysEquiv = {};
        this.dataArray = [];
        this.oattrFromEntity = false;
        this.loadingSubject = new BehaviorSubject(false);
        this.loading = this.loadingSubject.asObservable();
        this.alreadyStored = false;
        this.sqlTypes = undefined;
        this.abortQuery = new BehaviorSubject(false);
        this.dialogService = this.injector.get(DialogService);
        this.oErrorDialogManager = this.injector.get(OErrorDialogManager);
        this.localStorageService = this.injector.get(LocalStorageService);
        this.componentStateService = this.injector.get(AbstractComponentStateService);
        this.router = this.injector.get(Router);
        this.actRoute = this.injector.get(ActivatedRoute);
        try {
            this.cd = this.injector.get(ChangeDetectorRef);
            this.form = this.injector.get(OFormComponent);
        }
        catch (e) {
        }
        try {
            this.expandableContainer = this.injector.get(OExpandableContainerComponent);
        }
        catch (e) {
        }
    }
    set oQueryRows(value) {
        if (Util.isDefined(value)) {
            value = typeof value !== 'number' ? parseInt(value, 10) : value;
            this.originalQueryRows = value;
            this._queryRows = value;
        }
    }
    get queryRows() {
        return this._queryRows;
    }
    set queryRows(value) {
        if (Util.isDefined(value)) {
            this._queryRows = value;
        }
    }
    get state() {
        return this.componentStateService.state;
    }
    initialize() {
        if (!Util.isDefined(this.oattr) && Util.isDefined(this.entity)) {
            this.oattr = this.entity.replace('.', '_');
            this.oattrFromEntity = true;
        }
        this.keysArray = Util.parseArray(this.keys);
        this.checkColumns();
        const pkArray = Util.parseArray(this.parentKeys);
        this._pKeysEquiv = Util.parseParentKeysEquivalences(pkArray, Codes.COLUMNS_ALIAS_SEPARATOR);
        this.componentStateService.initialize(this);
        if (this.staticData) {
            this.queryOnBind = false;
            this.queryOnInit = false;
            this.setDataArray(this.staticData);
        }
        else {
            this.configureService();
        }
        if (this.form && Util.isDefined(this.dataService)) {
            this.setFormComponent(this.form);
        }
        if (Util.isDefined(this.queryOnEvent) && Util.isDefined(this.queryOnEvent.subscribe)) {
            const self = this;
            this.queryOnEventSubscription = this.queryOnEvent.subscribe((value) => {
                if (Util.isDefined(value) || this.queryWithNullParentKeys) {
                    self.queryData();
                }
            });
        }
        if (typeof this.queryFallbackFunction !== 'function') {
            this.queryFallbackFunction = undefined;
        }
    }
    checkColumns() {
        this.colArray = Util.parseArray(this.columns, true);
        if (isDevMode()) {
            this.keysArray.forEach(key => {
                if (this.columns.indexOf(key) === -1) {
                    console.warn(`In the component '${this.oattr}', the key '${key}' is not included in the columns definition and some functionalities may not work correctly`);
                }
            });
        }
    }
    afterViewInit() {
        this.registerLocalStorageServiceRouteChange();
        this.abortQuery.subscribe(value => {
            if (value) {
                if (this.querySubscription) {
                    this.querySubscription.unsubscribe();
                }
                this.setData([]);
            }
        });
    }
    destroy() {
        if (this.onFormDataSubscribe) {
            this.onFormDataSubscribe.unsubscribe();
        }
        if (this.querySubscription) {
            this.querySubscription.unsubscribe();
        }
        if (this.onRouteChangeStorageSubscription) {
            this.onRouteChangeStorageSubscription.unsubscribe();
        }
        if (this.queryOnEventSubscription) {
            this.queryOnEventSubscription.unsubscribe();
        }
    }
    ngOnChanges(changes) {
        if (Util.isDefined(changes.staticData)) {
            this.setDataArray(changes.staticData.currentValue);
        }
    }
    beforeunloadHandler() {
        this.updateStateStorage();
    }
    getAttribute() {
        return this.oattr;
    }
    getComponentKey() {
        return this.getAttribute();
    }
    getDataToStore() {
        return this.state;
    }
    getRouteKey() {
        let route = this.router.url;
        this.actRoute.params.subscribe(params => {
            Object.keys(params).forEach(key => {
                route = route.replace(params[key], key);
            });
        });
        return route;
    }
    getKeys() {
        return this.keysArray;
    }
    configureService() {
        const configureServiceArgs = { injector: this.injector, baseService: OntimizeService, entity: this.entity, service: this.service, serviceType: this.serviceType };
        this.dataService = Util.configureService(configureServiceArgs);
    }
    getDataArray() {
        return this.dataArray;
    }
    setDataArray(data) {
        if (Util.isArray(data)) {
            this.dataArray = data;
        }
        else if (Util.isObject(data)) {
            this.dataArray = [data];
        }
        else {
            console.warn('Component has received not supported service data. Supported data are Array or Object');
            this.dataArray = [];
        }
    }
    setFormComponent(form) {
        if (!Util.isDefined(this.form)) {
            this.form = form;
        }
        if (this.queryOnBind) {
            this.onFormDataSubscribe = this.form.onDataLoaded.subscribe(() => this.pageable ? this.reloadPaginatedDataFromStart() : this.reloadData());
        }
    }
    getParentKeysFromContext(parentKeys, context) {
        let result = {};
        const checkRouteParamsRecursive = this.router.paramsInheritanceStrategy !== 'always';
        if (context instanceof OExpandableContainerComponent) {
            result = ServiceUtils.getParentKeysFromExpandableContainer(parentKeys, context, this.actRoute, checkRouteParamsRecursive);
        }
        else {
            result = ServiceUtils.getParentKeysFromForm(parentKeys, context, this.actRoute, checkRouteParamsRecursive);
        }
        return result;
    }
    queryData(filter, ovrrArgs) {
        const queryMethodName = this.pageable ? this.paginatedQueryMethod : this.queryMethod;
        if (!this.dataService || !(queryMethodName in this.dataService) || !this.entity) {
            return;
        }
        const filterParentKeys = this.getParentKeysValues();
        if (!ServiceUtils.filterContainsAllParentKeys(filterParentKeys, this._pKeysEquiv) && !this.queryWithNullParentKeys) {
            this.setData([], []);
        }
        else {
            if (this.querySubscription) {
                this.querySubscription.unsubscribe();
            }
            this.loadingSubject.next(true);
            this.abortQuery.next(false);
            this.queryArguments = this.getQueryArguments(filter, ovrrArgs);
            if (this.abortQuery.value) {
                this.state.queryRecordOffset = 0;
                this.state.totalQueryRecordsNumber = 0;
                this.setData([], []);
                this.cd.detectChanges();
                this.loadingSubject.next(false);
                return;
            }
            this.querySubscription = this.dataService[queryMethodName].apply(this.dataService, this.queryArguments)
                .subscribe((res) => {
                let data;
                this.sqlTypes = undefined;
                if (Util.isArray(res)) {
                    data = res;
                    this.sqlTypes = {};
                }
                else if (res.isSuccessful()) {
                    const arrData = (res.data !== undefined) ? res.data : [];
                    data = Util.isArray(arrData) ? arrData : [];
                    this.sqlTypes = res.sqlTypes;
                    if (this.pageable) {
                        this.updatePaginationInfo(res);
                    }
                }
                this.setData(data, this.sqlTypes, (ovrrArgs && ovrrArgs.replace));
                this.loadingSubject.next(false);
            }, err => {
                this.setData([], []);
                this.loadingSubject.next(false);
                if (Util.isDefined(this.queryFallbackFunction)) {
                    this.queryFallbackFunction(err);
                }
                else {
                    this.oErrorDialogManager.openErrorDialog(err);
                    console.error(err);
                }
            });
        }
    }
    reloadData() {
        this.queryData();
    }
    reloadPaginatedDataFromStart() {
        this.reloadData();
    }
    extractKeysFromRecord(item) {
        const result = {};
        if (Util.isObject(item)) {
            this.keysArray.forEach(key => {
                if (Util.isDefined(item[key])) {
                    result[key] = item[key];
                }
            });
        }
        return result;
    }
    getAttributesValuesToQuery() {
        const result = this.colArray;
        this.keysArray.forEach(key => {
            if (result.indexOf(key) === -1) {
                result.push(key);
            }
        });
        return result;
    }
    getQueryArguments(filter, ovrrArgs) {
        const compFilter = this.getComponentFilter(filter);
        const queryCols = this.getAttributesValuesToQuery();
        const sqlTypes = (ovrrArgs && ovrrArgs.hasOwnProperty('sqltypes')) ? ovrrArgs.sqltypes : this.form ? this.form.getAttributesSQLTypes() : {};
        let queryArguments = [compFilter, queryCols, this.entity, sqlTypes];
        if (this.pageable) {
            const queryOffset = (ovrrArgs && ovrrArgs.hasOwnProperty('offset')) ? ovrrArgs.offset : this.state.queryRecordOffset;
            const queryRowsN = (ovrrArgs && ovrrArgs.hasOwnProperty('length')) ? ovrrArgs.length : this.queryRows;
            queryArguments = queryArguments.concat([queryOffset, queryRowsN, undefined]);
        }
        return queryArguments;
    }
    updatePaginationInfo(queryRes) {
        const resultEndIndex = queryRes.startRecordIndex + (queryRes.data ? queryRes.data.length : 0);
        if (queryRes.startRecordIndex !== undefined) {
            this.state.queryRecordOffset = resultEndIndex;
        }
        if (queryRes.totalQueryRecordsNumber !== undefined) {
            this.state.totalQueryRecordsNumber = queryRes.totalQueryRecordsNumber;
        }
    }
    getTotalRecordsNumber() {
        return Util.isDefined(this.state.totalQueryRecordsNumber) ? this.state.totalQueryRecordsNumber : undefined;
    }
    getContextComponent() {
        return this.expandableContainer || this.form;
    }
    getComponentFilter(existingFilter = {}) {
        const filterParentKeys = this.getParentKeysFromContext(this._pKeysEquiv, this.getContextComponent());
        existingFilter = Object.assign(existingFilter || {}, filterParentKeys);
        return existingFilter;
    }
    getSqlTypes() {
        return Util.isDefined(this.sqlTypes) ? this.sqlTypes : {};
    }
    getParentKeysValues() {
        const context = this.getContextComponent();
        return this.getParentKeysFromContext(this._pKeysEquiv, context);
    }
    updateStateStorage() {
        if (this.localStorageService && this.storeState && !this.alreadyStored) {
            this.alreadyStored = true;
            this.localStorageService.updateComponentStorage(this, this.getRouteKey());
        }
    }
    setData(data, sqlTypes, replace) {
    }
    registerLocalStorageServiceRouteChange() {
        if (this.storeState) {
            this.onRouteChangeStorageSubscription = this.localStorageService.onRouteChange.subscribe(res => {
                this.updateStateStorage();
            });
        }
    }
}
AbstractOServiceBaseComponent.propDecorators = {
    beforeunloadHandler: [{ type: HostListener, args: ['window:beforeunload', [],] }]
};
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], AbstractOServiceBaseComponent.prototype, "queryOnInit", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], AbstractOServiceBaseComponent.prototype, "queryOnBind", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], AbstractOServiceBaseComponent.prototype, "pageable", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], AbstractOServiceBaseComponent.prototype, "storeState", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], AbstractOServiceBaseComponent.prototype, "queryWithNullParentKeys", void 0);
export class DefaultOServiceBaseComponent extends AbstractOServiceBaseComponent {
}
export class OServiceBaseComponent extends AbstractOServiceBaseComponent {
}
//# sourceMappingURL=data:application/json;base64,