import * as tslib_1 from "tslib";
import { Component, EventEmitter, forwardRef, Inject, Injector } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
import { OFormComponent } from '../../components/form/o-form.component';
import { InputConverter } from '../../decorators/input-converter';
import { LocalStorageService } from '../../services/local-storage.service';
import { OFilterBuilderComponentStateService } from '../../services/state/o-filter-builder-component-state.service';
import { Codes } from '../../util/codes';
import { FilterExpressionUtils } from '../../util/filter-expression.utils';
import { Util } from '../../util/util';
export const DEFAULT_INPUTS_O_FILTER_BUILDER = [
    'filters',
    'targetCmp: target',
    'expressionBuilder: expression-builder',
    'queryOnChange: query-on-change',
    'queryOnChangeDelay: query-on-change-delay',
    'queryOnChangeEventType: query-on-change-event-type',
    'oattr: attr',
];
export const DEFAULT_OUTPUTS_O_FILTER_BUILDER = [
    'onFilter',
    'onClear'
];
export class OFilterBuilderComponent {
    constructor(injector, form) {
        this.injector = injector;
        this.form = form;
        this.onFilter = new EventEmitter();
        this.onClear = new EventEmitter();
        this.queryOnChange = false;
        this.queryOnChangeDelay = 0;
        this.queryOnChangeEventType = Codes.DEFAULT_CHANGE_EVENT;
        this.filterComponents = [];
        this.subscriptions = new Subscription();
        this.localStorageService = this.injector.get(LocalStorageService);
        this.componentStateService = this.injector.get(OFilterBuilderComponentStateService);
        this.router = this.injector.get(Router);
        this.actRoute = this.injector.get(ActivatedRoute);
    }
    ngOnInit() {
        this.initialize();
    }
    ngAfterViewInit() {
        this.initializeListeners();
    }
    ngOnDestroy() {
        if (this.subscriptions) {
            this.subscriptions.unsubscribe();
        }
    }
    initialize() {
        this.componentStateService.initialize(this);
        if (this.filters) {
            const filterArray = Util.parseArray(this.filters);
            filterArray.forEach(filter => {
                const filterElms = filter.split(Codes.COLUMNS_ALIAS_SEPARATOR);
                this.filterComponents.push({
                    targetAttr: filterElms[0],
                    formComponentAttr: filterElms[1] ? filterElms[1] : filterElms[0]
                });
            });
        }
        if (Util.isDefined(this.targetCmp)) {
            this.targetCmp.setFilterBuilder(this);
        }
    }
    initializeListeners() {
        if (this.queryOnChange) {
            this.filterComponents.forEach((filterComponent) => {
                const formComponent = this.form.getComponents()[filterComponent.formComponentAttr];
                if (formComponent) {
                    this.subscriptions.add(this.getEventFromFormComponent(formComponent)
                        .pipe(debounceTime(this.queryOnChangeDelay))
                        .subscribe(() => this.triggerReload()));
                }
            });
        }
    }
    getEventFromFormComponent(formComponent) {
        return this.queryOnChangeEventType === Codes.DEFAULT_CHANGE_EVENT ?
            formComponent.onValueChange :
            formComponent.getFormControl().valueChanges;
    }
    getExpression() {
        const formComponents = this.form.getComponents();
        const params = [];
        this.filterComponents.forEach((filterComponent) => {
            const formComponent = formComponents[filterComponent.formComponentAttr];
            if (formComponent) {
                const value = formComponent.getValue();
                params.push({
                    attr: filterComponent.targetAttr,
                    value: value
                });
            }
        });
        if (this.expressionBuilder) {
            return this.expressionBuilder(params);
        }
        const expressions = [];
        params.forEach(elem => {
            if (Util.isDefined(elem.value)) {
                expressions.push(FilterExpressionUtils.buildExpressionEquals(elem.attr, elem.value));
            }
        });
        return expressions.length ? expressions.reduce((fe1, fe2) => FilterExpressionUtils.buildComplexExpression(fe1, fe2, FilterExpressionUtils.OP_OR)) : undefined;
    }
    getBasicExpression() {
        return FilterExpressionUtils.buildBasicExpression(this.getExpression());
    }
    getTargetComponent() {
        return this.targetCmp;
    }
    triggerReload() {
        if (!this.targetCmp) {
            return;
        }
        if (this.targetCmp.pageable) {
            this.targetCmp.reloadPaginatedDataFromStart();
        }
        else {
            this.targetCmp.reloadData();
        }
        this.onFilter.emit();
    }
    clearFilter() {
        const formComponents = this.form.getComponents();
        this.getFilterAttrs().forEach((attr) => {
            formComponents[attr].clearValue();
        });
        this.onClear.emit();
    }
    getFilterValues() {
        const result = [];
        this.filterComponents.
            forEach((filterComponent) => {
            if (Util.isDefined(this.form.getComponents()[filterComponent.formComponentAttr])) {
                result.push({ attr: filterComponent.formComponentAttr, value: this.form.getComponents()[filterComponent.formComponentAttr].getValue() });
            }
        });
        return result;
    }
    setFilterValues(filterBuilderValues) {
        filterBuilderValues.forEach((filterBuilderValue) => {
            if (this.form.getComponents()[filterBuilderValue.attr]) {
                this.form.getComponents()[filterBuilderValue.attr].setValue(filterBuilderValue.value);
            }
            else {
                console.warn('The filter with attr ' + filterBuilderValue.attr + ' cannot be set ' + filterBuilderValue.value + ' because it does not exist .');
            }
        });
    }
    getFilterAttrs() {
        return this.filterComponents.map((elem) => elem.formComponentAttr);
    }
    get state() {
        return this.componentStateService.state;
    }
    getDataToStore() {
        return this.componentStateService.state;
    }
    getComponentKey() {
        if (!Util.isDefined(this.oattr)) {
            console.error('Your o-filter-builder component must have an \'attr\'. Otherwise, your filter builder state will not set in localstorage.');
            return 'OFilterBuilderComponent_';
        }
        return 'OFilterBuilderComponent_' + this.oattr;
    }
    storeFilterInState(arg) {
        this.componentStateService.storeFilter(arg);
        this.updateStateStorage();
    }
    updateStateStorage() {
        if (this.localStorageService) {
            this.localStorageService.updateComponentStorage(this, this.getRouteKey());
        }
    }
    getRouteKey() {
        let route = this.router.url;
        this.actRoute.params.subscribe(params => {
            Object.keys(params).forEach(key => {
                route = route.replace(params[key], key);
            });
        });
        return route;
    }
}
OFilterBuilderComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-filter-builder',
                template: "",
                inputs: DEFAULT_INPUTS_O_FILTER_BUILDER,
                outputs: DEFAULT_OUTPUTS_O_FILTER_BUILDER
            }] }
];
OFilterBuilderComponent.ctorParameters = () => [
    { type: Injector },
    { type: OFormComponent, decorators: [{ type: Inject, args: [forwardRef(() => OFormComponent),] }] }
];
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OFilterBuilderComponent.prototype, "queryOnChange", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Number)
], OFilterBuilderComponent.prototype, "queryOnChangeDelay", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", String)
], OFilterBuilderComponent.prototype, "queryOnChangeEventType", void 0);
//# sourceMappingURL=data:application/json;base64,