import { ElementRef, forwardRef, Inject, Injector, Optional } from '@angular/core';
import { Util } from '../../util';
import { OFormValue } from '../form/o-form-value';
import { OFormComponent } from '../form/o-form.component';
import { OFormDataComponent } from '../o-form-data-component.class';
export const DEFAULT_INPUTS_O_BOOLEAN_FORM_DATA = [
    'trueValue: true-value',
    'falseValue: false-value',
    'booleanType: boolean-type'
];
export class OBooleanFormDataComponent extends OFormDataComponent {
    constructor(form, elRef, injector) {
        super(form, elRef, injector);
        this.trueValue = true;
        this.falseValue = false;
        this.booleanType = 'boolean';
        this._defaultSQLTypeKey = 'BOOLEAN';
        this.defaultValue = false;
    }
    initialize() {
        if (!Util.isDefined(this.sqlType)) {
            switch (this.booleanType) {
                case 'number':
                    this.sqlType = 'INTEGER';
                    break;
                case 'string':
                    this.sqlType = 'VARCHAR';
                    break;
                case 'boolean':
                default:
                    this.sqlType = 'BOOLEAN';
            }
        }
        this.defaultValue = this.falseValue;
        super.initialize();
    }
    ensureOFormValue(data) {
        this.parseInputs();
        if (data instanceof OFormValue) {
            if (!Util.isDefined(data.value)) {
                data.value = false;
            }
            this.value = new OFormValue(this.parseValueByType(data.value) === this.trueValue);
        }
        else if (typeof data === 'boolean') {
            this.value = new OFormValue(data);
        }
        else {
            this.value = new OFormValue(this.parseValueByType(data) === this.trueValue);
        }
    }
    parseValueByType(value) {
        let result;
        switch (this.booleanType) {
            case 'string':
                result = value + '';
                break;
            case 'number':
                result = parseInt(value, 10);
                break;
            default:
                result = value;
                break;
        }
        return result;
    }
    parseStringInputs() {
        if ((this.trueValue || '').length === 0) {
            this.trueValue = undefined;
        }
        if ((this.falseValue || '').length === 0) {
            this.falseValue = undefined;
        }
    }
    parseNumberInputs() {
        this.trueValue = parseInt(this.trueValue, 10);
        if (isNaN(this.trueValue)) {
            this.trueValue = 1;
        }
        this.falseValue = parseInt(this.falseValue, 10);
        if (isNaN(this.falseValue)) {
            this.falseValue = 0;
        }
    }
    parseInputs() {
        switch (this.booleanType) {
            case 'string':
                this.parseStringInputs();
                break;
            case 'number':
                this.parseNumberInputs();
                break;
            default:
                this.trueValue = true;
                this.falseValue = false;
                break;
        }
    }
    onClickBlocker(evt) {
        evt.stopPropagation();
    }
}
OBooleanFormDataComponent.ctorParameters = () => [
    { type: OFormComponent, decorators: [{ type: Optional }, { type: Inject, args: [forwardRef(() => OFormComponent),] }] },
    { type: ElementRef },
    { type: Injector }
];
//# sourceMappingURL=data:application/json;base64,