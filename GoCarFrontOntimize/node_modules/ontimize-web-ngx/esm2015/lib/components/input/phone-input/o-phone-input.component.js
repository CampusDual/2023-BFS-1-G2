import { Component, ElementRef, EventEmitter, forwardRef, Inject, Injector, Input, Optional, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import * as lpn from 'google-libphonenumber';
import { Codes } from '../../../util/codes';
import { Util } from '../../../util/util';
import { OValidators } from '../../../validators/o-validators';
import { OFormValue } from '../../form/o-form-value';
import { OFormComponent } from '../../form/o-form.component';
import { DEFAULT_INPUTS_O_FORM_DATA_COMPONENT, DEFAULT_OUTPUTS_O_FORM_DATA_COMPONENT, OFormDataComponent } from '../../o-form-data-component.class';
import { CountryCode } from './data/country-code';
import { CountryISO } from './enums/country-iso.enum';
import { PhoneNumberFormat } from './enums/phone-number-format.enum';
export const DEFAULT_INPUTS_O_PHONE_INPUT = [
    ...DEFAULT_INPUTS_O_FORM_DATA_COMPONENT,
    'gap'
];
export const DEFAULT_OUTPUTS_O_PHONE_INPUT = [
    ...DEFAULT_OUTPUTS_O_FORM_DATA_COMPONENT
];
const PHONE_PREFIX = '+';
export class OPhoneInputComponent extends OFormDataComponent {
    constructor(countryCodeData, form, elRef, injector) {
        super(form, elRef, injector);
        this.countryCodeData = countryCodeData;
        this.countries = [];
        this.countryChange = new EventEmitter();
        this.onPhoneDataChange = new EventEmitter();
        this.gap = '14px';
        this._selectedCountry = {
            areaCodes: undefined,
            dialCode: '',
            htmlId: '',
            flagClass: '',
            iso2: '',
            name: '',
            placeHolder: '',
            priority: 0,
        };
        this.allCountries = [];
        this.states = CountryISO;
        this.selectedStates = this.states;
        this.phoneUtil = lpn.PhoneNumberUtil.getInstance();
        this.separateDialCode = true;
        this.numberFormat = PhoneNumberFormat.International;
        this.initializeCountryData();
    }
    set selectedCountry(value) {
        this._selectedCountry = value;
        this.placeHolder = this.resolvePlaceholder();
    }
    get selectedCountry() {
        return this._selectedCountry;
    }
    initialize() {
        super.initialize();
        const formControl = this.getFormControl();
        if (formControl) {
            const self = this;
            formControl.getValue = function () {
                if (this.value && this.value.length > 0 && self.selectedCountry && self.selectedCountry.dialCode) {
                    return `+${self.selectedCountry.dialCode} ${this.value}`;
                }
                return undefined;
            };
        }
    }
    ngAfterViewInit() {
        super.ngAfterViewInit();
        if (this.oInputsOptions.iconColor === Codes.O_INPUTS_OPTIONS_COLOR_ACCENT) {
            const matFormFieldEL = this.elRef.nativeElement.getElementsByTagName('mat-form-field')[1];
            if (Util.isDefined(matFormFieldEL)) {
                matFormFieldEL.classList.add('accent');
            }
        }
    }
    addOntimizeCustomAppearanceClass() {
        try {
            if (this.elRef) {
                const matFormFieldEl = this.elRef.nativeElement.querySelectorAll('mat-form-field');
                matFormFieldEl.forEach(matForm => {
                    matForm.classList.add('mat-form-field-appearance-ontimize');
                });
            }
        }
        catch (e) {
        }
    }
    getValue() {
        const formControl = this.getFormControl();
        if (formControl) {
            return formControl.getValue();
        }
        return super.getValue();
    }
    resolveValidators() {
        const validators = super.resolveValidators();
        const createPhoneValidator = (() => {
            return OValidators.phoneValidator(this.getFormControl(), this.getSelectedCountryIso2());
        });
        validators.push(createPhoneValidator);
        return validators;
    }
    onFormControlChange(value) {
        if (!this.value) {
            this.value = new OFormValue();
        }
        this.ensureOFormValue(value);
        this.ensurePhoneValue(value);
        this.onChange.emit(value);
    }
    setFormValue(val, options, setDirty = false) {
        let { countryDialCode, number } = this.getSeparatedValues(val);
        let country = this.getCountryByDialCode(countryDialCode);
        const parsed = this.getParsedNumber(number, country ? country.iso2 : undefined);
        if (!Util.isDefined(parsed)) {
            number = undefined;
            country = undefined;
        }
        this.selectedCountry = country;
        this.ensureOFormValue(number);
        if (this._fControl) {
            this._fControl.setValue(this.value.value, options);
            if (setDirty) {
                this._fControl.markAsDirty();
            }
            if (this._fControl.invalid && !this.form.isInInsertMode()) {
                this._fControl.markAsTouched();
            }
        }
        this.oldValue = this.value.value;
    }
    onCountrySelect(value) {
        const country = value.value;
        this.countryChange.emit(country);
        this.setValue(undefined);
        this.selectedCountry = country;
        if (this.matInputRef && this.matInputRef.nativeElement) {
            setTimeout(() => {
                this.matInputRef.nativeElement.focus();
            }, 0);
        }
    }
    innerOnBlur(event) {
        super.innerOnBlur(event);
        if (this._fControl) {
            this._fControl.updateValueAndValidity({ emitEvent: false });
        }
    }
    getSelectedCountryIso2() {
        return this.selectedCountry ? this.selectedCountry.iso2 : undefined;
    }
    initializeCountryData() {
        this.fetchCountryData();
        if (this.countries.length) {
            this.allCountries = this.allCountries.filter((c) => this.countries.includes(c.iso2));
        }
    }
    ensurePhoneValue(value) {
        const number = this.getParsedNumber(value, this.getSelectedCountryIso2());
        if (number) {
            const intlNo = number
                ? this.phoneUtil.format(number, lpn.PhoneNumberFormat.INTERNATIONAL)
                : '';
            if (intlNo) {
                this.value.value = this.removeDialCode(intlNo);
                this.emitPhoneInputData(intlNo, number);
            }
        }
    }
    getCountryByDialCode(countryDialCode) {
        if (countryDialCode) {
            return this.sortCountries().find((c) => c.dialCode === countryDialCode);
        }
        return undefined;
    }
    sortCountries() {
        return this.allCountries
            .sort((a, b) => {
            return a.priority - b.priority;
        });
    }
    getSeparatedValues(value) {
        let countryDialCode = '';
        let number = (value instanceof OFormValue ? value.value : value) || undefined;
        if (Util.isDefined(number) && number.startsWith(PHONE_PREFIX)) {
            countryDialCode = number.substr(1, number.indexOf(' ') - 1);
            number = number.substr(countryDialCode.length + 2);
        }
        return { countryDialCode, number };
    }
    emitPhoneInputData(intlNo, number) {
        let phoneInputData = undefined;
        const iso2 = this.getSelectedCountryIso2();
        if (intlNo && number && iso2) {
            phoneInputData = {
                number: this.value.value,
                internationalNumber: intlNo,
                nationalNumber: number
                    ? this.phoneUtil.format(number, lpn.PhoneNumberFormat.NATIONAL)
                    : '',
                e164Number: number
                    ? this.phoneUtil.format(number, lpn.PhoneNumberFormat.E164)
                    : '',
                countryCode: iso2.toUpperCase(),
                dialCode: PHONE_PREFIX + this.selectedCountry.dialCode,
            };
        }
        this.onPhoneDataChange.emit(phoneInputData);
    }
    getParsedNumber(phoneNumber, countryCode) {
        let number;
        try {
            number = this.phoneUtil.parse(phoneNumber, countryCode.toUpperCase());
        }
        catch (e) { }
        return number;
    }
    removeDialCode(phoneNumber) {
        const number = this.getParsedNumber(phoneNumber, this.getSelectedCountryIso2());
        phoneNumber = this.phoneUtil.format(number, lpn.PhoneNumberFormat[this.numberFormat]);
        if (phoneNumber.startsWith(PHONE_PREFIX) && this.separateDialCode) {
            phoneNumber = phoneNumber.substring(phoneNumber.indexOf(' ') + 1);
        }
        return phoneNumber;
    }
    getCountryIsoCode(countryCode, number) {
        const rawNumber = number['values_']['2'].toString();
        const countries = this.allCountries.filter((c) => c.dialCode === countryCode.toString());
        const mainCountry = countries.find((c) => c.areaCodes === undefined);
        const secondaryCountries = countries.filter((c) => c.areaCodes !== undefined);
        let matchedCountry = mainCountry ? mainCountry.iso2 : undefined;
        secondaryCountries.forEach((country) => {
            country.areaCodes.forEach((areaCode) => {
                if (rawNumber.startsWith(areaCode)) {
                    matchedCountry = country.iso2;
                }
            });
        });
        return matchedCountry;
    }
    getPhoneNumberPlaceHolder(countryCode) {
        try {
            return this.phoneUtil.format(this.phoneUtil.getExampleNumber(countryCode), lpn.PhoneNumberFormat[this.numberFormat]);
        }
        catch (e) {
            return e;
        }
    }
    fetchCountryData() {
        this.allCountries = [];
        this.countryCodeData.allCountries.forEach((c) => {
            const country = {
                name: c[0].toString(),
                iso2: c[1].toString(),
                dialCode: c[2].toString(),
                priority: +c[3] || 0,
                areaCodes: c[4] || undefined,
                htmlId: `iti-0__item-${c[1].toString()}`,
                flagClass: `iti__${c[1].toString().toLocaleLowerCase()}`,
                placeHolder: '',
            };
            if (!this.oplaceholder) {
                country.placeHolder = this.getPhoneNumberPlaceHolder(country.iso2.toUpperCase());
            }
            this.allCountries.push(country);
        });
    }
    resolvePlaceholder() {
        let placeholder = '';
        if (this.selectedCountry && this.selectedCountry.placeHolder && this.selectedCountry.placeHolder.length > 0) {
            placeholder = this.selectedCountry.placeHolder;
            if (this.separateDialCode) {
                placeholder = this.removeDialCode(placeholder);
            }
        }
        return placeholder;
    }
}
OPhoneInputComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-phone-input',
                template: "<div [formGroup]=\"getFormGroup()\" fxLayout=\"row wrap\" [fxLayoutGap]=\"gap +' grid'\">\n  <mat-form-field class=\"mat-form-phone\" [floatLabel]=\"floatLabel\" [appearance]=\"appearance\" [class.read-only]=\"isReadOnly\" fxFlex.xs>\n    <mat-label *ngIf=\"labelVisible\">{{ olabel | oTranslate }}</mat-label>\n    <mat-select [value]=\"selectedCountry\" (selectionChange)=\"onCountrySelect($event)\" [disabled]=\"!enabled\">\n      <mat-option *ngFor=\"let country of allCountries\" [value]=\"country\"> {{country.name}} +{{country.dialCode}}</mat-option>\n    </mat-select>\n  </mat-form-field>\n  <mat-form-field [hideRequiredMarker]=\"hideRequiredMarker\" [class.custom-width]=\"hasCustomWidth\" class=\"icon-field\" [appearance]=\"appearance\"\n    fxFlex>\n    <input #matInputRef matInput type=\"tel\" [id]=\"getAttribute()\" [formControlName]=\"getAttribute()\" [placeholder]=\"placeHolder\"\n      (focus)=\"innerOnFocus($event)\" (blur)=\"innerOnBlur($event)\" [readonly]=\"isReadOnly\" (change)=\"onChangeEvent($event)\" [required]=\"isRequired\">\n    <button type=\"button\" *ngIf=\"showClearButton\" matSuffix mat-icon-button (click)=\"onClickClearValue($event)\">\n      <mat-icon svgIcon=\"ontimize:close\"></mat-icon>\n    </button>\n    <mat-icon matSuffix [class.mat-disabled]=\"!enabled\" class=\"svg-icon\" svgIcon=\"ontimize:phone_outline\"></mat-icon>\n    <mat-error *oMatError=\"hasError('required')\">\n      {{ 'FORM_VALIDATION.REQUIRED' | oTranslate }}\n    </mat-error>\n    <mat-error *oMatError=\"hasError('validatePhoneNumber')\">\n      {{ 'FORM_VALIDATION.PHONE_FORMAT' | oTranslate }}\n    </mat-error>\n    <mat-error *ngFor=\"let oError of getActiveOErrors()\">\n      {{ oError.text | oTranslate }}\n    </mat-error>\n  </mat-form-field>\n</div>",
                inputs: DEFAULT_INPUTS_O_PHONE_INPUT,
                outputs: DEFAULT_OUTPUTS_O_PHONE_INPUT,
                encapsulation: ViewEncapsulation.None,
                providers: [CountryCode],
                host: {
                    '[class.o-phone-input]': 'true'
                },
                styles: [".o-phone-input{overflow:hidden}.o-phone-input .read-only{pointer-events:none}.o-phone-input .read-only .mat-select-arrow-wrapper{visibility:hidden}.o-phone-input .read-only .mat-form-field-underline{background-image:none}.o-phone-input .mat-form-field.icon-field{height:100%}"]
            }] }
];
OPhoneInputComponent.ctorParameters = () => [
    { type: CountryCode },
    { type: OFormComponent, decorators: [{ type: Optional }, { type: Inject, args: [forwardRef(() => OFormComponent),] }] },
    { type: ElementRef },
    { type: Injector }
];
OPhoneInputComponent.propDecorators = {
    countries: [{ type: Input }],
    countryChange: [{ type: Output }],
    onPhoneDataChange: [{ type: Output }],
    countryList: [{ type: ViewChild, args: ['countryList', { static: false },] }],
    matInputRef: [{ type: ViewChild, args: ['matInputRef', { read: ElementRef, static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,