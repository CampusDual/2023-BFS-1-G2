import * as tslib_1 from "tslib";
import { Component, ElementRef, forwardRef, Inject, Injector, Optional, ViewEncapsulation } from '@angular/core';
import { InputConverter } from '../../../decorators/input-converter';
import { ORealPipe } from '../../../pipes/o-real.pipe';
import { NumberService } from '../../../services/number.service';
import { Util } from '../../../util/util';
import { OFormComponent } from '../../form/o-form.component';
import { DEFAULT_INPUTS_O_INTEGER_INPUT, DEFAULT_OUTPUTS_O_INTEGER_INPUT, OIntegerInputComponent } from '../integer-input/o-integer-input.component';
export const DEFAULT_INPUTS_O_REAL_INPUT = [
    ...DEFAULT_INPUTS_O_INTEGER_INPUT,
    'minDecimalDigits: min-decimal-digits',
    'maxDecimalDigits: max-decimal-digits',
    'decimalSeparator : decimal-separator',
    'strict'
];
export const DEFAULT_OUTPUTS_O_REAL_INPUT = [
    ...DEFAULT_OUTPUTS_O_INTEGER_INPUT
];
export class ORealInputComponent extends OIntegerInputComponent {
    constructor(form, elRef, injector) {
        super(form, elRef, injector);
        this.minDecimalDigits = 2;
        this.maxDecimalDigits = 2;
        this.step = 0.01;
        this.grouping = true;
        this.strict = false;
        this._defaultSQLTypeKey = 'FLOAT';
        this.numberService = this.injector.get(NumberService);
    }
    setComponentPipe() {
        this.componentPipe = new ORealPipe(this.injector);
    }
    initialize() {
        super.initialize();
        this.getFormControl().getValue = function () {
            if (!isNaN(Number(this.value))) {
                return Number(this.value);
            }
            else {
                return this.value;
            }
        };
    }
    ngOnInit() {
        super.ngOnInit();
        this.pipeArguments.decimalSeparator = this.decimalSeparator;
        this.pipeArguments.minDecimalDigits = this.minDecimalDigits;
        this.pipeArguments.maxDecimalDigits = this.maxDecimalDigits;
        this.pipeArguments.truncate = false;
        if (!this.isEmpty()) {
            this.ensureOFormValue(this.value);
        }
    }
    resolveValidators() {
        const validators = super.resolveValidators();
        if (Util.isDefined(this.maxDecimalDigits)) {
            validators.push(this.maxDecimalDigitsValidator.bind(this));
        }
        return validators;
    }
    ensureOFormValue(arg) {
        super.ensureOFormValue(arg);
        if (!this.isEmpty() && Util.isDefined(this.pipeArguments)) {
            const formattedValue = this.numberService.getRealValue(this.value.value, this.pipeArguments);
            if (!isNaN(Number(formattedValue))) {
                this.value.value = formattedValue;
            }
        }
    }
    maxDecimalDigitsValidator(control) {
        let ctrlValue = control.value;
        if (typeof control.value === 'number') {
            ctrlValue = ctrlValue.toString();
        }
        if (this.strict && ctrlValue && ctrlValue.length) {
            const valArray = ctrlValue.split(this.decimalSeparator ? this.decimalSeparator : '.');
            if (Util.isDefined(this.maxDecimalDigits) && (this.maxDecimalDigits > 0) && Util.isDefined(valArray[1]) && (valArray[1].length > this.maxDecimalDigits)) {
                return {
                    maxDecimaldigits: {
                        requiredMaxDecimaldigits: this.maxDecimalDigits
                    }
                };
            }
        }
        return {};
    }
    initializeStep() {
        if (this.step <= 0) {
            this.step = 1 / Math.pow(10, this.maxDecimalDigits);
            console.warn('`step` attribute must be greater than zero');
        }
    }
}
ORealInputComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-real-input',
                template: "<div [formGroup]=\"getFormGroup()\" [matTooltip]=\"tooltip\" [matTooltipClass]=\"tooltipClass\"\n  [matTooltipPosition]=\"tooltipPosition\" [matTooltipShowDelay]=\"tooltipShowDelay\"\n  [matTooltipHideDelay]=\"tooltipHideDelay\">\n  <mat-form-field [appearance]=\"appearance\" [floatLabel]=\"floatLabel\" [hideRequiredMarker]=\"hideRequiredMarker\"\n    [class.custom-width]=\"hasCustomWidth\" [class.icon-field]=\"showClearButton\" fxFlexFill>\n    <mat-label *ngIf=\"labelVisible\">{{ olabel | oTranslate }}</mat-label>\n    <input matInput [type]=\"inputType\" [id]=\"getAttribute()\" [formControlName]=\"getAttribute()\"\n      [placeholder]=\"placeHolder\" (focus)=\"innerOnFocus($event)\" (blur)=\"innerOnBlur($event)\"\n      (change)=\"onChangeEvent($event)\" [readonly]=\"isReadOnly\" [min]=\"min\" [max]=\"max\" [step]=\"step\"\n      [required]=\"isRequired\">\n    <button type=\"button\" *ngIf=\"showClearButton\" matSuffix mat-icon-button (click)=\"onClickClearValue($event)\">\n      <mat-icon svgIcon=\"ontimize:close\"></mat-icon>\n    </button>\n    <mat-error *oMatError=\"hasError('required')\">\n      {{ 'FORM_VALIDATION.REQUIRED' | oTranslate }}\n    </mat-error>\n    <mat-error *oMatError=\"hasError('min')\">\n      {{ 'FORM_VALIDATION.MIN_VALUE' | oTranslate }}: {{ getErrorValue('min', 'requiredMin') }}\n    </mat-error>\n    <mat-error *oMatError=\"hasError('max')\">\n      {{ 'FORM_VALIDATION.MAX_VALUE' | oTranslate }}: {{ getErrorValue('max', 'requiredMax') }}\n    </mat-error>\n    <mat-error *oMatError=\"hasError('minDecimaldigits')\">\n      {{ 'FORM_VALIDATION.MIN_DECIMAL_DIGITS' | oTranslate }}: {{ getErrorValue('minDecimaldigits', 'requiredMinDecimaldigits') }}\n    </mat-error>\n    <mat-error *oMatError=\"hasError('maxDecimaldigits')\">\n      {{ 'FORM_VALIDATION.MAX_DECIMAL_DIGITS' | oTranslate }}: {{ getErrorValue('maxDecimaldigits', 'requiredMaxDecimaldigits') }}\n    </mat-error>\n    <mat-error *ngFor=\"let oError of getActiveOErrors()\">\n      {{ oError.text | oTranslate }}\n    </mat-error>\n  </mat-form-field>\n</div>",
                inputs: DEFAULT_INPUTS_O_REAL_INPUT,
                outputs: DEFAULT_OUTPUTS_O_REAL_INPUT,
                encapsulation: ViewEncapsulation.None
            }] }
];
ORealInputComponent.ctorParameters = () => [
    { type: OFormComponent, decorators: [{ type: Optional }, { type: Inject, args: [forwardRef(() => OFormComponent),] }] },
    { type: ElementRef },
    { type: Injector }
];
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Number)
], ORealInputComponent.prototype, "minDecimalDigits", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Number)
], ORealInputComponent.prototype, "maxDecimalDigits", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Number)
], ORealInputComponent.prototype, "step", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], ORealInputComponent.prototype, "grouping", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], ORealInputComponent.prototype, "strict", void 0);
//# sourceMappingURL=data:application/json;base64,