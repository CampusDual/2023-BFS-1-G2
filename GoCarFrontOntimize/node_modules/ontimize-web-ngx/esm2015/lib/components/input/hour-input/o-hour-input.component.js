import * as tslib_1 from "tslib";
import { Component, ElementRef, forwardRef, Inject, Injector, Optional, ViewChild, ViewEncapsulation } from '@angular/core';
import moment from 'moment';
import { NgxMaterialTimepickerComponent } from 'ngx-material-timepicker';
import { InputConverter, NumberConverter } from '../../../decorators/input-converter';
import { Codes } from '../../../util/codes';
import { Util } from '../../../util/util';
import { OValidators } from '../../../validators/o-validators';
import { OFormValue } from '../../form/o-form-value';
import { OFormComponent } from '../../form/o-form.component';
import { DEFAULT_INPUTS_O_FORM_DATA_COMPONENT, DEFAULT_OUTPUTS_O_FORM_DATA_COMPONENT, OFormDataComponent } from '../../o-form-data-component.class';
import { OValueChangeEvent } from '../../o-value-change-event.class';
export const DEFAULT_INPUTS_O_HOUR_INPUT = [
    'format',
    'textInputEnabled: text-input-enabled',
    'min',
    'max',
    'valueType: value-type',
    ...DEFAULT_INPUTS_O_FORM_DATA_COMPONENT
];
export const DEFAULT_OUTPUTS_O_HOUR_INPUT = [
    ...DEFAULT_OUTPUTS_O_FORM_DATA_COMPONENT
];
export class OHourInputComponent extends OFormDataComponent {
    constructor(form, elRef, injector) {
        super(form, elRef, injector);
        this.textInputEnabled = true;
        this._format = Codes.TWENTY_FOUR_HOUR_FORMAT;
        this.onKeyboardInputDone = false;
        this._valueType = 'timestamp';
        this._defaultSQLTypeKey = 'TIMESTAMP';
    }
    initialize() {
        super.initialize();
        const formControl = this.getFormControl();
        if (formControl) {
            const self = this;
            formControl.getValue = function () {
                return self.getValue();
            };
        }
    }
    ngAfterViewInit() {
        super.ngAfterViewInit();
        this.modifyPickerMethods();
    }
    onKeyDown(e) {
        if (!Codes.isHourInputAllowed(e)) {
            e.preventDefault();
        }
    }
    innerOnBlur(event) {
        if (this.onKeyboardInputDone) {
            this.updateValeOnInputChange(event);
        }
        super.innerOnBlur(event);
    }
    registerOnFormControlChange() {
    }
    get formatString() {
        return (this.format === Codes.TWENTY_FOUR_HOUR_FORMAT ? Codes.HourFormat.TWENTY_FOUR : Codes.HourFormat.TWELVE);
    }
    open(e) {
        if (Util.isDefined(e)) {
            e.stopPropagation();
        }
        if (this.picker) {
            this.picker.open();
        }
    }
    setTime(event) {
        event.preventDefault();
        event.stopPropagation();
        const value = super.getValue();
        this.picker.updateTime(value);
    }
    setTimestampValue(value, options) {
        let parsedValue;
        const momentV = Util.isDefined(value) ? moment(value) : value;
        if (momentV && momentV.isValid()) {
            parsedValue = momentV.utcOffset(0).format(this.formatString);
        }
        this.setValue(parsedValue, options);
    }
    resolveValidators() {
        const validators = super.resolveValidators();
        if (this.format === Codes.TWENTY_FOUR_HOUR_FORMAT) {
            validators.push(OValidators.twentyFourHourFormatValidator);
        }
        else {
            validators.push(OValidators.twelveHourFormatValidator);
        }
        return validators;
    }
    set format(val) {
        const old = this._format;
        let parsedVal = NumberConverter(val);
        if (parsedVal !== Codes.TWELVE_FOUR_HOUR_FORMAT && parsedVal !== Codes.TWENTY_FOUR_HOUR_FORMAT) {
            parsedVal = Codes.TWENTY_FOUR_HOUR_FORMAT;
        }
        this._format = parsedVal;
        if (parsedVal !== old) {
            this.updateValidators();
        }
    }
    get format() {
        return this._format;
    }
    set valueType(val) {
        this._valueType = this.convertToOHourValueType(val);
    }
    get valueType() {
        return this._valueType;
    }
    convertToOHourValueType(val) {
        const result = 'string';
        const lowerVal = (val || '').toLowerCase();
        if (lowerVal === 'string' || lowerVal === 'timestamp') {
            return lowerVal;
        }
        return result;
    }
    onChangeEvent(arg) {
        this.onTimepickerChange(arg.target.value);
    }
    onTimepickerChange(event) {
        let value = event;
        if (Util.isDefined(value) && this.valueType === 'timestamp') {
            const valueTimestamp = moment(value, this.formatString).valueOf();
            if (!isNaN(valueTimestamp)) {
                value = valueTimestamp;
            }
        }
        this.setValue(value, {
            changeType: OValueChangeEvent.USER_CHANGE,
            emitEvent: false,
            emitModelToViewChange: false
        });
    }
    modifyPickerMethods() {
        if (this.picker && this.picker.inputElement) {
            this.picker.inputElement.addEventListener('change', () => {
                this.onKeyboardInputDone = true;
            });
        }
    }
    setFormValue(val, options, setDirty = false) {
        let stringValue = val;
        if (Util.isDefined(val) && this.valueType === 'timestamp') {
            let value = val instanceof OFormValue ? val.value : val;
            stringValue = this.getValueAsString(value);
        }
        this.ensureOFormValue(val);
        if (!this._fControl) {
            this._fControl = this.getControl();
        }
        if (this._fControl) {
            this.updateOFormControlValue(stringValue, options, setDirty);
        }
        this.oldValue = this.value.value;
    }
    updateValeOnInputChange(blurEvent) {
        if (this.onKeyboardInputDone) {
            const value = this.parseHour(blurEvent.currentTarget.value);
            this.setValue(value);
        }
        this.onKeyboardInputDone = false;
    }
    parseHour(value) {
        const strArray = value.split(':');
        let hour = strArray[0];
        if (Codes.TWELVE_FOUR_HOUR_FORMAT === this.format) {
            if (hour) {
                hour = parseInt(hour, 10);
                const period = hour <= 12 ? ' AM' : ' PM';
                if (hour > 12) {
                    hour = hour - 12;
                }
                strArray[0] = hour;
                value = strArray.join(':') + period;
            }
        }
        else if (Codes.TWENTY_FOUR_HOUR_FORMAT === this.format) {
        }
        return value;
    }
    emitOnValueChange(type, newValue, oldValue) {
        this.onChange.emit(newValue);
        super.emitOnValueChange(type, newValue, oldValue);
    }
    getValueAsString(val) {
        let value;
        if (typeof val === 'number') {
            value = moment(val).format(this.formatString);
        }
        else {
            value = this.convertToFormatString(val);
        }
        return value;
    }
    convertToFormatString(value) {
        if (value === '00:00' || !Util.isDefined(value)) {
            return value;
        }
        const formatStr = this.format === Codes.TWENTY_FOUR_HOUR_FORMAT ? 'HH:mm' : 'hh:mm a';
        let result;
        if (typeof value === 'number') {
            result = moment(value).format(formatStr);
        }
        else {
            result = value ? moment(value, 'h:mm A').format(formatStr) : value;
        }
        return result;
    }
}
OHourInputComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-hour-input',
                template: "<div fxLayout=\"row\" fxLayoutAlign=\"space-between center\" [formGroup]=\"getFormGroup()\" [matTooltip]=\"tooltip\" [matTooltipClass]=\"tooltipClass\"\n  [matTooltipPosition]=\"tooltipPosition\" [matTooltipShowDelay]=\"tooltipShowDelay\" [matTooltipHideDelay]=\"tooltipHideDelay\">\n  <mat-form-field [appearance]=\"appearance\" [floatLabel]=\"floatLabel\" fxFill [hideRequiredMarker]=\"hideRequiredMarker\">\n    <mat-label *ngIf=\"labelVisible\">{{ olabel | oTranslate }}</mat-label>\n    <input matInput [ngxTimepicker]=\"picker\" [id]=\"getAttribute()\" [placeholder]=\"placeHolder\" [formControlName]=\"getAttribute()\"\n      [readonly]=\"isReadOnly || !textInputEnabled\" (focus)=\"innerOnFocus($event)\" (blur)=\"innerOnBlur($event)\" [required]=\"isRequired\"\n      (change)=\"onChangeEvent($event)\" [min]=\"min\" [max]=\"max\" (keydown)=\"onKeyDown($event)\" [format]=\"format\" [disableClick]=\"true\">\n\n    <button type=\"button\" *ngIf=\"showClearButton\" matSuffix mat-icon-button (click)=\"onClickClearValue($event)\">\n      <mat-icon svgIcon=\"ontimize:close\"></mat-icon>\n    </button>\n    <button type=\"button\" matSuffix mat-icon-button [disabled]=\"isReadOnly || !enabled\" (click)=\"open($event)\">\n      <mat-icon ngxMaterialTimepickerToggleIcon svgIcon=\"ontimize:clock\"></mat-icon>\n    </button>\n\n    <mat-error *oMatError=\"hasError('required')\">\n      {{ 'FORM_VALIDATION.REQUIRED' | oTranslate }}\n    </mat-error>\n    <mat-error *oMatError=\"hasError('invalidFormatHour')\">\n      {{ 'FORM_VALIDATION.HOUR_FORMAT' | oTranslate }} {{ formatString }}\n    </mat-error>\n    <mat-error *ngFor=\"let oError of getActiveOErrors()\">\n      {{ oError.text | oTranslate }}\n    </mat-error>\n  </mat-form-field>\n</div>\n\n<ngx-material-timepicker #picker (timeSet)=\"onTimepickerChange($event)\" [confirmBtnTmpl]=\"confirmBtn\" [cancelBtnTmpl]=\"cancelBtn\">\n</ngx-material-timepicker>\n\n<ng-template #confirmBtn>\n  <button mat-stroked-button type=\"button\"><span>{{'OK' | oTranslate}}</span></button>\n</ng-template>\n\n<ng-template #cancelBtn>\n  <button mat-stroked-button type=\"button\"><span>{{'CANCEL' | oTranslate}}</span></button>\n</ng-template>\n",
                encapsulation: ViewEncapsulation.None,
                outputs: DEFAULT_OUTPUTS_O_HOUR_INPUT,
                inputs: DEFAULT_INPUTS_O_HOUR_INPUT,
                host: {
                    '[class.o-hour-input]': 'true'
                },
                styles: ["ngx-material-timepicker-container button.mat-stroked-button{margin:0 6px}ngx-material-timepicker-container .timepicker-backdrop-overlay,ngx-material-timepicker-container .timepicker-overlay{z-index:1001!important}"]
            }] }
];
OHourInputComponent.ctorParameters = () => [
    { type: OFormComponent, decorators: [{ type: Optional }, { type: Inject, args: [forwardRef(() => OFormComponent),] }] },
    { type: ElementRef },
    { type: Injector }
];
OHourInputComponent.propDecorators = {
    picker: [{ type: ViewChild, args: ['picker', { static: false },] }]
};
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OHourInputComponent.prototype, "textInputEnabled", void 0);
//# sourceMappingURL=data:application/json;base64,