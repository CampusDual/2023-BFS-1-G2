import * as tslib_1 from "tslib";
import { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';
import { Component, ElementRef, forwardRef, Inject, Injector, Optional, ViewChild } from '@angular/core';
import * as _moment from 'moment';
import { InputConverter } from '../../../decorators/input-converter';
import { MomentService } from '../../../services/moment.service';
import { OTranslateService } from '../../../services/translate/o-translate.service';
import { Util } from '../../../util/util';
import { OFormComponent } from '../../form/o-form.component';
import { OFormDataComponent } from '../../o-form-data-component.class';
import { OValueChangeEvent } from '../../o-value-change-event.class';
import { DEFAULT_INPUTS_O_DATE_INPUT } from '../date-input/o-date-input.component';
import { DEFAULT_OUTPUTS_O_TEXT_INPUT } from '../text-input/o-text-input.component';
import { ODaterangepickerDirective } from './o-daterange-input.directive';
export const DEFAULT_OUTPUTS_O_DATERANGE_INPUT = [
    ...DEFAULT_OUTPUTS_O_TEXT_INPUT
];
export const DEFAULT_INPUTS_O_DATERANGE_INPUT = [
    'separator',
    'showWeekNumbers:show-week-numbers',
    'showRanges:show-ranges',
    'olocale:locale',
    'startKey',
    'endKey',
    'valueType: value-type',
    'mode',
    ...DEFAULT_INPUTS_O_DATE_INPUT
];
const moment = _moment;
export class ODateRangeInputComponent extends OFormDataComponent {
    constructor(form, elRef, injector, breakpointObserver) {
        super(form, elRef, injector);
        this.breakpointObserver = breakpointObserver;
        this.textInputEnabled = true;
        this.showWeekNumbers = false;
        this.oTouchUi = false;
        this.showRanges = false;
        this.mode = 'auto';
        this._startKey = 'startDate';
        this._endKey = 'endDate';
        this._valueType = 'timestamp';
        this._separator = ' - ';
        this.oformat = 'L';
        this.oTranslate = this.injector.get(OTranslateService);
        this.momentSrv = this.injector.get(MomentService);
        if (!this.olocale) {
            this.olocale = this.momentSrv.getLocale();
            moment.locale(this.olocale);
        }
        this._localeOptions = {
            direction: 'ltr',
            separator: ' - ',
            weekLabel: this.oTranslate.get('DATERANGE.W'),
            applyLabel: this.oTranslate.get('DATERANGE.APPLYLABEL'),
            cancelLabel: this.oTranslate.get('CANCEL'),
            customRangeLabel: 'Custom range',
            daysOfWeek: moment.localeData().weekdaysMin(),
            monthNames: moment.localeData().monthsShort(),
            firstDay: moment.localeData().firstDayOfWeek(),
            format: 'L'
        };
    }
    get oMinDate() {
        return this._oMinDate;
    }
    set oMinDate(value) {
        this._oMinDate = moment(value, this.oformat);
    }
    get oMaxDate() {
        return this._oMaxDate;
    }
    set oMaxDate(value) {
        this._oMaxDate = moment(value, this.oformat);
    }
    get startKey() {
        return this._startKey;
    }
    set startKey(value) {
        this._startKey = value;
    }
    get endKey() {
        return this._endKey;
    }
    set endKey(value) {
        this._endKey = value;
    }
    get separator() {
        return this._separator;
    }
    set separator(value) {
        this._separator = value;
        if (this.getFormControl() && this.getFormControl().value) {
            this.updateElement();
        }
    }
    get showClearButton() {
        return this.clearButton && !this.isReadOnly && this.enabled && this.matInputRef.nativeElement.value;
    }
    get localeOptions() {
        return this._localeOptions;
    }
    isMobileMode() {
        return this.mode === 'mobile' || (this.mode === 'auto' && this.breakpointObserver.isMatched(Breakpoints.Handset));
    }
    isDesktopMode() {
        return this.mode === 'desktop' || (this.mode === 'auto' && !this.breakpointObserver.isMatched(Breakpoints.Handset));
    }
    ngOnInit() {
        super.ngOnInit();
        if (this.oformat) {
            this._localeOptions.format = this.oformat;
        }
    }
    openPicker() {
        this.pickerDirective.open();
    }
    onChangeEvent(event) {
        let objectValue;
        if (event instanceof Event) {
            const value = event.target.value;
            if (value !== '') {
                objectValue = this.getDateRangeToString(value);
            }
        }
        else {
            objectValue = event;
        }
        this.setValue(objectValue, {
            changeType: OValueChangeEvent.USER_CHANGE,
            emitEvent: false,
            emitModelToViewChange: false
        });
    }
    setValue(val, options = {}, setDirty = false) {
        super.setValue(val, options, setDirty);
        this.updateElement();
    }
    onClickClearValue(e) {
        super.onClickClearValue(e);
        this.pickerDirective.value = undefined;
        this.pickerDirective.datesUpdated.emit();
    }
    datesUpdated(range) {
        this.pickerDirective.close();
        this.setValue(range, {
            changeType: OValueChangeEvent.USER_CHANGE,
            emitEvent: false,
            emitModelToViewChange: false
        });
    }
    setData(newValue) {
        super.setData(newValue);
        this.pickerDirective.datesUpdated.emit(newValue);
        this.updateElement();
    }
    updateElement() {
        let chosenLabel;
        if (Util.isDefined(this.value) && Util.isDefined(this.value.value) && !this.isObjectDataRangeNull(this.value)) {
            if (this.value.value[this.pickerDirective.startKey] && this.value.value[this.pickerDirective.endKey]) {
                this.value.value[this.pickerDirective.startKey] = this.ensureDateRangeValue(this.value.value[this.pickerDirective.startKey], this._valueType);
                this.value.value[this.pickerDirective.endKey] = this.ensureDateRangeValue(this.value.value[this.pickerDirective.endKey], this._valueType);
                chosenLabel = this.value.value[this.pickerDirective.startKey].format(this.oformat) +
                    this.separator + this.value.value[this.pickerDirective.endKey].format(this.oformat);
            }
            else {
                chosenLabel = null;
            }
        }
        else {
            chosenLabel = null;
            this.pickerDirective.value = undefined;
        }
        this.pickerDirective._el.nativeElement.value = chosenLabel;
    }
    getDateRangeToString(valueToString) {
        const value = {};
        const range = valueToString.split(this.separator);
        value[this._startKey] = moment(range[0].trim(), this.oformat);
        value[this._endKey] = moment(range[1].trim(), this.oformat);
        return value;
    }
    resolveValidators() {
        const validators = super.resolveValidators();
        validators.push(this.rangeDateValidator.bind(this));
        if (Util.isDefined(this._oMinDate)) {
            validators.push(this.minDateValidator.bind(this));
        }
        if (Util.isDefined(this._oMaxDate)) {
            validators.push(this.maxDateValidator.bind(this));
        }
        validators.push(this.parseDateValidator.bind(this));
        return validators;
    }
    isObjectDataRangeNull(objectValue) {
        return objectValue !== null && objectValue.value !== null &&
            !Util.isDefined(objectValue.value[this.pickerDirective.startKey]) &&
            !Util.isDefined(objectValue.value[this.pickerDirective.endKey]);
    }
    rangeDateValidator(control) {
        if ((control.value instanceof Object)
            && !this.isObjectDataRangeNull(control) && control.value[this._endKey].isSameOrBefore(control.value[this._startKey])) {
            return {
                dateRange: true
            };
        }
        return {};
    }
    minDateValidator(control) {
        const mindate = moment(this._oMinDate);
        if ((control.value instanceof Object)
            && !this.isObjectDataRangeNull(control) && control.value[this._startKey].isBefore(mindate)) {
            return {
                dateRangeMin: {
                    dateMin: mindate.format(this.oformat)
                }
            };
        }
        return {};
    }
    maxDateValidator(control) {
        const maxdate = moment(this._oMaxDate);
        if ((control.value instanceof Object)
            && !this.isObjectDataRangeNull(control) && control.value[this._endKey].isAfter(maxdate)) {
            return {
                dateRangeMax: {
                    dateMax: maxdate.format(this.oformat)
                }
            };
        }
        return {};
    }
    parseDateValidator(control) {
        if ((control.value instanceof Object)
            && !this.isObjectDataRangeNull(control)
            && ((control.value[this._startKey] && !control.value[this._startKey].isValid())
                || (control.value[this._endKey] && !control.value[this._endKey].isValid()))) {
            return {
                dateRangeParse: {
                    format: this.oformat + this._localeOptions.separator + this.oformat
                }
            };
        }
        return {};
    }
    ensureDateRangeValue(val, valueType) {
        if (!Util.isDefined(val)) {
            return val;
        }
        let result = val;
        if (!moment.isMoment(val)) {
            switch (valueType) {
                case 'string':
                case 'date':
                    if ((val instanceof Date) || typeof val === 'string') {
                        const dateString = moment(val).format('YYYY-MM-DDThh:mm') + 'Z';
                        const q = moment(dateString);
                        if (q.isValid()) {
                            result = q;
                        }
                        else {
                            result = undefined;
                        }
                    }
                    else {
                        result = undefined;
                    }
                    break;
                case 'timestamp':
                    if (typeof val === 'number') {
                        const dateString = moment.unix(val).format('YYYY-MM-DDThh:mm') + 'Z';
                        const t = moment(dateString);
                        if (t.isValid()) {
                            result = t;
                        }
                        else {
                            result = undefined;
                        }
                    }
                    else {
                        result = val;
                    }
                    break;
                case 'iso-8601':
                    const m = moment(val);
                    if (m.isValid()) {
                        result = m;
                    }
                    else {
                        result = undefined;
                    }
                    break;
                default:
                    break;
            }
        }
        if (!Util.isDefined(result)) {
            console.warn(`ODateRangeInputComponent value (${val}) is not consistent with value-type (${valueType})`);
        }
        return result;
    }
    set valueType(val) {
        this._valueType = Util.convertToODateValueType(val);
    }
    get valueType() {
        return this._valueType;
    }
}
ODateRangeInputComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-daterange-input',
                template: "<div fxLayout=\"row\" fxLayoutAlign=\"space-between center\" [formGroup]=\"getFormGroup()\" [matTooltip]=\"tooltip\" [matTooltipClass]=\"tooltipClass\"\n  [matTooltipPosition]=\"tooltipPosition\" [matTooltipShowDelay]=\"tooltipShowDelay\" [matTooltipHideDelay]=\"tooltipHideDelay\">\n\n  <mat-form-field [appearance]=\"appearance\" [floatLabel]=\"floatLabel\" [hideRequiredMarker]=\"hideRequiredMarker\" [class.custom-width]=\"hasCustomWidth\"\n    class=\"icon-field\" fxFlexFill>\n    <mat-label *ngIf=\"labelVisible\">{{ olabel | oTranslate }}</mat-label>\n    <input #matInputRef matInput type=\"text\" o-daterange-input [id]=\"getAttribute()\" [formControlName]=\"getAttribute()\" [required]=\"isRequired\"\n      [placeholder]=\"placeHolder\" [readonly]=\"isReadOnly || !textInputEnabled\" showDropdowns=\"true\" showCancel=\"true\" [showRanges]=\"showRanges\"\n      (datesUpdated)=\"datesUpdated($event)\" [oTouchUi]=\"oTouchUi\" [minDate]=\"oMinDate\" [maxDate]=\"oMaxDate\" (focus)=\"innerOnFocus($event)\"\n      (blur)=\"innerOnBlur($event)\" (change)=\"onChangeEvent($event)\" [locale]=\"localeOptions\" [separator]=\"separator\" [startKey]=\"startKey\"\n      [endKey]=\"endKey\" [showWeekNumbers]=\"showWeekNumbers\" [singleDatePicker]=\"isMobileMode()\">\n    <button type=\"button\" matSuffix mat-icon-button (click)=\"openPicker()\" [disabled]=\"isReadOnly || !enabled\">\n      <mat-icon>today</mat-icon>\n    </button>\n\n    <button type=\"button\" *ngIf=\"showClearButton\" matSuffix mat-icon-button (click)=\"onClickClearValue($event)\" [disabled]=\"isReadOnly || !enabled\">\n      <mat-icon svgIcon=\"ontimize:close\"></mat-icon>\n    </button>\n\n    <mat-error *oMatError=\"hasError('required')\">\n      {{ 'FORM_VALIDATION.REQUIRED' | oTranslate }}\n    </mat-error>\n    <mat-error *oMatError=\"hasError('dateRange')\">\n      {{ 'FORM_VALIDATION.DATERANGE_INVALID' | oTranslate }}\n    </mat-error>\n    <mat-error *oMatError=\"hasError('dateRangeParse')\">\n      {{ 'FORM_VALIDATION.DATE_PARSE' | oTranslate }} : {{ getErrorValue('dateRangeParse', 'format') }}\n    </mat-error>\n    <mat-error *oMatError=\"hasError('dateRangeMin')\">\n      {{ 'FORM_VALIDATION.DATERANGE_MIN' | oTranslate }} : {{ getErrorValue('dateRangeMin', 'dateMin') }}\n    </mat-error>\n    <mat-error *oMatError=\"hasError('dateRangeMax')\">\n      {{ 'FORM_VALIDATION.DATERANGE_MAX' | oTranslate }} : {{ getErrorValue('dateRangeMax', 'dateMax') }}\n    </mat-error>\n    <mat-error *ngFor=\"let oError of getActiveOErrors()\">\n      {{ oError.text | oTranslate }}\n    </mat-error>\n  </mat-form-field>\n</div>\n",
                outputs: DEFAULT_OUTPUTS_O_DATERANGE_INPUT,
                inputs: DEFAULT_INPUTS_O_DATERANGE_INPUT,
                styles: [""]
            }] }
];
ODateRangeInputComponent.ctorParameters = () => [
    { type: OFormComponent, decorators: [{ type: Optional }, { type: Inject, args: [forwardRef(() => OFormComponent),] }] },
    { type: ElementRef },
    { type: Injector },
    { type: BreakpointObserver }
];
ODateRangeInputComponent.propDecorators = {
    pickerDirective: [{ type: ViewChild, args: [ODaterangepickerDirective, { static: true },] }],
    matInputRef: [{ type: ViewChild, args: ['matInputRef', { read: ElementRef, static: true },] }]
};
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], ODateRangeInputComponent.prototype, "textInputEnabled", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], ODateRangeInputComponent.prototype, "showWeekNumbers", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], ODateRangeInputComponent.prototype, "oTouchUi", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], ODateRangeInputComponent.prototype, "showRanges", void 0);
//# sourceMappingURL=data:application/json;base64,