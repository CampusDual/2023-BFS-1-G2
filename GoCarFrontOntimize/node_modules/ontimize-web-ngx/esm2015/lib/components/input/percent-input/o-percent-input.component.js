import * as tslib_1 from "tslib";
import { Component, ViewEncapsulation } from '@angular/core';
import { InputConverter } from '../../../decorators/input-converter';
import { OPercentPipe } from '../../../pipes/o-percentage.pipe';
import { Util } from '../../../util/util';
import { DEFAULT_INPUTS_O_REAL_INPUT, DEFAULT_OUTPUTS_O_REAL_INPUT, ORealInputComponent } from '../real-input/o-real-input.component';
export const DEFAULT_INPUTS_O_PERCENT_INPUT = [
    ...DEFAULT_INPUTS_O_REAL_INPUT,
    'valueBase: value-base'
];
export const DEFAULT_OUTPUTS_O_PERCENT_INPUT = [
    ...DEFAULT_OUTPUTS_O_REAL_INPUT
];
export class OPercentInputComponent extends ORealInputComponent {
    constructor() {
        super(...arguments);
        this.grouping = true;
        this.valueBase = 1;
    }
    ngOnInit() {
        if (!Util.isDefined(this.min)) {
            this.min = 0;
        }
        if (!Util.isDefined(this.max)) {
            this.max = 100;
        }
        super.ngOnInit();
        this.pipeArguments.valueBase = this.valueBase;
    }
    setComponentPipe() {
        this.componentPipe = new OPercentPipe(this.injector);
    }
}
OPercentInputComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-percent-input',
                template: "<div [formGroup]=\"getFormGroup()\" [matTooltip]=\"tooltip\" [matTooltipClass]=\"tooltipClass\"\n  [matTooltipPosition]=\"tooltipPosition\" [matTooltipShowDelay]=\"tooltipShowDelay\"\n  [matTooltipHideDelay]=\"tooltipHideDelay\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n  <mat-form-field [appearance]=\"appearance\" [floatLabel]=\"floatLabel\" [hideRequiredMarker]=\"hideRequiredMarker\"\n    [class.custom-width]=\"hasCustomWidth\" class=\"icon-field\" fxFlexFill>\n    <mat-label *ngIf=\"labelVisible\">{{ olabel | oTranslate }}</mat-label>\n    <input matInput [type]=\"inputType\" [id]=\"getAttribute()\" [formControlName]=\"getAttribute()\"\n      [placeholder]=\"placeHolder\" (focus)=\"innerOnFocus($event)\" (blur)=\"innerOnBlur($event)\" [readonly]=\"isReadOnly\"\n      (change)=\"onChangeEvent($event)\" [min]=\"min\" [max]=\"max\" [step]=\"step\" [required]=\"isRequired\">\n    <button type=\"button\" *ngIf=\"showClearButton\" matSuffix mat-icon-button (click)=\"onClickClearValue($event)\">\n      <mat-icon svgIcon=\"ontimize:close\"></mat-icon>\n    </button>\n    <mat-icon svgIcon=\"ontimize:PERCENT\" matSuffix class=\"svg-icon\" [class.mat-disabled]=\"!enabled\"></mat-icon>\n    <mat-error *oMatError=\"hasError('required')\">\n      {{ 'FORM_VALIDATION.REQUIRED' | oTranslate }}\n    </mat-error>\n    <mat-error *oMatError=\"hasError('min')\" >\n      {{ 'FORM_VALIDATION.MIN_VALUE' | oTranslate }}: {{ getErrorValue('min', 'requiredMin') }}\n    </mat-error>\n    <mat-error *oMatError=\"hasError('max')\">\n      {{ 'FORM_VALIDATION.MAX_VALUE' | oTranslate }}: {{ getErrorValue('max', 'requiredMax') }}\n    </mat-error>\n    <mat-error *oMatError=\"hasError('minDecimaldigits')\">\n      {{ 'FORM_VALIDATION.MIN_DECIMAL_DIGITS' | oTranslate }}: {{ getErrorValue('minDecimaldigits', 'requiredMinDecimaldigits') }}\n    </mat-error>\n    <mat-error *oMatError=\"hasError('maxDecimaldigits')\">\n      {{ 'FORM_VALIDATION.MAX_DECIMAL_DIGITS' | oTranslate }}: {{ getErrorValue('maxDecimaldigits', 'requiredMaxDecimaldigits') }}\n    </mat-error>\n    <mat-error *ngFor=\"let oError of getActiveOErrors()\">\n      {{ oError.text | oTranslate }}\n    </mat-error>\n  </mat-form-field>\n</div>",
                inputs: DEFAULT_INPUTS_O_PERCENT_INPUT,
                outputs: DEFAULT_OUTPUTS_O_PERCENT_INPUT,
                encapsulation: ViewEncapsulation.None
            }] }
];
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OPercentInputComponent.prototype, "grouping", void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1wZXJjZW50LWlucHV0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL29udGltaXplLXdlYi1uZ3gvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9pbnB1dC9wZXJjZW50LWlucHV0L28tcGVyY2VudC1pbnB1dC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFckUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQ3JFLE9BQU8sRUFBa0QsWUFBWSxFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDaEgsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzFDLE9BQU8sRUFDTCwyQkFBMkIsRUFDM0IsNEJBQTRCLEVBQzVCLG1CQUFtQixFQUNwQixNQUFNLHNDQUFzQyxDQUFDO0FBRzlDLE1BQU0sQ0FBQyxNQUFNLDhCQUE4QixHQUFHO0lBQzVDLEdBQUcsMkJBQTJCO0lBQzlCLHVCQUF1QjtDQUN4QixDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sK0JBQStCLEdBQUc7SUFDN0MsR0FBRyw0QkFBNEI7Q0FDaEMsQ0FBQztBQVNGLE1BQU0sT0FBTyxzQkFBdUIsU0FBUSxtQkFBbUI7SUFQL0Q7O1FBVUUsYUFBUSxHQUFZLElBQUksQ0FBQztRQUV6QixjQUFTLEdBQTZCLENBQUMsQ0FBQztJQW9CMUMsQ0FBQztJQWZRLFFBQVE7UUFDYixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDN0IsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7U0FDZDtRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUM3QixJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztTQUNoQjtRQUNELEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUVqQixJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQ2hELENBQUM7SUFFRCxnQkFBZ0I7UUFDZCxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksWUFBWSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN2RCxDQUFDOzs7WUEvQkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxpQkFBaUI7Z0JBQzNCLG1zRUFBK0M7Z0JBQy9DLE1BQU0sRUFBRSw4QkFBOEI7Z0JBQ3RDLE9BQU8sRUFBRSwrQkFBK0I7Z0JBQ3hDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO2FBQ3RDOztBQUlDO0lBREMsY0FBYyxFQUFFOzt3REFDUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBJbnB1dENvbnZlcnRlciB9IGZyb20gJy4uLy4uLy4uL2RlY29yYXRvcnMvaW5wdXQtY29udmVydGVyJztcbmltcG9ydCB7IElQZXJjZW50UGlwZUFyZ3VtZW50LCBPUGVyY2VudGFnZVZhbHVlQmFzZVR5cGUsIE9QZXJjZW50UGlwZSB9IGZyb20gJy4uLy4uLy4uL3BpcGVzL28tcGVyY2VudGFnZS5waXBlJztcbmltcG9ydCB7IFV0aWwgfSBmcm9tICcuLi8uLi8uLi91dGlsL3V0aWwnO1xuaW1wb3J0IHtcbiAgREVGQVVMVF9JTlBVVFNfT19SRUFMX0lOUFVULFxuICBERUZBVUxUX09VVFBVVFNfT19SRUFMX0lOUFVULFxuICBPUmVhbElucHV0Q29tcG9uZW50XG59IGZyb20gJy4uL3JlYWwtaW5wdXQvby1yZWFsLWlucHV0LmNvbXBvbmVudCc7XG5cblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfSU5QVVRTX09fUEVSQ0VOVF9JTlBVVCA9IFtcbiAgLi4uREVGQVVMVF9JTlBVVFNfT19SRUFMX0lOUFVULFxuICAndmFsdWVCYXNlOiB2YWx1ZS1iYXNlJ1xuXTtcblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfT1VUUFVUU19PX1BFUkNFTlRfSU5QVVQgPSBbXG4gIC4uLkRFRkFVTFRfT1VUUFVUU19PX1JFQUxfSU5QVVRcbl07XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ28tcGVyY2VudC1pbnB1dCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9vLXBlcmNlbnQtaW5wdXQuY29tcG9uZW50Lmh0bWwnLFxuICBpbnB1dHM6IERFRkFVTFRfSU5QVVRTX09fUEVSQ0VOVF9JTlBVVCxcbiAgb3V0cHV0czogREVGQVVMVF9PVVRQVVRTX09fUEVSQ0VOVF9JTlBVVCxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZVxufSlcbmV4cG9ydCBjbGFzcyBPUGVyY2VudElucHV0Q29tcG9uZW50IGV4dGVuZHMgT1JlYWxJbnB1dENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgQElucHV0Q29udmVydGVyKClcbiAgZ3JvdXBpbmc6IGJvb2xlYW4gPSB0cnVlO1xuXG4gIHZhbHVlQmFzZTogT1BlcmNlbnRhZ2VWYWx1ZUJhc2VUeXBlID0gMTtcblxuICBwcm90ZWN0ZWQgY29tcG9uZW50UGlwZTogT1BlcmNlbnRQaXBlO1xuICBwcm90ZWN0ZWQgcGlwZUFyZ3VtZW50czogSVBlcmNlbnRQaXBlQXJndW1lbnQ7XG5cbiAgcHVibGljIG5nT25Jbml0KCkge1xuICAgIGlmICghVXRpbC5pc0RlZmluZWQodGhpcy5taW4pKSB7XG4gICAgICB0aGlzLm1pbiA9IDA7XG4gICAgfVxuICAgIGlmICghVXRpbC5pc0RlZmluZWQodGhpcy5tYXgpKSB7XG4gICAgICB0aGlzLm1heCA9IDEwMDtcbiAgICB9XG4gICAgc3VwZXIubmdPbkluaXQoKTtcblxuICAgIHRoaXMucGlwZUFyZ3VtZW50cy52YWx1ZUJhc2UgPSB0aGlzLnZhbHVlQmFzZTtcbiAgfVxuXG4gIHNldENvbXBvbmVudFBpcGUoKTogdm9pZCB7XG4gICAgdGhpcy5jb21wb25lbnRQaXBlID0gbmV3IE9QZXJjZW50UGlwZSh0aGlzLmluamVjdG9yKTtcbiAgfVxufVxuIl19