import * as tslib_1 from "tslib";
import { Component, ElementRef, EventEmitter, forwardRef, Inject, Injector, Optional, ViewChild } from '@angular/core';
import { FormControl } from '@angular/forms';
import { MatDialog, MatInput } from '@angular/material';
import { InputConverter } from '../../../decorators/input-converter';
import { OntimizeServiceProvider } from '../../../services/factories';
import { Util } from '../../../util/util';
import { OFormComponent } from '../../form/o-form.component';
import { OValueChangeEvent } from '../../o-value-change-event.class';
import { DEFAULT_INPUTS_O_FORM_SERVICE_COMPONENT, DEFAULT_OUTPUTS_O_FORM_SERVICE_COMPONENT, OFormServiceComponent } from '../o-form-service-component.class';
import { OListPickerDialogComponent } from './o-list-picker-dialog.component';
export const DEFAULT_INPUTS_O_LIST_PICKER = [
    ...DEFAULT_INPUTS_O_FORM_SERVICE_COMPONENT,
    'filter',
    'dialogWidth : dialog-width',
    'dialogHeight : dialog-height',
    'queryRows: query-rows',
    'textInputEnabled: text-input-enabled',
    'dialogDisableClose: dialog-disable-close',
    'dialogClass: dialog-class'
];
export const DEFAULT_OUTPUTS_O_LIST_PICKER = [
    ...DEFAULT_OUTPUTS_O_FORM_SERVICE_COMPONENT,
    'onDialogAccept',
    'onDialogCancel'
];
export class OListPickerComponent extends OFormServiceComponent {
    constructor(form, elRef, injector) {
        super(form, elRef, injector);
        this.onDialogAccept = new EventEmitter();
        this.onDialogCancel = new EventEmitter();
        this.textInputEnabled = true;
        this.dialogDisableClose = false;
        this.filter = true;
        this.dialogHeight = '55%';
        this.blurDelay = 200;
        this.blurPrevent = false;
        this.matDialog = this.injector.get(MatDialog);
        this.stateCtrl = new FormControl();
        this.clearButton = true;
    }
    ngOnInit() {
        this.initialize();
        if (!Util.isDefined(this.stateCtrl.value)) {
            this.setStateCtrlValue();
        }
    }
    ngOnChanges(changes) {
        super.ngOnChanges(changes);
        if (typeof (changes.staticData) !== 'undefined') {
            this.cacheQueried = true;
            this.setDataArray(changes.staticData.currentValue);
        }
    }
    createFormControl(cfg, validators) {
        this._fControl = super.createFormControl(cfg, validators);
        this._fControl.fControlChildren = [this.stateCtrl];
        return this._fControl;
    }
    ensureOFormValue(value) {
        super.ensureOFormValue(value);
        this.syncDataIndex(false);
    }
    setEnabled(value) {
        super.setEnabled(value);
        if (this.stateCtrl && this.hasEnabledPermission() || this.hasVisiblePermission()) {
            value ? this.stateCtrl.enable() : this.stateCtrl.disable();
        }
    }
    ngAfterViewInit() {
        super.ngAfterViewInit();
        if (this.queryOnInit) {
            this.queryData();
        }
        else if (this.queryOnBind) {
            this.syncDataIndex();
        }
    }
    getDescriptionValue() {
        if (!Util.isDefined(this.descriptionColArray) || !Util.isDefined(this._currentIndex)) {
            return '';
        }
        if (Util.isDefined(this.renderer)) {
            return this.renderer.getListPickerValue(this.dataArray[this._currentIndex]);
        }
        else {
            return this.getOptionDescriptionValue(this.dataArray[this._currentIndex]);
        }
    }
    onClickClear(e) {
        e.preventDefault();
        e.stopPropagation();
        if (!this.isReadOnly && this.enabled) {
            clearTimeout(this.blurTimer);
            this.blurPrevent = true;
            this.setValue(undefined);
        }
    }
    onClickInput(e) {
        if (!this.textInputEnabled) {
            this.onClickListpicker(e);
        }
    }
    onClickListpicker(e) {
        e.preventDefault();
        e.stopPropagation();
        if (!this.isReadOnly && this.enabled) {
            clearTimeout(this.blurTimer);
            this.openDialog();
        }
    }
    onDialogClose(evt) {
        this.dialogRef = null;
        this.visibleInputValue = undefined;
        if (evt instanceof Object && typeof evt[this.valueColumn] !== 'undefined') {
            const self = this;
            window.setTimeout(() => {
                self.setValue(evt[self.valueColumn], { changeType: OValueChangeEvent.USER_CHANGE });
                if (self._fControl) {
                    self._fControl.markAsTouched();
                    self._fControl.markAsDirty();
                }
                self.onDialogAccept.emit();
            }, 0);
        }
        else {
            this.onDialogCancel.emit();
        }
    }
    innerOnBlur(evt) {
        if (!this.isReadOnly && this.enabled) {
            const self = this;
            this.blurTimer = setTimeout(() => {
                if (!self.blurPrevent) {
                    self._fControl.markAsTouched();
                    self.onBlur.emit(evt);
                    if (self.visibleInputValue !== undefined && self.visibleInputValue.length > 0) {
                        self.openDialog();
                    }
                    else if (self.visibleInputValue !== undefined) {
                        self.setValue(undefined);
                        self.visibleInputValue = undefined;
                    }
                    else {
                        self._fControl.markAsTouched();
                    }
                }
                self.blurPrevent = false;
            }, this.blurDelay);
        }
    }
    onVisibleInputChange(event) {
        this.visibleInputValue = event.target.value;
    }
    onKeydownEnter(val) {
        clearTimeout(this.blurTimer);
        this.blurPrevent = true;
        this.visibleInputValue = val;
        this.openDialog();
    }
    setFormValue(val, options, setDirty = false) {
        super.setFormValue(val, options, setDirty);
        this.setStateCtrlValue();
    }
    openDialog() {
        const cfg = {
            role: 'dialog',
            disableClose: this.dialogDisableClose,
            panelClass: ['cdk-overlay-list-picker', 'o-dialog-class', this.dialogClass],
            data: {
                data: this.getDialogDataArray(this.dataArray),
                filter: this.filter,
                searchVal: this.visibleInputValue,
                menuColumns: this.visibleColumns,
                visibleColumns: this.visibleColArray,
                queryRows: this.queryRows,
                renderer: this.renderer
            }
        };
        if (this.dialogWidth !== undefined) {
            cfg.width = this.dialogWidth;
        }
        if (this.dialogHeight !== undefined) {
            cfg.height = this.dialogHeight;
        }
        this.dialogRef = this.matDialog.open(OListPickerDialogComponent, cfg);
        this.dialogRef.afterClosed().subscribe(result => this.onDialogClose(result));
    }
    getDialogDataArray(dataArray) {
        const result = [];
        dataArray.forEach((item, itemIndex) => {
            const newItem = Object.assign({}, item);
            if (!this.renderer) {
                newItem._parsedVisibleColumnText = this.getOptionDescriptionValue(item);
            }
            newItem._parsedIndex = itemIndex;
            result.push(newItem);
        });
        return result;
    }
    registerRenderer(renderer) {
        this.renderer = renderer;
        this.renderer.initialize();
    }
    setStateCtrlValue() {
        let descriptionValue = this.getDescriptionValue();
        if (typeof descriptionValue === 'string' && descriptionValue.length === 0) {
            descriptionValue = null;
        }
        this.stateCtrl.setValue(descriptionValue);
    }
    selectValue() {
        const inputEl = document.getElementById('desc_' + this.oattr);
        if (inputEl) {
            inputEl.select();
        }
    }
}
OListPickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-list-picker',
                template: "<div (click)=\"onClickInput($event)\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\" [formGroup]=\"getFormGroup()\"\n  [matTooltip]=\"tooltip\" [matTooltipClass]=\"tooltipClass\" [matTooltipPosition]=\"tooltipPosition\"\n  [matTooltipShowDelay]=\"tooltipShowDelay\" [matTooltipHideDelay]=\"tooltipHideDelay\"\n  class=\"custom-error o-list-picker-content\" [oContextMenu]=\"oContextMenu\">\n  <input #inputModel class=\"input-model\" type=\"text\" [id]=\"getAttribute()\" [formControlName]=\"getAttribute()\">\n\n  <mat-form-field [appearance]=\"appearance\" [floatLabel]=\"floatLabel\" [class.custom-width]=\"hasCustomWidth\"\n    [hideRequiredMarker]=\"hideRequiredMarker\" class=\"icon-field\" #innerInputContainer fxFlexFill>\n    <mat-label *ngIf=\"labelVisible\">{{ olabel | oTranslate }}</mat-label>\n\n    <input #visibleInput matInput type=\"text\" [attr.id]=\"'desc_' + getAttribute()\" [id]=\"'desc_' + getAttribute()\"\n      [formControl]=\"stateCtrl\" [placeholder]=\"placeHolder\" [value]=\"getDescriptionValue()\"\n      (input)=\"onVisibleInputChange($event)\" (focus)=\"innerOnFocus($event)\" (blur)=\"innerOnBlur($event)\"\n      [readonly]=\"isReadOnly || !textInputEnabled\" [required]=\"isRequired\"\n      (keydown.enter)=\"onKeydownEnter(visibleInput.value)\" (change)=\"onChangeEvent($event)\">\n\n    <button type=\"button\" [disabled]=\"isReadOnly || !enabled\" [class.read-only]=\"isReadOnly\" matSuffix mat-icon-button\n      (click)=\"onClickListpicker($event)\">\n      <mat-icon svgIcon=\"ontimize:search\"></mat-icon>\n    </button>\n\n    <button type=\"button\" [disabled]=\"isReadOnly || !enabled\" [class.read-only]=\"isReadOnly\" matSuffix mat-icon-button\n      (click)=\"onClickClearValue($event)\" *ngIf=\"showClearButton\">\n      <mat-icon svgIcon=\"ontimize:clear\"></mat-icon>\n    </button>\n\n    <mat-error *oMatError=\"hasError('required')\">\n      {{ 'FORM_VALIDATION.REQUIRED' | oTranslate }}\n    </mat-error>\n    <mat-error *ngFor=\"let oError of getActiveOErrors()\">\n      {{ oError.text | oTranslate }}\n    </mat-error>\n  </mat-form-field>\n\n  <o-context-menu *ngIf=\"!this.isReadOnly && this.enabled\">\n    <o-context-menu-item attr=\"refresh\" label=\"FORM_SERVICE_COMPONENT.REFRESH\" svg-icon=\"ontimize:autorenew\" (execute)=\"refresh()\">\n    </o-context-menu-item>\n  </o-context-menu>\n</div>",
                providers: [
                    OntimizeServiceProvider,
                    { provide: OFormServiceComponent, useExisting: forwardRef(() => OListPickerComponent) }
                ],
                inputs: DEFAULT_INPUTS_O_LIST_PICKER,
                outputs: DEFAULT_OUTPUTS_O_LIST_PICKER,
                styles: [".o-list-picker-content .input-model{display:none!important}.o-list-picker-content .mat-button.mat-disabled{cursor:default}"]
            }] }
];
OListPickerComponent.ctorParameters = () => [
    { type: OFormComponent, decorators: [{ type: Optional }, { type: Inject, args: [forwardRef(() => OFormComponent),] }] },
    { type: ElementRef },
    { type: Injector }
];
OListPickerComponent.propDecorators = {
    inputModel: [{ type: ViewChild, args: ['inputModel', { static: false },] }],
    visibleInput: [{ type: ViewChild, args: ['visibleInput', { static: false },] }]
};
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OListPickerComponent.prototype, "textInputEnabled", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OListPickerComponent.prototype, "dialogDisableClose", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OListPickerComponent.prototype, "filter", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Number)
], OListPickerComponent.prototype, "queryRows", void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1saXN0LXBpY2tlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9vbnRpbWl6ZS13ZWItbmd4LyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvaW5wdXQvbGlzdHBpY2tlci9vLWxpc3QtcGlja2VyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUVMLFNBQVMsRUFDVCxVQUFVLEVBQ1YsWUFBWSxFQUNaLFVBQVUsRUFDVixNQUFNLEVBQ04sUUFBUSxFQUdSLFFBQVEsRUFFUixTQUFTLEVBQ1YsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxTQUFTLEVBQWlDLFFBQVEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRXZGLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUNyRSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUV0RSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDMUMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQzdELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBRXJFLE9BQU8sRUFDTCx1Q0FBdUMsRUFDdkMsd0NBQXdDLEVBQ3hDLHFCQUFxQixFQUN0QixNQUFNLG1DQUFtQyxDQUFDO0FBRTNDLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBRTlFLE1BQU0sQ0FBQyxNQUFNLDRCQUE0QixHQUFHO0lBQzFDLEdBQUcsdUNBQXVDO0lBQzFDLFFBQVE7SUFDUiw0QkFBNEI7SUFDNUIsOEJBQThCO0lBQzlCLHVCQUF1QjtJQUN2QixzQ0FBc0M7SUFDdEMsMENBQTBDO0lBQzFDLDJCQUEyQjtDQUM1QixDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sNkJB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QTZDO2dCQUU3QyxTQUFTLEVBQUU7b0JBQ1QsdUJBQXVCO29CQUN2QixFQUFFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLG9CQUFvQixDQUFDLEVBQUU7aUJBQ3hGO2dCQUNELE1BQU0sRUFBRSw0QkFBNEI7Z0JBQ3BDLE9BQU8sRUFBRSw2QkFBNkI7O2FBQ3ZDOzs7WUF0Q1EsY0FBYyx1QkFnRmxCLFFBQVEsWUFBSSxNQUFNLFNBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLGNBQWMsQ0FBQztZQWxHdEQsVUFBVTtZQUlWLFFBQVE7Ozt5QkFxRlAsU0FBUyxTQUFDLFlBQVksRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUU7MkJBQ3pDLFNBQVMsU0FBQyxjQUFjLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFOztBQXRCNUM7SUFEQyxjQUFjLEVBQUU7OzhEQUN1QjtBQUV4QztJQURDLGNBQWMsRUFBRTs7Z0VBQzBCO0FBRTNDO0lBREMsY0FBYyxFQUFFOztvREFDZ0I7QUFLakM7SUFEQyxjQUFjLEVBQUU7O3VEQUNXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBFdmVudEVtaXR0ZXIsXG4gIGZvcndhcmRSZWYsXG4gIEluamVjdCxcbiAgSW5qZWN0b3IsXG4gIE9uQ2hhbmdlcyxcbiAgT25Jbml0LFxuICBPcHRpb25hbCxcbiAgU2ltcGxlQ2hhbmdlLFxuICBWaWV3Q2hpbGRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3JtQ29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IE1hdERpYWxvZywgTWF0RGlhbG9nQ29uZmlnLCBNYXREaWFsb2dSZWYsIE1hdElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwnO1xuXG5pbXBvcnQgeyBJbnB1dENvbnZlcnRlciB9IGZyb20gJy4uLy4uLy4uL2RlY29yYXRvcnMvaW5wdXQtY29udmVydGVyJztcbmltcG9ydCB7IE9udGltaXplU2VydmljZVByb3ZpZGVyIH0gZnJvbSAnLi4vLi4vLi4vc2VydmljZXMvZmFjdG9yaWVzJztcbmltcG9ydCB7IEZvcm1WYWx1ZU9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi90eXBlcy9mb3JtLXZhbHVlLW9wdGlvbnMudHlwZSc7XG5pbXBvcnQgeyBVdGlsIH0gZnJvbSAnLi4vLi4vLi4vdXRpbC91dGlsJztcbmltcG9ydCB7IE9Gb3JtQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vZm9ybS9vLWZvcm0uY29tcG9uZW50JztcbmltcG9ydCB7IE9WYWx1ZUNoYW5nZUV2ZW50IH0gZnJvbSAnLi4vLi4vby12YWx1ZS1jaGFuZ2UtZXZlbnQuY2xhc3MnO1xuaW1wb3J0IHsgT0Zvcm1Db250cm9sIH0gZnJvbSAnLi4vby1mb3JtLWNvbnRyb2wuY2xhc3MnO1xuaW1wb3J0IHtcbiAgREVGQVVMVF9JTlBVVFNfT19GT1JNX1NFUlZJQ0VfQ09NUE9ORU5ULFxuICBERUZBVUxUX09VVFBVVFNfT19GT1JNX1NFUlZJQ0VfQ09NUE9ORU5ULFxuICBPRm9ybVNlcnZpY2VDb21wb25lbnRcbn0gZnJvbSAnLi4vby1mb3JtLXNlcnZpY2UtY29tcG9uZW50LmNsYXNzJztcbmltcG9ydCB7IE9MaXN0UGlja2VyQ3VzdG9tUmVuZGVyZXIgfSBmcm9tICcuL2xpc3RwaWNrZXItcmVuZGVyZXIvby1saXN0LXBpY2tlci1yZW5kZXJlci5jbGFzcyc7XG5pbXBvcnQgeyBPTGlzdFBpY2tlckRpYWxvZ0NvbXBvbmVudCB9IGZyb20gJy4vby1saXN0LXBpY2tlci1kaWFsb2cuY29tcG9uZW50JztcblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfSU5QVVRTX09fTElTVF9QSUNLRVIgPSBbXG4gIC4uLkRFRkFVTFRfSU5QVVRTX09fRk9STV9TRVJWSUNFX0NPTVBPTkVOVCxcbiAgJ2ZpbHRlcicsXG4gICdkaWFsb2dXaWR0aCA6IGRpYWxvZy13aWR0aCcsXG4gICdkaWFsb2dIZWlnaHQgOiBkaWFsb2ctaGVpZ2h0JyxcbiAgJ3F1ZXJ5Um93czogcXVlcnktcm93cycsXG4gICd0ZXh0SW5wdXRFbmFibGVkOiB0ZXh0LWlucHV0LWVuYWJsZWQnLFxuICAnZGlhbG9nRGlzYWJsZUNsb3NlOiBkaWFsb2ctZGlzYWJsZS1jbG9zZScsXG4gICdkaWFsb2dDbGFzczogZGlhbG9nLWNsYXNzJ1xuXTtcblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfT1VUUFVUU19PX0xJU1RfUElDS0VSID0gW1xuICAuLi5ERUZBVUxUX09VVFBVVFNfT19GT1JNX1NFUlZJQ0VfQ09NUE9ORU5ULFxuICAnb25EaWFsb2dBY2NlcHQnLFxuICAnb25EaWFsb2dDYW5jZWwnXG5dO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdvLWxpc3QtcGlja2VyJyxcbiAgdGVtcGxhdGVVcmw6ICcuL28tbGlzdC1waWNrZXIuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9vLWxpc3QtcGlja2VyLmNvbXBvbmVudC5zY3NzJ10sXG4gIHByb3ZpZGVyczogW1xuICAgIE9udGltaXplU2VydmljZVByb3ZpZGVyLFxuICAgIHsgcHJvdmlkZTogT0Zvcm1TZXJ2aWNlQ29tcG9uZW50LCB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBPTGlzdFBpY2tlckNvbXBvbmVudCkgfVxuICBdLFxuICBpbnB1dHM6IERFRkFVTFRfSU5QVVRTX09fTElTVF9QSUNLRVIsXG4gIG91dHB1dHM6IERFRkFVTFRfT1VUUFVUU19PX0xJU1RfUElDS0VSXG59KVxuZXhwb3J0IGNsYXNzIE9MaXN0UGlja2VyQ29tcG9uZW50IGV4dGVuZHMgT0Zvcm1TZXJ2aWNlQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25DaGFuZ2VzLCBPbkluaXQge1xuXG4gIC8qIE91dHB1dHMgKi9cbiAgcHVibGljIG9uRGlhbG9nQWNjZXB0OiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgcHVibGljIG9uRGlhbG9nQ2FuY2VsOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgLyogRW5kIG91dHB1dHMgKi9cblxuICBwdWJsaWMgc3RhdGVDdHJsOiBGb3JtQ29udHJvbDtcblxuICAvKiBJbnB1dHMgKi9cbiAgQElucHV0Q29udmVydGVyKClcbiAgcHVibGljIHRleHRJbnB1dEVuYWJsZWQ6IGJvb2xlYW4gPSB0cnVlO1xuICBASW5wdXRDb252ZXJ0ZXIoKVxuICBwdWJsaWMgZGlhbG9nRGlzYWJsZUNsb3NlOiBib29sZWFuID0gZmFsc2U7XG4gIEBJbnB1dENvbnZlcnRlcigpXG4gIHByb3RlY3RlZCBmaWx0ZXI6IGJvb2xlYW4gPSB0cnVlO1xuICBwcm90ZWN0ZWQgZGlhbG9nV2lkdGg6IHN0cmluZztcbiAgcHJvdGVjdGVkIGRpYWxvZ0hlaWdodDogc3RyaW5nID0gJzU1JSc7XG4gIHByb3RlY3RlZCBkaWFsb2dDbGFzczogc3RyaW5nO1xuICBASW5wdXRDb252ZXJ0ZXIoKVxuICBwcm90ZWN0ZWQgcXVlcnlSb3dzOiBudW1iZXI7XG5cbiAgLypPdmVycmlkZSBjbGVhckJ1dHRvbiA9IHRydWUgKi9cbiAgLy8gQElucHV0Q29udmVydGVyKClcbiAgLy8gcHVibGljIGNsZWFyQnV0dG9uOiBib29sZWFuID0gdHJ1ZTtcbiAgLyogRW5kIGlucHV0cyAqL1xuXG4gIHB1YmxpYyByZW5kZXJlcjogT0xpc3RQaWNrZXJDdXN0b21SZW5kZXJlcjtcblxuICBwcm90ZWN0ZWQgbWF0RGlhbG9nOiBNYXREaWFsb2c7XG4gIHByb3RlY3RlZCBkaWFsb2dSZWY6IE1hdERpYWxvZ1JlZjxPTGlzdFBpY2tlckRpYWxvZ0NvbXBvbmVudD47XG5cbiAgQFZpZXdDaGlsZCgnaW5wdXRNb2RlbCcsIHsgc3RhdGljOiBmYWxzZSB9KSBwcm90ZWN0ZWQgaW5wdXRNb2RlbDogTWF0SW5wdXQ7XG4gIEBWaWV3Q2hpbGQoJ3Zpc2libGVJbnB1dCcsIHsgc3RhdGljOiBmYWxzZSB9KSBwcm90ZWN0ZWQgdmlzaWJsZUlucHV0OiBFbGVtZW50UmVmO1xuICBwcm90ZWN0ZWQgdmlzaWJsZUlucHV0VmFsdWU6IGFueTtcblxuICBwcm90ZWN0ZWQgYmx1clRpbWVyO1xuICBwcm90ZWN0ZWQgYmx1ckRlbGF5ID0gMjAwO1xuICBwcm90ZWN0ZWQgYmx1clByZXZlbnQgPSBmYWxzZTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBAT3B0aW9uYWwoKSBASW5qZWN0KGZvcndhcmRSZWYoKCkgPT4gT0Zvcm1Db21wb25lbnQpKSBmb3JtOiBPRm9ybUNvbXBvbmVudCxcbiAgICBlbFJlZjogRWxlbWVudFJlZixcbiAgICBpbmplY3RvcjogSW5qZWN0b3IpIHtcbiAgICBzdXBlcihmb3JtLCBlbFJlZiwgaW5qZWN0b3IpO1xuICAgIHRoaXMubWF0RGlhbG9nID0gdGhpcy5pbmplY3Rvci5nZXQ8TWF0RGlhbG9nPihNYXREaWFsb2cpO1xuICAgIHRoaXMuc3RhdGVDdHJsID0gbmV3IEZvcm1Db250cm9sKCk7XG4gICAgLyogb3ZlcndyaXR0ZSBjbGVhckJ1dHRvbiB0byB0cnVlICovXG4gICAgdGhpcy5jbGVhckJ1dHRvbiA9IHRydWU7XG4gIH1cblxuICBwdWJsaWMgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5pbml0aWFsaXplKCk7XG4gICAgLy8gRW5zdXJpbmcgdmFsdWUgaW4gdGhlIHN0YXRlQ3RybFxuICAgIC8vIChqdXN0IGluIGNhc2UgaXQgd2FzIGNyZWF0ZWQgd2l0aCBhIGVtcHR5IHZhbHVlIGJlZm9yZSB0aGUgZkNvbnRyb2wgZGF0YSBpbml0aWFsaXphdGlvbilcbiAgICBpZiAoIVV0aWwuaXNEZWZpbmVkKHRoaXMuc3RhdGVDdHJsLnZhbHVlKSkge1xuICAgICAgdGhpcy5zZXRTdGF0ZUN0cmxWYWx1ZSgpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiB7IFtwcm9wTmFtZTogc3RyaW5nXTogU2ltcGxlQ2hhbmdlIH0pOiB2b2lkIHtcbiAgICBzdXBlci5uZ09uQ2hhbmdlcyhjaGFuZ2VzKTtcbiAgICBpZiAodHlwZW9mIChjaGFuZ2VzLnN0YXRpY0RhdGEpICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhpcy5jYWNoZVF1ZXJpZWQgPSB0cnVlO1xuICAgICAgdGhpcy5zZXREYXRhQXJyYXkoY2hhbmdlcy5zdGF0aWNEYXRhLmN1cnJlbnRWYWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGNyZWF0ZUZvcm1Db250cm9sKGNmZz8sIHZhbGlkYXRvcnM/KTogT0Zvcm1Db250cm9sIHtcbiAgICB0aGlzLl9mQ29udHJvbCA9IHN1cGVyLmNyZWF0ZUZvcm1Db250cm9sKGNmZywgdmFsaWRhdG9ycyk7XG4gICAgdGhpcy5fZkNvbnRyb2wuZkNvbnRyb2xDaGlsZHJlbiA9IFt0aGlzLnN0YXRlQ3RybF07XG4gICAgcmV0dXJuIHRoaXMuX2ZDb250cm9sO1xuICB9XG5cbiAgcHVibGljIGVuc3VyZU9Gb3JtVmFsdWUodmFsdWU6IGFueSk6IHZvaWQge1xuICAgIHN1cGVyLmVuc3VyZU9Gb3JtVmFsdWUodmFsdWUpO1xuICAgIC8vIFRoaXMgY2FsbCBtYWtlIHRoZSBjb21wb25lbnQgcXVlcnlpbmcgaXRzIGRhdGEgbXVsdGlwbGUgdGltZXMsIGJ1dCBnZXR0aW5nIGRlc2NyaXB0aW9uIHZhbHVlIGlzIG5lZWRlZFxuICAgIHRoaXMuc3luY0RhdGFJbmRleChmYWxzZSk7XG4gIH1cblxuICBwdWJsaWMgc2V0RW5hYmxlZCh2YWx1ZTogYm9vbGVhbik6IHZvaWQge1xuICAgIHN1cGVyLnNldEVuYWJsZWQodmFsdWUpO1xuICAgIGlmICh0aGlzLnN0YXRlQ3RybCAmJiB0aGlzLmhhc0VuYWJsZWRQZXJtaXNzaW9uKCkgfHwgdGhpcy5oYXNWaXNpYmxlUGVybWlzc2lvbigpKSB7XG4gICAgICB2YWx1ZSA/IHRoaXMuc3RhdGVDdHJsLmVuYWJsZSgpIDogdGhpcy5zdGF0ZUN0cmwuZGlzYWJsZSgpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG4gICAgc3VwZXIubmdBZnRlclZpZXdJbml0KCk7XG4gICAgaWYgKHRoaXMucXVlcnlPbkluaXQpIHtcbiAgICAgIHRoaXMucXVlcnlEYXRhKCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnF1ZXJ5T25CaW5kKSB7XG4gICAgICAvLyBUT0RPIGRvIGl0IGJldHRlci4gV2hlbiBjaGFuZ2luZyB0YWJzIGl0IGlzIG5lY2Vzc2FyeSB0byBpbnZva2UgbmV3IHF1ZXJ5XG4gICAgICB0aGlzLnN5bmNEYXRhSW5kZXgoKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZ2V0RGVzY3JpcHRpb25WYWx1ZSgpOiBzdHJpbmcge1xuICAgIGlmICghVXRpbC5pc0RlZmluZWQodGhpcy5kZXNjcmlwdGlvbkNvbEFycmF5KSB8fCAhVXRpbC5pc0RlZmluZWQodGhpcy5fY3VycmVudEluZGV4KSkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICBpZiAoVXRpbC5pc0RlZmluZWQodGhpcy5yZW5kZXJlcikpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcmVyLmdldExpc3RQaWNrZXJWYWx1ZSh0aGlzLmRhdGFBcnJheVt0aGlzLl9jdXJyZW50SW5kZXhdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0T3B0aW9uRGVzY3JpcHRpb25WYWx1ZSh0aGlzLmRhdGFBcnJheVt0aGlzLl9jdXJyZW50SW5kZXhdKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgb25DbGlja0NsZWFyKGU6IEV2ZW50KTogdm9pZCB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgaWYgKCF0aGlzLmlzUmVhZE9ubHkgJiYgdGhpcy5lbmFibGVkKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5ibHVyVGltZXIpO1xuICAgICAgdGhpcy5ibHVyUHJldmVudCA9IHRydWU7XG4gICAgICB0aGlzLnNldFZhbHVlKHVuZGVmaW5lZCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIG9uQ2xpY2tJbnB1dChlOiBFdmVudCk6IHZvaWQge1xuICAgIGlmICghdGhpcy50ZXh0SW5wdXRFbmFibGVkKSB7XG4gICAgICB0aGlzLm9uQ2xpY2tMaXN0cGlja2VyKGUpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBvbkNsaWNrTGlzdHBpY2tlcihlOiBFdmVudCk6IHZvaWQge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIGlmICghdGhpcy5pc1JlYWRPbmx5ICYmIHRoaXMuZW5hYmxlZCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuYmx1clRpbWVyKTtcbiAgICAgIHRoaXMub3BlbkRpYWxvZygpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBvbkRpYWxvZ0Nsb3NlKGV2dDogYW55KTogdm9pZCB7XG4gICAgdGhpcy5kaWFsb2dSZWYgPSBudWxsO1xuICAgIHRoaXMudmlzaWJsZUlucHV0VmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgaWYgKGV2dCBpbnN0YW5jZW9mIE9iamVjdCAmJiB0eXBlb2YgZXZ0W3RoaXMudmFsdWVDb2x1bW5dICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgICB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHNlbGYuc2V0VmFsdWUoZXZ0W3NlbGYudmFsdWVDb2x1bW5dLCB7IGNoYW5nZVR5cGU6IE9WYWx1ZUNoYW5nZUV2ZW50LlVTRVJfQ0hBTkdFIH0pO1xuICAgICAgICBpZiAoc2VsZi5fZkNvbnRyb2wpIHtcbiAgICAgICAgICBzZWxmLl9mQ29udHJvbC5tYXJrQXNUb3VjaGVkKCk7XG4gICAgICAgICAgc2VsZi5fZkNvbnRyb2wubWFya0FzRGlydHkoKTtcbiAgICAgICAgfVxuICAgICAgICBzZWxmLm9uRGlhbG9nQWNjZXB0LmVtaXQoKTtcbiAgICAgIH0sIDApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm9uRGlhbG9nQ2FuY2VsLmVtaXQoKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgaW5uZXJPbkJsdXIoZXZ0OiBhbnkpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuaXNSZWFkT25seSAmJiB0aGlzLmVuYWJsZWQpIHtcbiAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgICAgdGhpcy5ibHVyVGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgaWYgKCFzZWxmLmJsdXJQcmV2ZW50KSB7XG4gICAgICAgICAgc2VsZi5fZkNvbnRyb2wubWFya0FzVG91Y2hlZCgpO1xuICAgICAgICAgIHNlbGYub25CbHVyLmVtaXQoZXZ0KTtcbiAgICAgICAgICBpZiAoc2VsZi52aXNpYmxlSW5wdXRWYWx1ZSAhPT0gdW5kZWZpbmVkICYmIHNlbGYudmlzaWJsZUlucHV0VmFsdWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgc2VsZi5vcGVuRGlhbG9nKCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChzZWxmLnZpc2libGVJbnB1dFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHNlbGYuc2V0VmFsdWUodW5kZWZpbmVkKTtcbiAgICAgICAgICAgIHNlbGYudmlzaWJsZUlucHV0VmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNlbGYuX2ZDb250cm9sLm1hcmtBc1RvdWNoZWQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc2VsZi5ibHVyUHJldmVudCA9IGZhbHNlO1xuICAgICAgfSwgdGhpcy5ibHVyRGVsYXkpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBvblZpc2libGVJbnB1dENoYW5nZShldmVudDogYW55KTogdm9pZCB7XG4gICAgdGhpcy52aXNpYmxlSW5wdXRWYWx1ZSA9IGV2ZW50LnRhcmdldC52YWx1ZTtcbiAgfVxuXG4gIHB1YmxpYyBvbktleWRvd25FbnRlcih2YWw6IGFueSk6IHZvaWQge1xuICAgIGNsZWFyVGltZW91dCh0aGlzLmJsdXJUaW1lcik7XG4gICAgdGhpcy5ibHVyUHJldmVudCA9IHRydWU7XG4gICAgdGhpcy52aXNpYmxlSW5wdXRWYWx1ZSA9IHZhbDtcbiAgICB0aGlzLm9wZW5EaWFsb2coKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBzZXRGb3JtVmFsdWUodmFsOiBhbnksIG9wdGlvbnM/OiBGb3JtVmFsdWVPcHRpb25zLCBzZXREaXJ0eTogYm9vbGVhbiA9IGZhbHNlKTogdm9pZCB7XG4gICAgc3VwZXIuc2V0Rm9ybVZhbHVlKHZhbCwgb3B0aW9ucywgc2V0RGlydHkpO1xuICAgIHRoaXMuc2V0U3RhdGVDdHJsVmFsdWUoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBvcGVuRGlhbG9nKCk6IHZvaWQge1xuICAgIGNvbnN0IGNmZzogTWF0RGlhbG9nQ29uZmlnID0ge1xuICAgICAgcm9sZTogJ2RpYWxvZycsXG4gICAgICBkaXNhYmxlQ2xvc2U6IHRoaXMuZGlhbG9nRGlzYWJsZUNsb3NlLFxuICAgICAgcGFuZWxDbGFzczogWydjZGstb3ZlcmxheS1saXN0LXBpY2tlcicsICdvLWRpYWxvZy1jbGFzcycsIHRoaXMuZGlhbG9nQ2xhc3NdLFxuICAgICAgZGF0YToge1xuICAgICAgICBkYXRhOiB0aGlzLmdldERpYWxvZ0RhdGFBcnJheSh0aGlzLmRhdGFBcnJheSksXG4gICAgICAgIGZpbHRlcjogdGhpcy5maWx0ZXIsXG4gICAgICAgIHNlYXJjaFZhbDogdGhpcy52aXNpYmxlSW5wdXRWYWx1ZSxcbiAgICAgICAgbWVudUNvbHVtbnM6IHRoaXMudmlzaWJsZUNvbHVtbnMsIC8vIFRPRE86IGltcHJvdmUgdGhpcywgdGhpcyBpcyBwYXNzZWQgdG8gYG8tc2VhcmNoLWlucHV0YCBvZiB0aGUgZGlhbG9nXG4gICAgICAgIHZpc2libGVDb2x1bW5zOiB0aGlzLnZpc2libGVDb2xBcnJheSxcbiAgICAgICAgcXVlcnlSb3dzOiB0aGlzLnF1ZXJ5Um93cyxcbiAgICAgICAgcmVuZGVyZXI6IHRoaXMucmVuZGVyZXJcbiAgICAgIH1cbiAgICB9O1xuICAgIGlmICh0aGlzLmRpYWxvZ1dpZHRoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNmZy53aWR0aCA9IHRoaXMuZGlhbG9nV2lkdGg7XG4gICAgfVxuICAgIGlmICh0aGlzLmRpYWxvZ0hlaWdodCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjZmcuaGVpZ2h0ID0gdGhpcy5kaWFsb2dIZWlnaHQ7XG4gICAgfVxuICAgIHRoaXMuZGlhbG9nUmVmID0gdGhpcy5tYXREaWFsb2cub3BlbihPTGlzdFBpY2tlckRpYWxvZ0NvbXBvbmVudCwgY2ZnKTtcblxuICAgIHRoaXMuZGlhbG9nUmVmLmFmdGVyQ2xvc2VkKCkuc3Vic2NyaWJlKHJlc3VsdCA9PiB0aGlzLm9uRGlhbG9nQ2xvc2UocmVzdWx0KSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0RGlhbG9nRGF0YUFycmF5KGRhdGFBcnJheTogYW55W10pOiBhbnlbXSB7XG4gICAgY29uc3QgcmVzdWx0OiBhbnlbXSA9IFtdO1xuICAgIGRhdGFBcnJheS5mb3JFYWNoKChpdGVtLCBpdGVtSW5kZXgpID0+IHtcbiAgICAgIGNvbnN0IG5ld0l0ZW0gPSBPYmplY3QuYXNzaWduKHt9LCBpdGVtKTtcbiAgICAgIGlmICghdGhpcy5yZW5kZXJlcikge1xuICAgICAgICBuZXdJdGVtLl9wYXJzZWRWaXNpYmxlQ29sdW1uVGV4dCA9IHRoaXMuZ2V0T3B0aW9uRGVzY3JpcHRpb25WYWx1ZShpdGVtKTtcbiAgICAgIH1cbiAgICAgIG5ld0l0ZW0uX3BhcnNlZEluZGV4ID0gaXRlbUluZGV4O1xuICAgICAgcmVzdWx0LnB1c2gobmV3SXRlbSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHB1YmxpYyByZWdpc3RlclJlbmRlcmVyKHJlbmRlcmVyOiBhbnkpIHtcbiAgICB0aGlzLnJlbmRlcmVyID0gcmVuZGVyZXI7XG4gICAgdGhpcy5yZW5kZXJlci5pbml0aWFsaXplKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgc2V0U3RhdGVDdHJsVmFsdWUoKSB7XG4gICAgbGV0IGRlc2NyaXB0aW9uVmFsdWUgPSB0aGlzLmdldERlc2NyaXB0aW9uVmFsdWUoKTtcbiAgICBpZiAodHlwZW9mIGRlc2NyaXB0aW9uVmFsdWUgPT09ICdzdHJpbmcnICYmIGRlc2NyaXB0aW9uVmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICBkZXNjcmlwdGlvblZhbHVlID0gbnVsbDtcbiAgICB9XG4gICAgdGhpcy5zdGF0ZUN0cmwuc2V0VmFsdWUoZGVzY3JpcHRpb25WYWx1ZSk7XG4gIH1cblxuICBwdWJsaWMgc2VsZWN0VmFsdWUoKSB7XG4gICAgY29uc3QgaW5wdXRFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkZXNjXycgKyB0aGlzLm9hdHRyKTtcbiAgICBpZiAoaW5wdXRFbCkge1xuICAgICAgKGlucHV0RWwgYXMgSFRNTElucHV0RWxlbWVudCkuc2VsZWN0KCk7XG4gICAgfVxuICB9XG5cbn1cbiJdfQ==