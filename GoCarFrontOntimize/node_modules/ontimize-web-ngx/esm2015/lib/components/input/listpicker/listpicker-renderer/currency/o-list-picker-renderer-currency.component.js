import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, Injector, TemplateRef, ViewChild } from '@angular/core';
import { InputConverter } from '../../../../../decorators/input-converter';
import { OCurrencyPipe } from '../../../../../pipes/o-currency.pipe';
import { CurrencyService } from '../../../../../services/currency.service';
import { OListPickerCustomRenderer } from '../o-list-picker-renderer.class';
import { DEFAULT_INPUTS_O_LISTPICKER_RENDERER_REAL } from '../real/o-list-picker-renderer-real.component';
export const DEFAULT_INPUTS_O_LISTPICKER_RENDERER_CURRENCY = [
    ...DEFAULT_INPUTS_O_LISTPICKER_RENDERER_REAL,
    'currencySymbol: currency-symbol',
    'currencySymbolPosition: currency-symbol-position'
];
export class OListPickerRendererCurrencyComponent extends OListPickerCustomRenderer {
    constructor(injector) {
        super(injector);
        this.injector = injector;
        this.minDecimalDigits = 2;
        this.maxDecimalDigits = 2;
        this.decimalSeparator = '.';
        this.grouping = true;
        this.thousandSeparator = ',';
        this.currencyService = this.injector.get(CurrencyService);
        this.setComponentPipe();
    }
    setComponentPipe() {
        this.componentPipe = new OCurrencyPipe(this.injector);
    }
    initialize() {
        super.initialize();
        if (typeof this.currencySymbol === 'undefined') {
            this.currencySymbol = this.currencyService.symbol;
        }
        if (typeof this.currencySymbolPosition === 'undefined') {
            this.currencySymbolPosition = this.currencyService.symbolPosition;
        }
        this.pipeArguments = {
            currencySimbol: this.currencySymbol,
            currencySymbolPosition: this.currencySymbolPosition,
            minDecimalDigits: this.minDecimalDigits,
            maxDecimalDigits: this.maxDecimalDigits,
            decimalSeparator: this.decimalSeparator,
            grouping: this.grouping,
            thousandSeparator: this.thousandSeparator
        };
    }
}
OListPickerRendererCurrencyComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-list-picker-renderer-currency',
                template: "<ng-template #templateref let-value=\"value\">\n  {{getListPickerValue(value)}}\n</ng-template>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                inputs: DEFAULT_INPUTS_O_LISTPICKER_RENDERER_CURRENCY
            }] }
];
OListPickerRendererCurrencyComponent.ctorParameters = () => [
    { type: Injector }
];
OListPickerRendererCurrencyComponent.propDecorators = {
    templateref: [{ type: ViewChild, args: ['templateref', { read: TemplateRef, static: true },] }]
};
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Number)
], OListPickerRendererCurrencyComponent.prototype, "minDecimalDigits", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Number)
], OListPickerRendererCurrencyComponent.prototype, "maxDecimalDigits", void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1saXN0LXBpY2tlci1yZW5kZXJlci1jdXJyZW5jeS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9vbnRpbWl6ZS13ZWItbmd4LyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvaW5wdXQvbGlzdHBpY2tlci9saXN0cGlja2VyLXJlbmRlcmVyL2N1cnJlbmN5L28tbGlzdC1waWNrZXItcmVuZGVyZXItY3VycmVuY3kuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBVSxXQUFXLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTdHLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQztBQUMzRSxPQUFPLEVBQXlCLGFBQWEsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQzVGLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUMzRSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUM1RSxPQUFPLEVBQUUseUNBQXlDLEVBQUUsTUFBTSwrQ0FBK0MsQ0FBQztBQUUxRyxNQUFNLENBQUMsTUFBTSw2Q0FBNkMsR0FBRztJQUMzRCxHQUFHLHlDQUF5QztJQUc1QyxpQ0FBaUM7SUFHakMsa0RBQWtEO0NBQ25ELENBQUM7QUFRRixNQUFNLE9BQU8sb0NBQXFDLFNBQVEseUJBQXlCO0lBb0JqRixZQUFzQixRQUFrQjtRQUN0QyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7UUFESSxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBakJ4QyxxQkFBZ0IsR0FBVyxDQUFDLENBQUM7UUFFN0IscUJBQWdCLEdBQVcsQ0FBQyxDQUFDO1FBSW5CLHFCQUFnQixHQUFXLEdBQUcsQ0FBQztRQUUvQixhQUFRLEdBQVksSUFBSSxDQUFDO1FBQ3pCLHNCQUFpQixHQUFXLEdBQUcsQ0FBQztRQVV4QyxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQzFELElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFFRCxnQkFBZ0I7UUFDZCxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksYUFBYSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBRUQsVUFBVTtRQUNSLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNuQixJQUFJLE9BQU8sSUFBSSxDQUFDLGNBQWMsS0FBSyxXQUFXLEVBQUU7WUFDOUMsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQztTQUNuRDtRQUNELElBQUksT0FBTyxJQUFJLENBQUMsc0JBQXNCLEtBQUssV0FBVyxFQUFFO1lBQ3RELElBQUksQ0FBQyxzQkFBc0IsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQztTQUNuRTtRQUVELElBQUksQ0FBQyxhQUFhLEdBQUc7WUFDbkIsY0FBYyxFQUFFLElBQUksQ0FBQyxjQUFjO1lBQ25DLHNCQUFzQixFQUFFLElBQUksQ0FBQyxzQkFBc0I7WUFDbkQsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLGdCQUFnQjtZQUN2QyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsZ0JBQWdCO1lBQ3ZDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxnQkFBZ0I7WUFDdkMsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO1lBQ3ZCLGlCQUFpQixFQUFFLElBQUksQ0FBQyxpQkFBaUI7U0FDMUMsQ0FBQztJQUVKLENBQUM7OztZQXZERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGlDQUFpQztnQkFDM0MsNkdBQStEO2dCQUMvRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFDL0MsTUFBTSxFQUFFLDZDQUE2QzthQUN0RDs7O1lBdkI0QyxRQUFROzs7MEJBMENsRCxTQUFTLFNBQUMsYUFBYSxFQUFFLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFOztBQWY3RDtJQURDLGNBQWMsRUFBRTs7OEVBQ1k7QUFFN0I7SUFEQyxjQUFjLEVBQUU7OzhFQUNZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgSW5qZWN0b3IsIE9uSW5pdCwgVGVtcGxhdGVSZWYsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBJbnB1dENvbnZlcnRlciB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2RlY29yYXRvcnMvaW5wdXQtY29udmVydGVyJztcbmltcG9ydCB7IElDdXJyZW5jeVBpcGVBcmd1bWVudCwgT0N1cnJlbmN5UGlwZSB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3BpcGVzL28tY3VycmVuY3kucGlwZSc7XG5pbXBvcnQgeyBDdXJyZW5jeVNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9zZXJ2aWNlcy9jdXJyZW5jeS5zZXJ2aWNlJztcbmltcG9ydCB7IE9MaXN0UGlja2VyQ3VzdG9tUmVuZGVyZXIgfSBmcm9tICcuLi9vLWxpc3QtcGlja2VyLXJlbmRlcmVyLmNsYXNzJztcbmltcG9ydCB7IERFRkFVTFRfSU5QVVRTX09fTElTVFBJQ0tFUl9SRU5ERVJFUl9SRUFMIH0gZnJvbSAnLi4vcmVhbC9vLWxpc3QtcGlja2VyLXJlbmRlcmVyLXJlYWwuY29tcG9uZW50JztcblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfSU5QVVRTX09fTElTVFBJQ0tFUl9SRU5ERVJFUl9DVVJSRU5DWSA9IFtcbiAgLi4uREVGQVVMVF9JTlBVVFNfT19MSVNUUElDS0VSX1JFTkRFUkVSX1JFQUwsXG5cbiAgLy8gY3VycmVuY3ktc3ltYm9sIFtzdHJpbmddOiBjdXJyZW5jeSBzeW1ib2wuIERlZmF1bHQ6IGRvbGxhciAoJCkuXG4gICdjdXJyZW5jeVN5bWJvbDogY3VycmVuY3ktc3ltYm9sJyxcblxuICAvLyBjdXJyZW5jeS1zeW1ib2wtcG9zaXRpb24gW2xlZnR8cmlnaHRdOiBwb3NpdGlvbiBvZiB0aGUgY3VycmVuY3kgc3ltYm9sLiBEZWZhdWx0OiBsZWZ0LlxuICAnY3VycmVuY3lTeW1ib2xQb3NpdGlvbjogY3VycmVuY3ktc3ltYm9sLXBvc2l0aW9uJ1xuXTtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnby1saXN0LXBpY2tlci1yZW5kZXJlci1jdXJyZW5jeScsXG4gIHRlbXBsYXRlVXJsOiAnLi9vLWxpc3QtcGlja2VyLXJlbmRlcmVyLWN1cnJlbmN5LmNvbXBvbmVudC5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIGlucHV0czogREVGQVVMVF9JTlBVVFNfT19MSVNUUElDS0VSX1JFTkRFUkVSX0NVUlJFTkNZXG59KVxuZXhwb3J0IGNsYXNzIE9MaXN0UGlja2VyUmVuZGVyZXJDdXJyZW5jeUNvbXBvbmVudCBleHRlbmRzIE9MaXN0UGlja2VyQ3VzdG9tUmVuZGVyZXIgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIEBJbnB1dENvbnZlcnRlcigpXG4gIG1pbkRlY2ltYWxEaWdpdHM6IG51bWJlciA9IDI7XG4gIEBJbnB1dENvbnZlcnRlcigpXG4gIG1heERlY2ltYWxEaWdpdHM6IG51bWJlciA9IDI7XG5cbiAgcHJvdGVjdGVkIGN1cnJlbmN5U3ltYm9sOiBzdHJpbmc7XG4gIHByb3RlY3RlZCBjdXJyZW5jeVN5bWJvbFBvc2l0aW9uOiBzdHJpbmc7XG4gIHByb3RlY3RlZCBkZWNpbWFsU2VwYXJhdG9yOiBzdHJpbmcgPSAnLic7XG5cbiAgcHJvdGVjdGVkIGdyb3VwaW5nOiBib29sZWFuID0gdHJ1ZTtcbiAgcHJvdGVjdGVkIHRob3VzYW5kU2VwYXJhdG9yOiBzdHJpbmcgPSAnLCc7XG5cbiAgcHJvdGVjdGVkIGN1cnJlbmN5U2VydmljZTogQ3VycmVuY3lTZXJ2aWNlO1xuXG4gIHByb3RlY3RlZCBjb21wb25lbnRQaXBlOiBPQ3VycmVuY3lQaXBlO1xuICBwcm90ZWN0ZWQgcGlwZUFyZ3VtZW50czogSUN1cnJlbmN5UGlwZUFyZ3VtZW50O1xuICBAVmlld0NoaWxkKCd0ZW1wbGF0ZXJlZicsIHsgcmVhZDogVGVtcGxhdGVSZWYsIHN0YXRpYzogdHJ1ZSB9KSBwdWJsaWMgdGVtcGxhdGVyZWY6IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGluamVjdG9yOiBJbmplY3Rvcikge1xuICAgIHN1cGVyKGluamVjdG9yKTtcbiAgICB0aGlzLmN1cnJlbmN5U2VydmljZSA9IHRoaXMuaW5qZWN0b3IuZ2V0KEN1cnJlbmN5U2VydmljZSk7XG4gICAgdGhpcy5zZXRDb21wb25lbnRQaXBlKCk7XG4gIH1cblxuICBzZXRDb21wb25lbnRQaXBlKCkge1xuICAgIHRoaXMuY29tcG9uZW50UGlwZSA9IG5ldyBPQ3VycmVuY3lQaXBlKHRoaXMuaW5qZWN0b3IpO1xuICB9XG5cbiAgaW5pdGlhbGl6ZSgpIHtcbiAgICBzdXBlci5pbml0aWFsaXplKCk7XG4gICAgaWYgKHR5cGVvZiB0aGlzLmN1cnJlbmN5U3ltYm9sID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhpcy5jdXJyZW5jeVN5bWJvbCA9IHRoaXMuY3VycmVuY3lTZXJ2aWNlLnN5bWJvbDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB0aGlzLmN1cnJlbmN5U3ltYm9sUG9zaXRpb24gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzLmN1cnJlbmN5U3ltYm9sUG9zaXRpb24gPSB0aGlzLmN1cnJlbmN5U2VydmljZS5zeW1ib2xQb3NpdGlvbjtcbiAgICB9XG5cbiAgICB0aGlzLnBpcGVBcmd1bWVudHMgPSB7XG4gICAgICBjdXJyZW5jeVNpbWJvbDogdGhpcy5jdXJyZW5jeVN5bWJvbCxcbiAgICAgIGN1cnJlbmN5U3ltYm9sUG9zaXRpb246IHRoaXMuY3VycmVuY3lTeW1ib2xQb3NpdGlvbixcbiAgICAgIG1pbkRlY2ltYWxEaWdpdHM6IHRoaXMubWluRGVjaW1hbERpZ2l0cyxcbiAgICAgIG1heERlY2ltYWxEaWdpdHM6IHRoaXMubWF4RGVjaW1hbERpZ2l0cyxcbiAgICAgIGRlY2ltYWxTZXBhcmF0b3I6IHRoaXMuZGVjaW1hbFNlcGFyYXRvcixcbiAgICAgIGdyb3VwaW5nOiB0aGlzLmdyb3VwaW5nLFxuICAgICAgdGhvdXNhbmRTZXBhcmF0b3I6IHRoaXMudGhvdXNhbmRTZXBhcmF0b3JcbiAgICB9O1xuXG4gIH1cblxufVxuIl19