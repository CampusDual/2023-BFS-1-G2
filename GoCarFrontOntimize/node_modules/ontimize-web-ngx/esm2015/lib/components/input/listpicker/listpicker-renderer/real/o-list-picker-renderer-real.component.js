import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, Injector, TemplateRef, ViewChild } from '@angular/core';
import { InputConverter } from '../../../../../decorators/input-converter';
import { ORealPipe } from '../../../../../pipes/o-real.pipe';
import { NumberService } from '../../../../../services/number.service';
import { DEFAULT_INPUTS_O_LISTPICKER_RENDERER_INTEGER, OListPickerRendererIntegerComponent } from '../integer/o-list-picker-renderer-integer.component';
export const DEFAULT_INPUTS_O_LISTPICKER_RENDERER_REAL = [
    ...DEFAULT_INPUTS_O_LISTPICKER_RENDERER_INTEGER,
    'decimalSeparator: decimal-separator',
    'minDecimalDigits: min-decimal-digits',
    'maxDecimalDigits: max-decimal-digits'
];
export class OListPickerRendererRealComponent extends OListPickerRendererIntegerComponent {
    constructor(injector) {
        super(injector);
        this.injector = injector;
        this.minDecimalDigits = 2;
        this.maxDecimalDigits = 2;
        this.decimalSeparator = '.';
        this.numberService = this.injector.get(NumberService);
        this.setComponentPipe();
    }
    setComponentPipe() {
        this.componentPipe = new ORealPipe(this.injector);
    }
    initialize() {
        super.initialize();
        this.pipeArguments = {
            minDecimalDigits: this.minDecimalDigits,
            maxDecimalDigits: this.maxDecimalDigits,
            decimalSeparator: this.decimalSeparator,
            grouping: this.grouping,
            thousandSeparator: this.thousandSeparator
        };
    }
}
OListPickerRendererRealComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-list-picker-renderer-real',
                template: "<ng-template #templateref let-value=\"value\">\n  {{getListPickerValue(value)}}\n</ng-template>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                inputs: DEFAULT_INPUTS_O_LISTPICKER_RENDERER_REAL
            }] }
];
OListPickerRendererRealComponent.ctorParameters = () => [
    { type: Injector }
];
OListPickerRendererRealComponent.propDecorators = {
    templateref: [{ type: ViewChild, args: ['templateref', { read: TemplateRef, static: true },] }]
};
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Number)
], OListPickerRendererRealComponent.prototype, "minDecimalDigits", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Number)
], OListPickerRendererRealComponent.prototype, "maxDecimalDigits", void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1saXN0LXBpY2tlci1yZW5kZXJlci1yZWFsLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL29udGltaXplLXdlYi1uZ3gvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9pbnB1dC9saXN0cGlja2VyL2xpc3RwaWNrZXItcmVuZGVyZXIvcmVhbC9vLWxpc3QtcGlja2VyLXJlbmRlcmVyLXJlYWwuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBVSxXQUFXLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTdHLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQztBQUMzRSxPQUFPLEVBQXFCLFNBQVMsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUN2RSxPQUFPLEVBQ0wsNENBQTRDLEVBQzVDLG1DQUFtQyxFQUNwQyxNQUFNLHFEQUFxRCxDQUFDO0FBRTdELE1BQU0sQ0FBQyxNQUFNLHlDQUF5QyxHQUFHO0lBQ3ZELEdBQUcsNENBQTRDO0lBRS9DLHFDQUFxQztJQUNyQyxzQ0FBc0M7SUFDdEMsc0NBQXNDO0NBQ3ZDLENBQUM7QUFRRixNQUFNLE9BQU8sZ0NBQWlDLFNBQVEsbUNBQW1DO0lBZXZGLFlBQXNCLFFBQWtCO1FBQ3RDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztRQURJLGFBQVEsR0FBUixRQUFRLENBQVU7UUFaeEMscUJBQWdCLEdBQVcsQ0FBQyxDQUFDO1FBRTdCLHFCQUFnQixHQUFXLENBQUMsQ0FBQztRQUVuQixxQkFBZ0IsR0FBVyxHQUFHLENBQUM7UUFVdkMsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUN0RCxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBRUQsZ0JBQWdCO1FBQ2QsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVELFVBQVU7UUFDUixLQUFLLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDbkIsSUFBSSxDQUFDLGFBQWEsR0FBRztZQUNuQixnQkFBZ0IsRUFBRSxJQUFJLENBQUMsZ0JBQWdCO1lBQ3ZDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxnQkFBZ0I7WUFDdkMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLGdCQUFnQjtZQUN2QyxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7WUFDdkIsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLGlCQUFpQjtTQUMxQyxDQUFDO0lBQ0osQ0FBQzs7O1lBeENGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsNkJBQTZCO2dCQUN2Qyw2R0FBMkQ7Z0JBQzNELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2dCQUMvQyxNQUFNLEVBQUUseUNBQXlDO2FBQ2xEOzs7WUF2QjRDLFFBQVE7OzswQkFxQ2xELFNBQVMsU0FBQyxhQUFhLEVBQUUsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7O0FBVjdEO0lBREMsY0FBYyxFQUFFOzswRUFDWTtBQUU3QjtJQURDLGNBQWMsRUFBRTs7MEVBQ1kiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBJbmplY3RvciwgT25Jbml0LCBUZW1wbGF0ZVJlZiwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IElucHV0Q29udmVydGVyIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vZGVjb3JhdG9ycy9pbnB1dC1jb252ZXJ0ZXInO1xuaW1wb3J0IHsgSVJlYWxQaXBlQXJndW1lbnQsIE9SZWFsUGlwZSB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3BpcGVzL28tcmVhbC5waXBlJztcbmltcG9ydCB7IE51bWJlclNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9zZXJ2aWNlcy9udW1iZXIuc2VydmljZSc7XG5pbXBvcnQge1xuICBERUZBVUxUX0lOUFVUU19PX0xJU1RQSUNLRVJfUkVOREVSRVJfSU5URUdFUixcbiAgT0xpc3RQaWNrZXJSZW5kZXJlckludGVnZXJDb21wb25lbnRcbn0gZnJvbSAnLi4vaW50ZWdlci9vLWxpc3QtcGlja2VyLXJlbmRlcmVyLWludGVnZXIuY29tcG9uZW50JztcblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfSU5QVVRTX09fTElTVFBJQ0tFUl9SRU5ERVJFUl9SRUFMID0gW1xuICAuLi5ERUZBVUxUX0lOUFVUU19PX0xJU1RQSUNLRVJfUkVOREVSRVJfSU5URUdFUixcbiAgLy8gZGVjaW1hbC1zZXBhcmF0b3IgW3N0cmluZ106IGRlY2ltYWwgc2VwYXJhdG9yLiBEZWZhdWx0OiBkb3QgKC4pLlxuICAnZGVjaW1hbFNlcGFyYXRvcjogZGVjaW1hbC1zZXBhcmF0b3InLFxuICAnbWluRGVjaW1hbERpZ2l0czogbWluLWRlY2ltYWwtZGlnaXRzJyxcbiAgJ21heERlY2ltYWxEaWdpdHM6IG1heC1kZWNpbWFsLWRpZ2l0cydcbl07XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ28tbGlzdC1waWNrZXItcmVuZGVyZXItcmVhbCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9vLWxpc3QtcGlja2VyLXJlbmRlcmVyLXJlYWwuY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgaW5wdXRzOiBERUZBVUxUX0lOUFVUU19PX0xJU1RQSUNLRVJfUkVOREVSRVJfUkVBTFxufSlcbmV4cG9ydCBjbGFzcyBPTGlzdFBpY2tlclJlbmRlcmVyUmVhbENvbXBvbmVudCBleHRlbmRzIE9MaXN0UGlja2VyUmVuZGVyZXJJbnRlZ2VyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICBASW5wdXRDb252ZXJ0ZXIoKVxuICBtaW5EZWNpbWFsRGlnaXRzOiBudW1iZXIgPSAyO1xuICBASW5wdXRDb252ZXJ0ZXIoKVxuICBtYXhEZWNpbWFsRGlnaXRzOiBudW1iZXIgPSAyO1xuXG4gIHByb3RlY3RlZCBkZWNpbWFsU2VwYXJhdG9yOiBzdHJpbmcgPSAnLic7XG4gIHByb3RlY3RlZCBudW1iZXJTZXJ2aWNlOiBOdW1iZXJTZXJ2aWNlO1xuXG4gIHByb3RlY3RlZCBjb21wb25lbnRQaXBlOiBPUmVhbFBpcGU7XG4gIHByb3RlY3RlZCBwaXBlQXJndW1lbnRzOiBJUmVhbFBpcGVBcmd1bWVudDtcblxuICBAVmlld0NoaWxkKCd0ZW1wbGF0ZXJlZicsIHsgcmVhZDogVGVtcGxhdGVSZWYsIHN0YXRpYzogdHJ1ZSB9KSBwdWJsaWMgdGVtcGxhdGVyZWY6IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGluamVjdG9yOiBJbmplY3Rvcikge1xuICAgIHN1cGVyKGluamVjdG9yKTtcbiAgICB0aGlzLm51bWJlclNlcnZpY2UgPSB0aGlzLmluamVjdG9yLmdldChOdW1iZXJTZXJ2aWNlKTtcbiAgICB0aGlzLnNldENvbXBvbmVudFBpcGUoKTtcbiAgfVxuXG4gIHNldENvbXBvbmVudFBpcGUoKSB7XG4gICAgdGhpcy5jb21wb25lbnRQaXBlID0gbmV3IE9SZWFsUGlwZSh0aGlzLmluamVjdG9yKTtcbiAgfVxuXG4gIGluaXRpYWxpemUoKSB7XG4gICAgc3VwZXIuaW5pdGlhbGl6ZSgpO1xuICAgIHRoaXMucGlwZUFyZ3VtZW50cyA9IHtcbiAgICAgIG1pbkRlY2ltYWxEaWdpdHM6IHRoaXMubWluRGVjaW1hbERpZ2l0cyxcbiAgICAgIG1heERlY2ltYWxEaWdpdHM6IHRoaXMubWF4RGVjaW1hbERpZ2l0cyxcbiAgICAgIGRlY2ltYWxTZXBhcmF0b3I6IHRoaXMuZGVjaW1hbFNlcGFyYXRvcixcbiAgICAgIGdyb3VwaW5nOiB0aGlzLmdyb3VwaW5nLFxuICAgICAgdGhvdXNhbmRTZXBhcmF0b3I6IHRoaXMudGhvdXNhbmRTZXBhcmF0b3JcbiAgICB9O1xuICB9XG5cbn1cbiJdfQ==