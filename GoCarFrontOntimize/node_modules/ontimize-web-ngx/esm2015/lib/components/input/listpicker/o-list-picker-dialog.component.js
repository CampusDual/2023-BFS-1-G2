import { Component, Inject, Injector, ViewChild, ViewEncapsulation } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';
import { Util } from '../../../util/util';
import { OSearchInputComponent } from '../../input/search-input/o-search-input.component';
export const DEFAULT_INPUTS_O_LIST_PICKER_DIALOG = [
    'data',
    'visibleColumns: visible-columns',
    'filter'
];
export class OListPickerDialogComponent {
    constructor(dialogRef, injector, data) {
        this.dialogRef = dialogRef;
        this.injector = injector;
        this.filter = true;
        this.visibleData = [];
        this.itemSize = 30;
        this.data = [];
        if (data.data && Util.isArray(data.data)) {
            this.data = data.data;
            this.visibleData = this.data;
        }
        if (data.visibleColumns && Util.isArray(data.visibleColumns)) {
            this.visibleColsArray = data.visibleColumns;
        }
        if (data.filter !== undefined) {
            this.filter = data.filter;
        }
        if (data.menuColumns) {
            this.menuColumns = data.menuColumns;
        }
        if (data.renderer) {
            this.renderer = data.renderer;
        }
        this.searchVal = data.searchVal;
    }
    ngAfterViewInit() {
        if (Util.isDefined(this.searchVal) && this.searchInput !== undefined && this.searchVal.length > 0) {
            this.searchInput.getFormControl().setValue(this.searchVal, {
                emitEvent: false
            });
            setTimeout(() => this.searchInput.onSearch.emit(this.searchVal));
        }
    }
    onClickListItem(e, value) {
        this.dialogRef.close(value);
    }
    trackByFn(index, item) {
        return index;
    }
    onFilterList(searchVal) {
        this.visibleData = this.transform(this.data, {
            filtervalue: searchVal,
            filtercolumns: this.visibleColsArray
        });
    }
    isEmptyData() {
        return Util.isDefined(this.visibleData) ? this.visibleData.length === 0 : true;
    }
    transform(value, args) {
        if (!args || args.length <= 1) {
            return value;
        }
        const filterValue = args['filtervalue'] ? args['filtervalue'] : '';
        const filterColumns = args['filtercolumns'];
        if (!filterColumns || !filterValue || filterValue.length === 0) {
            return value;
        }
        if (value === undefined || value === null) {
            return value;
        }
        return value.filter(item => {
            for (let i = 0; i < filterColumns.length; i++) {
                const colName = filterColumns[i];
                if (this._isBlank(colName)) {
                    continue;
                }
                let origValue = item[colName];
                if (origValue) {
                    origValue = origValue.toString();
                    if (this._isBlank(origValue)) {
                        continue;
                    }
                    if (origValue.toUpperCase().indexOf(filterValue.toUpperCase()) > -1) {
                        return item;
                    }
                }
            }
        });
    }
    _isBlank(value) {
        return !Util.isDefined(value) || value.length === 0;
    }
}
OListPickerDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-list-picker-dialog',
                template: "<div mat-dialog-title *ngIf=\"filter\">\n  <o-search-input #searchInput [columns]=\"menuColumns\" show-menu=\"no\" float-label=\"never\"\n    (onSearch)=\"onFilterList($event)\" class=\"o-list-picker-search\" appearance=\"legacy\"></o-search-input>\n</div>\n<div mat-dialog-content [class.o-list-picker-has-filter]=\"filter\" fxFlex>\n  <cdk-virtual-scroll-viewport [itemSize]=\"itemSize\">\n    <mat-list>\n      <mat-list-item *ngIf=\"isEmptyData()\">\n        {{ 'LIST.EMPTY' | oTranslate }}\n        <ng-container *ngIf=\"filter && searchInput && searchInput.getValue() && searchInput.getValue().length > 0\">\n          {{ 'LIST.EMPTY_USING_FILTER' | oTranslate : { values: [searchInput.getValue()] } }}\n        </ng-container>\n      </mat-list-item>\n      <mat-list-item (click)=\"onClickListItem($event, item)\"\n        *cdkVirtualFor=\"let item of visibleData; trackBy: trackByFn\">\n\n        <ng-container *ngIf=\"renderer\">\n          <ng-template *ngTemplateOutlet=\"renderer?.templateref; context:{ value: item }\">\n          </ng-template>\n        </ng-container>\n        <ng-container *ngIf=\"!renderer\">\n          <span>{{ item['_parsedVisibleColumnText'] }}</span>\n        </ng-container>\n\n        <mat-divider></mat-divider>\n      </mat-list-item>\n\n    </mat-list>\n  </cdk-virtual-scroll-viewport>\n\n</div>\n<mat-dialog-actions align=\"end\">\n  <button type=\"button\" mat-stroked-button mat-dialog-close class=\"o-button-default cancel\">{{ 'CANCEL' | oTranslate }}</button>\n</mat-dialog-actions>",
                inputs: DEFAULT_INPUTS_O_LIST_PICKER_DIALOG,
                encapsulation: ViewEncapsulation.None,
                host: {
                    '[class.o-list-picker-dialog]': 'true'
                },
                styles: [".cdk-overlay-list-picker .mat-dialog-container .o-list-picker-dialog{display:flex;flex-direction:column;height:100%}.cdk-overlay-list-picker .mat-dialog-container .o-list-picker-dialog .mat-dialog-title{margin-top:-16px}.cdk-overlay-list-picker .mat-dialog-container .o-list-picker-dialog .mat-dialog-title .o-search-input mat-form-field .mat-form-field-wrapper{padding-bottom:0}.cdk-overlay-list-picker .mat-dialog-container .o-list-picker-dialog .mat-dialog-title .o-search-input mat-form-field .mat-form-field-wrapper .mat-form-field-prefix{border:0}.cdk-overlay-list-picker .mat-dialog-container .o-list-picker-dialog .mat-dialog-title .o-search-input mat-form-field .mat-form-field-wrapper .mat-form-field-prefix .mat-icon{vertical-align:middle}.cdk-overlay-list-picker .mat-dialog-container .o-list-picker-dialog .mat-dialog-title .o-search-input mat-form-field .mat-form-field-wrapper .mat-form-field-label{position:static;padding:0 4px}.cdk-overlay-list-picker .mat-dialog-container .o-list-picker-dialog .mat-dialog-title .o-search-input mat-form-field .mat-form-field-wrapper .mat-form-field-underline{display:none}.cdk-overlay-list-picker .mat-dialog-container .o-list-picker-dialog .mat-dialog-content .cdk-virtual-scroll-viewport{height:100%}.cdk-overlay-list-picker .mat-dialog-container .o-list-picker-dialog .mat-dialog-content .cdk-virtual-scroll-viewport mat-list mat-list-item{cursor:pointer}"]
            }] }
];
OListPickerDialogComponent.ctorParameters = () => [
    { type: MatDialogRef },
    { type: Injector },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
];
OListPickerDialogComponent.propDecorators = {
    searchInput: [{ type: ViewChild, args: ['searchInput', { static: false },] }]
};
//# sourceMappingURL=data:application/json;base64,