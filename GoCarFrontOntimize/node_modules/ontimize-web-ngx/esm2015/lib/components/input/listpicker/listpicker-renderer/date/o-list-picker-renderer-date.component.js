import { ChangeDetectionStrategy, Component, Injector, TemplateRef, ViewChild } from '@angular/core';
import { OMomentPipe } from '../../../../../pipes/o-moment.pipe';
import { DEFAULT_INPUTS_O_LISTPICKER_RENDERER, OListPickerCustomRenderer } from '../o-list-picker-renderer.class';
export const DEFAULT_INPUTS_O_LISTPICKER_RENDERER_DATE = [
    ...DEFAULT_INPUTS_O_LISTPICKER_RENDERER,
    'format'
];
export class OListPickerRendererDateComponent extends OListPickerCustomRenderer {
    constructor(injector) {
        super(injector);
        this.injector = injector;
        this.setComponentPipe();
    }
    setComponentPipe() {
        this.componentPipe = new OMomentPipe(this.injector);
    }
    initialize() {
        super.initialize();
        this.pipeArguments = {
            format: this.format
        };
    }
}
OListPickerRendererDateComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-list-picker-renderer-date',
                template: "<ng-template #templateref let-value=\"value\">\n  {{getListPickerValue(value)}}\n</ng-template>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                inputs: DEFAULT_INPUTS_O_LISTPICKER_RENDERER_DATE
            }] }
];
OListPickerRendererDateComponent.ctorParameters = () => [
    { type: Injector }
];
OListPickerRendererDateComponent.propDecorators = {
    templateref: [{ type: ViewChild, args: ['templateref', { read: TemplateRef, static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1saXN0LXBpY2tlci1yZW5kZXJlci1kYXRlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL29udGltaXplLXdlYi1uZ3gvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9pbnB1dC9saXN0cGlja2VyL2xpc3RwaWNrZXItcmVuZGVyZXIvZGF0ZS9vLWxpc3QtcGlja2VyLXJlbmRlcmVyLWRhdGUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFVLFdBQVcsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFN0csT0FBTyxFQUF1QixXQUFXLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUN0RixPQUFPLEVBQUUsb0NBQW9DLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUVsSCxNQUFNLENBQUMsTUFBTSx5Q0FBeUMsR0FBRztJQUN2RCxHQUFHLG9DQUFvQztJQUV2QyxRQUFRO0NBQ1QsQ0FBQztBQVFGLE1BQU0sT0FBTyxnQ0FBaUMsU0FBUSx5QkFBeUI7SUFTN0UsWUFBc0IsUUFBa0I7UUFDdEMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBREksYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUV0QyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBRUQsZ0JBQWdCO1FBQ2QsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVELFVBQVU7UUFDUixLQUFLLENBQUMsVUFBVSxFQUFFLENBQUM7UUFFbkIsSUFBSSxDQUFDLGFBQWEsR0FBRztZQUNuQixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07U0FDcEIsQ0FBQztJQUNKLENBQUM7OztZQTlCRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLDZCQUE2QjtnQkFDdkMsNkdBQTJEO2dCQUMzRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFDL0MsTUFBTSxFQUFFLHlDQUF5QzthQUNsRDs7O1lBaEI0QyxRQUFROzs7MEJBd0JsRCxTQUFTLFNBQUMsYUFBYSxFQUFFLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgSW5qZWN0b3IsIE9uSW5pdCwgVGVtcGxhdGVSZWYsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBJTW9tZW50UGlwZUFyZ3VtZW50LCBPTW9tZW50UGlwZSB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3BpcGVzL28tbW9tZW50LnBpcGUnO1xuaW1wb3J0IHsgREVGQVVMVF9JTlBVVFNfT19MSVNUUElDS0VSX1JFTkRFUkVSLCBPTGlzdFBpY2tlckN1c3RvbVJlbmRlcmVyIH0gZnJvbSAnLi4vby1saXN0LXBpY2tlci1yZW5kZXJlci5jbGFzcyc7XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX0lOUFVUU19PX0xJU1RQSUNLRVJfUkVOREVSRVJfREFURSA9IFtcbiAgLi4uREVGQVVMVF9JTlBVVFNfT19MSVNUUElDS0VSX1JFTkRFUkVSLFxuICAvLyBmb3JtYXQgW3N0cmluZ106IGRhdGUgZm9ybWF0LiBTZWUgTW9tZW50SlMgKGh0dHA6Ly9tb21lbnRqcy5jb20vKS5cbiAgJ2Zvcm1hdCdcbl07XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ28tbGlzdC1waWNrZXItcmVuZGVyZXItZGF0ZScsXG4gIHRlbXBsYXRlVXJsOiAnLi9vLWxpc3QtcGlja2VyLXJlbmRlcmVyLWRhdGUuY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgaW5wdXRzOiBERUZBVUxUX0lOUFVUU19PX0xJU1RQSUNLRVJfUkVOREVSRVJfREFURVxufSlcbmV4cG9ydCBjbGFzcyBPTGlzdFBpY2tlclJlbmRlcmVyRGF0ZUNvbXBvbmVudCBleHRlbmRzIE9MaXN0UGlja2VyQ3VzdG9tUmVuZGVyZXIgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIHByb3RlY3RlZCBjb21wb25lbnRQaXBlOiBPTW9tZW50UGlwZTtcbiAgcHJvdGVjdGVkIHBpcGVBcmd1bWVudHM6IElNb21lbnRQaXBlQXJndW1lbnQ7XG5cbiAgcHJvdGVjdGVkIGZvcm1hdDogc3RyaW5nO1xuXG4gIEBWaWV3Q2hpbGQoJ3RlbXBsYXRlcmVmJywgeyByZWFkOiBUZW1wbGF0ZVJlZiwgc3RhdGljOiB0cnVlIH0pIHB1YmxpYyB0ZW1wbGF0ZXJlZjogVGVtcGxhdGVSZWY8YW55PjtcblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgaW5qZWN0b3I6IEluamVjdG9yKSB7XG4gICAgc3VwZXIoaW5qZWN0b3IpO1xuICAgIHRoaXMuc2V0Q29tcG9uZW50UGlwZSgpO1xuICB9XG5cbiAgc2V0Q29tcG9uZW50UGlwZSgpIHtcbiAgICB0aGlzLmNvbXBvbmVudFBpcGUgPSBuZXcgT01vbWVudFBpcGUodGhpcy5pbmplY3Rvcik7XG4gIH1cblxuICBpbml0aWFsaXplKCkge1xuICAgIHN1cGVyLmluaXRpYWxpemUoKTtcbiAgICAvLyBDYWxsZWQgYWZ0ZXIgdGhlIGNvbnN0cnVjdG9yLCBpbml0aWFsaXppbmcgaW5wdXQgcHJvcGVydGllcywgYW5kIHRoZSBmaXJzdCBjYWxsIHRvIG5nT25DaGFuZ2VzLlxuICAgIHRoaXMucGlwZUFyZ3VtZW50cyA9IHtcbiAgICAgIGZvcm1hdDogdGhpcy5mb3JtYXRcbiAgICB9O1xuICB9XG59XG4iXX0=