import * as tslib_1 from "tslib";
import { EventEmitter, NgZone, ViewChild } from '@angular/core';
import { BehaviorSubject, Observable, Subscription } from 'rxjs';
import { InputConverter } from '../../decorators/input-converter';
import { OErrorDialogManager } from '../../services/o-error-dialog-manager.service';
import { OntimizeService } from '../../services/ontimize/ontimize.service';
import { Codes } from '../../util/codes';
import { ServiceUtils } from '../../util/service.utils';
import { Util } from '../../util/util';
import { OContextMenuComponent } from '../contextmenu/o-context-menu.component';
import { DEFAULT_INPUTS_O_FORM_DATA_COMPONENT, DEFAULT_OUTPUTS_O_FORM_DATA_COMPONENT, OFormDataComponent } from '../o-form-data-component.class';
export const DEFAULT_INPUTS_O_FORM_SERVICE_COMPONENT = [
    ...DEFAULT_INPUTS_O_FORM_DATA_COMPONENT,
    'staticData: static-data',
    'entity',
    'service',
    'columns',
    'valueColumn: value-column',
    'valueColumnType: value-column-type',
    'parentKeys: parent-keys',
    'visibleColumns: visible-columns',
    'descriptionColumns: description-columns',
    'separator',
    'queryOnInit: query-on-init',
    'queryOnBind: query-on-bind',
    'queryOnEvent: query-on-event',
    'queryMethod: query-method',
    'serviceType: service-type',
    'queryWithNullParentKeys: query-with-null-parent-keys',
    'setValueOnValueChange: set-value-on-value-change',
    'queryFallbackFunction: query-fallback-function',
    'translate',
    'sort'
];
export const DEFAULT_OUTPUTS_O_FORM_SERVICE_COMPONENT = [
    ...DEFAULT_OUTPUTS_O_FORM_DATA_COMPONENT,
    'onSetValueOnValueChange',
    'onDataLoaded'
];
export class OFormServiceComponent extends OFormDataComponent {
    constructor(form, elRef, injector) {
        super(form, elRef, injector);
        this.valueColumnType = Codes.TYPE_INT;
        this.separator = Codes.SPACE_SEPARATOR;
        this.queryOnInit = true;
        this.queryOnBind = false;
        this.queryMethod = Codes.QUERY_METHOD;
        this.queryWithNullParentKeys = false;
        this.translate = false;
        this.onSetValueOnValueChange = new EventEmitter();
        this.onDataLoaded = new EventEmitter();
        this.dataArray = [];
        this.colArray = [];
        this.visibleColArray = [];
        this.descriptionColArray = [];
        this.loading = false;
        this.cacheQueried = false;
        this._pKeysEquiv = {};
        this._setValueOnValueChangeEquiv = {};
        this.subscriptionDataLoad = new Subscription();
        this.delayLoad = 250;
        this.loadingSubject = new BehaviorSubject(false);
        this.form = form;
        this.elRef = elRef;
        this.oErrorDialogManager = injector.get(OErrorDialogManager);
    }
    set oContextMenuRef(value) {
        this.oContextMenu = value;
    }
    initialize() {
        super.initialize();
        this.subscriptionDataLoad.add(this.onDataLoaded.subscribe(() => this.syncDataIndex(false)));
        this.cacheQueried = false;
        this.colArray = Util.parseArray(this.columns, true);
        this.visibleColArray = Util.parseArray(this.visibleColumns, true);
        if (Util.isArrayEmpty(this.visibleColArray)) {
            this.visibleColumns = this.columns;
            this.visibleColArray = this.colArray;
        }
        this.descriptionColArray = Util.parseArray(this.descriptionColumns);
        if (Util.isArrayEmpty(this.descriptionColArray)) {
            this.descriptionColArray = this.visibleColArray;
        }
        const pkArray = Util.parseArray(this.parentKeys);
        this._pKeysEquiv = Util.parseParentKeysEquivalences(pkArray);
        const setValueSetArray = Util.parseArray(this.setValueOnValueChange);
        this._setValueOnValueChangeEquiv = Util.parseParentKeysEquivalences(setValueSetArray);
        if (this.form && this.queryOnBind) {
            this._formDataSubcribe = this.form.onDataLoaded.subscribe(() => this.queryData());
        }
        if (this.staticData) {
            this.queryOnBind = false;
            this.queryOnInit = false;
            this.setDataArray(this.staticData);
        }
        else {
            this.configureService();
        }
        if (this.queryOnEvent !== undefined && this.queryOnEvent.subscribe !== undefined) {
            this.queryOnEventSubscription = this.queryOnEvent.subscribe((value) => {
                if (Util.isDefined(value) || this.queryWithNullParentKeys) {
                    this.queryData();
                }
            });
        }
        if (typeof this.queryFallbackFunction !== 'function') {
            this.queryFallbackFunction = undefined;
        }
    }
    destroy() {
        super.destroy();
        if (this._formDataSubcribe) {
            this._formDataSubcribe.unsubscribe();
        }
        if (this.queryOnEventSubscription) {
            this.queryOnEventSubscription.unsubscribe();
        }
        if (this.loaderSubscription) {
            this.loaderSubscription.unsubscribe();
        }
        if (this.subscriptionDataLoad) {
            this.subscriptionDataLoad.unsubscribe();
        }
    }
    emitOnValueChange(type, newValue, oldValue) {
        super.emitOnValueChange(type, newValue, oldValue);
        const record = this.getSelectedRecord();
        this.onSetValueOnValueChange.emit(record);
        const setValueSetKeys = Object.keys(this._setValueOnValueChangeEquiv);
        if (setValueSetKeys.length) {
            const formComponents = this.form.getComponents();
            if (Util.isDefined(record)) {
                setValueSetKeys.forEach(key => {
                    const comp = formComponents[this._setValueOnValueChangeEquiv[key]];
                    if (Util.isDefined(comp)) {
                        comp.setValue(record[key]);
                    }
                });
            }
        }
    }
    configureService() {
        const configureServiceArgs = { injector: this.injector, baseService: OntimizeService, entity: this.entity, service: this.service, serviceType: this.serviceType };
        this.dataService = Util.configureService(configureServiceArgs);
    }
    getAttributesValuesToQuery(columns) {
        const result = Util.isDefined(columns) ? columns : this.colArray;
        if (result.indexOf(this.valueColumn) === -1) {
            result.push(this.valueColumn);
        }
        return result;
    }
    queryData(filter) {
        if (!this.dataService || !(this.queryMethod in this.dataService) || !this.entity) {
            console.warn('Service not properly configured! aborting query');
            return;
        }
        filter = Object.assign(filter || {}, ServiceUtils.getParentKeysFromForm(this._pKeysEquiv, this.form));
        if (!ServiceUtils.filterContainsAllParentKeys(filter, this._pKeysEquiv) && !this.queryWithNullParentKeys) {
            this.setDataArray([]);
        }
        else {
            if (this.querySuscription) {
                this.querySuscription.unsubscribe();
            }
            if (this.loaderSubscription) {
                this.loaderSubscription.unsubscribe();
            }
            const queryCols = this.getAttributesValuesToQuery();
            const sqlTypes = this.form ? this.form.getAttributesSQLTypes() : {};
            this.loaderSubscription = this.load();
            this.querySuscription = this.dataService[this.queryMethod](filter, queryCols, this.entity, sqlTypes)
                .subscribe((resp) => {
                if (resp.isSuccessful()) {
                    this.cacheQueried = true;
                    this.setDataArray(resp.data);
                }
                this.loadingSubject.next(false);
                this.loaderSubscription.unsubscribe();
            }, err => {
                console.error(err);
                this.loadingSubject.next(false);
                this.loaderSubscription.unsubscribe();
                if (Util.isDefined(this.queryFallbackFunction)) {
                    this.queryFallbackFunction(err);
                }
                else {
                    this.oErrorDialogManager.openErrorDialog(err);
                    console.error(err);
                }
            });
        }
    }
    getDataArray() {
        return this.dataArray;
    }
    setDataArray(data) {
        if (Util.isArray(data)) {
            this.dataArray = this.sortData(data);
        }
        else if (Util.isObject(data) && Object.keys(data).length > 0) {
            this.dataArray = [data];
        }
        else {
            console.warn('Component has received not supported service data. Supported data are Array or not empty Object');
            this.dataArray = [];
        }
        this.onDataLoaded.emit(this.dataArray);
    }
    syncDataIndex(queryIfNotFound = true) {
        this._currentIndex = undefined;
        if (Util.isDefined(this.value) && !this.isEmpty() && this.dataArray) {
            this.dataArray.forEach((item, index) => {
                if (this.value.value instanceof Array) {
                    this._currentIndex = [];
                    this.value.value.forEach((itemValue, indexValue) => {
                        if (item[this.valueColumn] === itemValue) {
                            this._currentIndex[this._currentIndex.length] = indexValue;
                        }
                    });
                }
                else if (item[this.valueColumn] === this.value.value) {
                    this._currentIndex = index;
                }
                if (item[this.valueColumn] === this.value.value) {
                    this._currentIndex = index;
                }
            });
            if (this._currentIndex === undefined) {
                if (queryIfNotFound &&
                    this.queryOnBind && this.dataArray && this.dataArray.length === 0 && !this.cacheQueried) {
                    this.queryData();
                }
                else if (!queryIfNotFound && this.dataArray && this.dataArray.length > 0) {
                    console.warn('It was set the value ' + this.value.value + ' to the component ' + this.oattr + ' but this value does not exist in the data array and this value will be set to undefined');
                    this.setValue(void 0);
                }
            }
        }
    }
    parseByValueColumnType(val) {
        let value = val;
        if (this.valueColumnType === Codes.TYPE_INT) {
            const parsed = parseInt(value, 10);
            if (!isNaN(parsed)) {
                value = parsed;
            }
        }
        return value;
    }
    setValue(val, options) {
        const value = this.parseByValueColumnType(val);
        super.setValue(value, options);
    }
    setData(val) {
        const value = this.parseByValueColumnType(val);
        super.setData(value);
    }
    getSelectedRecord() {
        let result;
        const selectedValue = this.getValue();
        if (Util.isDefined(selectedValue)) {
            result = this.getDataArray().find(item => item[this.valueColumn] === selectedValue);
        }
        return result;
    }
    load() {
        const zone = this.injector.get(NgZone);
        const loadObservable = new Observable(observer => {
            const timer = window.setTimeout(() => {
                observer.next(true);
            }, this.delayLoad);
            return () => {
                window.clearTimeout(timer);
                zone.run(() => {
                    observer.next(false);
                    this.loading = false;
                });
            };
        });
        const subscription = loadObservable.subscribe(val => {
            zone.run(() => {
                this.loading = val;
                this.loadingSubject.next(val);
            });
        });
        return subscription;
    }
    onFormControlChange(value) {
        if (this.oldValue === value) {
            return;
        }
        super.onFormControlChange(value);
    }
    getOptionDescriptionValue(item = {}) {
        let descTxt = '';
        if (this.descriptionColArray && this.descriptionColArray.length > 0) {
            this.descriptionColArray.forEach((col, index) => {
                let txt = item[col];
                if (Util.isDefined(txt)) {
                    if (this.translate && this.translateService) {
                        txt = this.translateService.get(txt);
                    }
                    descTxt += txt;
                }
                if (index < this.descriptionColArray.length - 1) {
                    descTxt += this.separator;
                }
            });
        }
        return descTxt.trim();
    }
    sortData(data) {
        if (!Util.isDefined(this.sort)) {
            return data;
        }
        const sortDirection = this.sort.toLowerCase();
        if (sortDirection !== Codes.ASC_SORT && sortDirection !== Codes.DESC_SORT) {
            return data;
        }
        const sortedData = data.sort((a, b) => Util.compare(this.getOptionDescriptionValue(a), this.getOptionDescriptionValue(b)));
        if (sortDirection === Codes.DESC_SORT) {
            sortedData.reverse();
        }
        return sortedData;
    }
    refresh() {
        this.queryData();
    }
}
OFormServiceComponent.propDecorators = {
    oContextMenuRef: [{ type: ViewChild, args: [OContextMenuComponent, { static: false },] }]
};
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OFormServiceComponent.prototype, "queryOnInit", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OFormServiceComponent.prototype, "queryOnBind", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OFormServiceComponent.prototype, "queryWithNullParentKeys", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OFormServiceComponent.prototype, "translate", void 0);
//# sourceMappingURL=data:application/json;base64,