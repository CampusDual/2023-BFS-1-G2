import * as tslib_1 from "tslib";
import { Component, ElementRef, EventEmitter, forwardRef, Inject, Injector, Optional, ViewChild } from '@angular/core';
import { InputConverter } from '../../../decorators/input-converter';
import { fileServiceFactory } from '../../../services/factories';
import { OntimizeFileService } from '../../../services/ontimize/ontimize-file.service';
import { Util } from '../../../util/util';
import { OFormComponent } from '../../form/o-form.component';
import { DEFAULT_OUTPUTS_O_FORM_DATA_COMPONENT, OFormDataComponent } from '../../o-form-data-component.class';
import { OValueChangeEvent } from '../../o-value-change-event.class';
import { OFileItem } from './o-file-item.class';
import { OFileUploader } from './o-file-uploader.class';
export const DEFAULT_INPUTS_O_FILE_INPUT = [
    'oattr: attr',
    'olabel: label',
    'floatLabel: float-label',
    'oplaceholder: placeholder',
    'tooltip',
    'tooltipPosition: tooltip-position',
    'tooltipShowDelay: tooltip-show-delay',
    'tooltipHideDelay: tooltip-hide-delay',
    'enabled',
    'orequired: required',
    'service',
    'entity',
    'serviceType : service-type',
    'width',
    'readOnly: read-only',
    'clearButton: clear-button',
    'acceptFileType: accept-file-type',
    'maxFileSize: max-file-size',
    'multiple',
    'maxFiles: max-files',
    'showInfo: show-info',
    'splitUpload: split-upload',
    'additionalData: additional-data',
    'appearance',
    'hideRequiredMarker:hide-required-marker',
    'labelVisible:label-visible'
];
export const DEFAULT_OUTPUTS_O_FILE_INPUT = [
    ...DEFAULT_OUTPUTS_O_FORM_DATA_COMPONENT,
    'onBeforeUpload',
    'onBeforeUploadFile',
    'onProgress',
    'onProgressFile',
    'onCancel',
    'onCancelFile',
    'onUpload',
    'onUploadFile',
    'onComplete',
    'onCompleteFile',
    'onError',
    'onErrorFile'
];
const Éµ0 = fileServiceFactory;
export class OFileInputComponent extends OFormDataComponent {
    constructor(form, elRef, injector) {
        super(form, elRef, injector);
        this.arraySeparatorRegExp = new RegExp(/\;/gi);
        this.autoBinding = false;
        this.autoRegistering = false;
        this.showInfo = false;
        this.multiple = false;
        this.splitUpload = true;
        this.maxFiles = -1;
        this.onBeforeUpload = new EventEmitter();
        this.onBeforeUploadFile = new EventEmitter();
        this.onProgress = new EventEmitter();
        this.onProgressFile = new EventEmitter();
        this.onCancel = new EventEmitter();
        this.onCancelFile = new EventEmitter();
        this.onUpload = new EventEmitter();
        this.onUploadFile = new EventEmitter();
        this.onComplete = new EventEmitter();
        this.onCompleteFile = new EventEmitter();
        this.onError = new EventEmitter();
        this.onErrorFile = new EventEmitter();
    }
    ngOnInit() {
        super.ngOnInit();
        this.initialize();
        this.uploader.onBeforeUploadAll = () => this.onBeforeUpload.emit();
        this.uploader.onBeforeUploadItem = item => this.onBeforeUploadFile.emit(item);
        this.uploader.onProgressAll = progress => this.onProgress.emit(progress);
        this.uploader.onProgressItem = (item, progress) => this.onProgressFile.emit({ item: item, progress: progress });
        this.uploader.onCancelAll = () => this.onCancel.emit();
        this.uploader.onCancelItem = item => this.onCancelFile.emit();
        this.uploader.onSuccessAll = response => this.onUpload.emit({ response: response });
        this.uploader.onSuccessItem = (item, response) => this.onUploadFile.emit({ item: item, response: response });
        this.uploader.onCompleteAll = () => this.onComplete.emit();
        this.uploader.onCompleteItem = item => this.onCompleteFile.emit(item);
        this.uploader.onErrorAll = error => this.onError.emit(error);
        this.uploader.onErrorItem = (item, error) => this.onErrorFile.emit({ item: item, error: error });
    }
    initialize() {
        super.initialize();
        if (!this.service) {
            this.service = this.form.service;
        }
        if (!this.entity) {
            this.entity = this.form.entity;
        }
        this.configureService();
        this.uploader = new OFileUploader(this.fileService, this.entity);
        this.uploader.splitUpload = this.splitUpload;
    }
    configureService() {
        const configureServiceArgs = { injector: this.injector, baseService: OntimizeFileService, entity: this.entity, service: this.service, serviceType: this.serviceType };
        this.fileService = Util.configureService(configureServiceArgs);
    }
    resolveValidators() {
        const validators = super.resolveValidators();
        if (this.acceptFileType) {
            validators.push(this.filetypeValidator.bind(this));
        }
        if (this.maxFileSize) {
            validators.push(this.maxFileSizeValidator.bind(this));
        }
        if (this.multiple && this.maxFiles !== -1) {
            validators.push(this.maxFilesValidator.bind(this));
        }
        return validators;
    }
    fileSelected(event) {
        let value = '';
        if (event) {
            const target = event.target || event.srcElement;
            if (target.files.length > 0) {
                const files = target.files;
                if (!this.multiple) {
                    this.uploader.clear();
                }
                for (let i = 0, f; i < files.length; i++) {
                    f = files[i];
                    const fileItem = new OFileItem(f, this.uploader);
                    this.uploader.addFile(fileItem);
                }
                value = this.uploader.files.map(file => file.name).join(', ');
                window.setTimeout(() => {
                    this.setValue(value !== '' ? value : undefined, { changeType: OValueChangeEvent.USER_CHANGE });
                    if (this._fControl) {
                        this._fControl.markAsTouched();
                    }
                }, 0);
            }
        }
    }
    clearValue(options, setDirty = false) {
        super.clearValue(options, setDirty);
        this.uploader.clear();
        this.inputFile.nativeElement.value = '';
    }
    onClickUpload(e) {
        e.stopPropagation();
        if (this.isValid) {
            this.upload();
        }
    }
    upload() {
        this.uploader.upload();
    }
    get files() {
        return this.uploader.files;
    }
    get additionalData() {
        if (this.uploader) {
            return this.uploader.data;
        }
        return null;
    }
    set additionalData(data) {
        if (this.uploader) {
            this.uploader.data = data;
        }
    }
    innerOnChange(event) {
        this.ensureOFormValue(event);
        if (this._fControl && this._fControl.touched) {
            this._fControl.markAsDirty();
        }
        this.onChange.emit(event);
    }
    filetypeValidator(control) {
        if (control.value && control.value.length > 0 && this.acceptFileType) {
            const regex = new RegExp(this.acceptFileType.replace(';', '|'));
            if (!this.files.every(file => file.type.match(regex) !== null || file.name.substr(file.name.lastIndexOf('.')).match(regex) !== null)) {
                return {
                    fileType: {
                        allowedFileTypes: this.acceptFileType.replace(';', ', ')
                    }
                };
            }
        }
        return {};
    }
    maxFileSizeValidator(control) {
        if (control.value && control.value.length > 0 && this.maxFileSize) {
            if (!this.files.every(file => file.size < this.maxFileSize)) {
                return {
                    fileSize: {
                        maxFileSize: this.maxFileSize
                    }
                };
            }
        }
        return {};
    }
    maxFilesValidator(control) {
        if (control.value && control.value.length > 0 && this.multiple && this.maxFiles !== -1) {
            if (this.maxFiles < this.files.length) {
                return {
                    numFile: {
                        maxFiles: this.maxFiles
                    }
                };
            }
        }
        return {};
    }
}
OFileInputComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-file-input',
                template: "<div fxLayout=\"row\" fxLayoutAlign=\"space-between center\" [formGroup]=\"getFormGroup()\" [matTooltip]=\"tooltip\" [matTooltipClass]=\"tooltipClass\"\n  [matTooltipPosition]=\"tooltipPosition\" [matTooltipShowDelay]=\"tooltipShowDelay\" [matTooltipHideDelay]=\"tooltipHideDelay\">\n  <mat-form-field [appearance]=\"appearance\" [floatLabel]=\"floatLabel\" [hideRequiredMarker]=\"hideRequiredMarker\" [class.custom-width]=\"hasCustomWidth\"\n    class=\"icon-field\" (click)=\"!enabled || isReadOnly ? null : inputFile.click()\" fxFill>\n    <mat-label *ngIf=\"labelVisible\">{{ olabel | oTranslate }}</mat-label>\n    <input #inputShowValue matInput type=\"text\" [id]=\"getAttribute()\" [formControlName]=\"getAttribute()\" [placeholder]=\"placeHolder\"\n      [required]=\"isRequired\" readonly (change)=\"onChangeEvent($event)\">\n    <button type=\"button\" *ngIf=\"showClearButton\" matSuffix mat-icon-button (click)=\"onClickClearValue($event)\">\n      <mat-icon svgIcon=\"ontimize:close\"></mat-icon>\n    </button>\n    <button type=\"button\" *ngIf=\"getValue()\" [disabled]=\"!isValid || uploader.isUploading\" matSuffix mat-icon-button (click)=\"onClickUpload($event)\">\n      <mat-icon>file_upload</mat-icon>\n    </button>\n    <mat-error *oMatError=\"hasError('required')\">\n      {{ 'FORM_VALIDATION.REQUIRED' | oTranslate }}\n    </mat-error>\n    <mat-error *oMatError=\"hasError('fileType')\">\n      {{ 'FORM_VALIDATION.FILE_TYPE' | oTranslate}} ({{ getErrorValue('fileType','allowedFileTypes') }})\n    </mat-error>\n    <mat-error *oMatError=\"hasError('fileSize')\">\n      {{ 'FORM_VALIDATION.FILE_MAXSIZE' | oTranslate }}: {{ getErrorValue('fileSize', 'maxFileSize') }} bytes\n    </mat-error>\n    <mat-error *oMatError=\"hasError('numFile')\">\n      {{ 'FORM_VALIDATION.FILE_MAXNUM' | oTranslate }}: {{ getErrorValue('numFile', 'maxFiles') }}\n    </mat-error>\n    <mat-error *ngFor=\"let oError of getActiveOErrors()\">\n      {{ oError.text | oTranslate }}\n    </mat-error>\n  </mat-form-field>\n  <input #inputFile type=\"file\" id=\"{{getAttribute()+'-file-input'}}\"\n    [attr.accept]=\"acceptFileType ? acceptFileType.replace(arraySeparatorRegExp, ',') : null\" (change)=\"fileSelected($event)\" hidden=\"true\"\n    [attr.multiple]=\"multiple ? '' : null\">\n  <div *ngIf=\"showInfo && files\">\n    <mat-progress-bar *ngIf=\"!splitUpload && uploader.isUploading\" color=\"accent\" mode=\"determinate\" [value]=\"uploader.progress\"></mat-progress-bar>\n    <mat-list>\n      <mat-list-item *ngFor=\"let file of files\">\n        <mat-icon mat-list-icon>insert_drive_file</mat-icon>\n        <span mat-line>{{ file.name }}</span>\n        <div fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n          <mat-progress-spinner *ngIf=\"splitUpload && file.isUploading\" color=\"accent\" mode=\"determinate\" [value]=\"file.progress\" class=\"uploading\"\n            diameter=\"3\" strokeWidth=\"3\"></mat-progress-spinner>\n          <mat-icon *ngIf=\"splitUpload && file.isUploaded && file.isSuccess\" class=\"uploaded\" svgIcon=\"ontimize:check_circle\"></mat-icon>\n          <mat-icon *ngIf=\"splitUpload && file.isUploaded && file.isError\" class=\"error\" svgIcon=\"ontimize:error_outline\"></mat-icon>\n        </div>\n      </mat-list-item>\n    </mat-list>\n  </div>\n</div>\n",
                inputs: DEFAULT_INPUTS_O_FILE_INPUT,
                outputs: DEFAULT_OUTPUTS_O_FILE_INPUT,
                providers: [
                    { provide: OntimizeFileService, useFactory: Éµ0, deps: [Injector] }
                ],
                styles: [".o-file-input-buttons{position:absolute;top:0;bottom:0;right:0;margin:auto}mat-icon.uploaded{color:#0f9d58}mat-icon.error{color:#d50000}"]
            }] }
];
OFileInputComponent.ctorParameters = () => [
    { type: OFormComponent, decorators: [{ type: Optional }, { type: Inject, args: [forwardRef(() => OFormComponent),] }] },
    { type: ElementRef },
    { type: Injector }
];
OFileInputComponent.propDecorators = {
    inputFile: [{ type: ViewChild, args: ['inputFile', { static: false },] }]
};
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OFileInputComponent.prototype, "showInfo", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OFileInputComponent.prototype, "multiple", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OFileInputComponent.prototype, "splitUpload", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Number)
], OFileInputComponent.prototype, "maxFileSize", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Number)
], OFileInputComponent.prototype, "maxFiles", void 0);
export { Éµ0 };
//# sourceMappingURL=data:application/json;base64,