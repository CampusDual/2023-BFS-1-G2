import * as tslib_1 from "tslib";
import { Component, ElementRef, forwardRef, Inject, Injector, Optional, ViewChild, ViewEncapsulation } from '@angular/core';
import { MediaObserver } from '@angular/flex-layout';
import { DateAdapter, MAT_DATE_LOCALE, MatDatepicker, MatDatepickerInput } from '@angular/material';
import moment from 'moment';
import { InputConverter } from '../../../decorators/input-converter';
import { MomentService } from '../../../services/moment.service';
import { OntimizeMomentDateAdapter } from '../../../shared/material/date/ontimize-moment-date-adapter';
import { SQLTypes } from '../../../util/sqltypes';
import { Util } from '../../../util/util';
import { OFormValue } from '../../form/o-form-value';
import { OFormComponent } from '../../form/o-form.component';
import { OFormDataComponent } from '../../o-form-data-component.class';
import { OValueChangeEvent } from '../../o-value-change-event.class';
import { DEFAULT_INPUTS_O_TEXT_INPUT, DEFAULT_OUTPUTS_O_TEXT_INPUT } from '../text-input/o-text-input.component';
export const DEFAULT_OUTPUTS_O_DATE_INPUT = [
    ...DEFAULT_OUTPUTS_O_TEXT_INPUT
];
export const DEFAULT_INPUTS_O_DATE_INPUT = [
    'valueType: value-type',
    'oformat: format',
    'olocale: locale',
    'oStartView: start-view',
    'oMinDate: min',
    'oMaxDate: max',
    'oTouchUi: touch-ui',
    'oStartAt: start-at',
    'filterDate: filter-date',
    'textInputEnabled: text-input-enabled',
    'dateClass: date-class',
    ...DEFAULT_INPUTS_O_TEXT_INPUT
];
export class ODateInputComponent extends OFormDataComponent {
    constructor(form, dateAdapter, elRef, injector) {
        super(form, elRef, injector);
        this.textInputEnabled = true;
        this._oformat = 'L';
        this.updateLocaleOnChange = false;
        this.oStartView = 'month';
        this._valueType = 'timestamp';
        this.momentDateAdapter = dateAdapter;
        this._defaultSQLTypeKey = 'DATE';
        this.momentSrv = this.injector.get(MomentService);
        this.media = this.injector.get(MediaObserver);
    }
    set oMinDate(value) {
        if (value) {
            const momentD = this.getValueAsMoment(value);
            if (Util.isDefined(momentD)) {
                this.datepickerInput.min = momentD.toDate();
                this.minDateString = momentD.format(this.oformat);
            }
        }
    }
    set oMaxDate(value) {
        if (value) {
            const momentD = this.getValueAsMoment(value);
            if (Util.isDefined(momentD)) {
                this.datepickerInput.max = momentD.toDate();
                this.maxDateString = momentD.format(this.oformat);
            }
        }
    }
    ngOnInit() {
        this.initialize();
        if (!this.olocale) {
            this.updateLocaleOnChange = true;
            this.olocale = this.momentSrv.getLocale();
        }
        if (this.oformat) {
            this.momentDateAdapter.oFormat = this.oformat;
        }
        this.momentDateAdapter.setLocale(this.olocale);
        if (this.oStartView) {
            this.datepicker.startView = this.oStartView;
        }
        if (this.oStartAt) {
            this.datepicker.startAt = new Date(this.oStartAt);
        }
        if (this.updateLocaleOnChange) {
            this.onLanguageChangeSubscription = this.translateService.onLanguageChanged.subscribe(() => {
                this.momentDateAdapter.setLocale(this.translateService.getCurrentLang());
                this.setValue(this.getValue());
            });
        }
        this.subscribeToMediaChanges();
    }
    subscribeToMediaChanges() {
        this.mediaSubscription = this.media.asObservable().subscribe((change) => {
            if (['xs', 'sm'].indexOf(change[0].mqAlias) !== -1) {
                this.touchUi = Util.isDefined(this.oTouchUi) ? this.oTouchUi : true;
            }
            if (['md', 'lg', 'xl'].indexOf(change[0].mqAlias) !== -1) {
                this.touchUi = Util.isDefined(this.oTouchUi) ? this.oTouchUi : false;
            }
        });
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        if (this.mediaSubscription) {
            this.mediaSubscription.unsubscribe();
        }
        if (this.onLanguageChangeSubscription) {
            this.onLanguageChangeSubscription.unsubscribe();
        }
    }
    getValueAsDate() {
        return this.dateValue;
    }
    getValue() {
        let timestampValue = super.getValue();
        if (timestampValue && timestampValue instanceof Date) {
            timestampValue = timestampValue.getTime();
        }
        return timestampValue;
    }
    get showClearButton() {
        return this.clearButton && !this.isReadOnly && this.enabled && this.matInputRef.nativeElement.value;
    }
    open() {
        if (!this.isReadOnly && this.enabled) {
            this.datepicker.open();
        }
    }
    onChangeEvent(event) {
        const isValid = event.value && event.value.isValid && event.value.isValid();
        let val = isValid ? event.value.valueOf() : event.value;
        const parsedVal = Util.parseByValueType(val, this.valueType, this.oformat);
        this.setValue(parsedVal, {
            changeType: OValueChangeEvent.USER_CHANGE,
            emitEvent: false,
            emitModelToViewChange: false
        });
    }
    onClickInput(e) {
        if (!this.textInputEnabled) {
            this.open();
        }
    }
    get filterDate() {
        return this._filterDate;
    }
    set filterDate(val) {
        this._filterDate = val;
    }
    get dateClass() {
        return this._dateClass;
    }
    set dateClass(val) {
        this._dateClass = val;
    }
    get oformat() {
        return this._oformat;
    }
    set oformat(val) {
        this._oformat = val;
    }
    get minDateString() {
        return this._minDateString;
    }
    set minDateString(val) {
        this._minDateString = val;
    }
    get maxDateString() {
        return this._maxDateString;
    }
    set maxDateString(val) {
        this._maxDateString = val;
    }
    get touchUi() {
        return this.oTouchUi || false;
    }
    set touchUi(val) {
        this.oTouchUi = val;
        this.datepicker.touchUi = this.touchUi;
    }
    ensureODateValueType(val) {
        if (!Util.isDefined(val)) {
            return val;
        }
        let result = val;
        switch (this.valueType) {
            case 'string':
                if (typeof val === 'string') {
                    const m = moment(val, this.oformat);
                    if (m.isValid()) {
                        this.dateValue = new Date(m.valueOf());
                    }
                }
                else {
                    result = undefined;
                }
                break;
            case 'date':
                if ((val instanceof Date)) {
                    this.dateValue = val;
                }
                else {
                    result = undefined;
                }
                break;
            case 'timestamp':
                if (typeof val === 'number') {
                    this.dateValue = new Date(val);
                }
                else {
                    result = undefined;
                }
                break;
            case 'iso-8601':
                if (typeof val !== 'string') {
                    const acceptTimestamp = typeof val === 'number' && this.getSQLType() === SQLTypes.TIMESTAMP;
                    if (acceptTimestamp) {
                        this.dateValue = new Date(val);
                    }
                    else {
                        result = undefined;
                    }
                }
                else {
                    const m = moment(val);
                    if (m.isValid()) {
                        this.dateValue = new Date(m.valueOf());
                    }
                    else {
                        result = undefined;
                    }
                }
                break;
            default:
                break;
        }
        if (!Util.isDefined(result)) {
            console.warn(`ODateInputComponent value (${val}) is not consistent with value-type (${this.valueType})`);
        }
        return result;
    }
    setFormValue(val, options, setDirty = false) {
        let value = val;
        if (val instanceof OFormValue) {
            value = val.value;
        }
        this.ensureODateValueType(value);
        super.setFormValue(value, options, setDirty);
    }
    set valueType(val) {
        this._valueType = Util.convertToODateValueType(val);
    }
    get valueType() {
        return this._valueType;
    }
    createFormControl(cfg, validators) {
        this._fControl = super.createFormControl(cfg, validators);
        if (!this.isEmpty() && !this.form.isInInsertMode()) {
            this._fControl.markAsTouched();
        }
        return this._fControl;
    }
    getValueAsMoment(val) {
        if (!Util.isDefined(val)) {
            return val;
        }
        let result;
        switch (true) {
            case this.valueType === 'string' && typeof val === 'string':
                result = moment(val, this.oformat);
                break;
            case this.valueType === 'date' && val instanceof Date:
            case this.valueType === 'timestamp' && typeof val === 'number':
            case this.valueType === 'iso-8601' && typeof val === 'string':
                result = moment(val);
                break;
            case this.valueType === 'iso-8601':
                if (typeof val !== 'string') {
                    const acceptTimestamp = typeof val === 'number' && this.getSQLType() === SQLTypes.TIMESTAMP;
                    if (acceptTimestamp) {
                        result = moment(val);
                    }
                }
                break;
            default:
                break;
        }
        return Util.isDefined(result) && result.isValid() ? result : undefined;
    }
}
ODateInputComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-date-input',
                template: "<div fxLayout=\"row\" fxLayoutAlign=\"space-between center\" [formGroup]=\"getFormGroup()\" [matTooltip]=\"tooltip\"\n  [matTooltipClass]=\"tooltipClass\" [matTooltipPosition]=\"tooltipPosition\" [matTooltipShowDelay]=\"tooltipShowDelay\"\n  [matTooltipHideDelay]=\"tooltipHideDelay\" (click)=\"onClickInput($event)\">\n  <mat-form-field [appearance]=\"appearance\" [floatLabel]=\"floatLabel\" [hideRequiredMarker]=\"hideRequiredMarker\"\n    [class.custom-width]=\"hasCustomWidth\" class=\"icon-field\" fxFlexFill>\n    <mat-label *ngIf=\"labelVisible\">{{ olabel | oTranslate }}</mat-label>\n    <input matInput #matInputRef [matDatepicker]=\"picker\" [id]=\"getAttribute()\" [formControlName]=\"getAttribute()\"\n      [placeholder]=\"placeHolder\" [readonly]=\"isReadOnly || !textInputEnabled\" (focus)=\"innerOnFocus($event)\"\n      (blur)=\"innerOnBlur($event)\" [matDatepickerFilter]=\"filterDate\" (dateChange)=\"onChangeEvent($event)\"\n      [required]=\"isRequired\" [value]=\"getValueAsDate()\">\n\n    <button type=\"button\" *ngIf=\"showClearButton\" matSuffix mat-icon-button (click)=\"onClickClearValue($event)\">\n      <mat-icon svgIcon=\"ontimize:close\"></mat-icon>\n    </button>\n    <mat-datepicker-toggle matSuffix [disabled]=\"isReadOnly || !enabled\" [class.read-only]=\"isReadOnly\" [for]=\"picker\">\n      <mat-icon matDatepickerToggleIcon>today</mat-icon>\n    </mat-datepicker-toggle>\n    <mat-datepicker #picker [disabled]=\"isReadOnly || !enabled\" [dateClass]=\"dateClass\"></mat-datepicker>\n    <mat-error *oMatError=\"hasError('required')\">\n      {{ 'FORM_VALIDATION.REQUIRED' | oTranslate }}\n    </mat-error>\n    <mat-error *oMatError=\"hasError('matDatepickerParse')\">\n      {{ 'FORM_VALIDATION.DATE_PARSE' | oTranslate }} {{ oformat }}\n    </mat-error>\n    <mat-error *oMatError=\"hasError('matDatepickerFilter')\">\n      {{ 'FORM_VALIDATION.DATE_FILTER' | oTranslate }}\n    </mat-error>\n    <mat-error *oMatError=\"hasError('matDatepickerMin')\">\n      {{ 'FORM_VALIDATION.DATE_MIN' | oTranslate }} {{ minDateString }}\n    </mat-error>\n    <mat-error *oMatError=\"hasError('matDatepickerMax')\">\n      {{ 'FORM_VALIDATION.DATE_MAX' | oTranslate }} {{ maxDateString }}\n    </mat-error>\n    <mat-error *ngFor=\"let oError of getActiveOErrors()\">\n      {{ oError.text | oTranslate }}\n    </mat-error>\n  </mat-form-field>\n</div>",
                outputs: DEFAULT_OUTPUTS_O_DATE_INPUT,
                inputs: DEFAULT_INPUTS_O_DATE_INPUT,
                encapsulation: ViewEncapsulation.None,
                providers: [
                    { provide: DateAdapter, useClass: OntimizeMomentDateAdapter, deps: [MAT_DATE_LOCALE] }
                ]
            }] }
];
ODateInputComponent.ctorParameters = () => [
    { type: OFormComponent, decorators: [{ type: Optional }, { type: Inject, args: [forwardRef(() => OFormComponent),] }] },
    { type: DateAdapter },
    { type: ElementRef },
    { type: Injector }
];
ODateInputComponent.propDecorators = {
    datepicker: [{ type: ViewChild, args: ['picker', { static: true },] }],
    datepickerInput: [{ type: ViewChild, args: [MatDatepickerInput, { static: true },] }],
    matInputRef: [{ type: ViewChild, args: ['matInputRef', { read: ElementRef, static: true },] }]
};
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], ODateInputComponent.prototype, "textInputEnabled", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], ODateInputComponent.prototype, "oTouchUi", void 0);
//# sourceMappingURL=data:application/json;base64,