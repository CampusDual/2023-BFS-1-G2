import { ChangeDetectionStrategy, Component, Injector, TemplateRef, ViewChild } from '@angular/core';
import { OTranslateService } from '../../../../../services/translate/o-translate.service';
import { Util } from '../../../../../util/util';
import { DEFAULT_INPUTS_O_COMBO_RENDERER, OComboCustomRenderer } from '../o-combo-renderer.class';
export const DEFAULT_INPUTS_O_COMBO_RENDERER_BOOLEAN = [
    ...DEFAULT_INPUTS_O_COMBO_RENDERER,
    'trueValue: true-value',
    'falseValue: false-value',
    'booleanType: boolean-type',
    'renderTrueValue: render-true-value',
    'renderFalseValue: render-false-value',
    'renderType: render-type'
];
export class OComboRendererBooleanComponent extends OComboCustomRenderer {
    constructor(injector) {
        super(injector);
        this.injector = injector;
        this._renderType = 'string';
        this._booleanType = 'boolean';
        this.translateService = this.injector.get(OTranslateService);
    }
    initialize() {
        super.initialize();
        this.parseInputs();
    }
    parseInputs() {
        switch (this.booleanType) {
            case 'string':
                this.parseStringInputs();
                break;
            case 'number':
                this.parseNumberInputs();
                break;
            default:
                this.trueValue = true;
                this.falseValue = false;
                break;
        }
    }
    parseStringInputs() {
        if ((this.trueValue || '').length === 0) {
            this.trueValue = undefined;
        }
        if ((this.falseValue || '').length === 0) {
            this.falseValue = undefined;
        }
    }
    parseNumberInputs() {
        this.trueValue = parseInt(this.trueValue, 10);
        if (isNaN(this.trueValue)) {
            this.trueValue = 1;
        }
        this.falseValue = parseInt(this.falseValue, 10);
        if (isNaN(this.falseValue)) {
            this.falseValue = 0;
        }
    }
    hasComboTrueValue(record) {
        let result;
        if (Util.isDefined(record) && Util.isDefined(record[this.comboComponent.valueColumn])) {
            const value = record[this.comboComponent.valueColumn];
            result = (value === this.trueValue);
            if (this.booleanType === 'string' && !Util.isDefined(this.trueValue)) {
                result = Util.parseBoolean(value, false);
            }
        }
        return result;
    }
    get booleanType() {
        return this._booleanType;
    }
    set booleanType(arg) {
        arg = (arg || '').toLowerCase();
        if (['number', 'boolean', 'string'].indexOf(arg) === -1) {
            arg = 'boolean';
        }
        this._booleanType = arg;
    }
    get renderType() {
        return this._renderType;
    }
    set renderType(arg) {
        arg = (arg || '').toLowerCase();
        if (['string', 'number'].indexOf(arg) === -1) {
            arg = 'string';
        }
        this._renderType = arg;
    }
    get renderTrueValue() {
        return this._renderTrueValue || this.trueValue;
    }
    set renderTrueValue(arg) {
        this._renderTrueValue = arg;
    }
    get renderFalseValue() {
        return this._renderFalseValue || this.falseValue;
    }
    set renderFalseValue(arg) {
        this._renderFalseValue = arg;
    }
}
OComboRendererBooleanComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-combo-renderer-boolean',
                template: "<ng-template #templateref let-value=\"value\">\n  <ng-container *ngIf=\"hasComboTrueValue(value);else falseValue\">\n    <ng-container [ngSwitch]=\"renderType\">\n      <ng-container *ngSwitchCase=\"'number'\">{{ renderTrueValue }}</ng-container>\n      <span *ngSwitchDefault>{{ renderTrueValue | oTranslate }}</span>\n    </ng-container>\n  </ng-container>\n  <ng-template #falseValue>\n    <ng-container [ngSwitch]=\"renderType\">\n      <ng-container *ngSwitchCase=\"'number'\">{{ renderFalseValue }}</ng-container>\n      <ng-container *ngSwitchDefault>{{ renderFalseValue | oTranslate}}</ng-container>\n    </ng-container>\n  </ng-template>\n</ng-template>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                inputs: DEFAULT_INPUTS_O_COMBO_RENDERER_BOOLEAN
            }] }
];
OComboRendererBooleanComponent.ctorParameters = () => [
    { type: Injector }
];
OComboRendererBooleanComponent.propDecorators = {
    templateref: [{ type: ViewChild, args: ['templateref', { read: TemplateRef, static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,