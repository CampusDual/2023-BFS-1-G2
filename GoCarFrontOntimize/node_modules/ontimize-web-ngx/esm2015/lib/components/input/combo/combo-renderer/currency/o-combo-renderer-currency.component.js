import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, Injector, TemplateRef, ViewChild } from '@angular/core';
import { InputConverter } from '../../../../../decorators/input-converter';
import { OCurrencyPipe } from '../../../../../pipes/o-currency.pipe';
import { CurrencyService } from '../../../../../services/currency.service';
import { OComboCustomRenderer } from '../o-combo-renderer.class';
import { DEFAULT_INPUTS_O_COMBO_RENDERER_REAL } from '../real/o-combo-renderer-real.component';
export const DEFAULT_INPUTS_O_COMBO_RENDERER_CURRENCY = [
    ...DEFAULT_INPUTS_O_COMBO_RENDERER_REAL,
    'currencySymbol: currency-symbol',
    'currencySymbolPosition: currency-symbol-position'
];
export class OComboRendererCurrencyComponent extends OComboCustomRenderer {
    constructor(injector) {
        super(injector);
        this.injector = injector;
        this.minDecimalDigits = 2;
        this.maxDecimalDigits = 2;
        this.decimalSeparator = '.';
        this.grouping = true;
        this.thousandSeparator = ',';
        this.currencyService = this.injector.get(CurrencyService);
        this.setComponentPipe();
    }
    setComponentPipe() {
        this.componentPipe = new OCurrencyPipe(this.injector);
    }
    initialize() {
        super.initialize();
        if (typeof this.currencySymbol === 'undefined') {
            this.currencySymbol = this.currencyService.symbol;
        }
        if (typeof this.currencySymbolPosition === 'undefined') {
            this.currencySymbolPosition = this.currencyService.symbolPosition;
        }
        this.pipeArguments = {
            currencySimbol: this.currencySymbol,
            currencySymbolPosition: this.currencySymbolPosition,
            minDecimalDigits: this.minDecimalDigits,
            maxDecimalDigits: this.maxDecimalDigits,
            decimalSeparator: this.decimalSeparator,
            grouping: this.grouping,
            thousandSeparator: this.thousandSeparator
        };
    }
}
OComboRendererCurrencyComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-combo-renderer-currency',
                template: "<ng-template #templateref let-value=\"value\">\n  {{getComboData(value)}}\n</ng-template>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                inputs: DEFAULT_INPUTS_O_COMBO_RENDERER_CURRENCY
            }] }
];
OComboRendererCurrencyComponent.ctorParameters = () => [
    { type: Injector }
];
OComboRendererCurrencyComponent.propDecorators = {
    templateref: [{ type: ViewChild, args: ['templateref', { read: TemplateRef, static: true },] }]
};
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Number)
], OComboRendererCurrencyComponent.prototype, "minDecimalDigits", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Number)
], OComboRendererCurrencyComponent.prototype, "maxDecimalDigits", void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1jb21iby1yZW5kZXJlci1jdXJyZW5jeS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9vbnRpbWl6ZS13ZWItbmd4LyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvaW5wdXQvY29tYm8vY29tYm8tcmVuZGVyZXIvY3VycmVuY3kvby1jb21iby1yZW5kZXJlci1jdXJyZW5jeS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFVLFdBQVcsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFN0csT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBQzNFLE9BQU8sRUFBeUIsYUFBYSxFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDNUYsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDBDQUEwQyxDQUFDO0FBQzNFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxvQ0FBb0MsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBRS9GLE1BQU0sQ0FBQyxNQUFNLHdDQUF3QyxHQUFHO0lBQ3RELEdBQUcsb0NBQW9DO0lBR3ZDLGlDQUFpQztJQUdqQyxrREFBa0Q7Q0FDbkQsQ0FBQztBQVFGLE1BQU0sT0FBTywrQkFBZ0MsU0FBUSxvQkFBb0I7SUFvQnZFLFlBQXNCLFFBQWtCO1FBQ3RDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztRQURJLGFBQVEsR0FBUixRQUFRLENBQVU7UUFqQnhDLHFCQUFnQixHQUFXLENBQUMsQ0FBQztRQUU3QixxQkFBZ0IsR0FBVyxDQUFDLENBQUM7UUFJbkIscUJBQWdCLEdBQVcsR0FBRyxDQUFDO1FBRS9CLGFBQVEsR0FBWSxJQUFJLENBQUM7UUFDekIsc0JBQWlCLEdBQVcsR0FBRyxDQUFDO1FBVXhDLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDMUQsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUVELGdCQUFnQjtRQUNkLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxhQUFhLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3hELENBQUM7SUFFRCxVQUFVO1FBQ1IsS0FBSyxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ25CLElBQUksT0FBTyxJQUFJLENBQUMsY0FBYyxLQUFLLFdBQVcsRUFBRTtZQUM5QyxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDO1NBQ25EO1FBQ0QsSUFBSSxPQUFPLElBQUksQ0FBQyxzQkFBc0IsS0FBSyxXQUFXLEVBQUU7WUFDdEQsSUFBSSxDQUFDLHNCQUFzQixHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsY0FBYyxDQUFDO1NBQ25FO1FBRUQsSUFBSSxDQUFDLGFBQWEsR0FBRztZQUNuQixjQUFjLEVBQUUsSUFBSSxDQUFDLGNBQWM7WUFDbkMsc0JBQXNCLEVBQUUsSUFBSSxDQUFDLHNCQUFzQjtZQUNuRCxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsZ0JBQWdCO1lBQ3ZDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxnQkFBZ0I7WUFDdkMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLGdCQUFnQjtZQUN2QyxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7WUFDdkIsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLGlCQUFpQjtTQUMxQyxDQUFDO0lBRUosQ0FBQzs7O1lBdkRGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsMkJBQTJCO2dCQUNyQyx1R0FBeUQ7Z0JBQ3pELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2dCQUMvQyxNQUFNLEVBQUUsd0NBQXdDO2FBQ2pEOzs7WUF2QjRDLFFBQVE7OzswQkEwQ2xELFNBQVMsU0FBQyxhQUFhLEVBQUUsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7O0FBZjdEO0lBREMsY0FBYyxFQUFFOzt5RUFDWTtBQUU3QjtJQURDLGNBQWMsRUFBRTs7eUVBQ1kiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBJbmplY3RvciwgT25Jbml0LCBUZW1wbGF0ZVJlZiwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IElucHV0Q29udmVydGVyIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vZGVjb3JhdG9ycy9pbnB1dC1jb252ZXJ0ZXInO1xuaW1wb3J0IHsgSUN1cnJlbmN5UGlwZUFyZ3VtZW50LCBPQ3VycmVuY3lQaXBlIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vcGlwZXMvby1jdXJyZW5jeS5waXBlJztcbmltcG9ydCB7IEN1cnJlbmN5U2VydmljZSB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3NlcnZpY2VzL2N1cnJlbmN5LnNlcnZpY2UnO1xuaW1wb3J0IHsgT0NvbWJvQ3VzdG9tUmVuZGVyZXIgfSBmcm9tICcuLi9vLWNvbWJvLXJlbmRlcmVyLmNsYXNzJztcbmltcG9ydCB7IERFRkFVTFRfSU5QVVRTX09fQ09NQk9fUkVOREVSRVJfUkVBTCB9IGZyb20gJy4uL3JlYWwvby1jb21iby1yZW5kZXJlci1yZWFsLmNvbXBvbmVudCc7XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX0lOUFVUU19PX0NPTUJPX1JFTkRFUkVSX0NVUlJFTkNZID0gW1xuICAuLi5ERUZBVUxUX0lOUFVUU19PX0NPTUJPX1JFTkRFUkVSX1JFQUwsXG5cbiAgLy8gY3VycmVuY3ktc3ltYm9sIFtzdHJpbmddOiBjdXJyZW5jeSBzeW1ib2wuIERlZmF1bHQ6IGRvbGxhciAoJCkuXG4gICdjdXJyZW5jeVN5bWJvbDogY3VycmVuY3ktc3ltYm9sJyxcblxuICAvLyBjdXJyZW5jeS1zeW1ib2wtcG9zaXRpb24gW2xlZnR8cmlnaHRdOiBwb3NpdGlvbiBvZiB0aGUgY3VycmVuY3kgc3ltYm9sLiBEZWZhdWx0OiBsZWZ0LlxuICAnY3VycmVuY3lTeW1ib2xQb3NpdGlvbjogY3VycmVuY3ktc3ltYm9sLXBvc2l0aW9uJ1xuXTtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnby1jb21iby1yZW5kZXJlci1jdXJyZW5jeScsXG4gIHRlbXBsYXRlVXJsOiAnLi9vLWNvbWJvLXJlbmRlcmVyLWN1cnJlbmN5LmNvbXBvbmVudC5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIGlucHV0czogREVGQVVMVF9JTlBVVFNfT19DT01CT19SRU5ERVJFUl9DVVJSRU5DWVxufSlcbmV4cG9ydCBjbGFzcyBPQ29tYm9SZW5kZXJlckN1cnJlbmN5Q29tcG9uZW50IGV4dGVuZHMgT0NvbWJvQ3VzdG9tUmVuZGVyZXIgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIEBJbnB1dENvbnZlcnRlcigpXG4gIG1pbkRlY2ltYWxEaWdpdHM6IG51bWJlciA9IDI7XG4gIEBJbnB1dENvbnZlcnRlcigpXG4gIG1heERlY2ltYWxEaWdpdHM6IG51bWJlciA9IDI7XG5cbiAgcHJvdGVjdGVkIGN1cnJlbmN5U3ltYm9sOiBzdHJpbmc7XG4gIHByb3RlY3RlZCBjdXJyZW5jeVN5bWJvbFBvc2l0aW9uOiBzdHJpbmc7XG4gIHByb3RlY3RlZCBkZWNpbWFsU2VwYXJhdG9yOiBzdHJpbmcgPSAnLic7XG5cbiAgcHJvdGVjdGVkIGdyb3VwaW5nOiBib29sZWFuID0gdHJ1ZTtcbiAgcHJvdGVjdGVkIHRob3VzYW5kU2VwYXJhdG9yOiBzdHJpbmcgPSAnLCc7XG5cbiAgcHJvdGVjdGVkIGN1cnJlbmN5U2VydmljZTogQ3VycmVuY3lTZXJ2aWNlO1xuXG4gIHByb3RlY3RlZCBjb21wb25lbnRQaXBlOiBPQ3VycmVuY3lQaXBlO1xuICBwcm90ZWN0ZWQgcGlwZUFyZ3VtZW50czogSUN1cnJlbmN5UGlwZUFyZ3VtZW50O1xuICBAVmlld0NoaWxkKCd0ZW1wbGF0ZXJlZicsIHsgcmVhZDogVGVtcGxhdGVSZWYsIHN0YXRpYzogdHJ1ZSB9KSBwdWJsaWMgdGVtcGxhdGVyZWY6IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGluamVjdG9yOiBJbmplY3Rvcikge1xuICAgIHN1cGVyKGluamVjdG9yKTtcbiAgICB0aGlzLmN1cnJlbmN5U2VydmljZSA9IHRoaXMuaW5qZWN0b3IuZ2V0KEN1cnJlbmN5U2VydmljZSk7XG4gICAgdGhpcy5zZXRDb21wb25lbnRQaXBlKCk7XG4gIH1cblxuICBzZXRDb21wb25lbnRQaXBlKCkge1xuICAgIHRoaXMuY29tcG9uZW50UGlwZSA9IG5ldyBPQ3VycmVuY3lQaXBlKHRoaXMuaW5qZWN0b3IpO1xuICB9XG5cbiAgaW5pdGlhbGl6ZSgpIHtcbiAgICBzdXBlci5pbml0aWFsaXplKCk7XG4gICAgaWYgKHR5cGVvZiB0aGlzLmN1cnJlbmN5U3ltYm9sID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhpcy5jdXJyZW5jeVN5bWJvbCA9IHRoaXMuY3VycmVuY3lTZXJ2aWNlLnN5bWJvbDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB0aGlzLmN1cnJlbmN5U3ltYm9sUG9zaXRpb24gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzLmN1cnJlbmN5U3ltYm9sUG9zaXRpb24gPSB0aGlzLmN1cnJlbmN5U2VydmljZS5zeW1ib2xQb3NpdGlvbjtcbiAgICB9XG5cbiAgICB0aGlzLnBpcGVBcmd1bWVudHMgPSB7XG4gICAgICBjdXJyZW5jeVNpbWJvbDogdGhpcy5jdXJyZW5jeVN5bWJvbCxcbiAgICAgIGN1cnJlbmN5U3ltYm9sUG9zaXRpb246IHRoaXMuY3VycmVuY3lTeW1ib2xQb3NpdGlvbixcbiAgICAgIG1pbkRlY2ltYWxEaWdpdHM6IHRoaXMubWluRGVjaW1hbERpZ2l0cyxcbiAgICAgIG1heERlY2ltYWxEaWdpdHM6IHRoaXMubWF4RGVjaW1hbERpZ2l0cyxcbiAgICAgIGRlY2ltYWxTZXBhcmF0b3I6IHRoaXMuZGVjaW1hbFNlcGFyYXRvcixcbiAgICAgIGdyb3VwaW5nOiB0aGlzLmdyb3VwaW5nLFxuICAgICAgdGhvdXNhbmRTZXBhcmF0b3I6IHRoaXMudGhvdXNhbmRTZXBhcmF0b3JcbiAgICB9O1xuXG4gIH1cblxufVxuIl19