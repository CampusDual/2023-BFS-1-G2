import { ChangeDetectionStrategy, Component, Injector, TemplateRef, ViewChild } from '@angular/core';
import { OMomentPipe } from '../../../../../pipes/o-moment.pipe';
import { DEFAULT_INPUTS_O_COMBO_RENDERER, OComboCustomRenderer } from '../o-combo-renderer.class';
export const DEFAULT_INPUTS_O_COMBO_RENDERER_DATE = [
    ...DEFAULT_INPUTS_O_COMBO_RENDERER,
    'format'
];
export class OComboRendererDateComponent extends OComboCustomRenderer {
    constructor(injector) {
        super(injector);
        this.injector = injector;
        this.setComponentPipe();
    }
    setComponentPipe() {
        this.componentPipe = new OMomentPipe(this.injector);
    }
    initialize() {
        super.initialize();
        this.pipeArguments = {
            format: this.format
        };
    }
}
OComboRendererDateComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-combo-renderer-date',
                template: "<ng-template #templateref let-value=\"value\">\n  {{getComboData(value)}}\n</ng-template>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                inputs: DEFAULT_INPUTS_O_COMBO_RENDERER_DATE
            }] }
];
OComboRendererDateComponent.ctorParameters = () => [
    { type: Injector }
];
OComboRendererDateComponent.propDecorators = {
    templateref: [{ type: ViewChild, args: ['templateref', { read: TemplateRef, static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1jb21iby1yZW5kZXJlci1kYXRlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL29udGltaXplLXdlYi1uZ3gvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9pbnB1dC9jb21iby9jb21iby1yZW5kZXJlci9kYXRlL28tY29tYm8tcmVuZGVyZXItZGF0ZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQVUsV0FBVyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU3RyxPQUFPLEVBQXVCLFdBQVcsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ3RGLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRWxHLE1BQU0sQ0FBQyxNQUFNLG9DQUFvQyxHQUFHO0lBQ2xELEdBQUcsK0JBQStCO0lBRWxDLFFBQVE7Q0FDVCxDQUFDO0FBUUYsTUFBTSxPQUFPLDJCQUE0QixTQUFRLG9CQUFvQjtJQVNuRSxZQUFzQixRQUFrQjtRQUN0QyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7UUFESSxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBRXRDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFFRCxnQkFBZ0I7UUFDZCxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRUQsVUFBVTtRQUNSLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUVuQixJQUFJLENBQUMsYUFBYSxHQUFHO1lBQ25CLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtTQUNwQixDQUFDO0lBQ0osQ0FBQzs7O1lBOUJGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsdUJBQXVCO2dCQUNqQyx1R0FBcUQ7Z0JBQ3JELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2dCQUMvQyxNQUFNLEVBQUUsb0NBQW9DO2FBQzdDOzs7WUFoQjRDLFFBQVE7OzswQkF3QmxELFNBQVMsU0FBQyxhQUFhLEVBQUUsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBJbmplY3RvciwgT25Jbml0LCBUZW1wbGF0ZVJlZiwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IElNb21lbnRQaXBlQXJndW1lbnQsIE9Nb21lbnRQaXBlIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vcGlwZXMvby1tb21lbnQucGlwZSc7XG5pbXBvcnQgeyBERUZBVUxUX0lOUFVUU19PX0NPTUJPX1JFTkRFUkVSLCBPQ29tYm9DdXN0b21SZW5kZXJlciB9IGZyb20gJy4uL28tY29tYm8tcmVuZGVyZXIuY2xhc3MnO1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9JTlBVVFNfT19DT01CT19SRU5ERVJFUl9EQVRFID0gW1xuICAuLi5ERUZBVUxUX0lOUFVUU19PX0NPTUJPX1JFTkRFUkVSLFxuICAvLyBmb3JtYXQgW3N0cmluZ106IGRhdGUgZm9ybWF0LiBTZWUgTW9tZW50SlMgKGh0dHA6Ly9tb21lbnRqcy5jb20vKS5cbiAgJ2Zvcm1hdCdcbl07XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ28tY29tYm8tcmVuZGVyZXItZGF0ZScsXG4gIHRlbXBsYXRlVXJsOiAnLi9vLWNvbWJvLXJlbmRlcmVyLWRhdGUuY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgaW5wdXRzOiBERUZBVUxUX0lOUFVUU19PX0NPTUJPX1JFTkRFUkVSX0RBVEVcbn0pXG5leHBvcnQgY2xhc3MgT0NvbWJvUmVuZGVyZXJEYXRlQ29tcG9uZW50IGV4dGVuZHMgT0NvbWJvQ3VzdG9tUmVuZGVyZXIgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIHByb3RlY3RlZCBjb21wb25lbnRQaXBlOiBPTW9tZW50UGlwZTtcbiAgcHJvdGVjdGVkIHBpcGVBcmd1bWVudHM6IElNb21lbnRQaXBlQXJndW1lbnQ7XG5cbiAgcHJvdGVjdGVkIGZvcm1hdDogc3RyaW5nO1xuXG4gIEBWaWV3Q2hpbGQoJ3RlbXBsYXRlcmVmJywgeyByZWFkOiBUZW1wbGF0ZVJlZiwgc3RhdGljOiB0cnVlIH0pIHB1YmxpYyB0ZW1wbGF0ZXJlZjogVGVtcGxhdGVSZWY8YW55PjtcblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgaW5qZWN0b3I6IEluamVjdG9yKSB7XG4gICAgc3VwZXIoaW5qZWN0b3IpO1xuICAgIHRoaXMuc2V0Q29tcG9uZW50UGlwZSgpO1xuICB9XG5cbiAgc2V0Q29tcG9uZW50UGlwZSgpIHtcbiAgICB0aGlzLmNvbXBvbmVudFBpcGUgPSBuZXcgT01vbWVudFBpcGUodGhpcy5pbmplY3Rvcik7XG4gIH1cblxuICBpbml0aWFsaXplKCkge1xuICAgIHN1cGVyLmluaXRpYWxpemUoKTtcbiAgICAvLyBDYWxsZWQgYWZ0ZXIgdGhlIGNvbnN0cnVjdG9yLCBpbml0aWFsaXppbmcgaW5wdXQgcHJvcGVydGllcywgYW5kIHRoZSBmaXJzdCBjYWxsIHRvIG5nT25DaGFuZ2VzLlxuICAgIHRoaXMucGlwZUFyZ3VtZW50cyA9IHtcbiAgICAgIGZvcm1hdDogdGhpcy5mb3JtYXRcbiAgICB9O1xuICB9XG59XG4iXX0=