import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, Injector, TemplateRef, ViewChild } from '@angular/core';
import { InputConverter } from '../../../../../decorators/input-converter';
import { ORealPipe } from '../../../../../pipes/o-real.pipe';
import { NumberService } from '../../../../../services/number.service';
import { DEFAULT_INPUTS_O_COMBO_RENDERER_INTEGER, OComboRendererIntegerComponent } from '../integer/o-combo-renderer-integer.component';
export const DEFAULT_INPUTS_O_COMBO_RENDERER_REAL = [
    ...DEFAULT_INPUTS_O_COMBO_RENDERER_INTEGER,
    'decimalSeparator: decimal-separator',
    'minDecimalDigits: min-decimal-digits',
    'maxDecimalDigits: max-decimal-digits'
];
export class OComboRendererRealComponent extends OComboRendererIntegerComponent {
    constructor(injector) {
        super(injector);
        this.injector = injector;
        this.minDecimalDigits = 2;
        this.maxDecimalDigits = 2;
        this.decimalSeparator = '.';
        this.numberService = this.injector.get(NumberService);
        this.setComponentPipe();
    }
    setComponentPipe() {
        this.componentPipe = new ORealPipe(this.injector);
    }
    initialize() {
        super.initialize();
        this.pipeArguments = {
            minDecimalDigits: this.minDecimalDigits,
            maxDecimalDigits: this.maxDecimalDigits,
            decimalSeparator: this.decimalSeparator,
            grouping: this.grouping,
            thousandSeparator: this.thousandSeparator
        };
    }
}
OComboRendererRealComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-combo-renderer-real',
                template: "<ng-template #templateref let-value=\"value\">\n  {{ getComboData(value)}}\n</ng-template>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                inputs: DEFAULT_INPUTS_O_COMBO_RENDERER_REAL
            }] }
];
OComboRendererRealComponent.ctorParameters = () => [
    { type: Injector }
];
OComboRendererRealComponent.propDecorators = {
    templateref: [{ type: ViewChild, args: ['templateref', { read: TemplateRef, static: true },] }]
};
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Number)
], OComboRendererRealComponent.prototype, "minDecimalDigits", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Number)
], OComboRendererRealComponent.prototype, "maxDecimalDigits", void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1jb21iby1yZW5kZXJlci1yZWFsLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL29udGltaXplLXdlYi1uZ3gvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9pbnB1dC9jb21iby9jb21iby1yZW5kZXJlci9yZWFsL28tY29tYm8tcmVuZGVyZXItcmVhbC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFVLFdBQVcsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFN0csT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBQzNFLE9BQU8sRUFBcUIsU0FBUyxFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDaEYsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQ3ZFLE9BQU8sRUFDTCx1Q0FBdUMsRUFDdkMsOEJBQThCLEVBQy9CLE1BQU0sK0NBQStDLENBQUM7QUFFdkQsTUFBTSxDQUFDLE1BQU0sb0NBQW9DLEdBQUc7SUFDbEQsR0FBRyx1Q0FBdUM7SUFFMUMscUNBQXFDO0lBQ3JDLHNDQUFzQztJQUN0QyxzQ0FBc0M7Q0FDdkMsQ0FBQztBQVFGLE1BQU0sT0FBTywyQkFBNEIsU0FBUSw4QkFBOEI7SUFlN0UsWUFBc0IsUUFBa0I7UUFDdEMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBREksYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQVp4QyxxQkFBZ0IsR0FBVyxDQUFDLENBQUM7UUFFN0IscUJBQWdCLEdBQVcsQ0FBQyxDQUFDO1FBRW5CLHFCQUFnQixHQUFXLEdBQUcsQ0FBQztRQVV2QyxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ3RELElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFFRCxnQkFBZ0I7UUFDZCxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRUQsVUFBVTtRQUNSLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNuQixJQUFJLENBQUMsYUFBYSxHQUFHO1lBQ25CLGdCQUFnQixFQUFFLElBQUksQ0FBQyxnQkFBZ0I7WUFDdkMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLGdCQUFnQjtZQUN2QyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsZ0JBQWdCO1lBQ3ZDLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtZQUN2QixpQkFBaUIsRUFBRSxJQUFJLENBQUMsaUJBQWlCO1NBQzFDLENBQUM7SUFDSixDQUFDOzs7WUF4Q0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSx1QkFBdUI7Z0JBQ2pDLHdHQUFxRDtnQkFDckQsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07Z0JBQy9DLE1BQU0sRUFBRSxvQ0FBb0M7YUFDN0M7OztZQXZCNEMsUUFBUTs7OzBCQXFDbEQsU0FBUyxTQUFDLGFBQWEsRUFBRSxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTs7QUFWN0Q7SUFEQyxjQUFjLEVBQUU7O3FFQUNZO0FBRTdCO0lBREMsY0FBYyxFQUFFOztxRUFDWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIEluamVjdG9yLCBPbkluaXQsIFRlbXBsYXRlUmVmLCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgSW5wdXRDb252ZXJ0ZXIgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9kZWNvcmF0b3JzL2lucHV0LWNvbnZlcnRlcic7XG5pbXBvcnQgeyBJUmVhbFBpcGVBcmd1bWVudCwgT1JlYWxQaXBlIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vcGlwZXMvby1yZWFsLnBpcGUnO1xuaW1wb3J0IHsgTnVtYmVyU2VydmljZSB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3NlcnZpY2VzL251bWJlci5zZXJ2aWNlJztcbmltcG9ydCB7XG4gIERFRkFVTFRfSU5QVVRTX09fQ09NQk9fUkVOREVSRVJfSU5URUdFUixcbiAgT0NvbWJvUmVuZGVyZXJJbnRlZ2VyQ29tcG9uZW50XG59IGZyb20gJy4uL2ludGVnZXIvby1jb21iby1yZW5kZXJlci1pbnRlZ2VyLmNvbXBvbmVudCc7XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX0lOUFVUU19PX0NPTUJPX1JFTkRFUkVSX1JFQUwgPSBbXG4gIC4uLkRFRkFVTFRfSU5QVVRTX09fQ09NQk9fUkVOREVSRVJfSU5URUdFUixcbiAgLy8gZGVjaW1hbC1zZXBhcmF0b3IgW3N0cmluZ106IGRlY2ltYWwgc2VwYXJhdG9yLiBEZWZhdWx0OiBkb3QgKC4pLlxuICAnZGVjaW1hbFNlcGFyYXRvcjogZGVjaW1hbC1zZXBhcmF0b3InLFxuICAnbWluRGVjaW1hbERpZ2l0czogbWluLWRlY2ltYWwtZGlnaXRzJyxcbiAgJ21heERlY2ltYWxEaWdpdHM6IG1heC1kZWNpbWFsLWRpZ2l0cydcbl07XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ28tY29tYm8tcmVuZGVyZXItcmVhbCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9vLWNvbWJvLXJlbmRlcmVyLXJlYWwuY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgaW5wdXRzOiBERUZBVUxUX0lOUFVUU19PX0NPTUJPX1JFTkRFUkVSX1JFQUxcbn0pXG5leHBvcnQgY2xhc3MgT0NvbWJvUmVuZGVyZXJSZWFsQ29tcG9uZW50IGV4dGVuZHMgT0NvbWJvUmVuZGVyZXJJbnRlZ2VyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICBASW5wdXRDb252ZXJ0ZXIoKVxuICBtaW5EZWNpbWFsRGlnaXRzOiBudW1iZXIgPSAyO1xuICBASW5wdXRDb252ZXJ0ZXIoKVxuICBtYXhEZWNpbWFsRGlnaXRzOiBudW1iZXIgPSAyO1xuXG4gIHByb3RlY3RlZCBkZWNpbWFsU2VwYXJhdG9yOiBzdHJpbmcgPSAnLic7XG4gIHByb3RlY3RlZCBudW1iZXJTZXJ2aWNlOiBOdW1iZXJTZXJ2aWNlO1xuXG4gIHByb3RlY3RlZCBjb21wb25lbnRQaXBlOiBPUmVhbFBpcGU7XG4gIHByb3RlY3RlZCBwaXBlQXJndW1lbnRzOiBJUmVhbFBpcGVBcmd1bWVudDtcblxuICBAVmlld0NoaWxkKCd0ZW1wbGF0ZXJlZicsIHsgcmVhZDogVGVtcGxhdGVSZWYsIHN0YXRpYzogdHJ1ZSB9KSBwdWJsaWMgdGVtcGxhdGVyZWY6IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGluamVjdG9yOiBJbmplY3Rvcikge1xuICAgIHN1cGVyKGluamVjdG9yKTtcbiAgICB0aGlzLm51bWJlclNlcnZpY2UgPSB0aGlzLmluamVjdG9yLmdldChOdW1iZXJTZXJ2aWNlKTtcbiAgICB0aGlzLnNldENvbXBvbmVudFBpcGUoKTtcbiAgfVxuXG4gIHNldENvbXBvbmVudFBpcGUoKSB7XG4gICAgdGhpcy5jb21wb25lbnRQaXBlID0gbmV3IE9SZWFsUGlwZSh0aGlzLmluamVjdG9yKTtcbiAgfVxuXG4gIGluaXRpYWxpemUoKSB7XG4gICAgc3VwZXIuaW5pdGlhbGl6ZSgpO1xuICAgIHRoaXMucGlwZUFyZ3VtZW50cyA9IHtcbiAgICAgIG1pbkRlY2ltYWxEaWdpdHM6IHRoaXMubWluRGVjaW1hbERpZ2l0cyxcbiAgICAgIG1heERlY2ltYWxEaWdpdHM6IHRoaXMubWF4RGVjaW1hbERpZ2l0cyxcbiAgICAgIGRlY2ltYWxTZXBhcmF0b3I6IHRoaXMuZGVjaW1hbFNlcGFyYXRvcixcbiAgICAgIGdyb3VwaW5nOiB0aGlzLmdyb3VwaW5nLFxuICAgICAgdGhvdXNhbmRTZXBhcmF0b3I6IHRoaXMudGhvdXNhbmRTZXBhcmF0b3JcbiAgICB9O1xuICB9XG5cbn1cbiJdfQ==