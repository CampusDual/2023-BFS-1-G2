import { ChangeDetectionStrategy, Component, Injector, TemplateRef, ViewChild } from '@angular/core';
import { OIconPipe } from '../../../../../pipes/o-icon.pipe';
import { IconService } from '../../../../../services/icon.service';
import { Util } from '../../../../../util/util';
import { OComboCustomRenderer } from '../o-combo-renderer.class';
export const DEFAULT_INPUTS_O_COMBO_RENDERER_ICON = [
    'iconPosition: icon-position',
    'iconColumn: icon-column'
];
export class OComboRendererIconComponent extends OComboCustomRenderer {
    constructor(injector) {
        super(injector);
        this.injector = injector;
        this.iconService = this.injector.get(IconService);
        this.setComponentPipe();
    }
    setComponentPipe() {
        this.componentPipe = new OIconPipe(this.injector);
    }
    initialize() {
        super.initialize();
        this.pipeArguments = {
            iconPosition: this.iconPosition,
            icon: undefined
        };
    }
    getComboData(record) {
        if (!Util.isDefined(record)) {
            return '';
        }
        const descriptionColsValue = this.comboComponent.getOptionDescriptionValue(record);
        return `${descriptionColsValue} ${record[this.iconColumn]}`;
    }
    getSafeHtmlComboData(record) {
        if (!Util.isDefined(record)) {
            return '';
        }
        if (Util.isDefined(record[this.iconColumn])) {
            this.pipeArguments.icon = record[this.iconColumn];
        }
        const descriptionColsValue = this.comboComponent.getOptionDescriptionValue(record);
        return this.componentPipe.transform(descriptionColsValue, this.pipeArguments);
    }
}
OComboRendererIconComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-combo-renderer-icon',
                template: "<ng-template #templateref let-value=\"value\">\n  <div [innerHTML]=\"getSafeHtmlComboData(value)\"></div>\n</ng-template>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                inputs: DEFAULT_INPUTS_O_COMBO_RENDERER_ICON
            }] }
];
OComboRendererIconComponent.ctorParameters = () => [
    { type: Injector }
];
OComboRendererIconComponent.propDecorators = {
    templateref: [{ type: ViewChild, args: ['templateref', { read: TemplateRef, static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1jb21iby1yZW5kZXJlci1pY29uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL29udGltaXplLXdlYi1uZ3gvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9pbnB1dC9jb21iby9jb21iby1yZW5kZXJlci9pY29uL28tY29tYm8tcmVuZGVyZXItaWNvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQVUsV0FBVyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUc3RyxPQUFPLEVBQXFCLFNBQVMsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUNuRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDaEQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFFakUsTUFBTSxDQUFDLE1BQU0sb0NBQW9DLEdBQUc7SUFFbEQsNkJBQTZCO0lBRTdCLHlCQUF5QjtDQUMxQixDQUFDO0FBU0YsTUFBTSxPQUFPLDJCQUE0QixTQUFRLG9CQUFvQjtJQVduRSxZQUFzQixRQUFrQjtRQUN0QyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7UUFESSxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBRXRDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDbEQsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUVELGdCQUFnQjtRQUNkLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3BELENBQUM7SUFFRCxVQUFVO1FBQ1IsS0FBSyxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBRW5CLElBQUksQ0FBQyxhQUFhLEdBQUc7WUFDbkIsWUFBWSxFQUFFLElBQUksQ0FBQyxZQUFZO1lBQy9CLElBQUksRUFBRSxTQUFTO1NBQ2hCLENBQUM7SUFDSixDQUFDO0lBRU0sWUFBWSxDQUFDLE1BQVc7UUFDN0IsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDM0IsT0FBTyxFQUFFLENBQUM7U0FDWDtRQUNELE1BQU0sb0JBQW9CLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNuRixPQUFPLEdBQUcsb0JBQW9CLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDO0lBQzlELENBQUM7SUFFTSxvQkFBb0IsQ0FBQyxNQUFXO1FBQ3JDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQzNCLE9BQU8sRUFBRSxDQUFDO1NBQ1g7UUFDRCxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFO1lBQzNDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDbkQ7UUFDRCxNQUFNLG9CQUFvQixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbkYsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDaEYsQ0FBQzs7O1lBdERGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsdUJBQXVCO2dCQUNqQyx1SUFBcUQ7Z0JBQ3JELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2dCQUMvQyxNQUFNLEVBQUUsb0NBQW9DO2FBQzdDOzs7WUFwQjRDLFFBQVE7OzswQkErQmxELFNBQVMsU0FBQyxhQUFhLEVBQUUsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBJbmplY3RvciwgT25Jbml0LCBUZW1wbGF0ZVJlZiwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTYWZlSHRtbCB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuXG5pbXBvcnQgeyBJSWNvblBpcGVBcmd1bWVudCwgT0ljb25QaXBlIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vcGlwZXMvby1pY29uLnBpcGUnO1xuaW1wb3J0IHsgSWNvblNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9zZXJ2aWNlcy9pY29uLnNlcnZpY2UnO1xuaW1wb3J0IHsgVXRpbCB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3V0aWwvdXRpbCc7XG5pbXBvcnQgeyBPQ29tYm9DdXN0b21SZW5kZXJlciB9IGZyb20gJy4uL28tY29tYm8tcmVuZGVyZXIuY2xhc3MnO1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9JTlBVVFNfT19DT01CT19SRU5ERVJFUl9JQ09OID0gW1xuICAvLyBpY29uLXBvc2l0aW9uIFtsZWZ0fHJpZ2h0XTogcG9zaXRpb24gb2YgdGhlIGljb24vaW1hZ2Ugc3ltYm9sLiBEZWZhdWx0OiBsZWZ0LlxuICAnaWNvblBvc2l0aW9uOiBpY29uLXBvc2l0aW9uJyxcbiAgLy8gaWNvbi1jb2x1bW4gW3N0cmluZ106IENvbHVtbiBrZXkgdG8gaWNvbiBuYW1lLiBEZWZhdWx0OiBpY29uXG4gICdpY29uQ29sdW1uOiBpY29uLWNvbHVtbidcbl07XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ28tY29tYm8tcmVuZGVyZXItaWNvbicsXG4gIHRlbXBsYXRlVXJsOiAnLi9vLWNvbWJvLXJlbmRlcmVyLWljb24uY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgaW5wdXRzOiBERUZBVUxUX0lOUFVUU19PX0NPTUJPX1JFTkRFUkVSX0lDT05cbn0pXG5cbmV4cG9ydCBjbGFzcyBPQ29tYm9SZW5kZXJlckljb25Db21wb25lbnQgZXh0ZW5kcyBPQ29tYm9DdXN0b21SZW5kZXJlciBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgcHJvdGVjdGVkIGljb25TZXJ2aWNlOiBJY29uU2VydmljZTtcbiAgcHJvdGVjdGVkIGljb25Db2x1bW46IHN0cmluZztcbiAgcHJvdGVjdGVkIGljb25Qb3NpdGlvbjogc3RyaW5nO1xuXG4gIHByb3RlY3RlZCBjb21wb25lbnRQaXBlOiBPSWNvblBpcGU7XG4gIHByb3RlY3RlZCBwaXBlQXJndW1lbnRzOiBJSWNvblBpcGVBcmd1bWVudDtcblxuICBAVmlld0NoaWxkKCd0ZW1wbGF0ZXJlZicsIHsgcmVhZDogVGVtcGxhdGVSZWYsIHN0YXRpYzogdHJ1ZSB9KSBwdWJsaWMgdGVtcGxhdGVyZWY6IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGluamVjdG9yOiBJbmplY3Rvcikge1xuICAgIHN1cGVyKGluamVjdG9yKTtcbiAgICB0aGlzLmljb25TZXJ2aWNlID0gdGhpcy5pbmplY3Rvci5nZXQoSWNvblNlcnZpY2UpO1xuICAgIHRoaXMuc2V0Q29tcG9uZW50UGlwZSgpO1xuICB9XG5cbiAgc2V0Q29tcG9uZW50UGlwZSgpIHtcbiAgICB0aGlzLmNvbXBvbmVudFBpcGUgPSBuZXcgT0ljb25QaXBlKHRoaXMuaW5qZWN0b3IpO1xuICB9XG5cbiAgaW5pdGlhbGl6ZSgpIHtcbiAgICBzdXBlci5pbml0aWFsaXplKCk7XG5cbiAgICB0aGlzLnBpcGVBcmd1bWVudHMgPSB7XG4gICAgICBpY29uUG9zaXRpb246IHRoaXMuaWNvblBvc2l0aW9uLFxuICAgICAgaWNvbjogdW5kZWZpbmVkXG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRDb21ib0RhdGEocmVjb3JkOiBhbnkpOiBzdHJpbmcge1xuICAgIGlmICghVXRpbC5pc0RlZmluZWQocmVjb3JkKSkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICBjb25zdCBkZXNjcmlwdGlvbkNvbHNWYWx1ZSA9IHRoaXMuY29tYm9Db21wb25lbnQuZ2V0T3B0aW9uRGVzY3JpcHRpb25WYWx1ZShyZWNvcmQpO1xuICAgIHJldHVybiBgJHtkZXNjcmlwdGlvbkNvbHNWYWx1ZX0gJHtyZWNvcmRbdGhpcy5pY29uQ29sdW1uXX1gO1xuICB9XG5cbiAgcHVibGljIGdldFNhZmVIdG1sQ29tYm9EYXRhKHJlY29yZDogYW55KTogU2FmZUh0bWwge1xuICAgIGlmICghVXRpbC5pc0RlZmluZWQocmVjb3JkKSkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICBpZiAoVXRpbC5pc0RlZmluZWQocmVjb3JkW3RoaXMuaWNvbkNvbHVtbl0pKSB7XG4gICAgICB0aGlzLnBpcGVBcmd1bWVudHMuaWNvbiA9IHJlY29yZFt0aGlzLmljb25Db2x1bW5dO1xuICAgIH1cbiAgICBjb25zdCBkZXNjcmlwdGlvbkNvbHNWYWx1ZSA9IHRoaXMuY29tYm9Db21wb25lbnQuZ2V0T3B0aW9uRGVzY3JpcHRpb25WYWx1ZShyZWNvcmQpO1xuICAgIHJldHVybiB0aGlzLmNvbXBvbmVudFBpcGUudHJhbnNmb3JtKGRlc2NyaXB0aW9uQ29sc1ZhbHVlLCB0aGlzLnBpcGVBcmd1bWVudHMpO1xuICB9XG59XG4iXX0=