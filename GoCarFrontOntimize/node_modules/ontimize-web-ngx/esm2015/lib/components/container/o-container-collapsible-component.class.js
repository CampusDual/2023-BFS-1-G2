import * as tslib_1 from "tslib";
import { ElementRef, EventEmitter, Inject, Injector, Optional, ViewChild } from '@angular/core';
import { MAT_FORM_FIELD_DEFAULT_OPTIONS, MatExpansionPanel } from '@angular/material';
import { Subscription } from 'rxjs';
import { InputConverter } from '../../decorators/input-converter';
import { DEFAULT_INPUTS_O_CONTAINER, OContainerComponent } from './o-container-component.class';
export const DEFAULT_INPUTS_O_CONTAINER_COLLAPSIBLE = [
    ...DEFAULT_INPUTS_O_CONTAINER,
    'expanded',
    'description',
    'collapsedHeight: collapsed-height',
    'expandedHeight: expanded-height'
];
export const DEFAULT_OUTPUTS_O_CONTAINER_COLLAPSIBLE = [
    'onClosed',
    'onOpened',
    'onAfterCollapse',
    'onAfterExpand'
];
export class OContainerCollapsibleComponent extends OContainerComponent {
    constructor(elRef, injector, matFormDefaultOption) {
        super(elRef, injector, matFormDefaultOption);
        this.elRef = elRef;
        this.injector = injector;
        this.matFormDefaultOption = matFormDefaultOption;
        this.expanded = true;
        this.collapsedHeight = '37px';
        this.expandedHeight = '37px';
        this.onClosed = new EventEmitter();
        this.onOpened = new EventEmitter();
        this.onAfterCollapse = new EventEmitter();
        this.onAfterExpand = new EventEmitter();
        this.expPanelSubscriptions = new Subscription();
    }
    ngAfterViewInit() {
        super.ngAfterViewInit();
        this.updateOutlineGap();
        this.subscribeEventsExpPanel();
    }
    subscribeEventsExpPanel() {
        this.expPanelSubscriptions.add(this.expPanel.afterCollapse.subscribe(() => this.onAfterCollapse.emit()));
        this.expPanelSubscriptions.add(this.expPanel.afterExpand.subscribe(() => this.onAfterExpand.emit()));
        this.expPanelSubscriptions.add(this.expPanel.closed.subscribe(() => this.onClosed.emit()));
        this.expPanelSubscriptions.add(this.expPanel.opened.subscribe(() => this.onOpened.emit()));
    }
    updateOutlineGap() {
        if (this.isAppearanceOutline()) {
            const exPanelHeader = this._titleEl ? this._titleEl._element.nativeElement : null;
            if (!this.oContainerOutline) {
                return;
            }
            const containerOutline = this.oContainerOutline.nativeElement;
            const containerOutlineRect = containerOutline.getBoundingClientRect();
            if (containerOutlineRect.width === 0 && containerOutlineRect.height === 0) {
                return;
            }
            const titleEl = exPanelHeader.querySelector('.o-container-title.mat-expansion-panel-header-title');
            const descrEl = exPanelHeader.querySelector('.mat-expansion-panel-header-description');
            const containerStart = containerOutlineRect.left;
            const descrStart = descrEl.getBoundingClientRect().left;
            let titleWidth = 0;
            if (this.hasHeader()) {
                titleWidth += this.icon ? titleEl.querySelector('mat-icon').offsetWidth : 0;
                titleWidth += this.title ? titleEl.querySelector('span').offsetWidth : 0;
                titleWidth = titleWidth === 0 ? 0 : titleWidth + 4;
            }
            const labelStart = titleEl.getBoundingClientRect().left;
            const startWidth = labelStart - containerStart - 2;
            const empty1Width = descrStart - containerStart - titleWidth - 24;
            const descrWidth = this.description ? descrEl.querySelector('span').offsetWidth + 8 : 0;
            const startEls = containerOutline.querySelectorAll('.o-container-outline-start');
            const gapTitleEls = containerOutline.querySelectorAll('.o-container-outline-gap-title');
            const gapEmpty1Els = containerOutline.querySelectorAll('.o-container-outline-gap-empty1');
            const gapDescrEls = containerOutline.querySelectorAll('.o-container-outline-gap-description');
            startEls[0].style.width = `${startWidth}px`;
            gapTitleEls[0].style.width = `${titleWidth}px`;
            gapEmpty1Els[0].style.width = `${empty1Width}px`;
            gapDescrEls[0].style.width = `${descrWidth}px`;
        }
    }
    registerObserver() {
        if (this._titleEl) {
            this.titleObserver.observe(this._titleEl._element.nativeElement, {
                childList: true,
                characterData: true,
                subtree: true
            });
        }
    }
    updateInnerHeight(height) {
        if (this.containerContent) {
            this.containerContent.nativeElement.style.height = height;
        }
        if (this.oContainerOutline) {
            this.oContainerOutline.nativeElement.style.height = height;
        }
    }
    ngOnDestroy() {
        this.expPanelSubscriptions.unsubscribe();
    }
}
OContainerCollapsibleComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Injector },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD_DEFAULT_OPTIONS,] }] }
];
OContainerCollapsibleComponent.propDecorators = {
    expPanel: [{ type: ViewChild, args: ['expPanel', { static: false },] }],
    containerContent: [{ type: ViewChild, args: ['containerContent', { static: true },] }],
    oContainerOutline: [{ type: ViewChild, args: ['oContainerOutline', { static: false },] }]
};
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OContainerCollapsibleComponent.prototype, "expanded", void 0);
//# sourceMappingURL=data:application/json;base64,